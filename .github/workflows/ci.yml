name: CI

on:
  push:
    branches:
      - 'main'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

jobs:
  test-on-ubuntu:
    if: github.event.event_name == 'workflow_dispatch' || github.event.pull_request.draft == false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        python: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        compiler:
          # Newest gcc on 24.04
          - C: gcc-14
            CXX: g++-14
            package: g++-14
            # -Wdangling-reference was added to the warnings list in gcc 13, and has false positives
            # in fmtlib, so we exclude it.  array-bounds similarly has false positives in Eigen on
            # gcc 12+.
            warning_options: "-Wall;-Wextra;-Wno-dangling-reference;-Wno-array-bounds;-Werror"
        include:
          # gcc 9 (Oldest gcc available on Ubuntu 22.04)
          - os: ubuntu-22.04
            python: "3.8"
            compiler:
              C: gcc-9
              CXX: g++-9
              package: g++-9
              warning_options: "-Wall;-Wextra;-Werror"
          # gcc 14 (Newest gcc available on Ubuntu 24.04)
          - os: ubuntu-24.04
            python: "3.12"
            compiler:
              C: gcc-14
              CXX: g++-14
              package: g++-14
              warning_options: "-Wall;-Wextra;-Wno-dangling-reference;-Wno-array-bounds;-Werror"
          # Clang 11 (Oldest clang available on Ubuntu 22.04)
          - os: ubuntu-22.04
            python: "3.8"
            compiler:
              C: clang-11
              CXX: clang++-11
              package: clang-11
              repos: []
              warning_options: "-Wall;-Wextra;-Werror"
          # Clang 19 (Newest clang available on Ubuntu 24.04)
          - os: ubuntu-24.04
            python: "3.12"
            compiler:
              C: clang-19
              CXX: clang++-19
              package: clang-19
              repos: []
              warning_options: "-Wall;-Wextra;-Werror"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - Installing software-properties-common adds add-apt-repository
      - name: Update install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common curl

      # - Adding matrix.compiler.repos is needed to have compiler available on all ubuntu versions
      - name: Install C and CXX compilers
        run: |
          for repo in ${{ join(matrix.compiler.repos, ' ') }}
          do
            sudo add-apt-repository -y "$repo"
          done
          sudo apt-get install -y ${{ matrix.compiler.package }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install general build dependencies
        run: |
            sudo apt-get install -y \
              doxygen \
              libgmp-dev \
              pandoc

      - name: Install rust
        run: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > installer.sh
            chmod +x installer.sh
            ./installer.sh -y

      # NOTE(brad): libunwind-dev is a broken dependency of libgoogle-glog-dev, itself
      # a dependency of ceres. Without this step on jammy, apt-get install libgoogle-glog-dev
      # would fail. If this step could be removed and still have the build succeed, it should.
      - name: Fix libunwind-dev install on jammy
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          sudo apt-get install -yf libunwind-dev

      - name: Install build dependencies for SymForce benchmarks
        run: |
            sudo apt-get install -y \
              libboost-dev \
              libboost-serialization-dev \
              libboost-system-dev \
              libboost-filesystem-dev \
              libboost-thread-dev \
              libboost-program-options-dev \
              libboost-date-time-dev \
              libboost-timer-dev \
              libboost-chrono-dev \
              libboost-regex-dev \
              libgoogle-glog-dev \
              libeigen3-dev

      - name: Install python dependencies
        run: |
          PY_MINOR_VERSION=$(python -c "import sys; print(sys.version_info.minor)")
          python -m pip install pip==25.0.1 setuptools==75.3.2
          python -m pip install -r requirements_dev_py3${PY_MINOR_VERSION}.txt

      - name: Run cmake build
        run: |
          cmake -B build \
            -D CMAKE_C_COMPILER=${{ matrix.compiler.C }} \
            -D CMAKE_CXX_COMPILER=${{ matrix.compiler.CXX }} \
            -D "SYMFORCE_COMPILE_OPTIONS=${{ matrix.compiler.warning_options }}" \
            -D SYMFORCE_PYTHON_OVERRIDE=python${{ matrix.python }} \
            -D SYMFORCE_BUILD_BENCHMARKS=ON
          cmake --build build -j $(nproc)

      # lcmtypes and symforce need to be available for tests
      - name: Run tests
        run: |
          pip install build/lcmtypes/python2.7
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          EXIT_CODE=0
          ctest --test-dir build -j $(nproc) || EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            ctest --test-dir build -j $(nproc) --rerun-failed --output-on-failure
          fi

      # Upload the docs as an artifact
      # To view, download the `docs` artifact from the build and matrix entry you're interested in
      # (probably any is good, assuming they all pass)
      # Unzip to a directory and run `npx http-server` in that directory
      - name: Upload Generated Docs
        uses: actions/upload-artifact@v4
        with:
          name: docs ${{ matrix.os }}-python${{ matrix.python }}-${{ matrix.compiler.C }}
          path: build/docs
