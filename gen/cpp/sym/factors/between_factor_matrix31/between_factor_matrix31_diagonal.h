// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Pass in a single scalar if
 *                isotropic, a vector if diagonal, and a square matrix otherwise.
 *     jacobian: (3x6) jacobian of res wrt args a (3), b (3)
 *     hessian: (6x6) Gauss-Newton hessian for args a (3), b (3)
 *     rhs: (6x1) Gauss-Newton rhs for args a (3), b (3)
 */
template <typename Scalar>
void BetweenFactorMatrix31Diagonal(const Eigen::Matrix<Scalar, 3, 1>& a,
                                   const Eigen::Matrix<Scalar, 3, 1>& b,
                                   const Eigen::Matrix<Scalar, 3, 1>& a_T_b,
                                   const Eigen::Matrix<Scalar, 3, 1>& sqrt_info,
                                   const Scalar epsilon,
                                   Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                                   Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr,
                                   Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                                   Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 24

  // Unused inputs
  (void)epsilon;

  // Input arrays

  // Intermediate terms (9)
  const Scalar _tmp0 = -a(0, 0) - a_T_b(0, 0) + b(0, 0);
  const Scalar _tmp1 = -a(1, 0) - a_T_b(1, 0) + b(1, 0);
  const Scalar _tmp2 = -a(2, 0) - a_T_b(2, 0) + b(2, 0);
  const Scalar _tmp3 = std::pow(sqrt_info(0, 0), Scalar(2));
  const Scalar _tmp4 = std::pow(sqrt_info(1, 0), Scalar(2));
  const Scalar _tmp5 = std::pow(sqrt_info(2, 0), Scalar(2));
  const Scalar _tmp6 = _tmp0 * _tmp3;
  const Scalar _tmp7 = _tmp1 * _tmp4;
  const Scalar _tmp8 = _tmp2 * _tmp5;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp0 * sqrt_info(0, 0);
    _res(1, 0) = _tmp1 * sqrt_info(1, 0);
    _res(2, 0) = _tmp2 * sqrt_info(2, 0);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian.setZero();

    _jacobian(0, 0) = -sqrt_info(0, 0);
    _jacobian(1, 1) = -sqrt_info(1, 0);
    _jacobian(2, 2) = -sqrt_info(2, 0);
    _jacobian(0, 3) = sqrt_info(0, 0);
    _jacobian(1, 4) = sqrt_info(1, 0);
    _jacobian(2, 5) = sqrt_info(2, 0);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) = _tmp3;
    _hessian(3, 0) = -_tmp3;
    _hessian(1, 1) = _tmp4;
    _hessian(4, 1) = -_tmp4;
    _hessian(2, 2) = _tmp5;
    _hessian(5, 2) = -_tmp5;
    _hessian(3, 3) = _tmp3;
    _hessian(4, 4) = _tmp4;
    _hessian(5, 5) = _tmp5;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = -_tmp6;
    _rhs(1, 0) = -_tmp7;
    _rhs(2, 0) = -_tmp8;
    _rhs(3, 0) = _tmp6;
    _rhs(4, 0) = _tmp7;
    _rhs(5, 0) = _tmp8;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
