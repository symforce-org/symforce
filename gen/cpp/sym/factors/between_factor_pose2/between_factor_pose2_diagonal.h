// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose2.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Pass in a single scalar if
 *                isotropic, a vector if diagonal, and a square matrix otherwise.
 *     jacobian: (3x6) jacobian of res wrt args a (3), b (3)
 *     hessian: (6x6) Gauss-Newton hessian for args a (3), b (3)
 *     rhs: (6x1) Gauss-Newton rhs for args a (3), b (3)
 */
template <typename Scalar>
void BetweenFactorPose2Diagonal(const sym::Pose2<Scalar>& a, const sym::Pose2<Scalar>& b,
                                const sym::Pose2<Scalar>& a_T_b,
                                const Eigen::Matrix<Scalar, 3, 1>& sqrt_info, const Scalar epsilon,
                                Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                                Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr,
                                Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                                Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 143

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (67)
  const Scalar _tmp0 = _a[1] * _b[1];
  const Scalar _tmp1 = _a[0] * _b[0];
  const Scalar _tmp2 = _tmp0 + _tmp1;
  const Scalar _tmp3 = _a_T_b[1] * _tmp2;
  const Scalar _tmp4 = _a[1] * _b[0];
  const Scalar _tmp5 = _a[0] * _b[1];
  const Scalar _tmp6 = -_tmp4 + _tmp5;
  const Scalar _tmp7 = _a_T_b[0] * _tmp6;
  const Scalar _tmp8 = -_tmp3 + _tmp7;
  const Scalar _tmp9 = _a_T_b[0] * _tmp2;
  const Scalar _tmp10 = _a_T_b[1] * _tmp6;
  const Scalar _tmp11 = _tmp10 + _tmp9;
  const Scalar _tmp12 = _tmp11 + epsilon * ((((_tmp11) > 0) - ((_tmp11) < 0)) + Scalar(0.5));
  const Scalar _tmp13 = std::atan2(_tmp8, _tmp12);
  const Scalar _tmp14 = _a[0] * _a[2] + _a[1] * _a[3];
  const Scalar _tmp15 = _a[1] * _b[3];
  const Scalar _tmp16 = _a[0] * _b[2];
  const Scalar _tmp17 = -_a_T_b[2] - _tmp14 + _tmp15 + _tmp16;
  const Scalar _tmp18 = _a[0] * _a[3];
  const Scalar _tmp19 = _a[1] * _a[2];
  const Scalar _tmp20 = _a[0] * _b[3] - _a[1] * _b[2];
  const Scalar _tmp21 = -_a_T_b[3] - _tmp18 + _tmp19 + _tmp20;
  const Scalar _tmp22 = -_tmp0 - _tmp1;
  const Scalar _tmp23 = Scalar(1.0) / (_tmp12);
  const Scalar _tmp24 = std::pow(_tmp12, Scalar(2));
  const Scalar _tmp25 = _tmp8 / _tmp24;
  const Scalar _tmp26 =
      _tmp23 * (_a_T_b[0] * _tmp22 - _tmp10) - _tmp25 * (_a_T_b[1] * _tmp22 + _tmp7);
  const Scalar _tmp27 = _tmp24 + std::pow(_tmp8, Scalar(2));
  const Scalar _tmp28 = _tmp24 / _tmp27;
  const Scalar _tmp29 = _tmp28 * sqrt_info(0, 0);
  const Scalar _tmp30 = -_tmp18 + _tmp19 + _tmp20;
  const Scalar _tmp31 = _tmp14 - _tmp15 - _tmp16;
  const Scalar _tmp32 = _a[0] * sqrt_info(1, 0);
  const Scalar _tmp33 = _a[1] * sqrt_info(2, 0);
  const Scalar _tmp34 = _a[1] * sqrt_info(1, 0);
  const Scalar _tmp35 = _a[0] * sqrt_info(2, 0);
  const Scalar _tmp36 = _tmp4 - _tmp5;
  const Scalar _tmp37 =
      _tmp23 * (-_a_T_b[1] * _tmp36 + _tmp9) - _tmp25 * (_a_T_b[0] * _tmp36 + _tmp3);
  const Scalar _tmp38 = std::pow(sqrt_info(0, 0), Scalar(2));
  const Scalar _tmp39 = std::pow(_tmp12, Scalar(4)) * _tmp38 / std::pow(_tmp27, Scalar(2));
  const Scalar _tmp40 = std::pow(sqrt_info(1, 0), Scalar(2));
  const Scalar _tmp41 = std::pow(sqrt_info(2, 0), Scalar(2));
  const Scalar _tmp42 = _a[0] * _tmp40;
  const Scalar _tmp43 = _tmp30 * _tmp42;
  const Scalar _tmp44 = _tmp31 * _tmp41;
  const Scalar _tmp45 = _a[1] * _tmp44;
  const Scalar _tmp46 = _tmp30 * _tmp40;
  const Scalar _tmp47 = _a[1] * _tmp46;
  const Scalar _tmp48 = _a[0] * _tmp44;
  const Scalar _tmp49 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp50 = _tmp41 * _tmp49;
  const Scalar _tmp51 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp52 = _tmp40 * _tmp51;
  const Scalar _tmp53 = _tmp50 + _tmp52;
  const Scalar _tmp54 = _a[0] * _a[1] * _tmp41;
  const Scalar _tmp55 = _a[1] * _tmp42;
  const Scalar _tmp56 = -_tmp54 + _tmp55;
  const Scalar _tmp57 = _tmp54 - _tmp55;
  const Scalar _tmp58 = _tmp40 * _tmp49;
  const Scalar _tmp59 = _tmp41 * _tmp51;
  const Scalar _tmp60 = _tmp58 + _tmp59;
  const Scalar _tmp61 = _tmp13 * _tmp28 * _tmp38;
  const Scalar _tmp62 = _tmp21 * _tmp41;
  const Scalar _tmp63 = _tmp17 * _tmp42;
  const Scalar _tmp64 = _a[1] * _tmp62;
  const Scalar _tmp65 = _a[0] * _tmp62;
  const Scalar _tmp66 = _a[1] * _tmp17 * _tmp40;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp13 * sqrt_info(0, 0);
    _res(1, 0) = _tmp17 * sqrt_info(1, 0);
    _res(2, 0) = _tmp21 * sqrt_info(2, 0);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp26 * _tmp29;
    _jacobian(1, 0) = _tmp30 * sqrt_info(1, 0);
    _jacobian(2, 0) = _tmp31 * sqrt_info(2, 0);
    _jacobian(0, 1) = 0;
    _jacobian(1, 1) = -_tmp32;
    _jacobian(2, 1) = _tmp33;
    _jacobian(0, 2) = 0;
    _jacobian(1, 2) = -_tmp34;
    _jacobian(2, 2) = -_tmp35;
    _jacobian(0, 3) = _tmp29 * _tmp37;
    _jacobian(1, 3) = 0;
    _jacobian(2, 3) = 0;
    _jacobian(0, 4) = 0;
    _jacobian(1, 4) = _tmp32;
    _jacobian(2, 4) = -_tmp33;
    _jacobian(0, 5) = 0;
    _jacobian(1, 5) = _tmp34;
    _jacobian(2, 5) = _tmp35;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) = std::pow(_tmp26, Scalar(2)) * _tmp39 + std::pow(_tmp30, Scalar(2)) * _tmp40 +
                     std::pow(_tmp31, Scalar(2)) * _tmp41;
    _hessian(1, 0) = -_tmp43 + _tmp45;
    _hessian(2, 0) = -_tmp47 - _tmp48;
    _hessian(3, 0) = _tmp26 * _tmp37 * _tmp39;
    _hessian(4, 0) = _tmp43 - _tmp45;
    _hessian(5, 0) = _tmp47 + _tmp48;
    _hessian(1, 1) = _tmp53;
    _hessian(2, 1) = _tmp56;
    _hessian(4, 1) = -_tmp50 - _tmp52;
    _hessian(5, 1) = _tmp57;
    _hessian(2, 2) = _tmp60;
    _hessian(4, 2) = _tmp57;
    _hessian(5, 2) = -_tmp58 - _tmp59;
    _hessian(3, 3) = std::pow(_tmp37, Scalar(2)) * _tmp39;
    _hessian(4, 4) = _tmp53;
    _hessian(5, 4) = _tmp56;
    _hessian(5, 5) = _tmp60;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp17 * _tmp46 + _tmp26 * _tmp61 + _tmp31 * _tmp62;
    _rhs(1, 0) = -_tmp63 + _tmp64;
    _rhs(2, 0) = -_tmp65 - _tmp66;
    _rhs(3, 0) = _tmp37 * _tmp61;
    _rhs(4, 0) = _tmp63 - _tmp64;
    _rhs(5, 0) = _tmp65 + _tmp66;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
