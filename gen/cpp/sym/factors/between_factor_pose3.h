// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (6x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                        const sym::Pose3<Scalar>& a_T_b,
                        const Eigen::Matrix<Scalar, 6, 6>& sqrt_info, const Scalar epsilon,
                        Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                        Eigen::Matrix<Scalar, 6, 12>* const jacobian = nullptr,
                        Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                        Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 1632

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (313)
  const Scalar _tmp0 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp1 = 2 * _tmp0;
  const Scalar _tmp2 = -_tmp1;
  const Scalar _tmp3 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp4 = 2 * _tmp3;
  const Scalar _tmp5 = 1 - _tmp4;
  const Scalar _tmp6 = _tmp2 + _tmp5;
  const Scalar _tmp7 = 2 * _a[2];
  const Scalar _tmp8 = _a[1] * _tmp7;
  const Scalar _tmp9 = 2 * _a[0];
  const Scalar _tmp10 = _a[3] * _tmp9;
  const Scalar _tmp11 = _tmp10 + _tmp8;
  const Scalar _tmp12 = _a[6] * _tmp11;
  const Scalar _tmp13 = _a[1] * _tmp9;
  const Scalar _tmp14 = _a[3] * _tmp7;
  const Scalar _tmp15 = -_tmp14;
  const Scalar _tmp16 = _tmp13 + _tmp15;
  const Scalar _tmp17 = _a[4] * _tmp16;
  const Scalar _tmp18 = _b[4] * _tmp16 + _b[6] * _tmp11;
  const Scalar _tmp19 = -_a[5] * _tmp6 - _a_T_b[5] + _b[5] * _tmp6 - _tmp12 - _tmp17 + _tmp18;
  const Scalar _tmp20 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp21 = 2 * _tmp20;
  const Scalar _tmp22 = -_tmp21;
  const Scalar _tmp23 = _tmp2 + _tmp22 + 1;
  const Scalar _tmp24 = _a[2] * _tmp9;
  const Scalar _tmp25 = 2 * _a[1] * _a[3];
  const Scalar _tmp26 = -_tmp25;
  const Scalar _tmp27 = _tmp24 + _tmp26;
  const Scalar _tmp28 = _a[6] * _tmp27;
  const Scalar _tmp29 = _tmp13 + _tmp14;
  const Scalar _tmp30 = _a[5] * _tmp29;
  const Scalar _tmp31 = _b[5] * _tmp29 + _b[6] * _tmp27;
  const Scalar _tmp32 = -_a[4] * _tmp23 - _a_T_b[4] + _b[4] * _tmp23 - _tmp28 - _tmp30 + _tmp31;
  const Scalar _tmp33 = _a[0] * _b[1];
  const Scalar _tmp34 = _a[2] * _b[3];
  const Scalar _tmp35 = _a[3] * _b[2];
  const Scalar _tmp36 = _a[1] * _b[0];
  const Scalar _tmp37 = -_tmp33 - _tmp34 + _tmp35 + _tmp36;
  const Scalar _tmp38 = _a_T_b[2] * _tmp37;
  const Scalar _tmp39 = _a[2] * _b[1];
  const Scalar _tmp40 = _a[0] * _b[3];
  const Scalar _tmp41 = _a[1] * _b[2];
  const Scalar _tmp42 = _a[3] * _b[0];
  const Scalar _tmp43 = _tmp39 - _tmp40 - _tmp41 + _tmp42;
  const Scalar _tmp44 = _a_T_b[0] * _tmp43;
  const Scalar _tmp45 = _a[3] * _b[1];
  const Scalar _tmp46 = _a[1] * _b[3];
  const Scalar _tmp47 = _a[0] * _b[2];
  const Scalar _tmp48 = _a[2] * _b[0];
  const Scalar _tmp49 = _tmp45 - _tmp46 + _tmp47 - _tmp48;
  const Scalar _tmp50 = _a_T_b[1] * _tmp49;
  const Scalar _tmp51 = -_tmp38 - _tmp44 - _tmp50;
  const Scalar _tmp52 = _a[1] * _b[1];
  const Scalar _tmp53 = _a[2] * _b[2];
  const Scalar _tmp54 = _a[0] * _b[0];
  const Scalar _tmp55 = _a[3] * _b[3];
  const Scalar _tmp56 = _tmp52 + _tmp53 + _tmp54 + _tmp55;
  const Scalar _tmp57 = _a_T_b[3] * _tmp56;
  const Scalar _tmp58 =
      2 * std::min<Scalar>(0, (((-_tmp51 + _tmp57) > 0) - ((-_tmp51 + _tmp57) < 0))) + 1;
  const Scalar _tmp59 = 2 * _tmp58;
  const Scalar _tmp60 = _tmp59 * sqrt_info(0, 2);
  const Scalar _tmp61 =
      -_a_T_b[0] * _tmp49 + _a_T_b[1] * _tmp43 - _a_T_b[2] * _tmp56 + _a_T_b[3] * _tmp37;
  const Scalar _tmp62 = 1 - epsilon;
  const Scalar _tmp63 = std::min<Scalar>(_tmp62, std::fabs(_tmp51 - _tmp57));
  const Scalar _tmp64 = std::acos(_tmp63) / std::sqrt(Scalar(1 - std::pow(_tmp63, Scalar(2))));
  const Scalar _tmp65 = _tmp61 * _tmp64;
  const Scalar _tmp66 = sqrt_info(0, 0) * (-_a_T_b[0] * _tmp56 - _a_T_b[1] * _tmp37 +
                                           _a_T_b[2] * _tmp49 + _a_T_b[3] * _tmp43);
  const Scalar _tmp67 = _tmp59 * sqrt_info(0, 1);
  const Scalar _tmp68 =
      _a_T_b[0] * _tmp37 - _a_T_b[1] * _tmp56 - _a_T_b[2] * _tmp43 + _a_T_b[3] * _tmp49;
  const Scalar _tmp69 = _tmp64 * _tmp68;
  const Scalar _tmp70 = _tmp22 + _tmp5;
  const Scalar _tmp71 = -_tmp10;
  const Scalar _tmp72 = _tmp71 + _tmp8;
  const Scalar _tmp73 = _a[5] * _tmp72;
  const Scalar _tmp74 = _tmp24 + _tmp25;
  const Scalar _tmp75 = _a[4] * _tmp74;
  const Scalar _tmp76 = _b[4] * _tmp74 + _b[5] * _tmp72;
  const Scalar _tmp77 = -_a[6] * _tmp70 - _a_T_b[6] + _b[6] * _tmp70 - _tmp73 - _tmp75 + _tmp76;
  const Scalar _tmp78 = _tmp19 * sqrt_info(0, 4) + _tmp32 * sqrt_info(0, 3) +
                        _tmp59 * _tmp64 * _tmp66 + _tmp60 * _tmp65 + _tmp67 * _tmp69 +
                        _tmp77 * sqrt_info(0, 5);
  const Scalar _tmp79 = _tmp59 * _tmp65;
  const Scalar _tmp80 = _tmp59 * sqrt_info(1, 1);
  const Scalar _tmp81 = _tmp19 * sqrt_info(1, 4) + _tmp32 * sqrt_info(1, 3) + _tmp69 * _tmp80 +
                        _tmp77 * sqrt_info(1, 5) + _tmp79 * sqrt_info(1, 2);
  const Scalar _tmp82 = _tmp19 * sqrt_info(2, 4) + _tmp32 * sqrt_info(2, 3) +
                        _tmp77 * sqrt_info(2, 5) + _tmp79 * sqrt_info(2, 2);
  const Scalar _tmp83 =
      _tmp19 * sqrt_info(3, 4) + _tmp32 * sqrt_info(3, 3) + _tmp77 * sqrt_info(3, 5);
  const Scalar _tmp84 = _tmp19 * sqrt_info(4, 4) + _tmp77 * sqrt_info(4, 5);
  const Scalar _tmp85 = (Scalar(1) / Scalar(2)) * _tmp39;
  const Scalar _tmp86 = (Scalar(1) / Scalar(2)) * _tmp40;
  const Scalar _tmp87 = (Scalar(1) / Scalar(2)) * _tmp41;
  const Scalar _tmp88 = (Scalar(1) / Scalar(2)) * _tmp42;
  const Scalar _tmp89 = _tmp85 - _tmp86 - _tmp87 + _tmp88;
  const Scalar _tmp90 = _a_T_b[3] * _tmp89;
  const Scalar _tmp91 = (Scalar(1) / Scalar(2)) * _tmp52;
  const Scalar _tmp92 = (Scalar(1) / Scalar(2)) * _tmp55;
  const Scalar _tmp93 = (Scalar(1) / Scalar(2)) * _tmp53;
  const Scalar _tmp94 = (Scalar(1) / Scalar(2)) * _tmp54;
  const Scalar _tmp95 = -_tmp91 - _tmp92 - _tmp93 - _tmp94;
  const Scalar _tmp96 = _a_T_b[0] * _tmp95;
  const Scalar _tmp97 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp98 = (Scalar(1) / Scalar(2)) * _tmp34;
  const Scalar _tmp99 = (Scalar(1) / Scalar(2)) * _tmp35;
  const Scalar _tmp100 = (Scalar(1) / Scalar(2)) * _tmp36;
  const Scalar _tmp101 = _tmp100 - _tmp97 - _tmp98 + _tmp99;
  const Scalar _tmp102 = _a_T_b[1] * _tmp101;
  const Scalar _tmp103 = (Scalar(1) / Scalar(2)) * _tmp45;
  const Scalar _tmp104 = (Scalar(1) / Scalar(2)) * _tmp46;
  const Scalar _tmp105 = (Scalar(1) / Scalar(2)) * _tmp47;
  const Scalar _tmp106 = (Scalar(1) / Scalar(2)) * _tmp48;
  const Scalar _tmp107 = -_tmp103 + _tmp104 - _tmp105 + _tmp106;
  const Scalar _tmp108 = _a_T_b[2] * _tmp107;
  const Scalar _tmp109 = _tmp102 + _tmp108;
  const Scalar _tmp110 = _tmp109 + _tmp90 + _tmp96;
  const Scalar _tmp111 = _tmp38 + _tmp44 + _tmp50 + _tmp57;
  const Scalar _tmp112 = std::fabs(_tmp111);
  const Scalar _tmp113 = std::min<Scalar>(_tmp112, _tmp62);
  const Scalar _tmp114 = 1 - std::pow(_tmp113, Scalar(2));
  const Scalar _tmp115 = _tmp58 * ((((-_tmp112 + _tmp62) > 0) - ((-_tmp112 + _tmp62) < 0)) + 1) *
                         (((_tmp111) > 0) - ((_tmp111) < 0));
  const Scalar _tmp116 = _tmp115 / _tmp114;
  const Scalar _tmp117 = _tmp116 * _tmp68;
  const Scalar _tmp118 = _tmp117 * sqrt_info(0, 1);
  const Scalar _tmp119 = _a_T_b[1] * _tmp95;
  const Scalar _tmp120 = _a_T_b[2] * _tmp89;
  const Scalar _tmp121 = -_a_T_b[0] * _tmp101;
  const Scalar _tmp122 = _a_T_b[3] * _tmp107;
  const Scalar _tmp123 = _tmp121 + _tmp122;
  const Scalar _tmp124 = _tmp119 - _tmp120 + _tmp123;
  const Scalar _tmp125 = std::acos(_tmp113);
  const Scalar _tmp126 = _tmp125 / std::sqrt(_tmp114);
  const Scalar _tmp127 = _tmp126 * _tmp60;
  const Scalar _tmp128 = _tmp116 * _tmp66;
  const Scalar _tmp129 = _tmp113 * _tmp115 * _tmp125 / (_tmp114 * std::sqrt(_tmp114));
  const Scalar _tmp130 = _tmp129 * _tmp61;
  const Scalar _tmp131 = _tmp110 * _tmp130;
  const Scalar _tmp132 = _a_T_b[3] * _tmp95;
  const Scalar _tmp133 = _a_T_b[0] * _tmp89;
  const Scalar _tmp134 = _a_T_b[2] * _tmp101;
  const Scalar _tmp135 = -_a_T_b[1] * _tmp107;
  const Scalar _tmp136 = _tmp134 + _tmp135;
  const Scalar _tmp137 = _tmp126 * _tmp59;
  const Scalar _tmp138 = _tmp137 * sqrt_info(0, 0);
  const Scalar _tmp139 = _tmp129 * _tmp68;
  const Scalar _tmp140 = _tmp139 * sqrt_info(0, 1);
  const Scalar _tmp141 = _tmp129 * _tmp66;
  const Scalar _tmp142 = -_a_T_b[1] * _tmp89;
  const Scalar _tmp143 = _a_T_b[2] * _tmp95;
  const Scalar _tmp144 = _a_T_b[3] * _tmp101;
  const Scalar _tmp145 = _a_T_b[0] * _tmp107;
  const Scalar _tmp146 = _tmp144 + _tmp145;
  const Scalar _tmp147 = _tmp142 - _tmp143 + _tmp146;
  const Scalar _tmp148 = _tmp126 * _tmp67;
  const Scalar _tmp149 = -_tmp20;
  const Scalar _tmp150 = std::pow(_a[3], Scalar(2));
  const Scalar _tmp151 = _tmp149 + _tmp150;
  const Scalar _tmp152 = -_tmp3;
  const Scalar _tmp153 = _tmp0 + _tmp152;
  const Scalar _tmp154 = _tmp151 + _tmp153;
  const Scalar _tmp155 = -_a[6] * _tmp154 + _b[6] * _tmp154 - _tmp73 - _tmp75 + _tmp76;
  const Scalar _tmp156 = _tmp116 * _tmp61;
  const Scalar _tmp157 = _tmp156 * sqrt_info(0, 2);
  const Scalar _tmp158 = -_tmp150;
  const Scalar _tmp159 = _tmp0 + _tmp149 + _tmp158 + _tmp3;
  const Scalar _tmp160 = -_tmp8;
  const Scalar _tmp161 = _tmp160 + _tmp71;
  const Scalar _tmp162 = -_tmp13;
  const Scalar _tmp163 = _tmp14 + _tmp162;
  const Scalar _tmp164 = -_a[4] * _tmp163 - _a[5] * _tmp159 - _a[6] * _tmp161 + _b[4] * _tmp163 +
                         _b[5] * _tmp159 + _b[6] * _tmp161;
  const Scalar _tmp165 = -_tmp110 * _tmp118 - _tmp110 * _tmp128 + _tmp110 * _tmp140 +
                         _tmp110 * _tmp141 - _tmp110 * _tmp157 + _tmp124 * _tmp127 +
                         _tmp131 * sqrt_info(0, 2) + _tmp138 * (_tmp132 - _tmp133 + _tmp136) +
                         _tmp147 * _tmp148 + _tmp155 * sqrt_info(0, 4) + _tmp164 * sqrt_info(0, 5);
  const Scalar _tmp166 = _tmp117 * sqrt_info(1, 1);
  const Scalar _tmp167 = _tmp124 * _tmp137;
  const Scalar _tmp168 = _tmp61 * sqrt_info(1, 2);
  const Scalar _tmp169 = _tmp129 * _tmp168;
  const Scalar _tmp170 = _tmp139 * sqrt_info(1, 1);
  const Scalar _tmp171 = _tmp126 * _tmp80;
  const Scalar _tmp172 = _tmp156 * sqrt_info(1, 2);
  const Scalar _tmp173 = -_tmp110 * _tmp166 + _tmp110 * _tmp169 + _tmp110 * _tmp170 -
                         _tmp110 * _tmp172 + _tmp147 * _tmp171 + _tmp155 * sqrt_info(1, 4) +
                         _tmp164 * sqrt_info(1, 5) + _tmp167 * sqrt_info(1, 2);
  const Scalar _tmp174 = _tmp156 * sqrt_info(2, 2);
  const Scalar _tmp175 = -_tmp110 * _tmp174 + _tmp131 * sqrt_info(2, 2) +
                         _tmp155 * sqrt_info(2, 4) + _tmp164 * sqrt_info(2, 5) +
                         _tmp167 * sqrt_info(2, 2);
  const Scalar _tmp176 = _tmp155 * sqrt_info(3, 4) + _tmp164 * sqrt_info(3, 5);
  const Scalar _tmp177 = _tmp155 * sqrt_info(4, 4) + _tmp164 * sqrt_info(4, 5);
  const Scalar _tmp178 = _tmp103 - _tmp104 + _tmp105 - _tmp106;
  const Scalar _tmp179 = _a_T_b[3] * _tmp178;
  const Scalar _tmp180 = -_tmp100 + _tmp97 + _tmp98 - _tmp99;
  const Scalar _tmp181 = _a_T_b[0] * _tmp180;
  const Scalar _tmp182 = _tmp120 + _tmp181;
  const Scalar _tmp183 = _tmp119 + _tmp179 + _tmp182;
  const Scalar _tmp184 = -_a_T_b[2] * _tmp178;
  const Scalar _tmp185 = _a_T_b[1] * _tmp180;
  const Scalar _tmp186 = _tmp185 + _tmp90;
  const Scalar _tmp187 = _tmp184 + _tmp186 - _tmp96;
  const Scalar _tmp188 = _a_T_b[3] * _tmp180;
  const Scalar _tmp189 = _a_T_b[0] * _tmp178;
  const Scalar _tmp190 = _tmp129 * _tmp183;
  const Scalar _tmp191 = _tmp190 * _tmp61;
  const Scalar _tmp192 = _tmp190 * _tmp68;
  const Scalar _tmp193 = _a_T_b[1] * _tmp178;
  const Scalar _tmp194 = -_a_T_b[2] * _tmp180;
  const Scalar _tmp195 = _tmp133 + _tmp194;
  const Scalar _tmp196 = _tmp132 - _tmp193 + _tmp195;
  const Scalar _tmp197 = -_tmp0;
  const Scalar _tmp198 = _tmp197 + _tmp3;
  const Scalar _tmp199 = _tmp158 + _tmp20;
  const Scalar _tmp200 = _tmp198 + _tmp199;
  const Scalar _tmp201 = _tmp10 + _tmp160;
  const Scalar _tmp202 = -_tmp24;
  const Scalar _tmp203 = _tmp202 + _tmp26;
  const Scalar _tmp204 = -_a[4] * _tmp203 - _a[5] * _tmp201 - _a[6] * _tmp200 + _b[4] * _tmp203 +
                         _b[5] * _tmp201 + _b[6] * _tmp200;
  const Scalar _tmp205 = _tmp151 + _tmp198;
  const Scalar _tmp206 = -_a[4] * _tmp205 + _b[4] * _tmp205 - _tmp28 - _tmp30 + _tmp31;
  const Scalar _tmp207 = -_tmp118 * _tmp183 + _tmp127 * _tmp187 - _tmp128 * _tmp183 +
                         _tmp138 * (_tmp142 + _tmp143 + _tmp188 - _tmp189) + _tmp148 * _tmp196 -
                         _tmp157 * _tmp183 + _tmp190 * _tmp66 + _tmp191 * sqrt_info(0, 2) +
                         _tmp192 * sqrt_info(0, 1) + _tmp204 * sqrt_info(0, 3) +
                         _tmp206 * sqrt_info(0, 5);
  const Scalar _tmp208 = _tmp137 * _tmp187;
  const Scalar _tmp209 = -_tmp166 * _tmp183 + _tmp168 * _tmp190 + _tmp171 * _tmp196 -
                         _tmp172 * _tmp183 + _tmp192 * sqrt_info(1, 1) + _tmp204 * sqrt_info(1, 3) +
                         _tmp206 * sqrt_info(1, 5) + _tmp208 * sqrt_info(1, 2);
  const Scalar _tmp210 = -_tmp174 * _tmp183 + _tmp191 * sqrt_info(2, 2) +
                         _tmp204 * sqrt_info(2, 3) + _tmp206 * sqrt_info(2, 5) +
                         _tmp208 * sqrt_info(2, 2);
  const Scalar _tmp211 = _tmp204 * sqrt_info(3, 3) + _tmp206 * sqrt_info(3, 5);
  const Scalar _tmp212 = _tmp206 * sqrt_info(4, 5);
  const Scalar _tmp213 = -_tmp85 + _tmp86 + _tmp87 - _tmp88;
  const Scalar _tmp214 = _a_T_b[1] * _tmp213;
  const Scalar _tmp215 = _tmp189 + _tmp214;
  const Scalar _tmp216 = _tmp143 + _tmp144 + _tmp215;
  const Scalar _tmp217 = _tmp130 * _tmp216;
  const Scalar _tmp218 = _a_T_b[3] * _tmp213;
  const Scalar _tmp219 = -_tmp102 + _tmp184 + _tmp218 + _tmp96;
  const Scalar _tmp220 = _a_T_b[2] * _tmp213;
  const Scalar _tmp221 = _tmp179 + _tmp220;
  const Scalar _tmp222 = -_a_T_b[0] * _tmp213;
  const Scalar _tmp223 = _tmp132 - _tmp134 + _tmp193 + _tmp222;
  const Scalar _tmp224 = _tmp150 + _tmp152 + _tmp197 + _tmp20;
  const Scalar _tmp225 = -_a[5] * _tmp224 + _b[5] * _tmp224 - _tmp12 - _tmp17 + _tmp18;
  const Scalar _tmp226 = _tmp153 + _tmp199;
  const Scalar _tmp227 = _tmp202 + _tmp25;
  const Scalar _tmp228 = _tmp15 + _tmp162;
  const Scalar _tmp229 = -_a[4] * _tmp226 - _a[5] * _tmp228 - _a[6] * _tmp227 + _b[4] * _tmp226 +
                         _b[5] * _tmp228 + _b[6] * _tmp227;
  const Scalar _tmp230 = -_tmp118 * _tmp216 + _tmp127 * _tmp223 - _tmp128 * _tmp216 +
                         _tmp138 * (-_tmp119 + _tmp121 + _tmp221) + _tmp140 * _tmp216 +
                         _tmp141 * _tmp216 + _tmp148 * _tmp219 - _tmp157 * _tmp216 +
                         _tmp217 * sqrt_info(0, 2) + _tmp225 * sqrt_info(0, 3) +
                         _tmp229 * sqrt_info(0, 4);
  const Scalar _tmp231 = _tmp137 * _tmp223;
  const Scalar _tmp232 = -_tmp166 * _tmp216 + _tmp169 * _tmp216 + _tmp170 * _tmp216 +
                         _tmp171 * _tmp219 - _tmp172 * _tmp216 + _tmp225 * sqrt_info(1, 3) +
                         _tmp229 * sqrt_info(1, 4) + _tmp231 * sqrt_info(1, 2);
  const Scalar _tmp233 = -_tmp174 * _tmp216 + _tmp217 * sqrt_info(2, 2) +
                         _tmp225 * sqrt_info(2, 3) + _tmp229 * sqrt_info(2, 4) +
                         _tmp231 * sqrt_info(2, 2);
  const Scalar _tmp234 = _tmp225 * sqrt_info(3, 3) + _tmp229 * sqrt_info(3, 4);
  const Scalar _tmp235 = _tmp229 * sqrt_info(4, 4);
  const Scalar _tmp236 = _tmp1 + _tmp21 - 1;
  const Scalar _tmp237 =
      _tmp163 * sqrt_info(0, 4) + _tmp203 * sqrt_info(0, 5) + _tmp236 * sqrt_info(0, 3);
  const Scalar _tmp238 =
      _tmp163 * sqrt_info(1, 4) + _tmp203 * sqrt_info(1, 5) + _tmp236 * sqrt_info(1, 3);
  const Scalar _tmp239 =
      _tmp163 * sqrt_info(2, 4) + _tmp203 * sqrt_info(2, 5) + _tmp236 * sqrt_info(2, 3);
  const Scalar _tmp240 =
      _tmp163 * sqrt_info(3, 4) + _tmp203 * sqrt_info(3, 5) + _tmp236 * sqrt_info(3, 3);
  const Scalar _tmp241 = _tmp163 * sqrt_info(4, 4) + _tmp203 * sqrt_info(4, 5);
  const Scalar _tmp242 = _tmp4 - 1;
  const Scalar _tmp243 = _tmp1 + _tmp242;
  const Scalar _tmp244 =
      _tmp201 * sqrt_info(0, 5) + _tmp228 * sqrt_info(0, 3) + _tmp243 * sqrt_info(0, 4);
  const Scalar _tmp245 =
      _tmp201 * sqrt_info(1, 5) + _tmp228 * sqrt_info(1, 3) + _tmp243 * sqrt_info(1, 4);
  const Scalar _tmp246 =
      _tmp201 * sqrt_info(2, 5) + _tmp228 * sqrt_info(2, 3) + _tmp243 * sqrt_info(2, 4);
  const Scalar _tmp247 =
      _tmp201 * sqrt_info(3, 5) + _tmp228 * sqrt_info(3, 3) + _tmp243 * sqrt_info(3, 4);
  const Scalar _tmp248 = _tmp201 * sqrt_info(4, 5) + _tmp243 * sqrt_info(4, 4);
  const Scalar _tmp249 = _tmp21 + _tmp242;
  const Scalar _tmp250 =
      _tmp161 * sqrt_info(0, 4) + _tmp227 * sqrt_info(0, 3) + _tmp249 * sqrt_info(0, 5);
  const Scalar _tmp251 =
      _tmp161 * sqrt_info(1, 4) + _tmp227 * sqrt_info(1, 3) + _tmp249 * sqrt_info(1, 5);
  const Scalar _tmp252 =
      _tmp161 * sqrt_info(2, 4) + _tmp227 * sqrt_info(2, 3) + _tmp249 * sqrt_info(2, 5);
  const Scalar _tmp253 =
      _tmp161 * sqrt_info(3, 4) + _tmp227 * sqrt_info(3, 3) + _tmp249 * sqrt_info(3, 5);
  const Scalar _tmp254 = _tmp161 * sqrt_info(4, 4) + _tmp249 * sqrt_info(4, 5);
  const Scalar _tmp255 = _tmp91 + _tmp92 + _tmp93 + _tmp94;
  const Scalar _tmp256 = _a_T_b[0] * _tmp255;
  const Scalar _tmp257 = _tmp218 + _tmp256;
  const Scalar _tmp258 = _tmp109 + _tmp257;
  const Scalar _tmp259 = _a_T_b[3] * _tmp255;
  const Scalar _tmp260 = _tmp222 + _tmp259;
  const Scalar _tmp261 = _a_T_b[1] * _tmp255;
  const Scalar _tmp262 = _tmp123 - _tmp220 + _tmp261;
  const Scalar _tmp263 = _tmp130 * _tmp258;
  const Scalar _tmp264 = _a_T_b[2] * _tmp255;
  const Scalar _tmp265 = _tmp126 * (_tmp146 - _tmp214 - _tmp264);
  const Scalar _tmp266 = -_tmp118 * _tmp258 + _tmp127 * _tmp262 - _tmp128 * _tmp258 +
                         _tmp138 * (_tmp136 + _tmp260) + _tmp140 * _tmp258 + _tmp141 * _tmp258 -
                         _tmp157 * _tmp258 + _tmp263 * sqrt_info(0, 2) + _tmp265 * _tmp67;
  const Scalar _tmp267 = _tmp137 * _tmp262;
  const Scalar _tmp268 = -_tmp166 * _tmp258 + _tmp169 * _tmp258 + _tmp170 * _tmp258 -
                         _tmp172 * _tmp258 + _tmp265 * _tmp80 + _tmp267 * sqrt_info(1, 2);
  const Scalar _tmp269 = -_tmp174 * _tmp258 + _tmp263 * sqrt_info(2, 2) + _tmp267 * sqrt_info(2, 2);
  const Scalar _tmp270 = -_tmp108 + _tmp186 - _tmp256;
  const Scalar _tmp271 = _tmp122 + _tmp182 + _tmp261;
  const Scalar _tmp272 = _tmp129 * _tmp271;
  const Scalar _tmp273 = _tmp272 * _tmp61;
  const Scalar _tmp274 = _tmp272 * _tmp68;
  const Scalar _tmp275 = _tmp188 + _tmp264;
  const Scalar _tmp276 = _tmp135 + _tmp195 + _tmp259;
  const Scalar _tmp277 = -_tmp118 * _tmp271 + _tmp127 * _tmp270 - _tmp128 * _tmp271 +
                         _tmp138 * (_tmp142 - _tmp145 + _tmp275) + _tmp148 * _tmp276 -
                         _tmp157 * _tmp271 + _tmp272 * _tmp66 + _tmp273 * sqrt_info(0, 2) +
                         _tmp274 * sqrt_info(0, 1);
  const Scalar _tmp278 = _tmp137 * _tmp270;
  const Scalar _tmp279 = -_tmp166 * _tmp271 + _tmp168 * _tmp272 + _tmp171 * _tmp276 -
                         _tmp172 * _tmp271 + _tmp274 * sqrt_info(1, 1) + _tmp278 * sqrt_info(1, 2);
  const Scalar _tmp280 = -_tmp174 * _tmp271 + _tmp273 * sqrt_info(2, 2) + _tmp278 * sqrt_info(2, 2);
  const Scalar _tmp281 = _tmp215 + _tmp275;
  const Scalar _tmp282 = _tmp130 * _tmp281;
  const Scalar _tmp283 = _tmp126 * (_tmp184 - _tmp185 + _tmp257);
  const Scalar _tmp284 = _tmp193 + _tmp194 + _tmp260;
  const Scalar _tmp285 = -_tmp118 * _tmp281 + _tmp127 * _tmp284 - _tmp128 * _tmp281 +
                         _tmp138 * (-_tmp181 + _tmp221 - _tmp261) + _tmp140 * _tmp281 +
                         _tmp141 * _tmp281 - _tmp157 * _tmp281 + _tmp282 * sqrt_info(0, 2) +
                         _tmp283 * _tmp67;
  const Scalar _tmp286 = _tmp137 * _tmp284;
  const Scalar _tmp287 = -_tmp166 * _tmp281 + _tmp169 * _tmp281 + _tmp170 * _tmp281 -
                         _tmp172 * _tmp281 + _tmp283 * _tmp80 + _tmp286 * sqrt_info(1, 2);
  const Scalar _tmp288 = -_tmp174 * _tmp281 + _tmp282 * sqrt_info(2, 2) + _tmp286 * sqrt_info(2, 2);
  const Scalar _tmp289 =
      _tmp16 * sqrt_info(0, 4) + _tmp23 * sqrt_info(0, 3) + _tmp74 * sqrt_info(0, 5);
  const Scalar _tmp290 =
      _tmp16 * sqrt_info(1, 4) + _tmp23 * sqrt_info(1, 3) + _tmp74 * sqrt_info(1, 5);
  const Scalar _tmp291 =
      _tmp16 * sqrt_info(2, 4) + _tmp23 * sqrt_info(2, 3) + _tmp74 * sqrt_info(2, 5);
  const Scalar _tmp292 =
      _tmp16 * sqrt_info(3, 4) + _tmp23 * sqrt_info(3, 3) + _tmp74 * sqrt_info(3, 5);
  const Scalar _tmp293 = _tmp16 * sqrt_info(4, 4) + _tmp74 * sqrt_info(4, 5);
  const Scalar _tmp294 =
      _tmp29 * sqrt_info(0, 3) + _tmp6 * sqrt_info(0, 4) + _tmp72 * sqrt_info(0, 5);
  const Scalar _tmp295 =
      _tmp29 * sqrt_info(1, 3) + _tmp6 * sqrt_info(1, 4) + _tmp72 * sqrt_info(1, 5);
  const Scalar _tmp296 =
      _tmp29 * sqrt_info(2, 3) + _tmp6 * sqrt_info(2, 4) + _tmp72 * sqrt_info(2, 5);
  const Scalar _tmp297 =
      _tmp29 * sqrt_info(3, 3) + _tmp6 * sqrt_info(3, 4) + _tmp72 * sqrt_info(3, 5);
  const Scalar _tmp298 = _tmp6 * sqrt_info(4, 4) + _tmp72 * sqrt_info(4, 5);
  const Scalar _tmp299 =
      _tmp11 * sqrt_info(0, 4) + _tmp27 * sqrt_info(0, 3) + _tmp70 * sqrt_info(0, 5);
  const Scalar _tmp300 =
      _tmp11 * sqrt_info(1, 4) + _tmp27 * sqrt_info(1, 3) + _tmp70 * sqrt_info(1, 5);
  const Scalar _tmp301 =
      _tmp11 * sqrt_info(2, 4) + _tmp27 * sqrt_info(2, 3) + _tmp70 * sqrt_info(2, 5);
  const Scalar _tmp302 =
      _tmp11 * sqrt_info(3, 4) + _tmp27 * sqrt_info(3, 3) + _tmp70 * sqrt_info(3, 5);
  const Scalar _tmp303 = _tmp11 * sqrt_info(4, 4) + _tmp70 * sqrt_info(4, 5);
  const Scalar _tmp304 = std::pow(sqrt_info(5, 5), Scalar(2));
  const Scalar _tmp305 = _tmp164 * _tmp304;
  const Scalar _tmp306 = std::pow(_tmp206, Scalar(2));
  const Scalar _tmp307 = _tmp206 * _tmp304;
  const Scalar _tmp308 = _tmp201 * _tmp304;
  const Scalar _tmp309 = _tmp249 * _tmp304;
  const Scalar _tmp310 = _tmp304 * _tmp74;
  const Scalar _tmp311 = _tmp304 * _tmp72;
  const Scalar _tmp312 = _tmp304 * _tmp77;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp78;
    _res(1, 0) = _tmp81;
    _res(2, 0) = _tmp82;
    _res(3, 0) = _tmp83;
    _res(4, 0) = _tmp84;
    _res(5, 0) = _tmp77 * sqrt_info(5, 5);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp165;
    _jacobian(1, 0) = _tmp173;
    _jacobian(2, 0) = _tmp175;
    _jacobian(3, 0) = _tmp176;
    _jacobian(4, 0) = _tmp177;
    _jacobian(5, 0) = _tmp164 * sqrt_info(5, 5);
    _jacobian(0, 1) = _tmp207;
    _jacobian(1, 1) = _tmp209;
    _jacobian(2, 1) = _tmp210;
    _jacobian(3, 1) = _tmp211;
    _jacobian(4, 1) = _tmp212;
    _jacobian(5, 1) = _tmp206 * sqrt_info(5, 5);
    _jacobian(0, 2) = _tmp230;
    _jacobian(1, 2) = _tmp232;
    _jacobian(2, 2) = _tmp233;
    _jacobian(3, 2) = _tmp234;
    _jacobian(4, 2) = _tmp235;
    _jacobian(5, 2) = 0;
    _jacobian(0, 3) = _tmp237;
    _jacobian(1, 3) = _tmp238;
    _jacobian(2, 3) = _tmp239;
    _jacobian(3, 3) = _tmp240;
    _jacobian(4, 3) = _tmp241;
    _jacobian(5, 3) = _tmp203 * sqrt_info(5, 5);
    _jacobian(0, 4) = _tmp244;
    _jacobian(1, 4) = _tmp245;
    _jacobian(2, 4) = _tmp246;
    _jacobian(3, 4) = _tmp247;
    _jacobian(4, 4) = _tmp248;
    _jacobian(5, 4) = _tmp201 * sqrt_info(5, 5);
    _jacobian(0, 5) = _tmp250;
    _jacobian(1, 5) = _tmp251;
    _jacobian(2, 5) = _tmp252;
    _jacobian(3, 5) = _tmp253;
    _jacobian(4, 5) = _tmp254;
    _jacobian(5, 5) = _tmp249 * sqrt_info(5, 5);
    _jacobian(0, 6) = _tmp266;
    _jacobian(1, 6) = _tmp268;
    _jacobian(2, 6) = _tmp269;
    _jacobian(3, 6) = 0;
    _jacobian(4, 6) = 0;
    _jacobian(5, 6) = 0;
    _jacobian(0, 7) = _tmp277;
    _jacobian(1, 7) = _tmp279;
    _jacobian(2, 7) = _tmp280;
    _jacobian(3, 7) = 0;
    _jacobian(4, 7) = 0;
    _jacobian(5, 7) = 0;
    _jacobian(0, 8) = _tmp285;
    _jacobian(1, 8) = _tmp287;
    _jacobian(2, 8) = _tmp288;
    _jacobian(3, 8) = 0;
    _jacobian(4, 8) = 0;
    _jacobian(5, 8) = 0;
    _jacobian(0, 9) = _tmp289;
    _jacobian(1, 9) = _tmp290;
    _jacobian(2, 9) = _tmp291;
    _jacobian(3, 9) = _tmp292;
    _jacobian(4, 9) = _tmp293;
    _jacobian(5, 9) = _tmp74 * sqrt_info(5, 5);
    _jacobian(0, 10) = _tmp294;
    _jacobian(1, 10) = _tmp295;
    _jacobian(2, 10) = _tmp296;
    _jacobian(3, 10) = _tmp297;
    _jacobian(4, 10) = _tmp298;
    _jacobian(5, 10) = _tmp72 * sqrt_info(5, 5);
    _jacobian(0, 11) = _tmp299;
    _jacobian(1, 11) = _tmp300;
    _jacobian(2, 11) = _tmp301;
    _jacobian(3, 11) = _tmp302;
    _jacobian(4, 11) = _tmp303;
    _jacobian(5, 11) = _tmp70 * sqrt_info(5, 5);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp164, Scalar(2)) * _tmp304 + std::pow(_tmp165, Scalar(2)) +
                     std::pow(_tmp173, Scalar(2)) + std::pow(_tmp175, Scalar(2)) +
                     std::pow(_tmp176, Scalar(2)) + std::pow(_tmp177, Scalar(2));
    _hessian(1, 0) = _tmp165 * _tmp207 + _tmp173 * _tmp209 + _tmp175 * _tmp210 + _tmp176 * _tmp211 +
                     _tmp177 * _tmp212 + _tmp206 * _tmp305;
    _hessian(2, 0) = _tmp165 * _tmp230 + _tmp173 * _tmp232 + _tmp175 * _tmp233 + _tmp176 * _tmp234 +
                     _tmp177 * _tmp235;
    _hessian(3, 0) = _tmp165 * _tmp237 + _tmp173 * _tmp238 + _tmp175 * _tmp239 + _tmp176 * _tmp240 +
                     _tmp177 * _tmp241 + _tmp203 * _tmp305;
    _hessian(4, 0) = _tmp165 * _tmp244 + _tmp173 * _tmp245 + _tmp175 * _tmp246 + _tmp176 * _tmp247 +
                     _tmp177 * _tmp248 + _tmp201 * _tmp305;
    _hessian(5, 0) = _tmp165 * _tmp250 + _tmp173 * _tmp251 + _tmp175 * _tmp252 + _tmp176 * _tmp253 +
                     _tmp177 * _tmp254 + _tmp249 * _tmp305;
    _hessian(6, 0) = _tmp165 * _tmp266 + _tmp173 * _tmp268 + _tmp175 * _tmp269;
    _hessian(7, 0) = _tmp165 * _tmp277 + _tmp173 * _tmp279 + _tmp175 * _tmp280;
    _hessian(8, 0) = _tmp165 * _tmp285 + _tmp173 * _tmp287 + _tmp175 * _tmp288;
    _hessian(9, 0) = _tmp165 * _tmp289 + _tmp173 * _tmp290 + _tmp175 * _tmp291 + _tmp176 * _tmp292 +
                     _tmp177 * _tmp293 + _tmp305 * _tmp74;
    _hessian(10, 0) = _tmp165 * _tmp294 + _tmp173 * _tmp295 + _tmp175 * _tmp296 +
                      _tmp176 * _tmp297 + _tmp177 * _tmp298 + _tmp305 * _tmp72;
    _hessian(11, 0) = _tmp165 * _tmp299 + _tmp173 * _tmp300 + _tmp175 * _tmp301 +
                      _tmp176 * _tmp302 + _tmp177 * _tmp303 + _tmp305 * _tmp70;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp207, Scalar(2)) + std::pow(_tmp209, Scalar(2)) +
                     std::pow(_tmp210, Scalar(2)) + std::pow(_tmp211, Scalar(2)) +
                     _tmp304 * _tmp306 + _tmp306 * std::pow(sqrt_info(4, 5), Scalar(2));
    _hessian(2, 1) = _tmp207 * _tmp230 + _tmp209 * _tmp232 + _tmp210 * _tmp233 + _tmp211 * _tmp234 +
                     _tmp212 * _tmp235;
    _hessian(3, 1) = _tmp203 * _tmp307 + _tmp207 * _tmp237 + _tmp209 * _tmp238 + _tmp210 * _tmp239 +
                     _tmp211 * _tmp240 + _tmp212 * _tmp241;
    _hessian(4, 1) = _tmp201 * _tmp307 + _tmp207 * _tmp244 + _tmp209 * _tmp245 + _tmp210 * _tmp246 +
                     _tmp211 * _tmp247 + _tmp212 * _tmp248;
    _hessian(5, 1) = _tmp207 * _tmp250 + _tmp209 * _tmp251 + _tmp210 * _tmp252 + _tmp211 * _tmp253 +
                     _tmp212 * _tmp254 + _tmp249 * _tmp307;
    _hessian(6, 1) = _tmp207 * _tmp266 + _tmp209 * _tmp268 + _tmp210 * _tmp269;
    _hessian(7, 1) = _tmp207 * _tmp277 + _tmp209 * _tmp279 + _tmp210 * _tmp280;
    _hessian(8, 1) = _tmp207 * _tmp285 + _tmp209 * _tmp287 + _tmp210 * _tmp288;
    _hessian(9, 1) = _tmp207 * _tmp289 + _tmp209 * _tmp290 + _tmp210 * _tmp291 + _tmp211 * _tmp292 +
                     _tmp212 * _tmp293 + _tmp307 * _tmp74;
    _hessian(10, 1) = _tmp207 * _tmp294 + _tmp209 * _tmp295 + _tmp210 * _tmp296 +
                      _tmp211 * _tmp297 + _tmp212 * _tmp298 + _tmp307 * _tmp72;
    _hessian(11, 1) = _tmp207 * _tmp299 + _tmp209 * _tmp300 + _tmp210 * _tmp301 +
                      _tmp211 * _tmp302 + _tmp212 * _tmp303 + _tmp307 * _tmp70;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp229, Scalar(2)) * std::pow(sqrt_info(4, 4), Scalar(2)) +
                     std::pow(_tmp230, Scalar(2)) + std::pow(_tmp232, Scalar(2)) +
                     std::pow(_tmp233, Scalar(2)) + std::pow(_tmp234, Scalar(2));
    _hessian(3, 2) = _tmp230 * _tmp237 + _tmp232 * _tmp238 + _tmp233 * _tmp239 + _tmp234 * _tmp240 +
                     _tmp235 * _tmp241;
    _hessian(4, 2) = _tmp230 * _tmp244 + _tmp232 * _tmp245 + _tmp233 * _tmp246 + _tmp234 * _tmp247 +
                     _tmp235 * _tmp248;
    _hessian(5, 2) = _tmp230 * _tmp250 + _tmp232 * _tmp251 + _tmp233 * _tmp252 + _tmp234 * _tmp253 +
                     _tmp235 * _tmp254;
    _hessian(6, 2) = _tmp230 * _tmp266 + _tmp232 * _tmp268 + _tmp233 * _tmp269;
    _hessian(7, 2) = _tmp230 * _tmp277 + _tmp232 * _tmp279 + _tmp233 * _tmp280;
    _hessian(8, 2) = _tmp230 * _tmp285 + _tmp232 * _tmp287 + _tmp233 * _tmp288;
    _hessian(9, 2) = _tmp230 * _tmp289 + _tmp232 * _tmp290 + _tmp233 * _tmp291 + _tmp234 * _tmp292 +
                     _tmp235 * _tmp293;
    _hessian(10, 2) = _tmp230 * _tmp294 + _tmp232 * _tmp295 + _tmp233 * _tmp296 +
                      _tmp234 * _tmp297 + _tmp235 * _tmp298;
    _hessian(11, 2) = _tmp230 * _tmp299 + _tmp232 * _tmp300 + _tmp233 * _tmp301 +
                      _tmp234 * _tmp302 + _tmp235 * _tmp303;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp203, Scalar(2)) * _tmp304 + std::pow(_tmp237, Scalar(2)) +
                     std::pow(_tmp238, Scalar(2)) + std::pow(_tmp239, Scalar(2)) +
                     std::pow(_tmp240, Scalar(2)) + std::pow(_tmp241, Scalar(2));
    _hessian(4, 3) = _tmp203 * _tmp308 + _tmp237 * _tmp244 + _tmp238 * _tmp245 + _tmp239 * _tmp246 +
                     _tmp240 * _tmp247 + _tmp241 * _tmp248;
    _hessian(5, 3) = _tmp203 * _tmp309 + _tmp237 * _tmp250 + _tmp238 * _tmp251 + _tmp239 * _tmp252 +
                     _tmp240 * _tmp253 + _tmp241 * _tmp254;
    _hessian(6, 3) = _tmp237 * _tmp266 + _tmp238 * _tmp268 + _tmp239 * _tmp269;
    _hessian(7, 3) = _tmp237 * _tmp277 + _tmp238 * _tmp279 + _tmp239 * _tmp280;
    _hessian(8, 3) = _tmp237 * _tmp285 + _tmp238 * _tmp287 + _tmp239 * _tmp288;
    _hessian(9, 3) = _tmp203 * _tmp310 + _tmp237 * _tmp289 + _tmp238 * _tmp290 + _tmp239 * _tmp291 +
                     _tmp240 * _tmp292 + _tmp241 * _tmp293;
    _hessian(10, 3) = _tmp203 * _tmp311 + _tmp237 * _tmp294 + _tmp238 * _tmp295 +
                      _tmp239 * _tmp296 + _tmp240 * _tmp297 + _tmp241 * _tmp298;
    _hessian(11, 3) = _tmp203 * _tmp304 * _tmp70 + _tmp237 * _tmp299 + _tmp238 * _tmp300 +
                      _tmp239 * _tmp301 + _tmp240 * _tmp302 + _tmp241 * _tmp303;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp201, Scalar(2)) * _tmp304 + std::pow(_tmp244, Scalar(2)) +
                     std::pow(_tmp245, Scalar(2)) + std::pow(_tmp246, Scalar(2)) +
                     std::pow(_tmp247, Scalar(2)) + std::pow(_tmp248, Scalar(2));
    _hessian(5, 4) = _tmp244 * _tmp250 + _tmp245 * _tmp251 + _tmp246 * _tmp252 + _tmp247 * _tmp253 +
                     _tmp248 * _tmp254 + _tmp249 * _tmp308;
    _hessian(6, 4) = _tmp244 * _tmp266 + _tmp245 * _tmp268 + _tmp246 * _tmp269;
    _hessian(7, 4) = _tmp244 * _tmp277 + _tmp245 * _tmp279 + _tmp246 * _tmp280;
    _hessian(8, 4) = _tmp244 * _tmp285 + _tmp245 * _tmp287 + _tmp246 * _tmp288;
    _hessian(9, 4) = _tmp244 * _tmp289 + _tmp245 * _tmp290 + _tmp246 * _tmp291 + _tmp247 * _tmp292 +
                     _tmp248 * _tmp293 + _tmp308 * _tmp74;
    _hessian(10, 4) = _tmp201 * _tmp311 + _tmp244 * _tmp294 + _tmp245 * _tmp295 +
                      _tmp246 * _tmp296 + _tmp247 * _tmp297 + _tmp248 * _tmp298;
    _hessian(11, 4) = _tmp244 * _tmp299 + _tmp245 * _tmp300 + _tmp246 * _tmp301 +
                      _tmp247 * _tmp302 + _tmp248 * _tmp303 + _tmp308 * _tmp70;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp249, Scalar(2)) * _tmp304 + std::pow(_tmp250, Scalar(2)) +
                     std::pow(_tmp251, Scalar(2)) + std::pow(_tmp252, Scalar(2)) +
                     std::pow(_tmp253, Scalar(2)) + std::pow(_tmp254, Scalar(2));
    _hessian(6, 5) = _tmp250 * _tmp266 + _tmp251 * _tmp268 + _tmp252 * _tmp269;
    _hessian(7, 5) = _tmp250 * _tmp277 + _tmp251 * _tmp279 + _tmp252 * _tmp280;
    _hessian(8, 5) = _tmp250 * _tmp285 + _tmp251 * _tmp287 + _tmp252 * _tmp288;
    _hessian(9, 5) = _tmp249 * _tmp310 + _tmp250 * _tmp289 + _tmp251 * _tmp290 + _tmp252 * _tmp291 +
                     _tmp253 * _tmp292 + _tmp254 * _tmp293;
    _hessian(10, 5) = _tmp249 * _tmp311 + _tmp250 * _tmp294 + _tmp251 * _tmp295 +
                      _tmp252 * _tmp296 + _tmp253 * _tmp297 + _tmp254 * _tmp298;
    _hessian(11, 5) = _tmp250 * _tmp299 + _tmp251 * _tmp300 + _tmp252 * _tmp301 +
                      _tmp253 * _tmp302 + _tmp254 * _tmp303 + _tmp309 * _tmp70;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) =
        std::pow(_tmp266, Scalar(2)) + std::pow(_tmp268, Scalar(2)) + std::pow(_tmp269, Scalar(2));
    _hessian(7, 6) = _tmp266 * _tmp277 + _tmp268 * _tmp279 + _tmp269 * _tmp280;
    _hessian(8, 6) = _tmp266 * _tmp285 + _tmp268 * _tmp287 + _tmp269 * _tmp288;
    _hessian(9, 6) = _tmp266 * _tmp289 + _tmp268 * _tmp290 + _tmp269 * _tmp291;
    _hessian(10, 6) = _tmp266 * _tmp294 + _tmp268 * _tmp295 + _tmp269 * _tmp296;
    _hessian(11, 6) = _tmp266 * _tmp299 + _tmp268 * _tmp300 + _tmp269 * _tmp301;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) =
        std::pow(_tmp277, Scalar(2)) + std::pow(_tmp279, Scalar(2)) + std::pow(_tmp280, Scalar(2));
    _hessian(8, 7) = _tmp277 * _tmp285 + _tmp279 * _tmp287 + _tmp280 * _tmp288;
    _hessian(9, 7) = _tmp277 * _tmp289 + _tmp279 * _tmp290 + _tmp280 * _tmp291;
    _hessian(10, 7) = _tmp277 * _tmp294 + _tmp279 * _tmp295 + _tmp280 * _tmp296;
    _hessian(11, 7) = _tmp277 * _tmp299 + _tmp279 * _tmp300 + _tmp280 * _tmp301;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) =
        std::pow(_tmp285, Scalar(2)) + std::pow(_tmp287, Scalar(2)) + std::pow(_tmp288, Scalar(2));
    _hessian(9, 8) = _tmp285 * _tmp289 + _tmp287 * _tmp290 + _tmp288 * _tmp291;
    _hessian(10, 8) = _tmp285 * _tmp294 + _tmp287 * _tmp295 + _tmp288 * _tmp296;
    _hessian(11, 8) = _tmp285 * _tmp299 + _tmp287 * _tmp300 + _tmp288 * _tmp301;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp289, Scalar(2)) + std::pow(_tmp290, Scalar(2)) +
                     std::pow(_tmp291, Scalar(2)) + std::pow(_tmp292, Scalar(2)) +
                     std::pow(_tmp293, Scalar(2)) + _tmp304 * std::pow(_tmp74, Scalar(2));
    _hessian(10, 9) = _tmp289 * _tmp294 + _tmp290 * _tmp295 + _tmp291 * _tmp296 +
                      _tmp292 * _tmp297 + _tmp293 * _tmp298 + _tmp311 * _tmp74;
    _hessian(11, 9) = _tmp289 * _tmp299 + _tmp290 * _tmp300 + _tmp291 * _tmp301 +
                      _tmp292 * _tmp302 + _tmp293 * _tmp303 + _tmp310 * _tmp70;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp294, Scalar(2)) + std::pow(_tmp295, Scalar(2)) +
                       std::pow(_tmp296, Scalar(2)) + std::pow(_tmp297, Scalar(2)) +
                       std::pow(_tmp298, Scalar(2)) + _tmp304 * std::pow(_tmp72, Scalar(2));
    _hessian(11, 10) = _tmp294 * _tmp299 + _tmp295 * _tmp300 + _tmp296 * _tmp301 +
                       _tmp297 * _tmp302 + _tmp298 * _tmp303 + _tmp311 * _tmp70;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp299, Scalar(2)) + std::pow(_tmp300, Scalar(2)) +
                       std::pow(_tmp301, Scalar(2)) + std::pow(_tmp302, Scalar(2)) +
                       std::pow(_tmp303, Scalar(2)) + _tmp304 * std::pow(_tmp70, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp164 * _tmp312 + _tmp165 * _tmp78 + _tmp173 * _tmp81 + _tmp175 * _tmp82 +
                 _tmp176 * _tmp83 + _tmp177 * _tmp84;
    _rhs(1, 0) = _tmp206 * _tmp312 + _tmp207 * _tmp78 + _tmp209 * _tmp81 + _tmp210 * _tmp82 +
                 _tmp211 * _tmp83 + _tmp212 * _tmp84;
    _rhs(2, 0) = _tmp230 * _tmp78 + _tmp232 * _tmp81 + _tmp233 * _tmp82 + _tmp234 * _tmp83 +
                 _tmp235 * _tmp84;
    _rhs(3, 0) = _tmp203 * _tmp312 + _tmp237 * _tmp78 + _tmp238 * _tmp81 + _tmp239 * _tmp82 +
                 _tmp240 * _tmp83 + _tmp241 * _tmp84;
    _rhs(4, 0) = _tmp201 * _tmp312 + _tmp244 * _tmp78 + _tmp245 * _tmp81 + _tmp246 * _tmp82 +
                 _tmp247 * _tmp83 + _tmp248 * _tmp84;
    _rhs(5, 0) = _tmp249 * _tmp312 + _tmp250 * _tmp78 + _tmp251 * _tmp81 + _tmp252 * _tmp82 +
                 _tmp253 * _tmp83 + _tmp254 * _tmp84;
    _rhs(6, 0) = _tmp266 * _tmp78 + _tmp268 * _tmp81 + _tmp269 * _tmp82;
    _rhs(7, 0) = _tmp277 * _tmp78 + _tmp279 * _tmp81 + _tmp280 * _tmp82;
    _rhs(8, 0) = _tmp285 * _tmp78 + _tmp287 * _tmp81 + _tmp288 * _tmp82;
    _rhs(9, 0) = _tmp289 * _tmp78 + _tmp290 * _tmp81 + _tmp291 * _tmp82 + _tmp292 * _tmp83 +
                 _tmp293 * _tmp84 + _tmp312 * _tmp74;
    _rhs(10, 0) = _tmp294 * _tmp78 + _tmp295 * _tmp81 + _tmp296 * _tmp82 + _tmp297 * _tmp83 +
                  _tmp298 * _tmp84 + _tmp312 * _tmp72;
    _rhs(11, 0) = _tmp299 * _tmp78 + _tmp300 * _tmp81 + _tmp301 * _tmp82 + _tmp302 * _tmp83 +
                  _tmp303 * _tmp84 + _tmp312 * _tmp70;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
