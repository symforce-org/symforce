// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Pass in a single scalar if
 *                isotropic, a vector if diagonal, and a square matrix otherwise.
 *     jacobian: (6x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3Diagonal(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                                const sym::Pose3<Scalar>& a_T_b,
                                const Eigen::Matrix<Scalar, 6, 1>& sqrt_info, const Scalar epsilon,
                                Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                                Eigen::Matrix<Scalar, 6, 12>* const jacobian = nullptr,
                                Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 926

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (252)
  const Scalar _tmp0 = _a[0] * _b[1];
  const Scalar _tmp1 = _a[2] * _b[3];
  const Scalar _tmp2 = _a[3] * _b[2];
  const Scalar _tmp3 = _a[1] * _b[0];
  const Scalar _tmp4 = -_tmp0 - _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _a_T_b[2] * _tmp4;
  const Scalar _tmp6 = _a[2] * _b[1];
  const Scalar _tmp7 = _a[0] * _b[3];
  const Scalar _tmp8 = _a[1] * _b[2];
  const Scalar _tmp9 = _a[3] * _b[0];
  const Scalar _tmp10 = _tmp6 - _tmp7 - _tmp8 + _tmp9;
  const Scalar _tmp11 = _a_T_b[0] * _tmp10;
  const Scalar _tmp12 = _a[3] * _b[1];
  const Scalar _tmp13 = _a[1] * _b[3];
  const Scalar _tmp14 = _a[0] * _b[2];
  const Scalar _tmp15 = _a[2] * _b[0];
  const Scalar _tmp16 = _tmp12 - _tmp13 + _tmp14 - _tmp15;
  const Scalar _tmp17 = _a_T_b[1] * _tmp16;
  const Scalar _tmp18 = -_tmp11 - _tmp17 - _tmp5;
  const Scalar _tmp19 = _a[1] * _b[1];
  const Scalar _tmp20 = _a[2] * _b[2];
  const Scalar _tmp21 = _a[0] * _b[0];
  const Scalar _tmp22 = _a[3] * _b[3];
  const Scalar _tmp23 = _tmp19 + _tmp20 + _tmp21 + _tmp22;
  const Scalar _tmp24 = _a_T_b[3] * _tmp23;
  const Scalar _tmp25 =
      2 * std::min<Scalar>(0, (((-_tmp18 + _tmp24) > 0) - ((-_tmp18 + _tmp24) < 0))) + 1;
  const Scalar _tmp26 = 2 * _tmp25;
  const Scalar _tmp27 = 1 - epsilon;
  const Scalar _tmp28 = std::min<Scalar>(_tmp27, std::fabs(_tmp18 - _tmp24));
  const Scalar _tmp29 = std::acos(_tmp28) / std::sqrt(Scalar(1 - std::pow(_tmp28, Scalar(2))));
  const Scalar _tmp30 = _tmp26 * _tmp29;
  const Scalar _tmp31 = sqrt_info(0, 0) * (-_a_T_b[0] * _tmp23 - _a_T_b[1] * _tmp4 +
                                           _a_T_b[2] * _tmp16 + _a_T_b[3] * _tmp10);
  const Scalar _tmp32 = _tmp30 * _tmp31;
  const Scalar _tmp33 = sqrt_info(1, 0) * (_a_T_b[0] * _tmp4 - _a_T_b[1] * _tmp23 -
                                           _a_T_b[2] * _tmp10 + _a_T_b[3] * _tmp16);
  const Scalar _tmp34 = _tmp30 * _tmp33;
  const Scalar _tmp35 =
      -_a_T_b[0] * _tmp16 + _a_T_b[1] * _tmp10 - _a_T_b[2] * _tmp23 + _a_T_b[3] * _tmp4;
  const Scalar _tmp36 = _tmp26 * sqrt_info(2, 0);
  const Scalar _tmp37 = _tmp29 * _tmp35 * _tmp36;
  const Scalar _tmp38 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp39 = 2 * _tmp38;
  const Scalar _tmp40 = -_tmp39;
  const Scalar _tmp41 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp42 = 2 * _tmp41;
  const Scalar _tmp43 = -_tmp42;
  const Scalar _tmp44 = _tmp40 + _tmp43 + 1;
  const Scalar _tmp45 = 2 * _a[0] * _a[2];
  const Scalar _tmp46 = 2 * _a[3];
  const Scalar _tmp47 = _a[1] * _tmp46;
  const Scalar _tmp48 = -_tmp47;
  const Scalar _tmp49 = _tmp45 + _tmp48;
  const Scalar _tmp50 = _a[6] * _tmp49;
  const Scalar _tmp51 = 2 * _a[1];
  const Scalar _tmp52 = _a[0] * _tmp51;
  const Scalar _tmp53 = _a[2] * _tmp46;
  const Scalar _tmp54 = _tmp52 + _tmp53;
  const Scalar _tmp55 = _a[5] * _tmp54;
  const Scalar _tmp56 = _b[5] * _tmp54 + _b[6] * _tmp49;
  const Scalar _tmp57 = -_a[4] * _tmp44 - _a_T_b[4] + _b[4] * _tmp44 - _tmp50 - _tmp55 + _tmp56;
  const Scalar _tmp58 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp59 = 2 * _tmp58;
  const Scalar _tmp60 = 1 - _tmp59;
  const Scalar _tmp61 = _tmp40 + _tmp60;
  const Scalar _tmp62 = _a[2] * _tmp51;
  const Scalar _tmp63 = _a[0] * _tmp46;
  const Scalar _tmp64 = _tmp62 + _tmp63;
  const Scalar _tmp65 = _a[6] * _tmp64;
  const Scalar _tmp66 = -_tmp53;
  const Scalar _tmp67 = _tmp52 + _tmp66;
  const Scalar _tmp68 = _a[4] * _tmp67;
  const Scalar _tmp69 = _b[4] * _tmp67 + _b[6] * _tmp64;
  const Scalar _tmp70 = -_a[5] * _tmp61 - _a_T_b[5] + _b[5] * _tmp61 - _tmp65 - _tmp68 + _tmp69;
  const Scalar _tmp71 = _tmp43 + _tmp60;
  const Scalar _tmp72 = -_tmp63;
  const Scalar _tmp73 = _tmp62 + _tmp72;
  const Scalar _tmp74 = _a[5] * _tmp73;
  const Scalar _tmp75 = _tmp45 + _tmp47;
  const Scalar _tmp76 = _a[4] * _tmp75;
  const Scalar _tmp77 = _b[4] * _tmp75 + _b[5] * _tmp73;
  const Scalar _tmp78 = -_a[6] * _tmp71 - _a_T_b[6] + _b[6] * _tmp71 - _tmp74 - _tmp76 + _tmp77;
  const Scalar _tmp79 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp80 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp81 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp82 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp83 = -_tmp79 - _tmp80 + _tmp81 + _tmp82;
  const Scalar _tmp84 = _a_T_b[2] * _tmp83;
  const Scalar _tmp85 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp86 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp87 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp88 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp89 = -_tmp85 - _tmp86 - _tmp87 - _tmp88;
  const Scalar _tmp90 = _a_T_b[3] * _tmp89;
  const Scalar _tmp91 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp92 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp93 = (Scalar(1) / Scalar(2)) * _tmp14;
  const Scalar _tmp94 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp95 = -_tmp91 + _tmp92 - _tmp93 + _tmp94;
  const Scalar _tmp96 = -_a_T_b[1] * _tmp95;
  const Scalar _tmp97 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp98 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp99 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp100 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp101 = _tmp100 + _tmp97 - _tmp98 - _tmp99;
  const Scalar _tmp102 = _a_T_b[0] * _tmp101;
  const Scalar _tmp103 = _tmp11 + _tmp17 + _tmp24 + _tmp5;
  const Scalar _tmp104 = std::fabs(_tmp103);
  const Scalar _tmp105 = std::min<Scalar>(_tmp104, _tmp27);
  const Scalar _tmp106 = 1 - std::pow(_tmp105, Scalar(2));
  const Scalar _tmp107 = std::acos(_tmp105);
  const Scalar _tmp108 = _tmp107 / std::sqrt(_tmp106);
  const Scalar _tmp109 = _tmp108 * _tmp26;
  const Scalar _tmp110 = _tmp109 * sqrt_info(0, 0);
  const Scalar _tmp111 = _a_T_b[0] * _tmp89;
  const Scalar _tmp112 = _a_T_b[3] * _tmp101;
  const Scalar _tmp113 = _a_T_b[1] * _tmp83;
  const Scalar _tmp114 = _a_T_b[2] * _tmp95;
  const Scalar _tmp115 = _tmp113 + _tmp114;
  const Scalar _tmp116 = _tmp111 + _tmp112 + _tmp115;
  const Scalar _tmp117 = _tmp25 * ((((-_tmp104 + _tmp27) > 0) - ((-_tmp104 + _tmp27) < 0)) + 1) *
                         (((_tmp103) > 0) - ((_tmp103) < 0));
  const Scalar _tmp118 = _tmp117 / _tmp106;
  const Scalar _tmp119 = _tmp116 * _tmp118;
  const Scalar _tmp120 = _tmp105 * _tmp107 * _tmp117 / (_tmp106 * std::sqrt(_tmp106));
  const Scalar _tmp121 = _tmp120 * _tmp31;
  const Scalar _tmp122 =
      _tmp110 * (-_tmp102 + _tmp84 + _tmp90 + _tmp96) + _tmp116 * _tmp121 - _tmp119 * _tmp31;
  const Scalar _tmp123 = _tmp120 * _tmp33;
  const Scalar _tmp124 = -_a_T_b[1] * _tmp101;
  const Scalar _tmp125 = _a_T_b[2] * _tmp89;
  const Scalar _tmp126 = _a_T_b[3] * _tmp83;
  const Scalar _tmp127 = _a_T_b[0] * _tmp95;
  const Scalar _tmp128 = _tmp126 + _tmp127;
  const Scalar _tmp129 = _tmp109 * sqrt_info(1, 0);
  const Scalar _tmp130 = _tmp118 * _tmp33;
  const Scalar _tmp131 =
      _tmp116 * _tmp123 - _tmp116 * _tmp130 + _tmp129 * (_tmp124 - _tmp125 + _tmp128);
  const Scalar _tmp132 = -_a_T_b[0] * _tmp83;
  const Scalar _tmp133 = _a_T_b[1] * _tmp89;
  const Scalar _tmp134 = _a_T_b[3] * _tmp95;
  const Scalar _tmp135 = _a_T_b[2] * _tmp101;
  const Scalar _tmp136 = _tmp108 * _tmp36;
  const Scalar _tmp137 = _tmp35 * sqrt_info(2, 0);
  const Scalar _tmp138 = _tmp120 * _tmp137;
  const Scalar _tmp139 =
      _tmp116 * _tmp138 - _tmp119 * _tmp137 + _tmp136 * (_tmp132 + _tmp133 + _tmp134 - _tmp135);
  const Scalar _tmp140 = -_tmp58;
  const Scalar _tmp141 = -_tmp41;
  const Scalar _tmp142 = std::pow(_a[3], Scalar(2));
  const Scalar _tmp143 = _tmp140 + _tmp141 + _tmp142 + _tmp38;
  const Scalar _tmp144 = -_a[6] * _tmp143 + _b[6] * _tmp143 - _tmp74 - _tmp76 + _tmp77;
  const Scalar _tmp145 = _tmp141 + _tmp58;
  const Scalar _tmp146 = -_tmp142;
  const Scalar _tmp147 = _tmp146 + _tmp38;
  const Scalar _tmp148 = _tmp145 + _tmp147;
  const Scalar _tmp149 = -_tmp62;
  const Scalar _tmp150 = _tmp149 + _tmp72;
  const Scalar _tmp151 = -_tmp52;
  const Scalar _tmp152 = _tmp151 + _tmp53;
  const Scalar _tmp153 = -_a[4] * _tmp152 - _a[5] * _tmp148 - _a[6] * _tmp150 + _b[4] * _tmp152 +
                         _b[5] * _tmp148 + _b[6] * _tmp150;
  const Scalar _tmp154 = _tmp91 - _tmp92 + _tmp93 - _tmp94;
  const Scalar _tmp155 = _a_T_b[3] * _tmp154;
  const Scalar _tmp156 = _tmp79 + _tmp80 - _tmp81 - _tmp82;
  const Scalar _tmp157 = _a_T_b[0] * _tmp156;
  const Scalar _tmp158 = _tmp135 + _tmp157;
  const Scalar _tmp159 = _tmp133 + _tmp155 + _tmp158;
  const Scalar _tmp160 = _a_T_b[3] * _tmp156;
  const Scalar _tmp161 = _a_T_b[0] * _tmp154;
  const Scalar _tmp162 = _tmp118 * _tmp31;
  const Scalar _tmp163 =
      _tmp110 * (_tmp124 + _tmp125 + _tmp160 - _tmp161) + _tmp121 * _tmp159 - _tmp159 * _tmp162;
  const Scalar _tmp164 = _a_T_b[1] * _tmp154;
  const Scalar _tmp165 = -_a_T_b[2] * _tmp156;
  const Scalar _tmp166 = _tmp102 + _tmp165;
  const Scalar _tmp167 =
      _tmp123 * _tmp159 + _tmp129 * (-_tmp164 + _tmp166 + _tmp90) - _tmp130 * _tmp159;
  const Scalar _tmp168 = _tmp118 * _tmp137;
  const Scalar _tmp169 = -_a_T_b[2] * _tmp154;
  const Scalar _tmp170 = _a_T_b[1] * _tmp156;
  const Scalar _tmp171 = _tmp112 + _tmp170;
  const Scalar _tmp172 =
      _tmp136 * (-_tmp111 + _tmp169 + _tmp171) + _tmp138 * _tmp159 - _tmp159 * _tmp168;
  const Scalar _tmp173 = -_tmp38;
  const Scalar _tmp174 = _tmp146 + _tmp173 + _tmp41 + _tmp58;
  const Scalar _tmp175 = _tmp149 + _tmp63;
  const Scalar _tmp176 = -_tmp45;
  const Scalar _tmp177 = _tmp176 + _tmp48;
  const Scalar _tmp178 = -_a[4] * _tmp177 - _a[5] * _tmp175 - _a[6] * _tmp174 + _b[4] * _tmp177 +
                         _b[5] * _tmp175 + _b[6] * _tmp174;
  const Scalar _tmp179 = _tmp142 + _tmp173;
  const Scalar _tmp180 = _tmp145 + _tmp179;
  const Scalar _tmp181 = -_a[4] * _tmp180 + _b[4] * _tmp180 - _tmp50 - _tmp55 + _tmp56;
  const Scalar _tmp182 = -_tmp100 - _tmp97 + _tmp98 + _tmp99;
  const Scalar _tmp183 = _a_T_b[1] * _tmp182;
  const Scalar _tmp184 = _tmp161 + _tmp183;
  const Scalar _tmp185 = _tmp125 + _tmp126 + _tmp184;
  const Scalar _tmp186 = _a_T_b[2] * _tmp182;
  const Scalar _tmp187 = _tmp155 + _tmp186;
  const Scalar _tmp188 =
      _tmp110 * (_tmp132 - _tmp133 + _tmp187) + _tmp121 * _tmp185 - _tmp162 * _tmp185;
  const Scalar _tmp189 = _a_T_b[3] * _tmp182;
  const Scalar _tmp190 =
      _tmp123 * _tmp185 + _tmp129 * (_tmp111 - _tmp113 + _tmp169 + _tmp189) - _tmp130 * _tmp185;
  const Scalar _tmp191 = -_a_T_b[0] * _tmp182;
  const Scalar _tmp192 = _tmp164 + _tmp191;
  const Scalar _tmp193 =
      _tmp136 * (_tmp192 - _tmp84 + _tmp90) + _tmp138 * _tmp185 - _tmp168 * _tmp185;
  const Scalar _tmp194 = _tmp140 + _tmp41;
  const Scalar _tmp195 = _tmp179 + _tmp194;
  const Scalar _tmp196 = -_a[5] * _tmp195 + _b[5] * _tmp195 - _tmp65 - _tmp68 + _tmp69;
  const Scalar _tmp197 = _tmp147 + _tmp194;
  const Scalar _tmp198 = _tmp176 + _tmp47;
  const Scalar _tmp199 = _tmp151 + _tmp66;
  const Scalar _tmp200 = -_a[4] * _tmp197 - _a[5] * _tmp199 - _a[6] * _tmp198 + _b[4] * _tmp197 +
                         _b[5] * _tmp199 + _b[6] * _tmp198;
  const Scalar _tmp201 = _tmp39 + _tmp42 - 1;
  const Scalar _tmp202 = _tmp59 - 1;
  const Scalar _tmp203 = _tmp202 + _tmp39;
  const Scalar _tmp204 = _tmp202 + _tmp42;
  const Scalar _tmp205 = _tmp85 + _tmp86 + _tmp87 + _tmp88;
  const Scalar _tmp206 = _a_T_b[3] * _tmp205;
  const Scalar _tmp207 = _tmp206 + _tmp96;
  const Scalar _tmp208 = _a_T_b[0] * _tmp205;
  const Scalar _tmp209 = _tmp189 + _tmp208;
  const Scalar _tmp210 = _tmp115 + _tmp209;
  const Scalar _tmp211 =
      _tmp110 * (_tmp191 + _tmp207 + _tmp84) + _tmp121 * _tmp210 - _tmp162 * _tmp210;
  const Scalar _tmp212 = _a_T_b[2] * _tmp205;
  const Scalar _tmp213 =
      _tmp123 * _tmp210 + _tmp129 * (_tmp128 - _tmp183 - _tmp212) - _tmp130 * _tmp210;
  const Scalar _tmp214 = _a_T_b[1] * _tmp205;
  const Scalar _tmp215 = _tmp134 + _tmp214;
  const Scalar _tmp216 =
      _tmp136 * (_tmp132 - _tmp186 + _tmp215) + _tmp138 * _tmp210 - _tmp168 * _tmp210;
  const Scalar _tmp217 = _tmp160 + _tmp212;
  const Scalar _tmp218 = _tmp158 + _tmp215;
  const Scalar _tmp219 = _tmp118 * _tmp218;
  const Scalar _tmp220 =
      _tmp110 * (_tmp124 - _tmp127 + _tmp217) + _tmp121 * _tmp218 - _tmp219 * _tmp31;
  const Scalar _tmp221 = _tmp123 * _tmp218 + _tmp129 * (_tmp166 + _tmp207) - _tmp219 * _tmp33;
  const Scalar _tmp222 =
      _tmp136 * (-_tmp114 + _tmp171 - _tmp208) - _tmp137 * _tmp219 + _tmp138 * _tmp218;
  const Scalar _tmp223 = _tmp184 + _tmp217;
  const Scalar _tmp224 = _tmp118 * _tmp223;
  const Scalar _tmp225 =
      _tmp110 * (-_tmp157 + _tmp187 - _tmp214) + _tmp121 * _tmp223 - _tmp224 * _tmp31;
  const Scalar _tmp226 =
      _tmp123 * _tmp223 + _tmp129 * (_tmp169 - _tmp170 + _tmp209) - _tmp130 * _tmp223;
  const Scalar _tmp227 =
      _tmp136 * (_tmp165 + _tmp192 + _tmp206) - _tmp137 * _tmp224 + _tmp138 * _tmp223;
  const Scalar _tmp228 = std::pow(sqrt_info(4, 0), Scalar(2));
  const Scalar _tmp229 = std::pow(sqrt_info(5, 0), Scalar(2));
  const Scalar _tmp230 = _tmp153 * _tmp229;
  const Scalar _tmp231 = _tmp144 * _tmp228;
  const Scalar _tmp232 = _tmp204 * _tmp229;
  const Scalar _tmp233 = _tmp229 * _tmp71;
  const Scalar _tmp234 = std::pow(sqrt_info(3, 0), Scalar(2));
  const Scalar _tmp235 = _tmp196 * _tmp234;
  const Scalar _tmp236 = _tmp178 * _tmp234;
  const Scalar _tmp237 = _tmp181 * _tmp229;
  const Scalar _tmp238 = _tmp200 * _tmp228;
  const Scalar _tmp239 = _tmp177 * _tmp229;
  const Scalar _tmp240 = _tmp203 * _tmp228;
  const Scalar _tmp241 = _tmp201 * _tmp234;
  const Scalar _tmp242 = _tmp150 * _tmp228;
  const Scalar _tmp243 = _tmp228 * _tmp67;
  const Scalar _tmp244 = _tmp228 * _tmp61;
  const Scalar _tmp245 = _tmp199 * _tmp234;
  const Scalar _tmp246 = _tmp175 * _tmp229;
  const Scalar _tmp247 = _tmp234 * _tmp44;
  const Scalar _tmp248 = _tmp234 * _tmp54;
  const Scalar _tmp249 = _tmp229 * _tmp78;
  const Scalar _tmp250 = _tmp228 * _tmp70;
  const Scalar _tmp251 = _tmp234 * _tmp57;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp32;
    _res(1, 0) = _tmp34;
    _res(2, 0) = _tmp37;
    _res(3, 0) = _tmp57 * sqrt_info(3, 0);
    _res(4, 0) = _tmp70 * sqrt_info(4, 0);
    _res(5, 0) = _tmp78 * sqrt_info(5, 0);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp122;
    _jacobian(1, 0) = _tmp131;
    _jacobian(2, 0) = _tmp139;
    _jacobian(3, 0) = 0;
    _jacobian(4, 0) = _tmp144 * sqrt_info(4, 0);
    _jacobian(5, 0) = _tmp153 * sqrt_info(5, 0);
    _jacobian(0, 1) = _tmp163;
    _jacobian(1, 1) = _tmp167;
    _jacobian(2, 1) = _tmp172;
    _jacobian(3, 1) = _tmp178 * sqrt_info(3, 0);
    _jacobian(4, 1) = 0;
    _jacobian(5, 1) = _tmp181 * sqrt_info(5, 0);
    _jacobian(0, 2) = _tmp188;
    _jacobian(1, 2) = _tmp190;
    _jacobian(2, 2) = _tmp193;
    _jacobian(3, 2) = _tmp196 * sqrt_info(3, 0);
    _jacobian(4, 2) = _tmp200 * sqrt_info(4, 0);
    _jacobian(5, 2) = 0;
    _jacobian(0, 3) = 0;
    _jacobian(1, 3) = 0;
    _jacobian(2, 3) = 0;
    _jacobian(3, 3) = _tmp201 * sqrt_info(3, 0);
    _jacobian(4, 3) = _tmp152 * sqrt_info(4, 0);
    _jacobian(5, 3) = _tmp177 * sqrt_info(5, 0);
    _jacobian(0, 4) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(3, 4) = _tmp199 * sqrt_info(3, 0);
    _jacobian(4, 4) = _tmp203 * sqrt_info(4, 0);
    _jacobian(5, 4) = _tmp175 * sqrt_info(5, 0);
    _jacobian(0, 5) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(3, 5) = _tmp198 * sqrt_info(3, 0);
    _jacobian(4, 5) = _tmp150 * sqrt_info(4, 0);
    _jacobian(5, 5) = _tmp204 * sqrt_info(5, 0);
    _jacobian(0, 6) = _tmp211;
    _jacobian(1, 6) = _tmp213;
    _jacobian(2, 6) = _tmp216;
    _jacobian(3, 6) = 0;
    _jacobian(4, 6) = 0;
    _jacobian(5, 6) = 0;
    _jacobian(0, 7) = _tmp220;
    _jacobian(1, 7) = _tmp221;
    _jacobian(2, 7) = _tmp222;
    _jacobian(3, 7) = 0;
    _jacobian(4, 7) = 0;
    _jacobian(5, 7) = 0;
    _jacobian(0, 8) = _tmp225;
    _jacobian(1, 8) = _tmp226;
    _jacobian(2, 8) = _tmp227;
    _jacobian(3, 8) = 0;
    _jacobian(4, 8) = 0;
    _jacobian(5, 8) = 0;
    _jacobian(0, 9) = 0;
    _jacobian(1, 9) = 0;
    _jacobian(2, 9) = 0;
    _jacobian(3, 9) = _tmp44 * sqrt_info(3, 0);
    _jacobian(4, 9) = _tmp67 * sqrt_info(4, 0);
    _jacobian(5, 9) = _tmp75 * sqrt_info(5, 0);
    _jacobian(0, 10) = 0;
    _jacobian(1, 10) = 0;
    _jacobian(2, 10) = 0;
    _jacobian(3, 10) = _tmp54 * sqrt_info(3, 0);
    _jacobian(4, 10) = _tmp61 * sqrt_info(4, 0);
    _jacobian(5, 10) = _tmp73 * sqrt_info(5, 0);
    _jacobian(0, 11) = 0;
    _jacobian(1, 11) = 0;
    _jacobian(2, 11) = 0;
    _jacobian(3, 11) = _tmp49 * sqrt_info(3, 0);
    _jacobian(4, 11) = _tmp64 * sqrt_info(4, 0);
    _jacobian(5, 11) = _tmp71 * sqrt_info(5, 0);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) = std::pow(_tmp122, Scalar(2)) + std::pow(_tmp131, Scalar(2)) +
                     std::pow(_tmp139, Scalar(2)) + std::pow(_tmp144, Scalar(2)) * _tmp228 +
                     std::pow(_tmp153, Scalar(2)) * _tmp229;
    _hessian(1, 0) = _tmp122 * _tmp163 + _tmp131 * _tmp167 + _tmp139 * _tmp172 + _tmp181 * _tmp230;
    _hessian(2, 0) = _tmp122 * _tmp188 + _tmp131 * _tmp190 + _tmp139 * _tmp193 + _tmp200 * _tmp231;
    _hessian(3, 0) = _tmp152 * _tmp231 + _tmp177 * _tmp230;
    _hessian(4, 0) = _tmp175 * _tmp230 + _tmp203 * _tmp231;
    _hessian(5, 0) = _tmp150 * _tmp231 + _tmp153 * _tmp232;
    _hessian(6, 0) = _tmp122 * _tmp211 + _tmp131 * _tmp213 + _tmp139 * _tmp216;
    _hessian(7, 0) = _tmp122 * _tmp220 + _tmp131 * _tmp221 + _tmp139 * _tmp222;
    _hessian(8, 0) = _tmp122 * _tmp225 + _tmp131 * _tmp226 + _tmp139 * _tmp227;
    _hessian(9, 0) = _tmp230 * _tmp75 + _tmp231 * _tmp67;
    _hessian(10, 0) = _tmp230 * _tmp73 + _tmp231 * _tmp61;
    _hessian(11, 0) = _tmp153 * _tmp233 + _tmp231 * _tmp64;
    _hessian(1, 1) = std::pow(_tmp163, Scalar(2)) + std::pow(_tmp167, Scalar(2)) +
                     std::pow(_tmp172, Scalar(2)) + std::pow(_tmp178, Scalar(2)) * _tmp234 +
                     std::pow(_tmp181, Scalar(2)) * _tmp229;
    _hessian(2, 1) = _tmp163 * _tmp188 + _tmp167 * _tmp190 + _tmp172 * _tmp193 + _tmp178 * _tmp235;
    _hessian(3, 1) = _tmp177 * _tmp237 + _tmp201 * _tmp236;
    _hessian(4, 1) = _tmp175 * _tmp237 + _tmp199 * _tmp236;
    _hessian(5, 1) = _tmp181 * _tmp232 + _tmp198 * _tmp236;
    _hessian(6, 1) = _tmp163 * _tmp211 + _tmp167 * _tmp213 + _tmp172 * _tmp216;
    _hessian(7, 1) = _tmp163 * _tmp220 + _tmp167 * _tmp221 + _tmp172 * _tmp222;
    _hessian(8, 1) = _tmp163 * _tmp225 + _tmp167 * _tmp226 + _tmp172 * _tmp227;
    _hessian(9, 1) = _tmp236 * _tmp44 + _tmp237 * _tmp75;
    _hessian(10, 1) = _tmp236 * _tmp54 + _tmp237 * _tmp73;
    _hessian(11, 1) = _tmp181 * _tmp233 + _tmp236 * _tmp49;
    _hessian(2, 2) = std::pow(_tmp188, Scalar(2)) + std::pow(_tmp190, Scalar(2)) +
                     std::pow(_tmp193, Scalar(2)) + std::pow(_tmp196, Scalar(2)) * _tmp234 +
                     std::pow(_tmp200, Scalar(2)) * _tmp228;
    _hessian(3, 2) = _tmp152 * _tmp238 + _tmp201 * _tmp235;
    _hessian(4, 2) = _tmp199 * _tmp235 + _tmp203 * _tmp238;
    _hessian(5, 2) = _tmp150 * _tmp238 + _tmp198 * _tmp235;
    _hessian(6, 2) = _tmp188 * _tmp211 + _tmp190 * _tmp213 + _tmp193 * _tmp216;
    _hessian(7, 2) = _tmp188 * _tmp220 + _tmp190 * _tmp221 + _tmp193 * _tmp222;
    _hessian(8, 2) = _tmp188 * _tmp225 + _tmp190 * _tmp226 + _tmp193 * _tmp227;
    _hessian(9, 2) = _tmp235 * _tmp44 + _tmp238 * _tmp67;
    _hessian(10, 2) = _tmp235 * _tmp54 + _tmp238 * _tmp61;
    _hessian(11, 2) = _tmp235 * _tmp49 + _tmp238 * _tmp64;
    _hessian(3, 3) = std::pow(_tmp152, Scalar(2)) * _tmp228 +
                     std::pow(_tmp177, Scalar(2)) * _tmp229 +
                     std::pow(_tmp201, Scalar(2)) * _tmp234;
    _hessian(4, 3) = _tmp152 * _tmp240 + _tmp175 * _tmp239 + _tmp199 * _tmp241;
    _hessian(5, 3) = _tmp152 * _tmp242 + _tmp177 * _tmp232 + _tmp198 * _tmp241;
    _hessian(9, 3) = _tmp152 * _tmp243 + _tmp239 * _tmp75 + _tmp241 * _tmp44;
    _hessian(10, 3) = _tmp152 * _tmp244 + _tmp239 * _tmp73 + _tmp241 * _tmp54;
    _hessian(11, 3) = _tmp152 * _tmp228 * _tmp64 + _tmp177 * _tmp233 + _tmp241 * _tmp49;
    _hessian(4, 4) = std::pow(_tmp175, Scalar(2)) * _tmp229 +
                     std::pow(_tmp199, Scalar(2)) * _tmp234 +
                     std::pow(_tmp203, Scalar(2)) * _tmp228;
    _hessian(5, 4) = _tmp150 * _tmp240 + _tmp175 * _tmp232 + _tmp198 * _tmp245;
    _hessian(9, 4) = _tmp199 * _tmp247 + _tmp240 * _tmp67 + _tmp246 * _tmp75;
    _hessian(10, 4) = _tmp240 * _tmp61 + _tmp245 * _tmp54 + _tmp246 * _tmp73;
    _hessian(11, 4) = _tmp175 * _tmp233 + _tmp240 * _tmp64 + _tmp245 * _tmp49;
    _hessian(5, 5) = std::pow(_tmp150, Scalar(2)) * _tmp228 +
                     std::pow(_tmp198, Scalar(2)) * _tmp234 +
                     std::pow(_tmp204, Scalar(2)) * _tmp229;
    _hessian(9, 5) = _tmp150 * _tmp243 + _tmp198 * _tmp247 + _tmp232 * _tmp75;
    _hessian(10, 5) = _tmp150 * _tmp244 + _tmp198 * _tmp248 + _tmp232 * _tmp73;
    _hessian(11, 5) = _tmp198 * _tmp234 * _tmp49 + _tmp232 * _tmp71 + _tmp242 * _tmp64;
    _hessian(6, 6) =
        std::pow(_tmp211, Scalar(2)) + std::pow(_tmp213, Scalar(2)) + std::pow(_tmp216, Scalar(2));
    _hessian(7, 6) = _tmp211 * _tmp220 + _tmp213 * _tmp221 + _tmp216 * _tmp222;
    _hessian(8, 6) = _tmp211 * _tmp225 + _tmp213 * _tmp226 + _tmp216 * _tmp227;
    _hessian(7, 7) =
        std::pow(_tmp220, Scalar(2)) + std::pow(_tmp221, Scalar(2)) + std::pow(_tmp222, Scalar(2));
    _hessian(8, 7) = _tmp220 * _tmp225 + _tmp221 * _tmp226 + _tmp222 * _tmp227;
    _hessian(8, 8) =
        std::pow(_tmp225, Scalar(2)) + std::pow(_tmp226, Scalar(2)) + std::pow(_tmp227, Scalar(2));
    _hessian(9, 9) = _tmp228 * std::pow(_tmp67, Scalar(2)) + _tmp229 * std::pow(_tmp75, Scalar(2)) +
                     _tmp234 * std::pow(_tmp44, Scalar(2));
    _hessian(10, 9) = _tmp229 * _tmp73 * _tmp75 + _tmp244 * _tmp67 + _tmp247 * _tmp54;
    _hessian(11, 9) = _tmp233 * _tmp75 + _tmp243 * _tmp64 + _tmp247 * _tmp49;
    _hessian(10, 10) = _tmp228 * std::pow(_tmp61, Scalar(2)) +
                       _tmp229 * std::pow(_tmp73, Scalar(2)) +
                       _tmp234 * std::pow(_tmp54, Scalar(2));
    _hessian(11, 10) = _tmp233 * _tmp73 + _tmp244 * _tmp64 + _tmp248 * _tmp49;
    _hessian(11, 11) = _tmp228 * std::pow(_tmp64, Scalar(2)) +
                       _tmp229 * std::pow(_tmp71, Scalar(2)) +
                       _tmp234 * std::pow(_tmp49, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp122 * _tmp32 + _tmp131 * _tmp34 + _tmp139 * _tmp37 + _tmp144 * _tmp250 +
                 _tmp153 * _tmp249;
    _rhs(1, 0) = _tmp163 * _tmp32 + _tmp167 * _tmp34 + _tmp172 * _tmp37 + _tmp178 * _tmp251 +
                 _tmp181 * _tmp249;
    _rhs(2, 0) = _tmp188 * _tmp32 + _tmp190 * _tmp34 + _tmp193 * _tmp37 + _tmp200 * _tmp250 +
                 _tmp235 * _tmp57;
    _rhs(3, 0) = _tmp152 * _tmp250 + _tmp177 * _tmp249 + _tmp201 * _tmp251;
    _rhs(4, 0) = _tmp175 * _tmp249 + _tmp199 * _tmp251 + _tmp203 * _tmp250;
    _rhs(5, 0) = _tmp150 * _tmp250 + _tmp198 * _tmp251 + _tmp232 * _tmp78;
    _rhs(6, 0) = _tmp211 * _tmp32 + _tmp213 * _tmp34 + _tmp216 * _tmp37;
    _rhs(7, 0) = _tmp220 * _tmp32 + _tmp221 * _tmp34 + _tmp222 * _tmp37;
    _rhs(8, 0) = _tmp225 * _tmp32 + _tmp226 * _tmp34 + _tmp227 * _tmp37;
    _rhs(9, 0) = _tmp249 * _tmp75 + _tmp250 * _tmp67 + _tmp251 * _tmp44;
    _rhs(10, 0) = _tmp249 * _tmp73 + _tmp250 * _tmp61 + _tmp251 * _tmp54;
    _rhs(11, 0) = _tmp233 * _tmp78 + _tmp250 * _tmp64 + _tmp251 * _tmp49;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
