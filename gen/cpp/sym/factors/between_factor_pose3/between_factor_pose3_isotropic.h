// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Pass in a single scalar if
 *                isotropic, a vector if diagonal, and a square matrix otherwise.
 *     jacobian: (6x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3Isotropic(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                                 const sym::Pose3<Scalar>& a_T_b, const Scalar sqrt_info,
                                 const Scalar epsilon,
                                 Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                                 Eigen::Matrix<Scalar, 6, 12>* const jacobian = nullptr,
                                 Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                 Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 915

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (241)
  const Scalar _tmp0 = _a[0] * _b[1];
  const Scalar _tmp1 = _a[2] * _b[3];
  const Scalar _tmp2 = _a[3] * _b[2];
  const Scalar _tmp3 = _a[1] * _b[0];
  const Scalar _tmp4 = -_tmp0 - _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _a[2] * _b[1];
  const Scalar _tmp6 = _a[0] * _b[3];
  const Scalar _tmp7 = _a[1] * _b[2];
  const Scalar _tmp8 = _a[3] * _b[0];
  const Scalar _tmp9 = _tmp5 - _tmp6 - _tmp7 + _tmp8;
  const Scalar _tmp10 = _a[3] * _b[1];
  const Scalar _tmp11 = _a[1] * _b[3];
  const Scalar _tmp12 = _a[0] * _b[2];
  const Scalar _tmp13 = _a[2] * _b[0];
  const Scalar _tmp14 = _tmp10 - _tmp11 + _tmp12 - _tmp13;
  const Scalar _tmp15 = _a[1] * _b[1];
  const Scalar _tmp16 = _a[2] * _b[2];
  const Scalar _tmp17 = _a[0] * _b[0];
  const Scalar _tmp18 = _a[3] * _b[3];
  const Scalar _tmp19 = _tmp15 + _tmp16 + _tmp17 + _tmp18;
  const Scalar _tmp20 =
      -_a_T_b[0] * _tmp19 - _a_T_b[1] * _tmp4 + _a_T_b[2] * _tmp14 + _a_T_b[3] * _tmp9;
  const Scalar _tmp21 = _a_T_b[2] * _tmp4;
  const Scalar _tmp22 = _a_T_b[0] * _tmp9;
  const Scalar _tmp23 = _a_T_b[1] * _tmp14;
  const Scalar _tmp24 = -_tmp21 - _tmp22 - _tmp23;
  const Scalar _tmp25 = _a_T_b[3] * _tmp19;
  const Scalar _tmp26 = 1 - epsilon;
  const Scalar _tmp27 = std::min<Scalar>(_tmp26, std::fabs(_tmp24 - _tmp25));
  const Scalar _tmp28 =
      sqrt_info *
      (2 * std::min<Scalar>(0, (((-_tmp24 + _tmp25) > 0) - ((-_tmp24 + _tmp25) < 0))) + 1);
  const Scalar _tmp29 = 2 * _tmp28;
  const Scalar _tmp30 =
      _tmp29 * std::acos(_tmp27) / std::sqrt(Scalar(1 - std::pow(_tmp27, Scalar(2))));
  const Scalar _tmp31 = _tmp20 * _tmp30;
  const Scalar _tmp32 =
      _a_T_b[0] * _tmp4 - _a_T_b[1] * _tmp19 - _a_T_b[2] * _tmp9 + _a_T_b[3] * _tmp14;
  const Scalar _tmp33 = _tmp30 * _tmp32;
  const Scalar _tmp34 =
      -_a_T_b[0] * _tmp14 + _a_T_b[1] * _tmp9 - _a_T_b[2] * _tmp19 + _a_T_b[3] * _tmp4;
  const Scalar _tmp35 = _tmp30 * _tmp34;
  const Scalar _tmp36 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp37 = 2 * _tmp36;
  const Scalar _tmp38 = -_tmp37;
  const Scalar _tmp39 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp40 = 2 * _tmp39;
  const Scalar _tmp41 = -_tmp40;
  const Scalar _tmp42 = _tmp38 + _tmp41 + 1;
  const Scalar _tmp43 = 2 * _a[0];
  const Scalar _tmp44 = _a[2] * _tmp43;
  const Scalar _tmp45 = 2 * _a[1] * _a[3];
  const Scalar _tmp46 = -_tmp45;
  const Scalar _tmp47 = _tmp44 + _tmp46;
  const Scalar _tmp48 = _a[6] * _tmp47;
  const Scalar _tmp49 = _a[1] * _tmp43;
  const Scalar _tmp50 = 2 * _a[2];
  const Scalar _tmp51 = _a[3] * _tmp50;
  const Scalar _tmp52 = _tmp49 + _tmp51;
  const Scalar _tmp53 = _a[5] * _tmp52;
  const Scalar _tmp54 = _b[5] * _tmp52 + _b[6] * _tmp47;
  const Scalar _tmp55 = -_a[4] * _tmp42 - _a_T_b[4] + _b[4] * _tmp42 - _tmp48 - _tmp53 + _tmp54;
  const Scalar _tmp56 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp57 = 2 * _tmp56;
  const Scalar _tmp58 = 1 - _tmp57;
  const Scalar _tmp59 = _tmp38 + _tmp58;
  const Scalar _tmp60 = _a[1] * _tmp50;
  const Scalar _tmp61 = _a[3] * _tmp43;
  const Scalar _tmp62 = _tmp60 + _tmp61;
  const Scalar _tmp63 = _a[6] * _tmp62;
  const Scalar _tmp64 = -_tmp51;
  const Scalar _tmp65 = _tmp49 + _tmp64;
  const Scalar _tmp66 = _a[4] * _tmp65;
  const Scalar _tmp67 = _b[4] * _tmp65 + _b[6] * _tmp62;
  const Scalar _tmp68 = -_a[5] * _tmp59 - _a_T_b[5] + _b[5] * _tmp59 - _tmp63 - _tmp66 + _tmp67;
  const Scalar _tmp69 = _tmp41 + _tmp58;
  const Scalar _tmp70 = -_tmp61;
  const Scalar _tmp71 = _tmp60 + _tmp70;
  const Scalar _tmp72 = _a[5] * _tmp71;
  const Scalar _tmp73 = _tmp44 + _tmp45;
  const Scalar _tmp74 = _a[4] * _tmp73;
  const Scalar _tmp75 = _b[4] * _tmp73 + _b[5] * _tmp71;
  const Scalar _tmp76 = -_a[6] * _tmp69 - _a_T_b[6] + _b[6] * _tmp69 - _tmp72 - _tmp74 + _tmp75;
  const Scalar _tmp77 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp78 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp79 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp80 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp81 = _tmp77 - _tmp78 - _tmp79 + _tmp80;
  const Scalar _tmp82 = _a_T_b[3] * _tmp81;
  const Scalar _tmp83 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp84 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp85 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp86 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp87 = -_tmp83 - _tmp84 - _tmp85 - _tmp86;
  const Scalar _tmp88 = _a_T_b[0] * _tmp87;
  const Scalar _tmp89 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp90 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp91 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp92 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp93 = -_tmp89 - _tmp90 + _tmp91 + _tmp92;
  const Scalar _tmp94 = _a_T_b[1] * _tmp93;
  const Scalar _tmp95 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp96 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp97 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp98 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp99 = -_tmp95 + _tmp96 - _tmp97 + _tmp98;
  const Scalar _tmp100 = _a_T_b[2] * _tmp99;
  const Scalar _tmp101 = _tmp100 + _tmp94;
  const Scalar _tmp102 = _tmp101 + _tmp82 + _tmp88;
  const Scalar _tmp103 = _tmp21 + _tmp22 + _tmp23 + _tmp25;
  const Scalar _tmp104 = std::fabs(_tmp103);
  const Scalar _tmp105 = std::min<Scalar>(_tmp104, _tmp26);
  const Scalar _tmp106 = 1 - std::pow(_tmp105, Scalar(2));
  const Scalar _tmp107 = _tmp28 * ((((-_tmp104 + _tmp26) > 0) - ((-_tmp104 + _tmp26) < 0)) + 1) *
                         (((_tmp103) > 0) - ((_tmp103) < 0));
  const Scalar _tmp108 = _tmp107 / _tmp106;
  const Scalar _tmp109 = _tmp108 * _tmp20;
  const Scalar _tmp110 = std::acos(_tmp105);
  const Scalar _tmp111 = _tmp105 * _tmp107 * _tmp110 / (_tmp106 * std::sqrt(_tmp106));
  const Scalar _tmp112 = _tmp111 * _tmp20;
  const Scalar _tmp113 = _a_T_b[2] * _tmp93;
  const Scalar _tmp114 = _a_T_b[3] * _tmp87;
  const Scalar _tmp115 = -_a_T_b[1] * _tmp99;
  const Scalar _tmp116 = _a_T_b[0] * _tmp81;
  const Scalar _tmp117 = _tmp110 * _tmp29 / std::sqrt(_tmp106);
  const Scalar _tmp118 =
      -_tmp102 * _tmp109 + _tmp102 * _tmp112 + _tmp117 * (_tmp113 + _tmp114 + _tmp115 - _tmp116);
  const Scalar _tmp119 = -_a_T_b[1] * _tmp81;
  const Scalar _tmp120 = _a_T_b[2] * _tmp87;
  const Scalar _tmp121 = _a_T_b[3] * _tmp93;
  const Scalar _tmp122 = _a_T_b[0] * _tmp99;
  const Scalar _tmp123 = _tmp121 + _tmp122;
  const Scalar _tmp124 = _tmp108 * _tmp32;
  const Scalar _tmp125 = _tmp111 * _tmp32;
  const Scalar _tmp126 =
      -_tmp102 * _tmp124 + _tmp102 * _tmp125 + _tmp117 * (_tmp119 - _tmp120 + _tmp123);
  const Scalar _tmp127 = _tmp111 * _tmp34;
  const Scalar _tmp128 = -_a_T_b[0] * _tmp93;
  const Scalar _tmp129 = _a_T_b[1] * _tmp87;
  const Scalar _tmp130 = _a_T_b[3] * _tmp99;
  const Scalar _tmp131 = _a_T_b[2] * _tmp81;
  const Scalar _tmp132 = _tmp108 * _tmp34;
  const Scalar _tmp133 =
      _tmp102 * _tmp127 - _tmp102 * _tmp132 + _tmp117 * (_tmp128 + _tmp129 + _tmp130 - _tmp131);
  const Scalar _tmp134 = -_tmp56;
  const Scalar _tmp135 = -_tmp39;
  const Scalar _tmp136 = std::pow(_a[3], Scalar(2));
  const Scalar _tmp137 = _tmp134 + _tmp135 + _tmp136 + _tmp36;
  const Scalar _tmp138 = -_a[6] * _tmp137 + _b[6] * _tmp137 - _tmp72 - _tmp74 + _tmp75;
  const Scalar _tmp139 = _tmp135 + _tmp56;
  const Scalar _tmp140 = -_tmp136;
  const Scalar _tmp141 = _tmp140 + _tmp36;
  const Scalar _tmp142 = _tmp139 + _tmp141;
  const Scalar _tmp143 = -_tmp60;
  const Scalar _tmp144 = _tmp143 + _tmp70;
  const Scalar _tmp145 = -_tmp49;
  const Scalar _tmp146 = _tmp145 + _tmp51;
  const Scalar _tmp147 = -_a[4] * _tmp146 - _a[5] * _tmp142 - _a[6] * _tmp144 + _b[4] * _tmp146 +
                         _b[5] * _tmp142 + _b[6] * _tmp144;
  const Scalar _tmp148 = _tmp95 - _tmp96 + _tmp97 - _tmp98;
  const Scalar _tmp149 = _a_T_b[3] * _tmp148;
  const Scalar _tmp150 = _tmp89 + _tmp90 - _tmp91 - _tmp92;
  const Scalar _tmp151 = _a_T_b[0] * _tmp150;
  const Scalar _tmp152 = _tmp131 + _tmp151;
  const Scalar _tmp153 = _tmp129 + _tmp149 + _tmp152;
  const Scalar _tmp154 = _a_T_b[0] * _tmp148;
  const Scalar _tmp155 = _a_T_b[3] * _tmp150;
  const Scalar _tmp156 = _tmp119 + _tmp155;
  const Scalar _tmp157 =
      -_tmp109 * _tmp153 + _tmp112 * _tmp153 + _tmp117 * (_tmp120 - _tmp154 + _tmp156);
  const Scalar _tmp158 = _a_T_b[1] * _tmp148;
  const Scalar _tmp159 = -_a_T_b[2] * _tmp150;
  const Scalar _tmp160 = _tmp116 + _tmp159;
  const Scalar _tmp161 =
      _tmp117 * (_tmp114 - _tmp158 + _tmp160) - _tmp124 * _tmp153 + _tmp125 * _tmp153;
  const Scalar _tmp162 = -_a_T_b[2] * _tmp148;
  const Scalar _tmp163 = _a_T_b[1] * _tmp150;
  const Scalar _tmp164 = _tmp163 + _tmp82;
  const Scalar _tmp165 =
      _tmp117 * (_tmp162 + _tmp164 - _tmp88) + _tmp127 * _tmp153 - _tmp132 * _tmp153;
  const Scalar _tmp166 = -_tmp36;
  const Scalar _tmp167 = _tmp140 + _tmp166 + _tmp39 + _tmp56;
  const Scalar _tmp168 = _tmp143 + _tmp61;
  const Scalar _tmp169 = -_tmp44;
  const Scalar _tmp170 = _tmp169 + _tmp46;
  const Scalar _tmp171 = -_a[4] * _tmp170 - _a[5] * _tmp168 - _a[6] * _tmp167 + _b[4] * _tmp170 +
                         _b[5] * _tmp168 + _b[6] * _tmp167;
  const Scalar _tmp172 = _tmp136 + _tmp166;
  const Scalar _tmp173 = _tmp139 + _tmp172;
  const Scalar _tmp174 = -_a[4] * _tmp173 + _b[4] * _tmp173 - _tmp48 - _tmp53 + _tmp54;
  const Scalar _tmp175 = -_tmp77 + _tmp78 + _tmp79 - _tmp80;
  const Scalar _tmp176 = _a_T_b[1] * _tmp175;
  const Scalar _tmp177 = _tmp154 + _tmp176;
  const Scalar _tmp178 = _tmp120 + _tmp121 + _tmp177;
  const Scalar _tmp179 = _a_T_b[2] * _tmp175;
  const Scalar _tmp180 = _tmp149 + _tmp179;
  const Scalar _tmp181 =
      -_tmp109 * _tmp178 + _tmp112 * _tmp178 + _tmp117 * (_tmp128 - _tmp129 + _tmp180);
  const Scalar _tmp182 = _a_T_b[3] * _tmp175;
  const Scalar _tmp183 = _tmp162 + _tmp182;
  const Scalar _tmp184 =
      _tmp117 * (_tmp183 + _tmp88 - _tmp94) - _tmp124 * _tmp178 + _tmp125 * _tmp178;
  const Scalar _tmp185 = -_a_T_b[0] * _tmp175;
  const Scalar _tmp186 = _tmp158 + _tmp185;
  const Scalar _tmp187 =
      _tmp117 * (-_tmp113 + _tmp114 + _tmp186) + _tmp127 * _tmp178 - _tmp132 * _tmp178;
  const Scalar _tmp188 = _tmp134 + _tmp39;
  const Scalar _tmp189 = _tmp172 + _tmp188;
  const Scalar _tmp190 = -_a[5] * _tmp189 + _b[5] * _tmp189 - _tmp63 - _tmp66 + _tmp67;
  const Scalar _tmp191 = _tmp141 + _tmp188;
  const Scalar _tmp192 = _tmp169 + _tmp45;
  const Scalar _tmp193 = _tmp145 + _tmp64;
  const Scalar _tmp194 = -_a[4] * _tmp191 - _a[5] * _tmp193 - _a[6] * _tmp192 + _b[4] * _tmp191 +
                         _b[5] * _tmp193 + _b[6] * _tmp192;
  const Scalar _tmp195 = _tmp37 + _tmp40 - 1;
  const Scalar _tmp196 = _tmp57 - 1;
  const Scalar _tmp197 = _tmp196 + _tmp37;
  const Scalar _tmp198 = _tmp196 + _tmp40;
  const Scalar _tmp199 = _tmp83 + _tmp84 + _tmp85 + _tmp86;
  const Scalar _tmp200 = _a_T_b[3] * _tmp199;
  const Scalar _tmp201 = _tmp115 + _tmp200;
  const Scalar _tmp202 = _a_T_b[0] * _tmp199;
  const Scalar _tmp203 = _tmp101 + _tmp182 + _tmp202;
  const Scalar _tmp204 =
      -_tmp109 * _tmp203 + _tmp112 * _tmp203 + _tmp117 * (_tmp113 + _tmp185 + _tmp201);
  const Scalar _tmp205 = _a_T_b[2] * _tmp199;
  const Scalar _tmp206 =
      _tmp117 * (_tmp123 - _tmp176 - _tmp205) - _tmp124 * _tmp203 + _tmp125 * _tmp203;
  const Scalar _tmp207 = _a_T_b[1] * _tmp199;
  const Scalar _tmp208 = _tmp130 + _tmp207;
  const Scalar _tmp209 =
      _tmp117 * (_tmp128 - _tmp179 + _tmp208) + _tmp127 * _tmp203 - _tmp132 * _tmp203;
  const Scalar _tmp210 = _tmp152 + _tmp208;
  const Scalar _tmp211 = _tmp108 * _tmp210;
  const Scalar _tmp212 =
      _tmp112 * _tmp210 + _tmp117 * (-_tmp122 + _tmp156 + _tmp205) - _tmp20 * _tmp211;
  const Scalar _tmp213 = _tmp117 * (_tmp160 + _tmp201) + _tmp125 * _tmp210 - _tmp211 * _tmp32;
  const Scalar _tmp214 =
      _tmp117 * (-_tmp100 + _tmp164 - _tmp202) + _tmp127 * _tmp210 - _tmp211 * _tmp34;
  const Scalar _tmp215 = _tmp155 + _tmp177 + _tmp205;
  const Scalar _tmp216 =
      -_tmp109 * _tmp215 + _tmp112 * _tmp215 + _tmp117 * (-_tmp151 + _tmp180 - _tmp207);
  const Scalar _tmp217 =
      _tmp117 * (-_tmp163 + _tmp183 + _tmp202) - _tmp124 * _tmp215 + _tmp125 * _tmp215;
  const Scalar _tmp218 =
      _tmp117 * (_tmp159 + _tmp186 + _tmp200) + _tmp127 * _tmp215 - _tmp132 * _tmp215;
  const Scalar _tmp219 = std::pow(sqrt_info, Scalar(2));
  const Scalar _tmp220 = _tmp147 * _tmp219;
  const Scalar _tmp221 = _tmp138 * _tmp219;
  const Scalar _tmp222 = _tmp146 * _tmp219;
  const Scalar _tmp223 = _tmp168 * _tmp219;
  const Scalar _tmp224 = _tmp144 * _tmp219;
  const Scalar _tmp225 = _tmp219 * _tmp65;
  const Scalar _tmp226 = _tmp219 * _tmp59;
  const Scalar _tmp227 = _tmp219 * _tmp71;
  const Scalar _tmp228 = _tmp219 * _tmp62;
  const Scalar _tmp229 = _tmp190 * _tmp219;
  const Scalar _tmp230 = _tmp171 * _tmp219;
  const Scalar _tmp231 = _tmp174 * _tmp219;
  const Scalar _tmp232 = _tmp195 * _tmp219;
  const Scalar _tmp233 = _tmp219 * _tmp73;
  const Scalar _tmp234 = _tmp219 * _tmp69;
  const Scalar _tmp235 = _tmp192 * _tmp219;
  const Scalar _tmp236 = _tmp219 * _tmp52;
  const Scalar _tmp237 = _tmp219 * _tmp47;
  const Scalar _tmp238 = _tmp219 * _tmp68;
  const Scalar _tmp239 = _tmp219 * _tmp76;
  const Scalar _tmp240 = _tmp219 * _tmp55;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp31;
    _res(1, 0) = _tmp33;
    _res(2, 0) = _tmp35;
    _res(3, 0) = _tmp55 * sqrt_info;
    _res(4, 0) = _tmp68 * sqrt_info;
    _res(5, 0) = _tmp76 * sqrt_info;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp118;
    _jacobian(1, 0) = _tmp126;
    _jacobian(2, 0) = _tmp133;
    _jacobian(3, 0) = 0;
    _jacobian(4, 0) = _tmp138 * sqrt_info;
    _jacobian(5, 0) = _tmp147 * sqrt_info;
    _jacobian(0, 1) = _tmp157;
    _jacobian(1, 1) = _tmp161;
    _jacobian(2, 1) = _tmp165;
    _jacobian(3, 1) = _tmp171 * sqrt_info;
    _jacobian(4, 1) = 0;
    _jacobian(5, 1) = _tmp174 * sqrt_info;
    _jacobian(0, 2) = _tmp181;
    _jacobian(1, 2) = _tmp184;
    _jacobian(2, 2) = _tmp187;
    _jacobian(3, 2) = _tmp190 * sqrt_info;
    _jacobian(4, 2) = _tmp194 * sqrt_info;
    _jacobian(5, 2) = 0;
    _jacobian(0, 3) = 0;
    _jacobian(1, 3) = 0;
    _jacobian(2, 3) = 0;
    _jacobian(3, 3) = _tmp195 * sqrt_info;
    _jacobian(4, 3) = _tmp146 * sqrt_info;
    _jacobian(5, 3) = _tmp170 * sqrt_info;
    _jacobian(0, 4) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(3, 4) = _tmp193 * sqrt_info;
    _jacobian(4, 4) = _tmp197 * sqrt_info;
    _jacobian(5, 4) = _tmp168 * sqrt_info;
    _jacobian(0, 5) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(3, 5) = _tmp192 * sqrt_info;
    _jacobian(4, 5) = _tmp144 * sqrt_info;
    _jacobian(5, 5) = _tmp198 * sqrt_info;
    _jacobian(0, 6) = _tmp204;
    _jacobian(1, 6) = _tmp206;
    _jacobian(2, 6) = _tmp209;
    _jacobian(3, 6) = 0;
    _jacobian(4, 6) = 0;
    _jacobian(5, 6) = 0;
    _jacobian(0, 7) = _tmp212;
    _jacobian(1, 7) = _tmp213;
    _jacobian(2, 7) = _tmp214;
    _jacobian(3, 7) = 0;
    _jacobian(4, 7) = 0;
    _jacobian(5, 7) = 0;
    _jacobian(0, 8) = _tmp216;
    _jacobian(1, 8) = _tmp217;
    _jacobian(2, 8) = _tmp218;
    _jacobian(3, 8) = 0;
    _jacobian(4, 8) = 0;
    _jacobian(5, 8) = 0;
    _jacobian(0, 9) = 0;
    _jacobian(1, 9) = 0;
    _jacobian(2, 9) = 0;
    _jacobian(3, 9) = _tmp42 * sqrt_info;
    _jacobian(4, 9) = _tmp65 * sqrt_info;
    _jacobian(5, 9) = _tmp73 * sqrt_info;
    _jacobian(0, 10) = 0;
    _jacobian(1, 10) = 0;
    _jacobian(2, 10) = 0;
    _jacobian(3, 10) = _tmp52 * sqrt_info;
    _jacobian(4, 10) = _tmp59 * sqrt_info;
    _jacobian(5, 10) = _tmp71 * sqrt_info;
    _jacobian(0, 11) = 0;
    _jacobian(1, 11) = 0;
    _jacobian(2, 11) = 0;
    _jacobian(3, 11) = _tmp47 * sqrt_info;
    _jacobian(4, 11) = _tmp62 * sqrt_info;
    _jacobian(5, 11) = _tmp69 * sqrt_info;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) = std::pow(_tmp118, Scalar(2)) + std::pow(_tmp126, Scalar(2)) +
                     std::pow(_tmp133, Scalar(2)) + std::pow(_tmp138, Scalar(2)) * _tmp219 +
                     std::pow(_tmp147, Scalar(2)) * _tmp219;
    _hessian(1, 0) = _tmp118 * _tmp157 + _tmp126 * _tmp161 + _tmp133 * _tmp165 + _tmp174 * _tmp220;
    _hessian(2, 0) = _tmp118 * _tmp181 + _tmp126 * _tmp184 + _tmp133 * _tmp187 + _tmp194 * _tmp221;
    _hessian(3, 0) = _tmp138 * _tmp222 + _tmp170 * _tmp220;
    _hessian(4, 0) = _tmp147 * _tmp223 + _tmp197 * _tmp221;
    _hessian(5, 0) = _tmp138 * _tmp224 + _tmp198 * _tmp220;
    _hessian(6, 0) = _tmp118 * _tmp204 + _tmp126 * _tmp206 + _tmp133 * _tmp209;
    _hessian(7, 0) = _tmp118 * _tmp212 + _tmp126 * _tmp213 + _tmp133 * _tmp214;
    _hessian(8, 0) = _tmp118 * _tmp216 + _tmp126 * _tmp217 + _tmp133 * _tmp218;
    _hessian(9, 0) = _tmp138 * _tmp225 + _tmp220 * _tmp73;
    _hessian(10, 0) = _tmp138 * _tmp226 + _tmp147 * _tmp227;
    _hessian(11, 0) = _tmp138 * _tmp228 + _tmp220 * _tmp69;
    _hessian(1, 1) = std::pow(_tmp157, Scalar(2)) + std::pow(_tmp161, Scalar(2)) +
                     std::pow(_tmp165, Scalar(2)) + std::pow(_tmp171, Scalar(2)) * _tmp219 +
                     std::pow(_tmp174, Scalar(2)) * _tmp219;
    _hessian(2, 1) = _tmp157 * _tmp181 + _tmp161 * _tmp184 + _tmp165 * _tmp187 + _tmp171 * _tmp229;
    _hessian(3, 1) = _tmp170 * _tmp231 + _tmp195 * _tmp230;
    _hessian(4, 1) = _tmp174 * _tmp223 + _tmp193 * _tmp230;
    _hessian(5, 1) = _tmp192 * _tmp230 + _tmp198 * _tmp231;
    _hessian(6, 1) = _tmp157 * _tmp204 + _tmp161 * _tmp206 + _tmp165 * _tmp209;
    _hessian(7, 1) = _tmp157 * _tmp212 + _tmp161 * _tmp213 + _tmp165 * _tmp214;
    _hessian(8, 1) = _tmp157 * _tmp216 + _tmp161 * _tmp217 + _tmp165 * _tmp218;
    _hessian(9, 1) = _tmp230 * _tmp42 + _tmp231 * _tmp73;
    _hessian(10, 1) = _tmp174 * _tmp227 + _tmp230 * _tmp52;
    _hessian(11, 1) = _tmp230 * _tmp47 + _tmp231 * _tmp69;
    _hessian(2, 2) = std::pow(_tmp181, Scalar(2)) + std::pow(_tmp184, Scalar(2)) +
                     std::pow(_tmp187, Scalar(2)) + std::pow(_tmp190, Scalar(2)) * _tmp219 +
                     std::pow(_tmp194, Scalar(2)) * _tmp219;
    _hessian(3, 2) = _tmp194 * _tmp222 + _tmp195 * _tmp229;
    _hessian(4, 2) = _tmp193 * _tmp229 + _tmp194 * _tmp197 * _tmp219;
    _hessian(5, 2) = _tmp192 * _tmp229 + _tmp194 * _tmp224;
    _hessian(6, 2) = _tmp181 * _tmp204 + _tmp184 * _tmp206 + _tmp187 * _tmp209;
    _hessian(7, 2) = _tmp181 * _tmp212 + _tmp184 * _tmp213 + _tmp187 * _tmp214;
    _hessian(8, 2) = _tmp181 * _tmp216 + _tmp184 * _tmp217 + _tmp187 * _tmp218;
    _hessian(9, 2) = _tmp194 * _tmp225 + _tmp229 * _tmp42;
    _hessian(10, 2) = _tmp194 * _tmp226 + _tmp229 * _tmp52;
    _hessian(11, 2) = _tmp194 * _tmp228 + _tmp229 * _tmp47;
    _hessian(3, 3) = std::pow(_tmp146, Scalar(2)) * _tmp219 +
                     std::pow(_tmp170, Scalar(2)) * _tmp219 +
                     std::pow(_tmp195, Scalar(2)) * _tmp219;
    _hessian(4, 3) = _tmp170 * _tmp223 + _tmp193 * _tmp232 + _tmp197 * _tmp222;
    _hessian(5, 3) = _tmp144 * _tmp222 + _tmp170 * _tmp198 * _tmp219 + _tmp192 * _tmp232;
    _hessian(9, 3) = _tmp170 * _tmp233 + _tmp222 * _tmp65 + _tmp232 * _tmp42;
    _hessian(10, 3) = _tmp170 * _tmp227 + _tmp222 * _tmp59 + _tmp232 * _tmp52;
    _hessian(11, 3) = _tmp170 * _tmp234 + _tmp222 * _tmp62 + _tmp232 * _tmp47;
    _hessian(4, 4) = std::pow(_tmp168, Scalar(2)) * _tmp219 +
                     std::pow(_tmp193, Scalar(2)) * _tmp219 +
                     std::pow(_tmp197, Scalar(2)) * _tmp219;
    _hessian(5, 4) = _tmp193 * _tmp235 + _tmp197 * _tmp224 + _tmp198 * _tmp223;
    _hessian(9, 4) = _tmp193 * _tmp219 * _tmp42 + _tmp197 * _tmp225 + _tmp223 * _tmp73;
    _hessian(10, 4) = _tmp168 * _tmp227 + _tmp193 * _tmp236 + _tmp197 * _tmp226;
    _hessian(11, 4) = _tmp193 * _tmp237 + _tmp197 * _tmp228 + _tmp223 * _tmp69;
    _hessian(5, 5) = std::pow(_tmp144, Scalar(2)) * _tmp219 +
                     std::pow(_tmp192, Scalar(2)) * _tmp219 +
                     std::pow(_tmp198, Scalar(2)) * _tmp219;
    _hessian(9, 5) = _tmp198 * _tmp233 + _tmp224 * _tmp65 + _tmp235 * _tmp42;
    _hessian(10, 5) = _tmp192 * _tmp236 + _tmp198 * _tmp227 + _tmp224 * _tmp59;
    _hessian(11, 5) = _tmp192 * _tmp237 + _tmp198 * _tmp234 + _tmp224 * _tmp62;
    _hessian(6, 6) =
        std::pow(_tmp204, Scalar(2)) + std::pow(_tmp206, Scalar(2)) + std::pow(_tmp209, Scalar(2));
    _hessian(7, 6) = _tmp204 * _tmp212 + _tmp206 * _tmp213 + _tmp209 * _tmp214;
    _hessian(8, 6) = _tmp204 * _tmp216 + _tmp206 * _tmp217 + _tmp209 * _tmp218;
    _hessian(7, 7) =
        std::pow(_tmp212, Scalar(2)) + std::pow(_tmp213, Scalar(2)) + std::pow(_tmp214, Scalar(2));
    _hessian(8, 7) = _tmp212 * _tmp216 + _tmp213 * _tmp217 + _tmp214 * _tmp218;
    _hessian(8, 8) =
        std::pow(_tmp216, Scalar(2)) + std::pow(_tmp217, Scalar(2)) + std::pow(_tmp218, Scalar(2));
    _hessian(9, 9) = _tmp219 * std::pow(_tmp42, Scalar(2)) + _tmp219 * std::pow(_tmp65, Scalar(2)) +
                     _tmp219 * std::pow(_tmp73, Scalar(2));
    _hessian(10, 9) = _tmp225 * _tmp59 + _tmp227 * _tmp73 + _tmp236 * _tmp42;
    _hessian(11, 9) = _tmp225 * _tmp62 + _tmp234 * _tmp73 + _tmp237 * _tmp42;
    _hessian(10, 10) = _tmp219 * std::pow(_tmp52, Scalar(2)) +
                       _tmp219 * std::pow(_tmp59, Scalar(2)) +
                       _tmp219 * std::pow(_tmp71, Scalar(2));
    _hessian(11, 10) = _tmp227 * _tmp69 + _tmp228 * _tmp59 + _tmp237 * _tmp52;
    _hessian(11, 11) = _tmp219 * std::pow(_tmp47, Scalar(2)) +
                       _tmp219 * std::pow(_tmp62, Scalar(2)) +
                       _tmp219 * std::pow(_tmp69, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp118 * _tmp31 + _tmp126 * _tmp33 + _tmp133 * _tmp35 + _tmp138 * _tmp238 +
                 _tmp220 * _tmp76;
    _rhs(1, 0) = _tmp157 * _tmp31 + _tmp161 * _tmp33 + _tmp165 * _tmp35 + _tmp230 * _tmp55 +
                 _tmp231 * _tmp76;
    _rhs(2, 0) = _tmp181 * _tmp31 + _tmp184 * _tmp33 + _tmp187 * _tmp35 + _tmp194 * _tmp238 +
                 _tmp229 * _tmp55;
    _rhs(3, 0) = _tmp170 * _tmp239 + _tmp195 * _tmp240 + _tmp222 * _tmp68;
    _rhs(4, 0) = _tmp193 * _tmp240 + _tmp197 * _tmp238 + _tmp223 * _tmp76;
    _rhs(5, 0) = _tmp192 * _tmp240 + _tmp198 * _tmp239 + _tmp224 * _tmp68;
    _rhs(6, 0) = _tmp204 * _tmp31 + _tmp206 * _tmp33 + _tmp209 * _tmp35;
    _rhs(7, 0) = _tmp212 * _tmp31 + _tmp213 * _tmp33 + _tmp214 * _tmp35;
    _rhs(8, 0) = _tmp216 * _tmp31 + _tmp217 * _tmp33 + _tmp218 * _tmp35;
    _rhs(9, 0) = _tmp225 * _tmp68 + _tmp239 * _tmp73 + _tmp240 * _tmp42;
    _rhs(10, 0) = _tmp227 * _tmp76 + _tmp238 * _tmp59 + _tmp240 * _tmp52;
    _rhs(11, 0) = _tmp238 * _tmp62 + _tmp239 * _tmp69 + _tmp240 * _tmp47;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
