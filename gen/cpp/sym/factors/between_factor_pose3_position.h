// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_t_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_t_b
 *
 * In lie group terms:
 *     local_coordinates(a_t_b, between(a, b))
 *     to_tangent(compose(inverse(a_t_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3Position(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                                const Eigen::Matrix<Scalar, 3, 1>& a_t_b,
                                const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                                Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                                Eigen::Matrix<Scalar, 3, 12>* const jacobian = nullptr,
                                Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 500

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (100)
  const Scalar _tmp0 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp1 = 2 * _tmp0;
  const Scalar _tmp2 = -_tmp1;
  const Scalar _tmp3 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp4 = 2 * _tmp3;
  const Scalar _tmp5 = 1 - _tmp4;
  const Scalar _tmp6 = _tmp2 + _tmp5;
  const Scalar _tmp7 = 2 * _a[0] * _a[2];
  const Scalar _tmp8 = 2 * _a[1];
  const Scalar _tmp9 = _a[3] * _tmp8;
  const Scalar _tmp10 = -_tmp9;
  const Scalar _tmp11 = _tmp10 + _tmp7;
  const Scalar _tmp12 = _a[6] * _tmp11;
  const Scalar _tmp13 = _a[0] * _tmp8;
  const Scalar _tmp14 = 2 * _a[3];
  const Scalar _tmp15 = _a[2] * _tmp14;
  const Scalar _tmp16 = _tmp13 + _tmp15;
  const Scalar _tmp17 = _a[5] * _tmp16;
  const Scalar _tmp18 = _b[5] * _tmp16 + _b[6] * _tmp11;
  const Scalar _tmp19 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp20 = 2 * _tmp19;
  const Scalar _tmp21 = -_tmp20;
  const Scalar _tmp22 = _tmp21 + _tmp5;
  const Scalar _tmp23 = _a[2] * _tmp8;
  const Scalar _tmp24 = _a[0] * _tmp14;
  const Scalar _tmp25 = _tmp23 + _tmp24;
  const Scalar _tmp26 = _a[6] * _tmp25;
  const Scalar _tmp27 = -_tmp15;
  const Scalar _tmp28 = _tmp13 + _tmp27;
  const Scalar _tmp29 = _a[4] * _tmp28;
  const Scalar _tmp30 = _b[4] * _tmp28 + _b[6] * _tmp25;
  const Scalar _tmp31 = -_a[5] * _tmp22 + _b[5] * _tmp22 - _tmp26 - _tmp29 + _tmp30 - a_t_b(1, 0);
  const Scalar _tmp32 = _tmp2 + _tmp21 + 1;
  const Scalar _tmp33 = -_tmp24;
  const Scalar _tmp34 = _tmp23 + _tmp33;
  const Scalar _tmp35 = _a[5] * _tmp34;
  const Scalar _tmp36 = _tmp7 + _tmp9;
  const Scalar _tmp37 = _a[4] * _tmp36;
  const Scalar _tmp38 = _b[4] * _tmp36 + _b[5] * _tmp34;
  const Scalar _tmp39 = -_a[6] * _tmp32 + _b[6] * _tmp32 - _tmp35 - _tmp37 + _tmp38 - a_t_b(2, 0);
  const Scalar _tmp40 =
      _tmp31 * sqrt_info(0, 1) + _tmp39 * sqrt_info(0, 2) +
      sqrt_info(0, 0) * (-_a[4] * _tmp6 + _b[4] * _tmp6 - _tmp12 - _tmp17 + _tmp18 - a_t_b(0, 0));
  const Scalar _tmp41 = _tmp31 * sqrt_info(1, 1) + _tmp39 * sqrt_info(1, 2);
  const Scalar _tmp42 = -_tmp19;
  const Scalar _tmp43 = -_tmp0;
  const Scalar _tmp44 = std::pow(_a[3], Scalar(2));
  const Scalar _tmp45 = _tmp3 + _tmp42 + _tmp43 + _tmp44;
  const Scalar _tmp46 = -_a[6] * _tmp45 + _b[6] * _tmp45 - _tmp35 - _tmp37 + _tmp38;
  const Scalar _tmp47 = _tmp19 + _tmp43;
  const Scalar _tmp48 = -_tmp44;
  const Scalar _tmp49 = _tmp3 + _tmp48;
  const Scalar _tmp50 = _tmp47 + _tmp49;
  const Scalar _tmp51 = -_tmp23;
  const Scalar _tmp52 = _tmp33 + _tmp51;
  const Scalar _tmp53 = -_tmp13;
  const Scalar _tmp54 = _tmp15 + _tmp53;
  const Scalar _tmp55 = -_a[4] * _tmp54 - _a[5] * _tmp50 - _a[6] * _tmp52 + _b[4] * _tmp54 +
                        _b[5] * _tmp50 + _b[6] * _tmp52;
  const Scalar _tmp56 = _tmp46 * sqrt_info(0, 1) + _tmp55 * sqrt_info(0, 2);
  const Scalar _tmp57 = _tmp46 * sqrt_info(1, 1) + _tmp55 * sqrt_info(1, 2);
  const Scalar _tmp58 = -_tmp3;
  const Scalar _tmp59 = _tmp0 + _tmp19 + _tmp48 + _tmp58;
  const Scalar _tmp60 = _tmp24 + _tmp51;
  const Scalar _tmp61 = -_tmp7;
  const Scalar _tmp62 = _tmp10 + _tmp61;
  const Scalar _tmp63 = _tmp44 + _tmp58;
  const Scalar _tmp64 = _tmp47 + _tmp63;
  const Scalar _tmp65 = -_a[4] * _tmp64 + _b[4] * _tmp64 - _tmp12 - _tmp17 + _tmp18;
  const Scalar _tmp66 = _tmp65 * sqrt_info(0, 2) +
                        sqrt_info(0, 0) * (-_a[4] * _tmp62 - _a[5] * _tmp60 - _a[6] * _tmp59 +
                                           _b[4] * _tmp62 + _b[5] * _tmp60 + _b[6] * _tmp59);
  const Scalar _tmp67 = _tmp65 * sqrt_info(1, 2);
  const Scalar _tmp68 = _tmp0 + _tmp42;
  const Scalar _tmp69 = _tmp63 + _tmp68;
  const Scalar _tmp70 = _tmp49 + _tmp68;
  const Scalar _tmp71 = _tmp61 + _tmp9;
  const Scalar _tmp72 = _tmp27 + _tmp53;
  const Scalar _tmp73 = -_a[4] * _tmp70 - _a[5] * _tmp72 - _a[6] * _tmp71 + _b[4] * _tmp70 +
                        _b[5] * _tmp72 + _b[6] * _tmp71;
  const Scalar _tmp74 =
      _tmp73 * sqrt_info(0, 1) +
      sqrt_info(0, 0) * (-_a[5] * _tmp69 + _b[5] * _tmp69 - _tmp26 - _tmp29 + _tmp30);
  const Scalar _tmp75 = _tmp73 * sqrt_info(1, 1);
  const Scalar _tmp76 = _tmp4 - 1;
  const Scalar _tmp77 =
      _tmp54 * sqrt_info(0, 1) + _tmp62 * sqrt_info(0, 2) + sqrt_info(0, 0) * (_tmp1 + _tmp76);
  const Scalar _tmp78 = _tmp54 * sqrt_info(1, 1) + _tmp62 * sqrt_info(1, 2);
  const Scalar _tmp79 = _tmp20 + _tmp76;
  const Scalar _tmp80 =
      _tmp60 * sqrt_info(0, 2) + _tmp72 * sqrt_info(0, 0) + _tmp79 * sqrt_info(0, 1);
  const Scalar _tmp81 = _tmp60 * sqrt_info(1, 2) + _tmp79 * sqrt_info(1, 1);
  const Scalar _tmp82 = _tmp1 + _tmp20 - 1;
  const Scalar _tmp83 =
      _tmp52 * sqrt_info(0, 1) + _tmp71 * sqrt_info(0, 0) + _tmp82 * sqrt_info(0, 2);
  const Scalar _tmp84 = _tmp52 * sqrt_info(1, 1) + _tmp82 * sqrt_info(1, 2);
  const Scalar _tmp85 =
      _tmp28 * sqrt_info(0, 1) + _tmp36 * sqrt_info(0, 2) + _tmp6 * sqrt_info(0, 0);
  const Scalar _tmp86 = _tmp28 * sqrt_info(1, 1) + _tmp36 * sqrt_info(1, 2);
  const Scalar _tmp87 =
      _tmp16 * sqrt_info(0, 0) + _tmp22 * sqrt_info(0, 1) + _tmp34 * sqrt_info(0, 2);
  const Scalar _tmp88 = _tmp22 * sqrt_info(1, 1) + _tmp34 * sqrt_info(1, 2);
  const Scalar _tmp89 =
      _tmp11 * sqrt_info(0, 0) + _tmp25 * sqrt_info(0, 1) + _tmp32 * sqrt_info(0, 2);
  const Scalar _tmp90 = _tmp25 * sqrt_info(1, 1) + _tmp32 * sqrt_info(1, 2);
  const Scalar _tmp91 = std::pow(sqrt_info(2, 2), Scalar(2));
  const Scalar _tmp92 = _tmp55 * _tmp91;
  const Scalar _tmp93 = std::pow(_tmp65, Scalar(2));
  const Scalar _tmp94 = _tmp65 * _tmp91;
  const Scalar _tmp95 = _tmp82 * _tmp91;
  const Scalar _tmp96 = _tmp36 * _tmp91;
  const Scalar _tmp97 = _tmp32 * _tmp91;
  const Scalar _tmp98 = _tmp34 * _tmp91;
  const Scalar _tmp99 = _tmp39 * _tmp91;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp40;
    _res(1, 0) = _tmp41;
    _res(2, 0) = _tmp39 * sqrt_info(2, 2);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp56;
    _jacobian(1, 0) = _tmp57;
    _jacobian(2, 0) = _tmp55 * sqrt_info(2, 2);
    _jacobian(0, 1) = _tmp66;
    _jacobian(1, 1) = _tmp67;
    _jacobian(2, 1) = _tmp65 * sqrt_info(2, 2);
    _jacobian(0, 2) = _tmp74;
    _jacobian(1, 2) = _tmp75;
    _jacobian(2, 2) = 0;
    _jacobian(0, 3) = _tmp77;
    _jacobian(1, 3) = _tmp78;
    _jacobian(2, 3) = _tmp62 * sqrt_info(2, 2);
    _jacobian(0, 4) = _tmp80;
    _jacobian(1, 4) = _tmp81;
    _jacobian(2, 4) = _tmp60 * sqrt_info(2, 2);
    _jacobian(0, 5) = _tmp83;
    _jacobian(1, 5) = _tmp84;
    _jacobian(2, 5) = _tmp82 * sqrt_info(2, 2);
    _jacobian(0, 6) = 0;
    _jacobian(1, 6) = 0;
    _jacobian(2, 6) = 0;
    _jacobian(0, 7) = 0;
    _jacobian(1, 7) = 0;
    _jacobian(2, 7) = 0;
    _jacobian(0, 8) = 0;
    _jacobian(1, 8) = 0;
    _jacobian(2, 8) = 0;
    _jacobian(0, 9) = _tmp85;
    _jacobian(1, 9) = _tmp86;
    _jacobian(2, 9) = _tmp36 * sqrt_info(2, 2);
    _jacobian(0, 10) = _tmp87;
    _jacobian(1, 10) = _tmp88;
    _jacobian(2, 10) = _tmp34 * sqrt_info(2, 2);
    _jacobian(0, 11) = _tmp89;
    _jacobian(1, 11) = _tmp90;
    _jacobian(2, 11) = _tmp32 * sqrt_info(2, 2);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) = std::pow(_tmp55, Scalar(2)) * _tmp91 + std::pow(_tmp56, Scalar(2)) +
                     std::pow(_tmp57, Scalar(2));
    _hessian(1, 0) = _tmp56 * _tmp66 + _tmp57 * _tmp67 + _tmp65 * _tmp92;
    _hessian(2, 0) = _tmp56 * _tmp74 + _tmp57 * _tmp75;
    _hessian(3, 0) = _tmp56 * _tmp77 + _tmp57 * _tmp78 + _tmp62 * _tmp92;
    _hessian(4, 0) = _tmp56 * _tmp80 + _tmp57 * _tmp81 + _tmp60 * _tmp92;
    _hessian(5, 0) = _tmp56 * _tmp83 + _tmp57 * _tmp84 + _tmp82 * _tmp92;
    _hessian(9, 0) = _tmp36 * _tmp92 + _tmp56 * _tmp85 + _tmp57 * _tmp86;
    _hessian(10, 0) = _tmp34 * _tmp92 + _tmp56 * _tmp87 + _tmp57 * _tmp88;
    _hessian(11, 0) = _tmp32 * _tmp92 + _tmp56 * _tmp89 + _tmp57 * _tmp90;
    _hessian(1, 1) = std::pow(_tmp66, Scalar(2)) + _tmp91 * _tmp93 +
                     _tmp93 * std::pow(sqrt_info(1, 2), Scalar(2));
    _hessian(2, 1) = _tmp66 * _tmp74 + _tmp67 * _tmp75;
    _hessian(3, 1) = _tmp62 * _tmp94 + _tmp66 * _tmp77 + _tmp67 * _tmp78;
    _hessian(4, 1) = _tmp60 * _tmp94 + _tmp66 * _tmp80 + _tmp67 * _tmp81;
    _hessian(5, 1) = _tmp65 * _tmp95 + _tmp66 * _tmp83 + _tmp67 * _tmp84;
    _hessian(9, 1) = _tmp65 * _tmp96 + _tmp66 * _tmp85 + _tmp67 * _tmp86;
    _hessian(10, 1) = _tmp34 * _tmp94 + _tmp66 * _tmp87 + _tmp67 * _tmp88;
    _hessian(11, 1) = _tmp65 * _tmp97 + _tmp66 * _tmp89 + _tmp67 * _tmp90;
    _hessian(2, 2) = std::pow(_tmp73, Scalar(2)) * std::pow(sqrt_info(1, 1), Scalar(2)) +
                     std::pow(_tmp74, Scalar(2));
    _hessian(3, 2) = _tmp74 * _tmp77 + _tmp75 * _tmp78;
    _hessian(4, 2) = _tmp74 * _tmp80 + _tmp75 * _tmp81;
    _hessian(5, 2) = _tmp74 * _tmp83 + _tmp75 * _tmp84;
    _hessian(9, 2) = _tmp74 * _tmp85 + _tmp75 * _tmp86;
    _hessian(10, 2) = _tmp74 * _tmp87 + _tmp75 * _tmp88;
    _hessian(11, 2) = _tmp74 * _tmp89 + _tmp75 * _tmp90;
    _hessian(3, 3) = std::pow(_tmp62, Scalar(2)) * _tmp91 + std::pow(_tmp77, Scalar(2)) +
                     std::pow(_tmp78, Scalar(2));
    _hessian(4, 3) = _tmp60 * _tmp62 * _tmp91 + _tmp77 * _tmp80 + _tmp78 * _tmp81;
    _hessian(5, 3) = _tmp62 * _tmp95 + _tmp77 * _tmp83 + _tmp78 * _tmp84;
    _hessian(9, 3) = _tmp62 * _tmp96 + _tmp77 * _tmp85 + _tmp78 * _tmp86;
    _hessian(10, 3) = _tmp62 * _tmp98 + _tmp77 * _tmp87 + _tmp78 * _tmp88;
    _hessian(11, 3) = _tmp62 * _tmp97 + _tmp77 * _tmp89 + _tmp78 * _tmp90;
    _hessian(4, 4) = std::pow(_tmp60, Scalar(2)) * _tmp91 + std::pow(_tmp80, Scalar(2)) +
                     std::pow(_tmp81, Scalar(2));
    _hessian(5, 4) = _tmp60 * _tmp95 + _tmp80 * _tmp83 + _tmp81 * _tmp84;
    _hessian(9, 4) = _tmp60 * _tmp96 + _tmp80 * _tmp85 + _tmp81 * _tmp86;
    _hessian(10, 4) = _tmp60 * _tmp98 + _tmp80 * _tmp87 + _tmp81 * _tmp88;
    _hessian(11, 4) = _tmp60 * _tmp97 + _tmp80 * _tmp89 + _tmp81 * _tmp90;
    _hessian(5, 5) = std::pow(_tmp82, Scalar(2)) * _tmp91 + std::pow(_tmp83, Scalar(2)) +
                     std::pow(_tmp84, Scalar(2));
    _hessian(9, 5) = _tmp82 * _tmp96 + _tmp83 * _tmp85 + _tmp84 * _tmp86;
    _hessian(10, 5) = _tmp34 * _tmp95 + _tmp83 * _tmp87 + _tmp84 * _tmp88;
    _hessian(11, 5) = _tmp32 * _tmp95 + _tmp83 * _tmp89 + _tmp84 * _tmp90;
    _hessian(9, 9) = std::pow(_tmp36, Scalar(2)) * _tmp91 + std::pow(_tmp85, Scalar(2)) +
                     std::pow(_tmp86, Scalar(2));
    _hessian(10, 9) = _tmp34 * _tmp96 + _tmp85 * _tmp87 + _tmp86 * _tmp88;
    _hessian(11, 9) = _tmp32 * _tmp96 + _tmp85 * _tmp89 + _tmp86 * _tmp90;
    _hessian(10, 10) = std::pow(_tmp34, Scalar(2)) * _tmp91 + std::pow(_tmp87, Scalar(2)) +
                       std::pow(_tmp88, Scalar(2));
    _hessian(11, 10) = _tmp34 * _tmp97 + _tmp87 * _tmp89 + _tmp88 * _tmp90;
    _hessian(11, 11) = std::pow(_tmp32, Scalar(2)) * _tmp91 + std::pow(_tmp89, Scalar(2)) +
                       std::pow(_tmp90, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp39 * _tmp92 + _tmp40 * _tmp56 + _tmp41 * _tmp57;
    _rhs(1, 0) = _tmp40 * _tmp66 + _tmp41 * _tmp67 + _tmp65 * _tmp99;
    _rhs(2, 0) = _tmp40 * _tmp74 + _tmp41 * _tmp75;
    _rhs(3, 0) = _tmp40 * _tmp77 + _tmp41 * _tmp78 + _tmp62 * _tmp99;
    _rhs(4, 0) = _tmp40 * _tmp80 + _tmp41 * _tmp81 + _tmp60 * _tmp99;
    _rhs(5, 0) = _tmp39 * _tmp95 + _tmp40 * _tmp83 + _tmp41 * _tmp84;
    _rhs(6, 0) = 0;
    _rhs(7, 0) = 0;
    _rhs(8, 0) = 0;
    _rhs(9, 0) = _tmp39 * _tmp96 + _tmp40 * _tmp85 + _tmp41 * _tmp86;
    _rhs(10, 0) = _tmp34 * _tmp99 + _tmp40 * _tmp87 + _tmp41 * _tmp88;
    _rhs(11, 0) = _tmp39 * _tmp97 + _tmp40 * _tmp89 + _tmp41 * _tmp90;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
