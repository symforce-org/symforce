// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_t_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_t_b
 *
 * In lie group terms:
 *     local_coordinates(a_t_b, between(a, b))
 *     to_tangent(compose(inverse(a_t_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Pass in a single scalar if
 *                isotropic, a vector if diagonal, and a square matrix otherwise.
 *     jacobian: (3x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3PositionDiagonal(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                                        const Eigen::Matrix<Scalar, 3, 1>& a_t_b,
                                        const Eigen::Matrix<Scalar, 3, 1>& sqrt_info,
                                        const Scalar epsilon,
                                        Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                                        Eigen::Matrix<Scalar, 3, 12>* const jacobian = nullptr,
                                        Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                        Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 439

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (99)
  const Scalar _tmp0 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp1 = 2 * _tmp0;
  const Scalar _tmp2 = -_tmp1;
  const Scalar _tmp3 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp4 = 2 * _tmp3;
  const Scalar _tmp5 = -_tmp4;
  const Scalar _tmp6 = _tmp2 + _tmp5 + 1;
  const Scalar _tmp7 = 2 * _a[2];
  const Scalar _tmp8 = _a[0] * _tmp7;
  const Scalar _tmp9 = 2 * _a[1];
  const Scalar _tmp10 = _a[3] * _tmp9;
  const Scalar _tmp11 = -_tmp10;
  const Scalar _tmp12 = _tmp11 + _tmp8;
  const Scalar _tmp13 = _a[6] * _tmp12;
  const Scalar _tmp14 = _a[0] * _tmp9;
  const Scalar _tmp15 = _a[3] * _tmp7;
  const Scalar _tmp16 = _tmp14 + _tmp15;
  const Scalar _tmp17 = _a[5] * _tmp16;
  const Scalar _tmp18 = _b[5] * _tmp16 + _b[6] * _tmp12;
  const Scalar _tmp19 = -_a[4] * _tmp6 + _b[4] * _tmp6 - _tmp13 - _tmp17 + _tmp18 - a_t_b(0, 0);
  const Scalar _tmp20 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp21 = 2 * _tmp20;
  const Scalar _tmp22 = 1 - _tmp21;
  const Scalar _tmp23 = _tmp2 + _tmp22;
  const Scalar _tmp24 = _a[2] * _tmp9;
  const Scalar _tmp25 = 2 * _a[0] * _a[3];
  const Scalar _tmp26 = _tmp24 + _tmp25;
  const Scalar _tmp27 = _a[6] * _tmp26;
  const Scalar _tmp28 = -_tmp15;
  const Scalar _tmp29 = _tmp14 + _tmp28;
  const Scalar _tmp30 = _a[4] * _tmp29;
  const Scalar _tmp31 = _b[4] * _tmp29 + _b[6] * _tmp26;
  const Scalar _tmp32 = -_a[5] * _tmp23 + _b[5] * _tmp23 - _tmp27 - _tmp30 + _tmp31 - a_t_b(1, 0);
  const Scalar _tmp33 = _tmp22 + _tmp5;
  const Scalar _tmp34 = -_tmp25;
  const Scalar _tmp35 = _tmp24 + _tmp34;
  const Scalar _tmp36 = _a[5] * _tmp35;
  const Scalar _tmp37 = _tmp10 + _tmp8;
  const Scalar _tmp38 = _a[4] * _tmp37;
  const Scalar _tmp39 = _b[4] * _tmp37 + _b[5] * _tmp35;
  const Scalar _tmp40 = -_a[6] * _tmp33 + _b[6] * _tmp33 - _tmp36 - _tmp38 + _tmp39 - a_t_b(2, 0);
  const Scalar _tmp41 = -_tmp20;
  const Scalar _tmp42 = std::pow(_a[3], Scalar(2));
  const Scalar _tmp43 = _tmp41 + _tmp42;
  const Scalar _tmp44 = -_tmp3;
  const Scalar _tmp45 = _tmp0 + _tmp44;
  const Scalar _tmp46 = _tmp43 + _tmp45;
  const Scalar _tmp47 = -_a[6] * _tmp46 + _b[6] * _tmp46 - _tmp36 - _tmp38 + _tmp39;
  const Scalar _tmp48 = -_tmp42;
  const Scalar _tmp49 = _tmp20 + _tmp48;
  const Scalar _tmp50 = _tmp45 + _tmp49;
  const Scalar _tmp51 = -_tmp24;
  const Scalar _tmp52 = _tmp34 + _tmp51;
  const Scalar _tmp53 = -_tmp14;
  const Scalar _tmp54 = _tmp15 + _tmp53;
  const Scalar _tmp55 = -_a[4] * _tmp54 - _a[5] * _tmp50 - _a[6] * _tmp52 + _b[4] * _tmp54 +
                        _b[5] * _tmp50 + _b[6] * _tmp52;
  const Scalar _tmp56 = -_tmp0;
  const Scalar _tmp57 = _tmp3 + _tmp56;
  const Scalar _tmp58 = _tmp49 + _tmp57;
  const Scalar _tmp59 = _tmp25 + _tmp51;
  const Scalar _tmp60 = -_tmp8;
  const Scalar _tmp61 = _tmp11 + _tmp60;
  const Scalar _tmp62 = -_a[4] * _tmp61 - _a[5] * _tmp59 - _a[6] * _tmp58 + _b[4] * _tmp61 +
                        _b[5] * _tmp59 + _b[6] * _tmp58;
  const Scalar _tmp63 = _tmp20 + _tmp42 + _tmp44 + _tmp56;
  const Scalar _tmp64 = -_a[4] * _tmp63 + _b[4] * _tmp63 - _tmp13 - _tmp17 + _tmp18;
  const Scalar _tmp65 = _tmp43 + _tmp57;
  const Scalar _tmp66 = -_a[5] * _tmp65 + _b[5] * _tmp65 - _tmp27 - _tmp30 + _tmp31;
  const Scalar _tmp67 = _tmp0 + _tmp3 + _tmp41 + _tmp48;
  const Scalar _tmp68 = _tmp10 + _tmp60;
  const Scalar _tmp69 = _tmp28 + _tmp53;
  const Scalar _tmp70 = -_a[4] * _tmp67 - _a[5] * _tmp69 - _a[6] * _tmp68 + _b[4] * _tmp67 +
                        _b[5] * _tmp69 + _b[6] * _tmp68;
  const Scalar _tmp71 = _tmp1 + _tmp4 - 1;
  const Scalar _tmp72 = _tmp21 - 1;
  const Scalar _tmp73 = _tmp1 + _tmp72;
  const Scalar _tmp74 = _tmp4 + _tmp72;
  const Scalar _tmp75 = std::pow(sqrt_info(1, 0), Scalar(2));
  const Scalar _tmp76 = std::pow(sqrt_info(2, 0), Scalar(2));
  const Scalar _tmp77 = _tmp64 * _tmp76;
  const Scalar _tmp78 = _tmp70 * _tmp75;
  const Scalar _tmp79 = _tmp47 * _tmp75;
  const Scalar _tmp80 = _tmp61 * _tmp76;
  const Scalar _tmp81 = _tmp73 * _tmp75;
  const Scalar _tmp82 = _tmp59 * _tmp76;
  const Scalar _tmp83 = _tmp74 * _tmp76;
  const Scalar _tmp84 = _tmp37 * _tmp76;
  const Scalar _tmp85 = _tmp23 * _tmp75;
  const Scalar _tmp86 = _tmp33 * _tmp76;
  const Scalar _tmp87 = std::pow(sqrt_info(0, 0), Scalar(2));
  const Scalar _tmp88 = _tmp62 * _tmp87;
  const Scalar _tmp89 = _tmp71 * _tmp87;
  const Scalar _tmp90 = _tmp66 * _tmp87;
  const Scalar _tmp91 = _tmp6 * _tmp87;
  const Scalar _tmp92 = _tmp52 * _tmp75;
  const Scalar _tmp93 = _tmp26 * _tmp75;
  const Scalar _tmp94 = _tmp69 * _tmp87;
  const Scalar _tmp95 = _tmp16 * _tmp87;
  const Scalar _tmp96 = _tmp40 * _tmp76;
  const Scalar _tmp97 = _tmp32 * _tmp75;
  const Scalar _tmp98 = _tmp19 * _tmp87;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp19 * sqrt_info(0, 0);
    _res(1, 0) = _tmp32 * sqrt_info(1, 0);
    _res(2, 0) = _tmp40 * sqrt_info(2, 0);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = 0;
    _jacobian(1, 0) = _tmp47 * sqrt_info(1, 0);
    _jacobian(2, 0) = _tmp55 * sqrt_info(2, 0);
    _jacobian(0, 1) = _tmp62 * sqrt_info(0, 0);
    _jacobian(1, 1) = 0;
    _jacobian(2, 1) = _tmp64 * sqrt_info(2, 0);
    _jacobian(0, 2) = _tmp66 * sqrt_info(0, 0);
    _jacobian(1, 2) = _tmp70 * sqrt_info(1, 0);
    _jacobian(2, 2) = 0;
    _jacobian(0, 3) = _tmp71 * sqrt_info(0, 0);
    _jacobian(1, 3) = _tmp54 * sqrt_info(1, 0);
    _jacobian(2, 3) = _tmp61 * sqrt_info(2, 0);
    _jacobian(0, 4) = _tmp69 * sqrt_info(0, 0);
    _jacobian(1, 4) = _tmp73 * sqrt_info(1, 0);
    _jacobian(2, 4) = _tmp59 * sqrt_info(2, 0);
    _jacobian(0, 5) = _tmp68 * sqrt_info(0, 0);
    _jacobian(1, 5) = _tmp52 * sqrt_info(1, 0);
    _jacobian(2, 5) = _tmp74 * sqrt_info(2, 0);
    _jacobian(0, 6) = 0;
    _jacobian(1, 6) = 0;
    _jacobian(2, 6) = 0;
    _jacobian(0, 7) = 0;
    _jacobian(1, 7) = 0;
    _jacobian(2, 7) = 0;
    _jacobian(0, 8) = 0;
    _jacobian(1, 8) = 0;
    _jacobian(2, 8) = 0;
    _jacobian(0, 9) = _tmp6 * sqrt_info(0, 0);
    _jacobian(1, 9) = _tmp29 * sqrt_info(1, 0);
    _jacobian(2, 9) = _tmp37 * sqrt_info(2, 0);
    _jacobian(0, 10) = _tmp16 * sqrt_info(0, 0);
    _jacobian(1, 10) = _tmp23 * sqrt_info(1, 0);
    _jacobian(2, 10) = _tmp35 * sqrt_info(2, 0);
    _jacobian(0, 11) = _tmp12 * sqrt_info(0, 0);
    _jacobian(1, 11) = _tmp26 * sqrt_info(1, 0);
    _jacobian(2, 11) = _tmp33 * sqrt_info(2, 0);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) = std::pow(_tmp47, Scalar(2)) * _tmp75 + std::pow(_tmp55, Scalar(2)) * _tmp76;
    _hessian(1, 0) = _tmp55 * _tmp77;
    _hessian(2, 0) = _tmp47 * _tmp78;
    _hessian(3, 0) = _tmp54 * _tmp79 + _tmp55 * _tmp80;
    _hessian(4, 0) = _tmp47 * _tmp81 + _tmp55 * _tmp82;
    _hessian(5, 0) = _tmp52 * _tmp79 + _tmp55 * _tmp83;
    _hessian(9, 0) = _tmp29 * _tmp79 + _tmp55 * _tmp84;
    _hessian(10, 0) = _tmp35 * _tmp55 * _tmp76 + _tmp47 * _tmp85;
    _hessian(11, 0) = _tmp26 * _tmp79 + _tmp55 * _tmp86;
    _hessian(1, 1) = std::pow(_tmp62, Scalar(2)) * _tmp87 + std::pow(_tmp64, Scalar(2)) * _tmp76;
    _hessian(2, 1) = _tmp66 * _tmp88;
    _hessian(3, 1) = _tmp64 * _tmp80 + _tmp71 * _tmp88;
    _hessian(4, 1) = _tmp64 * _tmp82 + _tmp69 * _tmp88;
    _hessian(5, 1) = _tmp64 * _tmp83 + _tmp68 * _tmp88;
    _hessian(9, 1) = _tmp6 * _tmp88 + _tmp64 * _tmp84;
    _hessian(10, 1) = _tmp16 * _tmp88 + _tmp35 * _tmp77;
    _hessian(11, 1) = _tmp12 * _tmp88 + _tmp64 * _tmp86;
    _hessian(2, 2) = std::pow(_tmp66, Scalar(2)) * _tmp87 + std::pow(_tmp70, Scalar(2)) * _tmp75;
    _hessian(3, 2) = _tmp54 * _tmp78 + _tmp66 * _tmp89;
    _hessian(4, 2) = _tmp69 * _tmp90 + _tmp70 * _tmp81;
    _hessian(5, 2) = _tmp52 * _tmp78 + _tmp68 * _tmp90;
    _hessian(9, 2) = _tmp29 * _tmp78 + _tmp66 * _tmp91;
    _hessian(10, 2) = _tmp16 * _tmp90 + _tmp70 * _tmp85;
    _hessian(11, 2) = _tmp12 * _tmp90 + _tmp26 * _tmp78;
    _hessian(3, 3) = std::pow(_tmp54, Scalar(2)) * _tmp75 + std::pow(_tmp61, Scalar(2)) * _tmp76 +
                     std::pow(_tmp71, Scalar(2)) * _tmp87;
    _hessian(4, 3) = _tmp54 * _tmp81 + _tmp59 * _tmp80 + _tmp69 * _tmp89;
    _hessian(5, 3) = _tmp54 * _tmp92 + _tmp61 * _tmp83 + _tmp68 * _tmp89;
    _hessian(9, 3) = _tmp29 * _tmp54 * _tmp75 + _tmp37 * _tmp80 + _tmp6 * _tmp89;
    _hessian(10, 3) = _tmp16 * _tmp89 + _tmp35 * _tmp80 + _tmp54 * _tmp85;
    _hessian(11, 3) = _tmp12 * _tmp89 + _tmp54 * _tmp93 + _tmp61 * _tmp86;
    _hessian(4, 4) = std::pow(_tmp59, Scalar(2)) * _tmp76 + std::pow(_tmp69, Scalar(2)) * _tmp87 +
                     std::pow(_tmp73, Scalar(2)) * _tmp75;
    _hessian(5, 4) = _tmp52 * _tmp81 + _tmp59 * _tmp83 + _tmp68 * _tmp94;
    _hessian(9, 4) = _tmp29 * _tmp81 + _tmp59 * _tmp84 + _tmp69 * _tmp91;
    _hessian(10, 4) = _tmp23 * _tmp81 + _tmp35 * _tmp82 + _tmp69 * _tmp95;
    _hessian(11, 4) = _tmp12 * _tmp94 + _tmp26 * _tmp81 + _tmp59 * _tmp86;
    _hessian(5, 5) = std::pow(_tmp52, Scalar(2)) * _tmp75 + std::pow(_tmp68, Scalar(2)) * _tmp87 +
                     std::pow(_tmp74, Scalar(2)) * _tmp76;
    _hessian(9, 5) = _tmp29 * _tmp92 + _tmp37 * _tmp83 + _tmp68 * _tmp91;
    _hessian(10, 5) = _tmp35 * _tmp83 + _tmp52 * _tmp85 + _tmp68 * _tmp95;
    _hessian(11, 5) = _tmp12 * _tmp68 * _tmp87 + _tmp26 * _tmp92 + _tmp74 * _tmp86;
    _hessian(9, 9) = std::pow(_tmp29, Scalar(2)) * _tmp75 + std::pow(_tmp37, Scalar(2)) * _tmp76 +
                     std::pow(_tmp6, Scalar(2)) * _tmp87;
    _hessian(10, 9) = _tmp16 * _tmp91 + _tmp29 * _tmp85 + _tmp35 * _tmp84;
    _hessian(11, 9) = _tmp12 * _tmp91 + _tmp29 * _tmp93 + _tmp37 * _tmp86;
    _hessian(10, 10) = std::pow(_tmp16, Scalar(2)) * _tmp87 + std::pow(_tmp23, Scalar(2)) * _tmp75 +
                       std::pow(_tmp35, Scalar(2)) * _tmp76;
    _hessian(11, 10) = _tmp12 * _tmp95 + _tmp26 * _tmp85 + _tmp35 * _tmp86;
    _hessian(11, 11) = std::pow(_tmp12, Scalar(2)) * _tmp87 + std::pow(_tmp26, Scalar(2)) * _tmp75 +
                       std::pow(_tmp33, Scalar(2)) * _tmp76;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp47 * _tmp97 + _tmp55 * _tmp96;
    _rhs(1, 0) = _tmp19 * _tmp88 + _tmp64 * _tmp96;
    _rhs(2, 0) = _tmp19 * _tmp90 + _tmp70 * _tmp97;
    _rhs(3, 0) = _tmp19 * _tmp89 + _tmp54 * _tmp97 + _tmp61 * _tmp96;
    _rhs(4, 0) = _tmp59 * _tmp96 + _tmp69 * _tmp98 + _tmp73 * _tmp97;
    _rhs(5, 0) = _tmp40 * _tmp83 + _tmp52 * _tmp97 + _tmp68 * _tmp98;
    _rhs(6, 0) = 0;
    _rhs(7, 0) = 0;
    _rhs(8, 0) = 0;
    _rhs(9, 0) = _tmp19 * _tmp91 + _tmp29 * _tmp97 + _tmp37 * _tmp96;
    _rhs(10, 0) = _tmp16 * _tmp98 + _tmp23 * _tmp97 + _tmp35 * _tmp96;
    _rhs(11, 0) = _tmp12 * _tmp98 + _tmp26 * _tmp97 + _tmp40 * _tmp86;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
