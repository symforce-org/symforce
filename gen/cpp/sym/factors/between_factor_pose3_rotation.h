// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_R_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_R_b
 *
 * In lie group terms:
 *     local_coordinates(a_R_b, between(a, b))
 *     to_tangent(compose(inverse(a_R_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3Rotation(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                                const sym::Rot3<Scalar>& a_R_b,
                                const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                                Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                                Eigen::Matrix<Scalar, 3, 12>* const jacobian = nullptr,
                                Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 605

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_R_b = a_R_b.Data();

  // Intermediate terms (179)
  const Scalar _tmp0 = 1 - epsilon;
  const Scalar _tmp1 = _a[2] * _b[1];
  const Scalar _tmp2 = _a[0] * _b[3];
  const Scalar _tmp3 = _a[1] * _b[2];
  const Scalar _tmp4 = _a[3] * _b[0];
  const Scalar _tmp5 = _tmp1 - _tmp2 - _tmp3 + _tmp4;
  const Scalar _tmp6 = _a_R_b[0] * _tmp5;
  const Scalar _tmp7 = _a[3] * _b[1];
  const Scalar _tmp8 = _a[1] * _b[3];
  const Scalar _tmp9 = _a[0] * _b[2];
  const Scalar _tmp10 = _a[2] * _b[0];
  const Scalar _tmp11 = -_tmp10 + _tmp7 - _tmp8 + _tmp9;
  const Scalar _tmp12 = _a_R_b[1] * _tmp11;
  const Scalar _tmp13 = _a[0] * _b[1];
  const Scalar _tmp14 = _a[2] * _b[3];
  const Scalar _tmp15 = _a[3] * _b[2];
  const Scalar _tmp16 = _a[1] * _b[0];
  const Scalar _tmp17 = -_tmp13 - _tmp14 + _tmp15 + _tmp16;
  const Scalar _tmp18 = _a_R_b[2] * _tmp17;
  const Scalar _tmp19 = -_tmp12 - _tmp18 - _tmp6;
  const Scalar _tmp20 = _a[1] * _b[1];
  const Scalar _tmp21 = _a[2] * _b[2];
  const Scalar _tmp22 = _a[0] * _b[0];
  const Scalar _tmp23 = _a[3] * _b[3];
  const Scalar _tmp24 = _tmp20 + _tmp21 + _tmp22 + _tmp23;
  const Scalar _tmp25 = _a_R_b[3] * _tmp24;
  const Scalar _tmp26 = std::min<Scalar>(_tmp0, std::fabs(_tmp19 - _tmp25));
  const Scalar _tmp27 =
      std::pow(Scalar(1 - std::pow(_tmp26, Scalar(2))), Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp28 = std::acos(_tmp26);
  const Scalar _tmp29 =
      2 * std::min<Scalar>(0, (((-_tmp19 + _tmp25) > 0) - ((-_tmp19 + _tmp25) < 0))) + 1;
  const Scalar _tmp30 = 2 * _tmp29;
  const Scalar _tmp31 = _tmp27 * _tmp28 * _tmp30;
  const Scalar _tmp32 = sqrt_info(0, 0) * (-_a_R_b[0] * _tmp24 - _a_R_b[1] * _tmp17 +
                                           _a_R_b[2] * _tmp11 + _a_R_b[3] * _tmp5);
  const Scalar _tmp33 =
      -_a_R_b[0] * _tmp11 + _a_R_b[1] * _tmp5 - _a_R_b[2] * _tmp24 + _a_R_b[3] * _tmp17;
  const Scalar _tmp34 = _tmp33 * sqrt_info(0, 2);
  const Scalar _tmp35 =
      _a_R_b[0] * _tmp17 - _a_R_b[1] * _tmp24 - _a_R_b[2] * _tmp5 + _a_R_b[3] * _tmp11;
  const Scalar _tmp36 = _tmp31 * _tmp35;
  const Scalar _tmp37 = _tmp31 * _tmp32 + _tmp31 * _tmp34 + _tmp36 * sqrt_info(0, 1);
  const Scalar _tmp38 = _tmp30 * sqrt_info(1, 2);
  const Scalar _tmp39 = _tmp27 * _tmp28 * _tmp33 * _tmp38 + _tmp36 * sqrt_info(1, 1);
  const Scalar _tmp40 = _tmp33 * sqrt_info(2, 2);
  const Scalar _tmp41 = _tmp31 * _tmp40;
  const Scalar _tmp42 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp43 = (Scalar(1) / Scalar(2)) * _tmp23;
  const Scalar _tmp44 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp45 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp46 = -_tmp42 - _tmp43 - _tmp44 - _tmp45;
  const Scalar _tmp47 = _a_R_b[1] * _tmp46;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp4;
  const Scalar _tmp52 = _tmp48 - _tmp49 - _tmp50 + _tmp51;
  const Scalar _tmp53 = _a_R_b[2] * _tmp52;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp14;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp58 = -_tmp54 - _tmp55 + _tmp56 + _tmp57;
  const Scalar _tmp59 = -_a_R_b[0] * _tmp58;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp63 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp64 = -_tmp60 + _tmp61 - _tmp62 + _tmp63;
  const Scalar _tmp65 = _a_R_b[3] * _tmp64;
  const Scalar _tmp66 = _tmp59 + _tmp65;
  const Scalar _tmp67 = _tmp47 - _tmp53 + _tmp66;
  const Scalar _tmp68 = _tmp12 + _tmp18 + _tmp25 + _tmp6;
  const Scalar _tmp69 = std::fabs(_tmp68);
  const Scalar _tmp70 = std::min<Scalar>(_tmp0, _tmp69);
  const Scalar _tmp71 = 1 - std::pow(_tmp70, Scalar(2));
  const Scalar _tmp72 = std::acos(_tmp70);
  const Scalar _tmp73 = _tmp72 / std::sqrt(_tmp71);
  const Scalar _tmp74 = _tmp30 * _tmp73;
  const Scalar _tmp75 = _tmp74 * sqrt_info(0, 2);
  const Scalar _tmp76 = -_a_R_b[1] * _tmp52;
  const Scalar _tmp77 = _a_R_b[2] * _tmp46;
  const Scalar _tmp78 = _a_R_b[3] * _tmp58;
  const Scalar _tmp79 = _a_R_b[0] * _tmp64;
  const Scalar _tmp80 = _tmp78 + _tmp79;
  const Scalar _tmp81 = _tmp76 - _tmp77 + _tmp80;
  const Scalar _tmp82 = _tmp74 * sqrt_info(0, 1);
  const Scalar _tmp83 = _a_R_b[3] * _tmp46;
  const Scalar _tmp84 = _a_R_b[0] * _tmp52;
  const Scalar _tmp85 = _a_R_b[2] * _tmp58;
  const Scalar _tmp86 = -_a_R_b[1] * _tmp64;
  const Scalar _tmp87 = _tmp85 + _tmp86;
  const Scalar _tmp88 = _tmp74 * sqrt_info(0, 0);
  const Scalar _tmp89 = _tmp35 * sqrt_info(0, 1);
  const Scalar _tmp90 = _a_R_b[3] * _tmp52;
  const Scalar _tmp91 = _a_R_b[0] * _tmp46;
  const Scalar _tmp92 = _a_R_b[1] * _tmp58;
  const Scalar _tmp93 = _a_R_b[2] * _tmp64;
  const Scalar _tmp94 = _tmp92 + _tmp93;
  const Scalar _tmp95 = _tmp90 + _tmp91 + _tmp94;
  const Scalar _tmp96 = _tmp29 * ((((_tmp0 - _tmp69) > 0) - ((_tmp0 - _tmp69) < 0)) + 1) *
                        (((_tmp68) > 0) - ((_tmp68) < 0));
  const Scalar _tmp97 = _tmp96 / _tmp71;
  const Scalar _tmp98 = _tmp95 * _tmp97;
  const Scalar _tmp99 = _tmp70 * _tmp72 * _tmp96 / (_tmp71 * std::sqrt(_tmp71));
  const Scalar _tmp100 = _tmp32 * _tmp99;
  const Scalar _tmp101 = _tmp89 * _tmp99;
  const Scalar _tmp102 = _tmp95 * _tmp99;
  const Scalar _tmp103 = _tmp100 * _tmp95 + _tmp101 * _tmp95 + _tmp102 * _tmp34 - _tmp32 * _tmp98 -
                         _tmp34 * _tmp98 + _tmp67 * _tmp75 + _tmp81 * _tmp82 +
                         _tmp88 * (_tmp83 - _tmp84 + _tmp87) - _tmp89 * _tmp98;
  const Scalar _tmp104 = _tmp38 * _tmp73;
  const Scalar _tmp105 = _tmp74 * sqrt_info(1, 1);
  const Scalar _tmp106 = _tmp33 * sqrt_info(1, 2);
  const Scalar _tmp107 = _tmp35 * sqrt_info(1, 1);
  const Scalar _tmp108 = _tmp102 * _tmp106 + _tmp102 * _tmp107 + _tmp104 * _tmp67 +
                         _tmp105 * _tmp81 - _tmp106 * _tmp98 - _tmp107 * _tmp98;
  const Scalar _tmp109 = _tmp74 * sqrt_info(2, 2);
  const Scalar _tmp110 = _tmp102 * _tmp40 + _tmp109 * _tmp67 - _tmp40 * _tmp98;
  const Scalar _tmp111 = _tmp60 - _tmp61 + _tmp62 - _tmp63;
  const Scalar _tmp112 = _a_R_b[0] * _tmp111;
  const Scalar _tmp113 = _tmp54 + _tmp55 - _tmp56 - _tmp57;
  const Scalar _tmp114 = _a_R_b[3] * _tmp113;
  const Scalar _tmp115 = _tmp114 + _tmp76;
  const Scalar _tmp116 = _a_R_b[3] * _tmp111;
  const Scalar _tmp117 = _a_R_b[0] * _tmp113;
  const Scalar _tmp118 = _tmp117 + _tmp53;
  const Scalar _tmp119 = _tmp116 + _tmp118 + _tmp47;
  const Scalar _tmp120 = _tmp119 * _tmp97;
  const Scalar _tmp121 = _a_R_b[1] * _tmp111;
  const Scalar _tmp122 = -_a_R_b[2] * _tmp113;
  const Scalar _tmp123 = _tmp122 + _tmp84;
  const Scalar _tmp124 = -_tmp121 + _tmp123 + _tmp83;
  const Scalar _tmp125 = -_a_R_b[2] * _tmp111;
  const Scalar _tmp126 = _a_R_b[1] * _tmp113;
  const Scalar _tmp127 = _tmp126 + _tmp90;
  const Scalar _tmp128 = _tmp125 + _tmp127 - _tmp91;
  const Scalar _tmp129 = _tmp119 * _tmp99;
  const Scalar _tmp130 = -_tmp120 * _tmp32 - _tmp120 * _tmp34 - _tmp120 * _tmp89 +
                         _tmp124 * _tmp82 + _tmp128 * _tmp75 + _tmp129 * _tmp32 + _tmp129 * _tmp34 +
                         _tmp129 * _tmp89 + _tmp88 * (-_tmp112 + _tmp115 + _tmp77);
  const Scalar _tmp131 = _tmp104 * _tmp128 + _tmp105 * _tmp124 - _tmp106 * _tmp120 +
                         _tmp106 * _tmp129 - _tmp107 * _tmp120 + _tmp107 * _tmp129;
  const Scalar _tmp132 = _tmp109 * _tmp128 - _tmp120 * _tmp40 + _tmp129 * _tmp40;
  const Scalar _tmp133 = -_tmp48 + _tmp49 + _tmp50 - _tmp51;
  const Scalar _tmp134 = _a_R_b[2] * _tmp133;
  const Scalar _tmp135 = _tmp116 + _tmp134;
  const Scalar _tmp136 = _a_R_b[3] * _tmp133;
  const Scalar _tmp137 = _tmp125 + _tmp136 + _tmp91 - _tmp92;
  const Scalar _tmp138 = _a_R_b[1] * _tmp133;
  const Scalar _tmp139 = _tmp112 + _tmp138;
  const Scalar _tmp140 = _tmp139 + _tmp77 + _tmp78;
  const Scalar _tmp141 = _tmp140 * _tmp99;
  const Scalar _tmp142 = -_a_R_b[0] * _tmp133;
  const Scalar _tmp143 = _tmp121 + _tmp142 + _tmp83 - _tmp85;
  const Scalar _tmp144 = _tmp140 * _tmp97;
  const Scalar _tmp145 = _tmp137 * _tmp82 + _tmp141 * _tmp32 + _tmp141 * _tmp34 + _tmp141 * _tmp89 +
                         _tmp143 * _tmp75 - _tmp144 * _tmp32 - _tmp144 * _tmp34 - _tmp144 * _tmp89 +
                         _tmp88 * (_tmp135 - _tmp47 + _tmp59);
  const Scalar _tmp146 = _tmp104 * _tmp143 + _tmp105 * _tmp137 + _tmp106 * _tmp141 -
                         _tmp106 * _tmp144 + _tmp107 * _tmp141 - _tmp107 * _tmp144;
  const Scalar _tmp147 = _tmp109 * _tmp143 + _tmp141 * _tmp40 - _tmp144 * _tmp40;
  const Scalar _tmp148 = _tmp42 + _tmp43 + _tmp44 + _tmp45;
  const Scalar _tmp149 = _a_R_b[0] * _tmp148;
  const Scalar _tmp150 = _tmp136 + _tmp149;
  const Scalar _tmp151 = _tmp150 + _tmp94;
  const Scalar _tmp152 = _tmp151 * _tmp97;
  const Scalar _tmp153 = _a_R_b[1] * _tmp148;
  const Scalar _tmp154 = -_tmp134 + _tmp153 + _tmp66;
  const Scalar _tmp155 = _a_R_b[3] * _tmp148;
  const Scalar _tmp156 = _tmp142 + _tmp155;
  const Scalar _tmp157 = _a_R_b[2] * _tmp148;
  const Scalar _tmp158 = -_tmp138 - _tmp157 + _tmp80;
  const Scalar _tmp159 = _tmp151 * _tmp99;
  const Scalar _tmp160 = _tmp100 * _tmp151 - _tmp152 * _tmp32 - _tmp152 * _tmp34 -
                         _tmp152 * _tmp89 + _tmp154 * _tmp75 + _tmp158 * _tmp82 + _tmp159 * _tmp34 +
                         _tmp159 * _tmp89 + _tmp88 * (_tmp156 + _tmp87);
  const Scalar _tmp161 = _tmp104 * _tmp154 + _tmp105 * _tmp158 - _tmp106 * _tmp152 +
                         _tmp106 * _tmp159 - _tmp107 * _tmp152 + _tmp107 * _tmp159;
  const Scalar _tmp162 = _tmp109 * _tmp154 - _tmp152 * _tmp40 + _tmp159 * _tmp40;
  const Scalar _tmp163 = _tmp118 + _tmp153 + _tmp65;
  const Scalar _tmp164 = _tmp163 * _tmp97;
  const Scalar _tmp165 = _tmp127 - _tmp149 - _tmp93;
  const Scalar _tmp166 = _tmp163 * _tmp99;
  const Scalar _tmp167 = _tmp123 + _tmp155 + _tmp86;
  const Scalar _tmp168 = _tmp100 * _tmp163 - _tmp164 * _tmp32 - _tmp164 * _tmp34 -
                         _tmp164 * _tmp89 + _tmp165 * _tmp75 + _tmp166 * _tmp34 + _tmp166 * _tmp89 +
                         _tmp167 * _tmp82 + _tmp88 * (_tmp115 + _tmp157 - _tmp79);
  const Scalar _tmp169 = _tmp104 * _tmp165 + _tmp105 * _tmp167 - _tmp106 * _tmp164 +
                         _tmp106 * _tmp166 - _tmp107 * _tmp164 + _tmp107 * _tmp166;
  const Scalar _tmp170 = _tmp109 * _tmp165 - _tmp164 * _tmp40 + _tmp166 * _tmp40;
  const Scalar _tmp171 = _tmp114 + _tmp139 + _tmp157;
  const Scalar _tmp172 = _tmp171 * _tmp99;
  const Scalar _tmp173 = _tmp171 * _tmp97;
  const Scalar _tmp174 = _tmp125 - _tmp126 + _tmp150;
  const Scalar _tmp175 = _tmp121 + _tmp122 + _tmp156;
  const Scalar _tmp176 = _tmp100 * _tmp171 + _tmp101 * _tmp171 + _tmp172 * _tmp34 -
                         _tmp173 * _tmp32 - _tmp173 * _tmp34 - _tmp173 * _tmp89 + _tmp174 * _tmp82 +
                         _tmp175 * _tmp75 + _tmp88 * (-_tmp117 + _tmp135 - _tmp153);
  const Scalar _tmp177 = _tmp104 * _tmp175 + _tmp105 * _tmp174 + _tmp106 * _tmp172 -
                         _tmp106 * _tmp173 + _tmp107 * _tmp172 - _tmp107 * _tmp173;
  const Scalar _tmp178 = _tmp109 * _tmp175 + _tmp172 * _tmp40 - _tmp173 * _tmp40;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp37;
    _res(1, 0) = _tmp39;
    _res(2, 0) = _tmp41;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp103;
    _jacobian(1, 0) = _tmp108;
    _jacobian(2, 0) = _tmp110;
    _jacobian(0, 1) = _tmp130;
    _jacobian(1, 1) = _tmp131;
    _jacobian(2, 1) = _tmp132;
    _jacobian(0, 2) = _tmp145;
    _jacobian(1, 2) = _tmp146;
    _jacobian(2, 2) = _tmp147;
    _jacobian(0, 3) = 0;
    _jacobian(1, 3) = 0;
    _jacobian(2, 3) = 0;
    _jacobian(0, 4) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(0, 5) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(0, 6) = _tmp160;
    _jacobian(1, 6) = _tmp161;
    _jacobian(2, 6) = _tmp162;
    _jacobian(0, 7) = _tmp168;
    _jacobian(1, 7) = _tmp169;
    _jacobian(2, 7) = _tmp170;
    _jacobian(0, 8) = _tmp176;
    _jacobian(1, 8) = _tmp177;
    _jacobian(2, 8) = _tmp178;
    _jacobian(0, 9) = 0;
    _jacobian(1, 9) = 0;
    _jacobian(2, 9) = 0;
    _jacobian(0, 10) = 0;
    _jacobian(1, 10) = 0;
    _jacobian(2, 10) = 0;
    _jacobian(0, 11) = 0;
    _jacobian(1, 11) = 0;
    _jacobian(2, 11) = 0;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) =
        std::pow(_tmp103, Scalar(2)) + std::pow(_tmp108, Scalar(2)) + std::pow(_tmp110, Scalar(2));
    _hessian(1, 0) = _tmp103 * _tmp130 + _tmp108 * _tmp131 + _tmp110 * _tmp132;
    _hessian(2, 0) = _tmp103 * _tmp145 + _tmp108 * _tmp146 + _tmp110 * _tmp147;
    _hessian(6, 0) = _tmp103 * _tmp160 + _tmp108 * _tmp161 + _tmp110 * _tmp162;
    _hessian(7, 0) = _tmp103 * _tmp168 + _tmp108 * _tmp169 + _tmp110 * _tmp170;
    _hessian(8, 0) = _tmp103 * _tmp176 + _tmp108 * _tmp177 + _tmp110 * _tmp178;
    _hessian(1, 1) =
        std::pow(_tmp130, Scalar(2)) + std::pow(_tmp131, Scalar(2)) + std::pow(_tmp132, Scalar(2));
    _hessian(2, 1) = _tmp130 * _tmp145 + _tmp131 * _tmp146 + _tmp132 * _tmp147;
    _hessian(6, 1) = _tmp130 * _tmp160 + _tmp131 * _tmp161 + _tmp132 * _tmp162;
    _hessian(7, 1) = _tmp130 * _tmp168 + _tmp131 * _tmp169 + _tmp132 * _tmp170;
    _hessian(8, 1) = _tmp130 * _tmp176 + _tmp131 * _tmp177 + _tmp132 * _tmp178;
    _hessian(2, 2) =
        std::pow(_tmp145, Scalar(2)) + std::pow(_tmp146, Scalar(2)) + std::pow(_tmp147, Scalar(2));
    _hessian(6, 2) = _tmp145 * _tmp160 + _tmp146 * _tmp161 + _tmp147 * _tmp162;
    _hessian(7, 2) = _tmp145 * _tmp168 + _tmp146 * _tmp169 + _tmp147 * _tmp170;
    _hessian(8, 2) = _tmp145 * _tmp176 + _tmp146 * _tmp177 + _tmp147 * _tmp178;
    _hessian(6, 6) =
        std::pow(_tmp160, Scalar(2)) + std::pow(_tmp161, Scalar(2)) + std::pow(_tmp162, Scalar(2));
    _hessian(7, 6) = _tmp160 * _tmp168 + _tmp161 * _tmp169 + _tmp162 * _tmp170;
    _hessian(8, 6) = _tmp160 * _tmp176 + _tmp161 * _tmp177 + _tmp162 * _tmp178;
    _hessian(7, 7) =
        std::pow(_tmp168, Scalar(2)) + std::pow(_tmp169, Scalar(2)) + std::pow(_tmp170, Scalar(2));
    _hessian(8, 7) = _tmp168 * _tmp176 + _tmp169 * _tmp177 + _tmp170 * _tmp178;
    _hessian(8, 8) =
        std::pow(_tmp176, Scalar(2)) + std::pow(_tmp177, Scalar(2)) + std::pow(_tmp178, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp103 * _tmp37 + _tmp108 * _tmp39 + _tmp110 * _tmp41;
    _rhs(1, 0) = _tmp130 * _tmp37 + _tmp131 * _tmp39 + _tmp132 * _tmp41;
    _rhs(2, 0) = _tmp145 * _tmp37 + _tmp146 * _tmp39 + _tmp147 * _tmp41;
    _rhs(3, 0) = 0;
    _rhs(4, 0) = 0;
    _rhs(5, 0) = 0;
    _rhs(6, 0) = _tmp160 * _tmp37 + _tmp161 * _tmp39 + _tmp162 * _tmp41;
    _rhs(7, 0) = _tmp168 * _tmp37 + _tmp169 * _tmp39 + _tmp170 * _tmp41;
    _rhs(8, 0) = _tmp176 * _tmp37 + _tmp177 * _tmp39 + _tmp178 * _tmp41;
    _rhs(9, 0) = 0;
    _rhs(10, 0) = 0;
    _rhs(11, 0) = 0;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
