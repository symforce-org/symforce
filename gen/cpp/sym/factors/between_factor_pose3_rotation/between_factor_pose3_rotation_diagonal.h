// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_R_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_R_b
 *
 * In lie group terms:
 *     local_coordinates(a_R_b, between(a, b))
 *     to_tangent(compose(inverse(a_R_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Pass in a single scalar if
 *                isotropic, a vector if diagonal, and a square matrix otherwise.
 *     jacobian: (3x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3RotationDiagonal(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                                        const sym::Rot3<Scalar>& a_R_b,
                                        const Eigen::Matrix<Scalar, 3, 1>& sqrt_info,
                                        const Scalar epsilon,
                                        Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                                        Eigen::Matrix<Scalar, 3, 12>* const jacobian = nullptr,
                                        Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                        Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 481

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_R_b = a_R_b.Data();

  // Intermediate terms (156)
  const Scalar _tmp0 = _a[1] * _b[1];
  const Scalar _tmp1 = _a[2] * _b[2];
  const Scalar _tmp2 = _a[0] * _b[0];
  const Scalar _tmp3 = _a[3] * _b[3];
  const Scalar _tmp4 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _a[2] * _b[1];
  const Scalar _tmp6 = _a[0] * _b[3];
  const Scalar _tmp7 = _a[1] * _b[2];
  const Scalar _tmp8 = _a[3] * _b[0];
  const Scalar _tmp9 = _tmp5 - _tmp6 - _tmp7 + _tmp8;
  const Scalar _tmp10 = _a[3] * _b[1];
  const Scalar _tmp11 = _a[1] * _b[3];
  const Scalar _tmp12 = _a[0] * _b[2];
  const Scalar _tmp13 = _a[2] * _b[0];
  const Scalar _tmp14 = _tmp10 - _tmp11 + _tmp12 - _tmp13;
  const Scalar _tmp15 = _a[0] * _b[1];
  const Scalar _tmp16 = _a[2] * _b[3];
  const Scalar _tmp17 = _a[3] * _b[2];
  const Scalar _tmp18 = _a[1] * _b[0];
  const Scalar _tmp19 = -_tmp15 - _tmp16 + _tmp17 + _tmp18;
  const Scalar _tmp20 =
      -_a_R_b[0] * _tmp4 - _a_R_b[1] * _tmp19 + _a_R_b[2] * _tmp14 + _a_R_b[3] * _tmp9;
  const Scalar _tmp21 = 1 - epsilon;
  const Scalar _tmp22 = _a_R_b[0] * _tmp9;
  const Scalar _tmp23 = _a_R_b[1] * _tmp14;
  const Scalar _tmp24 = _a_R_b[2] * _tmp19;
  const Scalar _tmp25 = -_tmp22 - _tmp23 - _tmp24;
  const Scalar _tmp26 = _a_R_b[3] * _tmp4;
  const Scalar _tmp27 = std::min<Scalar>(_tmp21, std::fabs(_tmp25 - _tmp26));
  const Scalar _tmp28 = std::acos(_tmp27) / std::sqrt(Scalar(1 - std::pow(_tmp27, Scalar(2))));
  const Scalar _tmp29 =
      2 * std::min<Scalar>(0, (((-_tmp25 + _tmp26) > 0) - ((-_tmp25 + _tmp26) < 0))) + 1;
  const Scalar _tmp30 = 2 * _tmp29;
  const Scalar _tmp31 = _tmp30 * sqrt_info(0, 0);
  const Scalar _tmp32 = _tmp20 * _tmp28 * _tmp31;
  const Scalar _tmp33 =
      _a_R_b[0] * _tmp19 - _a_R_b[1] * _tmp4 - _a_R_b[2] * _tmp9 + _a_R_b[3] * _tmp14;
  const Scalar _tmp34 = _tmp30 * sqrt_info(1, 0);
  const Scalar _tmp35 = _tmp28 * _tmp33 * _tmp34;
  const Scalar _tmp36 =
      -_a_R_b[0] * _tmp14 + _a_R_b[1] * _tmp9 - _a_R_b[2] * _tmp4 + _a_R_b[3] * _tmp19;
  const Scalar _tmp37 = _tmp30 * sqrt_info(2, 0);
  const Scalar _tmp38 = _tmp28 * _tmp36 * _tmp37;
  const Scalar _tmp39 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp40 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp41 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp42 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp43 = -_tmp39 - _tmp40 - _tmp41 - _tmp42;
  const Scalar _tmp44 = _a_R_b[0] * _tmp43;
  const Scalar _tmp45 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp46 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp49 = _tmp45 - _tmp46 - _tmp47 + _tmp48;
  const Scalar _tmp50 = _a_R_b[3] * _tmp49;
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp52 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp55 = -_tmp51 - _tmp52 + _tmp53 + _tmp54;
  const Scalar _tmp56 = _a_R_b[1] * _tmp55;
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp61 = -_tmp57 + _tmp58 - _tmp59 + _tmp60;
  const Scalar _tmp62 = _a_R_b[2] * _tmp61;
  const Scalar _tmp63 = _tmp56 + _tmp62;
  const Scalar _tmp64 = _tmp44 + _tmp50 + _tmp63;
  const Scalar _tmp65 = _tmp20 * sqrt_info(0, 0);
  const Scalar _tmp66 = _tmp22 + _tmp23 + _tmp24 + _tmp26;
  const Scalar _tmp67 = std::fabs(_tmp66);
  const Scalar _tmp68 = std::min<Scalar>(_tmp21, _tmp67);
  const Scalar _tmp69 = std::acos(_tmp68);
  const Scalar _tmp70 = 1 - std::pow(_tmp68, Scalar(2));
  const Scalar _tmp71 = _tmp29 * ((((_tmp21 - _tmp67) > 0) - ((_tmp21 - _tmp67) < 0)) + 1) *
                        (((_tmp66) > 0) - ((_tmp66) < 0));
  const Scalar _tmp72 = _tmp68 * _tmp69 * _tmp71 / (_tmp70 * std::sqrt(_tmp70));
  const Scalar _tmp73 = _tmp65 * _tmp72;
  const Scalar _tmp74 = _tmp71 / _tmp70;
  const Scalar _tmp75 = _tmp64 * _tmp74;
  const Scalar _tmp76 = _a_R_b[3] * _tmp43;
  const Scalar _tmp77 = _a_R_b[0] * _tmp49;
  const Scalar _tmp78 = _a_R_b[2] * _tmp55;
  const Scalar _tmp79 = -_a_R_b[1] * _tmp61;
  const Scalar _tmp80 = _tmp78 + _tmp79;
  const Scalar _tmp81 = _tmp69 / std::sqrt(_tmp70);
  const Scalar _tmp82 = _tmp31 * _tmp81;
  const Scalar _tmp83 = _tmp64 * _tmp73 - _tmp65 * _tmp75 + _tmp82 * (_tmp76 - _tmp77 + _tmp80);
  const Scalar _tmp84 = _tmp33 * sqrt_info(1, 0);
  const Scalar _tmp85 = _tmp72 * _tmp84;
  const Scalar _tmp86 = _a_R_b[2] * _tmp43;
  const Scalar _tmp87 = -_a_R_b[1] * _tmp49;
  const Scalar _tmp88 = _a_R_b[3] * _tmp55;
  const Scalar _tmp89 = _a_R_b[0] * _tmp61;
  const Scalar _tmp90 = _tmp88 + _tmp89;
  const Scalar _tmp91 = _tmp34 * _tmp81;
  const Scalar _tmp92 = _tmp64 * _tmp85 - _tmp75 * _tmp84 + _tmp91 * (-_tmp86 + _tmp87 + _tmp90);
  const Scalar _tmp93 = _tmp36 * sqrt_info(2, 0);
  const Scalar _tmp94 = _tmp72 * _tmp93;
  const Scalar _tmp95 = _a_R_b[1] * _tmp43;
  const Scalar _tmp96 = _a_R_b[2] * _tmp49;
  const Scalar _tmp97 = -_a_R_b[0] * _tmp55;
  const Scalar _tmp98 = _a_R_b[3] * _tmp61;
  const Scalar _tmp99 = _tmp97 + _tmp98;
  const Scalar _tmp100 = _tmp37 * _tmp81;
  const Scalar _tmp101 = _tmp100 * (_tmp95 - _tmp96 + _tmp99) + _tmp64 * _tmp94 - _tmp75 * _tmp93;
  const Scalar _tmp102 = _tmp57 - _tmp58 + _tmp59 - _tmp60;
  const Scalar _tmp103 = _a_R_b[3] * _tmp102;
  const Scalar _tmp104 = _tmp51 + _tmp52 - _tmp53 - _tmp54;
  const Scalar _tmp105 = _a_R_b[0] * _tmp104;
  const Scalar _tmp106 = _tmp105 + _tmp96;
  const Scalar _tmp107 = _tmp103 + _tmp106 + _tmp95;
  const Scalar _tmp108 = _tmp107 * _tmp74;
  const Scalar _tmp109 = _a_R_b[3] * _tmp104;
  const Scalar _tmp110 = _a_R_b[0] * _tmp102;
  const Scalar _tmp111 =
      _tmp107 * _tmp73 - _tmp108 * _tmp65 + _tmp82 * (_tmp109 - _tmp110 + _tmp86 + _tmp87);
  const Scalar _tmp112 = _a_R_b[1] * _tmp102;
  const Scalar _tmp113 = -_a_R_b[2] * _tmp104;
  const Scalar _tmp114 = _tmp113 + _tmp77;
  const Scalar _tmp115 =
      _tmp107 * _tmp85 - _tmp108 * _tmp84 + _tmp91 * (-_tmp112 + _tmp114 + _tmp76);
  const Scalar _tmp116 = -_a_R_b[2] * _tmp102;
  const Scalar _tmp117 = _a_R_b[1] * _tmp104;
  const Scalar _tmp118 = _tmp117 + _tmp50;
  const Scalar _tmp119 =
      _tmp100 * (_tmp116 + _tmp118 - _tmp44) + _tmp107 * _tmp94 - _tmp108 * _tmp93;
  const Scalar _tmp120 = -_tmp45 + _tmp46 + _tmp47 - _tmp48;
  const Scalar _tmp121 = _a_R_b[1] * _tmp120;
  const Scalar _tmp122 = _tmp110 + _tmp121;
  const Scalar _tmp123 = _tmp122 + _tmp86 + _tmp88;
  const Scalar _tmp124 = _a_R_b[2] * _tmp120;
  const Scalar _tmp125 = _tmp103 + _tmp124;
  const Scalar _tmp126 = _tmp123 * _tmp74;
  const Scalar _tmp127 = _tmp123 * _tmp73 - _tmp126 * _tmp65 + _tmp82 * (_tmp125 - _tmp95 + _tmp97);
  const Scalar _tmp128 = _a_R_b[3] * _tmp120;
  const Scalar _tmp129 = _tmp116 + _tmp128;
  const Scalar _tmp130 = _tmp123 * _tmp85 - _tmp126 * _tmp84 + _tmp91 * (_tmp129 + _tmp44 - _tmp56);
  const Scalar _tmp131 = -_a_R_b[0] * _tmp120;
  const Scalar _tmp132 =
      _tmp100 * (_tmp112 + _tmp131 + _tmp76 - _tmp78) + _tmp123 * _tmp94 - _tmp126 * _tmp93;
  const Scalar _tmp133 = _tmp39 + _tmp40 + _tmp41 + _tmp42;
  const Scalar _tmp134 = _a_R_b[3] * _tmp133;
  const Scalar _tmp135 = _tmp131 + _tmp134;
  const Scalar _tmp136 = _a_R_b[0] * _tmp133;
  const Scalar _tmp137 = _tmp128 + _tmp136 + _tmp63;
  const Scalar _tmp138 = _tmp137 * _tmp74;
  const Scalar _tmp139 = _tmp137 * _tmp72;
  const Scalar _tmp140 = -_tmp138 * _tmp65 + _tmp139 * _tmp65 + _tmp82 * (_tmp135 + _tmp80);
  const Scalar _tmp141 = _a_R_b[2] * _tmp133;
  const Scalar _tmp142 =
      -_tmp138 * _tmp84 + _tmp139 * _tmp84 + _tmp91 * (-_tmp121 - _tmp141 + _tmp90);
  const Scalar _tmp143 = _a_R_b[1] * _tmp133;
  const Scalar _tmp144 =
      _tmp100 * (-_tmp124 + _tmp143 + _tmp99) - _tmp138 * _tmp93 + _tmp139 * _tmp93;
  const Scalar _tmp145 = _tmp106 + _tmp143 + _tmp98;
  const Scalar _tmp146 = _tmp145 * _tmp74;
  const Scalar _tmp147 = _tmp109 + _tmp141;
  const Scalar _tmp148 = _tmp145 * _tmp73 - _tmp146 * _tmp65 + _tmp82 * (_tmp147 + _tmp87 - _tmp89);
  const Scalar _tmp149 =
      _tmp145 * _tmp85 - _tmp146 * _tmp84 + _tmp91 * (_tmp114 + _tmp134 + _tmp79);
  const Scalar _tmp150 =
      _tmp100 * (_tmp118 - _tmp136 - _tmp62) + _tmp145 * _tmp94 - _tmp146 * _tmp93;
  const Scalar _tmp151 = _tmp122 + _tmp147;
  const Scalar _tmp152 = _tmp151 * _tmp74;
  const Scalar _tmp153 =
      _tmp151 * _tmp73 - _tmp152 * _tmp65 + _tmp82 * (-_tmp105 + _tmp125 - _tmp143);
  const Scalar _tmp154 =
      _tmp151 * _tmp85 - _tmp152 * _tmp84 + _tmp91 * (-_tmp117 + _tmp129 + _tmp136);
  const Scalar _tmp155 =
      _tmp100 * (_tmp112 + _tmp113 + _tmp135) + _tmp151 * _tmp94 - _tmp152 * _tmp93;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp32;
    _res(1, 0) = _tmp35;
    _res(2, 0) = _tmp38;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp83;
    _jacobian(1, 0) = _tmp92;
    _jacobian(2, 0) = _tmp101;
    _jacobian(0, 1) = _tmp111;
    _jacobian(1, 1) = _tmp115;
    _jacobian(2, 1) = _tmp119;
    _jacobian(0, 2) = _tmp127;
    _jacobian(1, 2) = _tmp130;
    _jacobian(2, 2) = _tmp132;
    _jacobian(0, 3) = 0;
    _jacobian(1, 3) = 0;
    _jacobian(2, 3) = 0;
    _jacobian(0, 4) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(0, 5) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(0, 6) = _tmp140;
    _jacobian(1, 6) = _tmp142;
    _jacobian(2, 6) = _tmp144;
    _jacobian(0, 7) = _tmp148;
    _jacobian(1, 7) = _tmp149;
    _jacobian(2, 7) = _tmp150;
    _jacobian(0, 8) = _tmp153;
    _jacobian(1, 8) = _tmp154;
    _jacobian(2, 8) = _tmp155;
    _jacobian(0, 9) = 0;
    _jacobian(1, 9) = 0;
    _jacobian(2, 9) = 0;
    _jacobian(0, 10) = 0;
    _jacobian(1, 10) = 0;
    _jacobian(2, 10) = 0;
    _jacobian(0, 11) = 0;
    _jacobian(1, 11) = 0;
    _jacobian(2, 11) = 0;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) =
        std::pow(_tmp101, Scalar(2)) + std::pow(_tmp83, Scalar(2)) + std::pow(_tmp92, Scalar(2));
    _hessian(1, 0) = _tmp101 * _tmp119 + _tmp111 * _tmp83 + _tmp115 * _tmp92;
    _hessian(2, 0) = _tmp101 * _tmp132 + _tmp127 * _tmp83 + _tmp130 * _tmp92;
    _hessian(6, 0) = _tmp101 * _tmp144 + _tmp140 * _tmp83 + _tmp142 * _tmp92;
    _hessian(7, 0) = _tmp101 * _tmp150 + _tmp148 * _tmp83 + _tmp149 * _tmp92;
    _hessian(8, 0) = _tmp101 * _tmp155 + _tmp153 * _tmp83 + _tmp154 * _tmp92;
    _hessian(1, 1) =
        std::pow(_tmp111, Scalar(2)) + std::pow(_tmp115, Scalar(2)) + std::pow(_tmp119, Scalar(2));
    _hessian(2, 1) = _tmp111 * _tmp127 + _tmp115 * _tmp130 + _tmp119 * _tmp132;
    _hessian(6, 1) = _tmp111 * _tmp140 + _tmp115 * _tmp142 + _tmp119 * _tmp144;
    _hessian(7, 1) = _tmp111 * _tmp148 + _tmp115 * _tmp149 + _tmp119 * _tmp150;
    _hessian(8, 1) = _tmp111 * _tmp153 + _tmp115 * _tmp154 + _tmp119 * _tmp155;
    _hessian(2, 2) =
        std::pow(_tmp127, Scalar(2)) + std::pow(_tmp130, Scalar(2)) + std::pow(_tmp132, Scalar(2));
    _hessian(6, 2) = _tmp127 * _tmp140 + _tmp130 * _tmp142 + _tmp132 * _tmp144;
    _hessian(7, 2) = _tmp127 * _tmp148 + _tmp130 * _tmp149 + _tmp132 * _tmp150;
    _hessian(8, 2) = _tmp127 * _tmp153 + _tmp130 * _tmp154 + _tmp132 * _tmp155;
    _hessian(6, 6) =
        std::pow(_tmp140, Scalar(2)) + std::pow(_tmp142, Scalar(2)) + std::pow(_tmp144, Scalar(2));
    _hessian(7, 6) = _tmp140 * _tmp148 + _tmp142 * _tmp149 + _tmp144 * _tmp150;
    _hessian(8, 6) = _tmp140 * _tmp153 + _tmp142 * _tmp154 + _tmp144 * _tmp155;
    _hessian(7, 7) =
        std::pow(_tmp148, Scalar(2)) + std::pow(_tmp149, Scalar(2)) + std::pow(_tmp150, Scalar(2));
    _hessian(8, 7) = _tmp148 * _tmp153 + _tmp149 * _tmp154 + _tmp150 * _tmp155;
    _hessian(8, 8) =
        std::pow(_tmp153, Scalar(2)) + std::pow(_tmp154, Scalar(2)) + std::pow(_tmp155, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp101 * _tmp38 + _tmp32 * _tmp83 + _tmp35 * _tmp92;
    _rhs(1, 0) = _tmp111 * _tmp32 + _tmp115 * _tmp35 + _tmp119 * _tmp38;
    _rhs(2, 0) = _tmp127 * _tmp32 + _tmp130 * _tmp35 + _tmp132 * _tmp38;
    _rhs(3, 0) = 0;
    _rhs(4, 0) = 0;
    _rhs(5, 0) = 0;
    _rhs(6, 0) = _tmp140 * _tmp32 + _tmp142 * _tmp35 + _tmp144 * _tmp38;
    _rhs(7, 0) = _tmp148 * _tmp32 + _tmp149 * _tmp35 + _tmp150 * _tmp38;
    _rhs(8, 0) = _tmp153 * _tmp32 + _tmp154 * _tmp35 + _tmp155 * _tmp38;
    _rhs(9, 0) = 0;
    _rhs(10, 0) = 0;
    _rhs(11, 0) = 0;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
