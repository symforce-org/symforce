// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between translation_norm and (a.t - b.t).norm().
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. In this one dimensional case
 *             this is just 1/sigma.
 *     jacobian: (1x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3TranslationNorm(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                                       const Scalar translation_norm,
                                       const Eigen::Matrix<Scalar, 1, 1>& sqrt_info,
                                       const Scalar epsilon,
                                       Eigen::Matrix<Scalar, 1, 1>* const res = nullptr,
                                       Eigen::Matrix<Scalar, 1, 12>* const jacobian = nullptr,
                                       Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                       Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 44

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (30)
  const Scalar _tmp0 = _a[4] - _b[4];
  const Scalar _tmp1 = std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = _a[5] - _b[5];
  const Scalar _tmp3 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = _a[6] - _b[6];
  const Scalar _tmp5 = std::pow(_tmp4, Scalar(2));
  const Scalar _tmp6 = _tmp1 + _tmp3 + _tmp5 + epsilon;
  const Scalar _tmp7 = std::sqrt(_tmp6);
  const Scalar _tmp8 = -_tmp7 + translation_norm;
  const Scalar _tmp9 = Scalar(1.0) / (_tmp7);
  const Scalar _tmp10 = _tmp9 * sqrt_info(0, 0);
  const Scalar _tmp11 = _tmp0 * _tmp10;
  const Scalar _tmp12 = _tmp10 * _tmp2;
  const Scalar _tmp13 = _tmp10 * _tmp4;
  const Scalar _tmp14 = std::pow(sqrt_info(0, 0), Scalar(2));
  const Scalar _tmp15 = _tmp14 / _tmp6;
  const Scalar _tmp16 = _tmp1 * _tmp15;
  const Scalar _tmp17 = _tmp0 * _tmp15;
  const Scalar _tmp18 = _tmp17 * _tmp2;
  const Scalar _tmp19 = _tmp17 * _tmp4;
  const Scalar _tmp20 = -_tmp18;
  const Scalar _tmp21 = -_tmp19;
  const Scalar _tmp22 = _tmp15 * _tmp3;
  const Scalar _tmp23 = _tmp15 * _tmp2 * _tmp4;
  const Scalar _tmp24 = -_tmp23;
  const Scalar _tmp25 = _tmp15 * _tmp5;
  const Scalar _tmp26 = _tmp14 * _tmp8 * _tmp9;
  const Scalar _tmp27 = _tmp0 * _tmp26;
  const Scalar _tmp28 = _tmp2 * _tmp26;
  const Scalar _tmp29 = _tmp26 * _tmp4;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _res = (*res);

    _res(0, 0) = _tmp8 * sqrt_info(0, 0);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 1, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = 0;
    _jacobian(0, 1) = 0;
    _jacobian(0, 2) = 0;
    _jacobian(0, 3) = -_tmp11;
    _jacobian(0, 4) = -_tmp12;
    _jacobian(0, 5) = -_tmp13;
    _jacobian(0, 6) = 0;
    _jacobian(0, 7) = 0;
    _jacobian(0, 8) = 0;
    _jacobian(0, 9) = _tmp11;
    _jacobian(0, 10) = _tmp12;
    _jacobian(0, 11) = _tmp13;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(3, 3) = _tmp16;
    _hessian(4, 3) = _tmp18;
    _hessian(5, 3) = _tmp19;
    _hessian(9, 3) = -_tmp16;
    _hessian(10, 3) = _tmp20;
    _hessian(11, 3) = _tmp21;
    _hessian(4, 4) = _tmp22;
    _hessian(5, 4) = _tmp23;
    _hessian(9, 4) = _tmp20;
    _hessian(10, 4) = -_tmp22;
    _hessian(11, 4) = _tmp24;
    _hessian(5, 5) = _tmp25;
    _hessian(9, 5) = _tmp21;
    _hessian(10, 5) = _tmp24;
    _hessian(11, 5) = -_tmp25;
    _hessian(9, 9) = _tmp16;
    _hessian(10, 9) = _tmp18;
    _hessian(11, 9) = _tmp19;
    _hessian(10, 10) = _tmp22;
    _hessian(11, 10) = _tmp23;
    _hessian(11, 11) = _tmp25;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = 0;
    _rhs(1, 0) = 0;
    _rhs(2, 0) = 0;
    _rhs(3, 0) = -_tmp27;
    _rhs(4, 0) = -_tmp28;
    _rhs(5, 0) = -_tmp29;
    _rhs(6, 0) = 0;
    _rhs(7, 0) = 0;
    _rhs(8, 0) = 0;
    _rhs(9, 0) = _tmp27;
    _rhs(10, 0) = _tmp28;
    _rhs(11, 0) = _tmp29;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
