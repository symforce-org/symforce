// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot2.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (1x2) jacobian of res wrt args a (1), b (1)
 *     hessian: (2x2) Gauss-Newton hessian for args a (1), b (1)
 *     rhs: (2x1) Gauss-Newton rhs for args a (1), b (1)
 */
template <typename Scalar>
void BetweenFactorRot2(const sym::Rot2<Scalar>& a, const sym::Rot2<Scalar>& b,
                       const sym::Rot2<Scalar>& a_T_b, const Eigen::Matrix<Scalar, 1, 1>& sqrt_info,
                       const Scalar epsilon, Eigen::Matrix<Scalar, 1, 1>* const res = nullptr,
                       Eigen::Matrix<Scalar, 1, 2>* const jacobian = nullptr,
                       Eigen::Matrix<Scalar, 2, 2>* const hessian = nullptr,
                       Eigen::Matrix<Scalar, 2, 1>* const rhs = nullptr) {
  // Total ops: 59

  // Input arrays
  const Eigen::Matrix<Scalar, 2, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 2, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 2, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (27)
  const Scalar _tmp0 = _a[0] * _b[0];
  const Scalar _tmp1 = _a[1] * _b[1];
  const Scalar _tmp2 = _tmp0 + _tmp1;
  const Scalar _tmp3 = _a_T_b[1] * _tmp2;
  const Scalar _tmp4 = _a[0] * _b[1];
  const Scalar _tmp5 = _a[1] * _b[0];
  const Scalar _tmp6 = _tmp4 - _tmp5;
  const Scalar _tmp7 = _a_T_b[0] * _tmp6;
  const Scalar _tmp8 = -_tmp3 + _tmp7;
  const Scalar _tmp9 = _a_T_b[0] * _tmp2;
  const Scalar _tmp10 = _a_T_b[1] * _tmp6;
  const Scalar _tmp11 = _tmp10 + _tmp9;
  const Scalar _tmp12 = _tmp11 + epsilon * ((((_tmp11) > 0) - ((_tmp11) < 0)) + Scalar(0.5));
  const Scalar _tmp13 = std::atan2(_tmp8, _tmp12);
  const Scalar _tmp14 = -_tmp0 - _tmp1;
  const Scalar _tmp15 = Scalar(1.0) / (_tmp12);
  const Scalar _tmp16 = std::pow(_tmp12, Scalar(2));
  const Scalar _tmp17 = _tmp8 / _tmp16;
  const Scalar _tmp18 =
      _tmp15 * (_a_T_b[0] * _tmp14 - _tmp10) - _tmp17 * (_a_T_b[1] * _tmp14 + _tmp7);
  const Scalar _tmp19 = _tmp16 + std::pow(_tmp8, Scalar(2));
  const Scalar _tmp20 = _tmp16 / _tmp19;
  const Scalar _tmp21 = _tmp20 * sqrt_info(0, 0);
  const Scalar _tmp22 = -_tmp4 + _tmp5;
  const Scalar _tmp23 =
      _tmp15 * (-_a_T_b[1] * _tmp22 + _tmp9) - _tmp17 * (_a_T_b[0] * _tmp22 + _tmp3);
  const Scalar _tmp24 = std::pow(sqrt_info(0, 0), Scalar(2));
  const Scalar _tmp25 = std::pow(_tmp12, Scalar(4)) * _tmp24 / std::pow(_tmp19, Scalar(2));
  const Scalar _tmp26 = _tmp13 * _tmp20 * _tmp24;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _res = (*res);

    _res(0, 0) = _tmp13 * sqrt_info(0, 0);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 1, 2>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp18 * _tmp21;
    _jacobian(0, 1) = _tmp21 * _tmp23;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 2, 2>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp18, Scalar(2)) * _tmp25;
    _hessian(1, 0) = _tmp18 * _tmp23 * _tmp25;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp23, Scalar(2)) * _tmp25;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp18 * _tmp26;
    _rhs(1, 0) = _tmp23 * _tmp26;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
