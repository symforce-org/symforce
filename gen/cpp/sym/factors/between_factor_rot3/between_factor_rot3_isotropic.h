// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Pass in a single scalar if
 *                isotropic, a vector if diagonal, and a square matrix otherwise.
 *     jacobian: (3x6) jacobian of res wrt args a (3), b (3)
 *     hessian: (6x6) Gauss-Newton hessian for args a (3), b (3)
 *     rhs: (6x1) Gauss-Newton rhs for args a (3), b (3)
 */
template <typename Scalar>
void BetweenFactorRot3Isotropic(const sym::Rot3<Scalar>& a, const sym::Rot3<Scalar>& b,
                                const sym::Rot3<Scalar>& a_T_b, const Scalar sqrt_info,
                                const Scalar epsilon,
                                Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                                Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr,
                                Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                                Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 468

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (145)
  const Scalar _tmp0 = _a[3] * _b[3];
  const Scalar _tmp1 = _a[2] * _b[2];
  const Scalar _tmp2 = _a[0] * _b[0];
  const Scalar _tmp3 = _a[1] * _b[1];
  const Scalar _tmp4 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _a[3] * _b[1];
  const Scalar _tmp6 = _a[2] * _b[0];
  const Scalar _tmp7 = _a[0] * _b[2];
  const Scalar _tmp8 = _a[1] * _b[3];
  const Scalar _tmp9 = _tmp5 - _tmp6 + _tmp7 - _tmp8;
  const Scalar _tmp10 = _a[3] * _b[0];
  const Scalar _tmp11 = _a[2] * _b[1];
  const Scalar _tmp12 = _a[0] * _b[3];
  const Scalar _tmp13 = _a[1] * _b[2];
  const Scalar _tmp14 = _tmp10 + _tmp11 - _tmp12 - _tmp13;
  const Scalar _tmp15 = _a[3] * _b[2];
  const Scalar _tmp16 = _a[2] * _b[3];
  const Scalar _tmp17 = _a[0] * _b[1];
  const Scalar _tmp18 = _a[1] * _b[0];
  const Scalar _tmp19 = _tmp15 - _tmp16 - _tmp17 + _tmp18;
  const Scalar _tmp20 =
      -_a_T_b[0] * _tmp4 - _a_T_b[1] * _tmp19 + _a_T_b[2] * _tmp9 + _a_T_b[3] * _tmp14;
  const Scalar _tmp21 = _a_T_b[3] * _tmp4;
  const Scalar _tmp22 = _a_T_b[1] * _tmp9;
  const Scalar _tmp23 = _a_T_b[0] * _tmp14;
  const Scalar _tmp24 = _a_T_b[2] * _tmp19;
  const Scalar _tmp25 = _tmp21 + _tmp22 + _tmp23 + _tmp24;
  const Scalar _tmp26 = 1 - epsilon;
  const Scalar _tmp27 = std::min<Scalar>(_tmp26, std::fabs(_tmp25));
  const Scalar _tmp28 =
      sqrt_info * (2 * std::min<Scalar>(0, (((_tmp25) > 0) - ((_tmp25) < 0))) + 1);
  const Scalar _tmp29 = 2 * _tmp28;
  const Scalar _tmp30 =
      _tmp29 * std::acos(_tmp27) / std::sqrt(Scalar(1 - std::pow(_tmp27, Scalar(2))));
  const Scalar _tmp31 = _tmp20 * _tmp30;
  const Scalar _tmp32 =
      _a_T_b[0] * _tmp19 - _a_T_b[1] * _tmp4 - _a_T_b[2] * _tmp14 + _a_T_b[3] * _tmp9;
  const Scalar _tmp33 = _tmp30 * _tmp32;
  const Scalar _tmp34 =
      -_a_T_b[0] * _tmp9 + _a_T_b[1] * _tmp14 - _a_T_b[2] * _tmp4 + _a_T_b[3] * _tmp19;
  const Scalar _tmp35 = _tmp30 * _tmp34;
  const Scalar _tmp36 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp37 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp38 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp39 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp40 = _tmp36 + _tmp37 - _tmp38 - _tmp39;
  const Scalar _tmp41 = _a_T_b[3] * _tmp40;
  const Scalar _tmp42 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp43 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp44 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp45 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp46 = -_tmp42 - _tmp43 - _tmp44 - _tmp45;
  const Scalar _tmp47 = _a_T_b[0] * _tmp46;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp52 = -_tmp48 + _tmp49 - _tmp50 + _tmp51;
  const Scalar _tmp53 = _a_T_b[2] * _tmp52;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp58 = _tmp54 - _tmp55 - _tmp56 + _tmp57;
  const Scalar _tmp59 = _a_T_b[1] * _tmp58;
  const Scalar _tmp60 = _tmp53 + _tmp59;
  const Scalar _tmp61 = _tmp41 + _tmp47 + _tmp60;
  const Scalar _tmp62 = _tmp21 + _tmp22 + _tmp23 + _tmp24;
  const Scalar _tmp63 = std::fabs(_tmp62);
  const Scalar _tmp64 = std::min<Scalar>(_tmp26, _tmp63);
  const Scalar _tmp65 = std::acos(_tmp64);
  const Scalar _tmp66 = 1 - std::pow(_tmp64, Scalar(2));
  const Scalar _tmp67 = _tmp28 * ((((_tmp26 - _tmp63) > 0) - ((_tmp26 - _tmp63) < 0)) + 1) *
                        (((_tmp62) > 0) - ((_tmp62) < 0));
  const Scalar _tmp68 = _tmp64 * _tmp65 * _tmp67 / (_tmp66 * std::sqrt(_tmp66));
  const Scalar _tmp69 = _tmp20 * _tmp68;
  const Scalar _tmp70 = _tmp67 / _tmp66;
  const Scalar _tmp71 = _tmp20 * _tmp70;
  const Scalar _tmp72 = _a_T_b[3] * _tmp46;
  const Scalar _tmp73 = -_a_T_b[1] * _tmp52;
  const Scalar _tmp74 = _a_T_b[2] * _tmp58;
  const Scalar _tmp75 = _a_T_b[0] * _tmp40;
  const Scalar _tmp76 = _tmp29 * _tmp65 / std::sqrt(_tmp66);
  const Scalar _tmp77 =
      _tmp61 * _tmp69 - _tmp61 * _tmp71 + _tmp76 * (_tmp72 + _tmp73 + _tmp74 - _tmp75);
  const Scalar _tmp78 = -_a_T_b[1] * _tmp40;
  const Scalar _tmp79 = _a_T_b[2] * _tmp46;
  const Scalar _tmp80 = _a_T_b[0] * _tmp52;
  const Scalar _tmp81 = _a_T_b[3] * _tmp58;
  const Scalar _tmp82 = _tmp80 + _tmp81;
  const Scalar _tmp83 = _tmp32 * _tmp70;
  const Scalar _tmp84 = _tmp32 * _tmp68;
  const Scalar _tmp85 = -_tmp61 * _tmp83 + _tmp61 * _tmp84 + _tmp76 * (_tmp78 - _tmp79 + _tmp82);
  const Scalar _tmp86 = _tmp34 * _tmp68;
  const Scalar _tmp87 = _a_T_b[1] * _tmp46;
  const Scalar _tmp88 = _a_T_b[3] * _tmp52;
  const Scalar _tmp89 = -_a_T_b[0] * _tmp58;
  const Scalar _tmp90 = _a_T_b[2] * _tmp40;
  const Scalar _tmp91 = _tmp34 * _tmp70;
  const Scalar _tmp92 =
      _tmp61 * _tmp86 - _tmp61 * _tmp91 + _tmp76 * (_tmp87 + _tmp88 + _tmp89 - _tmp90);
  const Scalar _tmp93 = _tmp48 - _tmp49 + _tmp50 - _tmp51;
  const Scalar _tmp94 = _a_T_b[3] * _tmp93;
  const Scalar _tmp95 = -_tmp54 + _tmp55 + _tmp56 - _tmp57;
  const Scalar _tmp96 = _a_T_b[0] * _tmp95;
  const Scalar _tmp97 = _tmp90 + _tmp96;
  const Scalar _tmp98 = _tmp87 + _tmp94 + _tmp97;
  const Scalar _tmp99 = _a_T_b[0] * _tmp93;
  const Scalar _tmp100 = _a_T_b[3] * _tmp95;
  const Scalar _tmp101 =
      _tmp69 * _tmp98 - _tmp71 * _tmp98 + _tmp76 * (_tmp100 + _tmp78 + _tmp79 - _tmp99);
  const Scalar _tmp102 = _a_T_b[1] * _tmp93;
  const Scalar _tmp103 = -_a_T_b[2] * _tmp95;
  const Scalar _tmp104 = _tmp103 + _tmp75;
  const Scalar _tmp105 = _tmp76 * (-_tmp102 + _tmp104 + _tmp72) - _tmp83 * _tmp98 + _tmp84 * _tmp98;
  const Scalar _tmp106 = -_a_T_b[2] * _tmp93;
  const Scalar _tmp107 = _a_T_b[1] * _tmp95;
  const Scalar _tmp108 = _tmp107 + _tmp41;
  const Scalar _tmp109 = _tmp76 * (_tmp106 + _tmp108 - _tmp47) + _tmp86 * _tmp98 - _tmp91 * _tmp98;
  const Scalar _tmp110 = -_tmp36 - _tmp37 + _tmp38 + _tmp39;
  const Scalar _tmp111 = _a_T_b[2] * _tmp110;
  const Scalar _tmp112 = _tmp111 + _tmp94;
  const Scalar _tmp113 = _a_T_b[1] * _tmp110;
  const Scalar _tmp114 = _tmp113 + _tmp99;
  const Scalar _tmp115 = _tmp114 + _tmp79 + _tmp81;
  const Scalar _tmp116 = _tmp115 * _tmp68;
  const Scalar _tmp117 =
      -_tmp115 * _tmp71 + _tmp116 * _tmp20 + _tmp76 * (_tmp112 - _tmp87 + _tmp89);
  const Scalar _tmp118 = _a_T_b[3] * _tmp110;
  const Scalar _tmp119 =
      -_tmp115 * _tmp83 + _tmp116 * _tmp32 + _tmp76 * (_tmp106 + _tmp118 + _tmp47 - _tmp59);
  const Scalar _tmp120 = -_a_T_b[0] * _tmp110;
  const Scalar _tmp121 = _tmp102 + _tmp120;
  const Scalar _tmp122 =
      -_tmp115 * _tmp91 + _tmp116 * _tmp34 + _tmp76 * (_tmp121 + _tmp72 - _tmp74);
  const Scalar _tmp123 = _tmp42 + _tmp43 + _tmp44 + _tmp45;
  const Scalar _tmp124 = _a_T_b[0] * _tmp123;
  const Scalar _tmp125 = _tmp118 + _tmp124;
  const Scalar _tmp126 = _tmp125 + _tmp60;
  const Scalar _tmp127 = _tmp126 * _tmp70;
  const Scalar _tmp128 = _a_T_b[3] * _tmp123;
  const Scalar _tmp129 = _tmp128 + _tmp73;
  const Scalar _tmp130 =
      _tmp126 * _tmp69 - _tmp127 * _tmp20 + _tmp76 * (_tmp120 + _tmp129 + _tmp74);
  const Scalar _tmp131 = _a_T_b[2] * _tmp123;
  const Scalar _tmp132 =
      _tmp126 * _tmp84 - _tmp127 * _tmp32 + _tmp76 * (-_tmp113 - _tmp131 + _tmp82);
  const Scalar _tmp133 = _a_T_b[1] * _tmp123;
  const Scalar _tmp134 = _tmp133 + _tmp88;
  const Scalar _tmp135 =
      _tmp126 * _tmp86 - _tmp126 * _tmp91 + _tmp76 * (-_tmp111 + _tmp134 + _tmp89);
  const Scalar _tmp136 = _tmp134 + _tmp97;
  const Scalar _tmp137 = _tmp100 + _tmp131;
  const Scalar _tmp138 = _tmp136 * _tmp69 - _tmp136 * _tmp71 + _tmp76 * (_tmp137 + _tmp78 - _tmp80);
  const Scalar _tmp139 = -_tmp136 * _tmp83 + _tmp136 * _tmp84 + _tmp76 * (_tmp104 + _tmp129);
  const Scalar _tmp140 =
      _tmp136 * _tmp86 - _tmp136 * _tmp91 + _tmp76 * (_tmp108 - _tmp124 - _tmp53);
  const Scalar _tmp141 = _tmp114 + _tmp137;
  const Scalar _tmp142 =
      _tmp141 * _tmp69 - _tmp141 * _tmp71 + _tmp76 * (_tmp112 - _tmp133 - _tmp96);
  const Scalar _tmp143 =
      -_tmp141 * _tmp83 + _tmp141 * _tmp84 + _tmp76 * (_tmp106 - _tmp107 + _tmp125);
  const Scalar _tmp144 =
      _tmp141 * _tmp86 - _tmp141 * _tmp91 + _tmp76 * (_tmp103 + _tmp121 + _tmp128);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp31;
    _res(1, 0) = _tmp33;
    _res(2, 0) = _tmp35;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp77;
    _jacobian(1, 0) = _tmp85;
    _jacobian(2, 0) = _tmp92;
    _jacobian(0, 1) = _tmp101;
    _jacobian(1, 1) = _tmp105;
    _jacobian(2, 1) = _tmp109;
    _jacobian(0, 2) = _tmp117;
    _jacobian(1, 2) = _tmp119;
    _jacobian(2, 2) = _tmp122;
    _jacobian(0, 3) = _tmp130;
    _jacobian(1, 3) = _tmp132;
    _jacobian(2, 3) = _tmp135;
    _jacobian(0, 4) = _tmp138;
    _jacobian(1, 4) = _tmp139;
    _jacobian(2, 4) = _tmp140;
    _jacobian(0, 5) = _tmp142;
    _jacobian(1, 5) = _tmp143;
    _jacobian(2, 5) = _tmp144;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp77, Scalar(2)) + std::pow(_tmp85, Scalar(2)) + std::pow(_tmp92, Scalar(2));
    _hessian(1, 0) = _tmp101 * _tmp77 + _tmp105 * _tmp85 + _tmp109 * _tmp92;
    _hessian(2, 0) = _tmp117 * _tmp77 + _tmp119 * _tmp85 + _tmp122 * _tmp92;
    _hessian(3, 0) = _tmp130 * _tmp77 + _tmp132 * _tmp85 + _tmp135 * _tmp92;
    _hessian(4, 0) = _tmp138 * _tmp77 + _tmp139 * _tmp85 + _tmp140 * _tmp92;
    _hessian(5, 0) = _tmp142 * _tmp77 + _tmp143 * _tmp85 + _tmp144 * _tmp92;
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        std::pow(_tmp101, Scalar(2)) + std::pow(_tmp105, Scalar(2)) + std::pow(_tmp109, Scalar(2));
    _hessian(2, 1) = _tmp101 * _tmp117 + _tmp105 * _tmp119 + _tmp109 * _tmp122;
    _hessian(3, 1) = _tmp101 * _tmp130 + _tmp105 * _tmp132 + _tmp109 * _tmp135;
    _hessian(4, 1) = _tmp101 * _tmp138 + _tmp105 * _tmp139 + _tmp109 * _tmp140;
    _hessian(5, 1) = _tmp101 * _tmp142 + _tmp105 * _tmp143 + _tmp109 * _tmp144;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) =
        std::pow(_tmp117, Scalar(2)) + std::pow(_tmp119, Scalar(2)) + std::pow(_tmp122, Scalar(2));
    _hessian(3, 2) = _tmp117 * _tmp130 + _tmp119 * _tmp132 + _tmp122 * _tmp135;
    _hessian(4, 2) = _tmp117 * _tmp138 + _tmp119 * _tmp139 + _tmp122 * _tmp140;
    _hessian(5, 2) = _tmp117 * _tmp142 + _tmp119 * _tmp143 + _tmp122 * _tmp144;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) =
        std::pow(_tmp130, Scalar(2)) + std::pow(_tmp132, Scalar(2)) + std::pow(_tmp135, Scalar(2));
    _hessian(4, 3) = _tmp130 * _tmp138 + _tmp132 * _tmp139 + _tmp135 * _tmp140;
    _hessian(5, 3) = _tmp130 * _tmp142 + _tmp132 * _tmp143 + _tmp135 * _tmp144;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) =
        std::pow(_tmp138, Scalar(2)) + std::pow(_tmp139, Scalar(2)) + std::pow(_tmp140, Scalar(2));
    _hessian(5, 4) = _tmp138 * _tmp142 + _tmp139 * _tmp143 + _tmp140 * _tmp144;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) =
        std::pow(_tmp142, Scalar(2)) + std::pow(_tmp143, Scalar(2)) + std::pow(_tmp144, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp31 * _tmp77 + _tmp33 * _tmp85 + _tmp35 * _tmp92;
    _rhs(1, 0) = _tmp101 * _tmp31 + _tmp105 * _tmp33 + _tmp109 * _tmp35;
    _rhs(2, 0) = _tmp117 * _tmp31 + _tmp119 * _tmp33 + _tmp122 * _tmp35;
    _rhs(3, 0) = _tmp130 * _tmp31 + _tmp132 * _tmp33 + _tmp135 * _tmp35;
    _rhs(4, 0) = _tmp138 * _tmp31 + _tmp139 * _tmp33 + _tmp140 * _tmp35;
    _rhs(5, 0) = _tmp142 * _tmp31 + _tmp143 * _tmp33 + _tmp144 * _tmp35;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
