// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * An internal helper function to linearize the difference between the orientation, velocity, and
 * position at one time step and those of another time step. The expected difference is calculated
 * from the preintegrated IMU measurements between those time steps.
 *
 * NOTE: If you are looking for a residual for an IMU factor, do not use this. Instead use
 * the one found in symforce/slam/imu_preintegration/imu_factor.h.
 *
 * Time step i is the time of the first IMU measurement of the interval.
 * Time step j is the time after the last IMU measurement of the interval.
 *
 * Assumes sqrt_info is lower triangular and only reads the lower triangle.
 *
 * Args:
 *     pose_i (sf.Pose3): Pose at time step i (world_T_body)
 *     vel_i (sf.V3): Velocity at time step i (world frame)
 *     pose_j (sf.Pose3): Pose at time step j (world_T_body)
 *     vel_j (sf.V3): Velocity at time step j (world frame)
 *     accel_bias_i (sf.V3): The accelerometer bias between timesteps i and j
 *     gyro_bias_i (sf.V3): The gyroscope bias between timesteps i and j
 *     DR (sf.Rot3): Preintegrated estimate for pose_i.R.inverse() * pose_j.R
 *     Dv (sf.V3): Preintegrated estimate for vel_j - vel_i in the body frame at timestep i
 *     Dp (sf.V3): Preintegrated estimate for position change (before velocity and gravity
 *         corrections) in the body frame at timestep i:
 *         R_i^T (p_j - p_i - v_i Delta t - 1/2 g Delta t^2),
 *         where R_i = pose_i.R, p_i = pose_i.t, p_j = pose_j.t, and v_i = vel_i
 *     sqrt_info (sf.M99): sqrt info matrix of DR('s tangent space), Dv, Dp
 *     DR_D_gyro_bias (sf.M33): Derivative of DR w.r.t. gyro_bias evaluated at gyro_bias_hat
 *     Dv_D_accel_bias (sf.M33): Derivative of Dv w.r.t. accel_bias evaluated at accel_bias_hat
 *     Dv_D_gyro_bias (sf.M33): Derivative of Dv w.r.t. gyro_bias evaluated at gyro_bias_hat
 *     Dp_D_accel_bias (sf.M33): Derivative of Dp w.r.t. accel_bias evaluated at accel_bias_hat
 *     Dp_D_gyro_bias (sf.M33): Derivative of Dp w.r.t. gyro_bias evaluated at gyro_bias_hat
 *     accel_bias_hat (sf.V3): The accelerometer bias used during preintegration
 *     gyro_bias_hat (sf.V3): The gyroscope bias used during preintegration
 *     gravity (sf.V3): Acceleration due to gravity (in the same frame as pose_x and vel_x),
 *         i.e., the vector which when added to the accelerometer measurements gives the
 *         true acceleration (up to bias and noise) of the IMU.
 *     dt (T.Scalar): The time between timestep i and j: t_j - t_i
 *     epsilon (T.Scalar): epsilon used for numerical stability
 *
 * Outputs:
 *     res: 9dof product residual between the orientations, then velocities, then positions.
 *     jacobian: (9x24) jacobian of res wrt args pose_i (6), vel_i (3), pose_j (6), vel_j (3),
 *               accel_bias_i (3), gyro_bias_i (3)
 *     hessian: (24x24) Gauss-Newton hessian for args pose_i (6), vel_i (3), pose_j (6), vel_j (3),
 *              accel_bias_i (3), gyro_bias_i (3)
 *     rhs: (24x1) Gauss-Newton rhs for args pose_i (6), vel_i (3), pose_j (6), vel_j (3),
 *          accel_bias_i (3), gyro_bias_i (3)
 */
template <typename Scalar>
void InternalImuFactor(const sym::Pose3<Scalar>& pose_i, const Eigen::Matrix<Scalar, 3, 1>& vel_i,
                       const sym::Pose3<Scalar>& pose_j, const Eigen::Matrix<Scalar, 3, 1>& vel_j,
                       const Eigen::Matrix<Scalar, 3, 1>& accel_bias_i,
                       const Eigen::Matrix<Scalar, 3, 1>& gyro_bias_i, const sym::Rot3<Scalar>& DR,
                       const Eigen::Matrix<Scalar, 3, 1>& Dv, const Eigen::Matrix<Scalar, 3, 1>& Dp,
                       const Eigen::Matrix<Scalar, 9, 9>& sqrt_info,
                       const Eigen::Matrix<Scalar, 3, 3>& DR_D_gyro_bias,
                       const Eigen::Matrix<Scalar, 3, 3>& Dv_D_accel_bias,
                       const Eigen::Matrix<Scalar, 3, 3>& Dv_D_gyro_bias,
                       const Eigen::Matrix<Scalar, 3, 3>& Dp_D_accel_bias,
                       const Eigen::Matrix<Scalar, 3, 3>& Dp_D_gyro_bias,
                       const Eigen::Matrix<Scalar, 3, 1>& accel_bias_hat,
                       const Eigen::Matrix<Scalar, 3, 1>& gyro_bias_hat,
                       const Eigen::Matrix<Scalar, 3, 1>& gravity, const Scalar dt,
                       const Scalar epsilon, Eigen::Matrix<Scalar, 9, 1>* const res = nullptr,
                       Eigen::Matrix<Scalar, 9, 24>* const jacobian = nullptr,
                       Eigen::Matrix<Scalar, 24, 24>* const hessian = nullptr,
                       Eigen::Matrix<Scalar, 24, 1>* const rhs = nullptr) {
  // Total ops: 5964

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _pose_i = pose_i.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _pose_j = pose_j.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _DR = DR.Data();

  // Intermediate terms (770)
  const Scalar _tmp0 = -gyro_bias_hat(0, 0) + gyro_bias_i(0, 0);
  const Scalar _tmp1 = -gyro_bias_hat(2, 0) + gyro_bias_i(2, 0);
  const Scalar _tmp2 = -gyro_bias_hat(1, 0) + gyro_bias_i(1, 0);
  const Scalar _tmp3 =
      DR_D_gyro_bias(2, 0) * _tmp0 + DR_D_gyro_bias(2, 1) * _tmp2 + DR_D_gyro_bias(2, 2) * _tmp1;
  const Scalar _tmp4 =
      DR_D_gyro_bias(0, 0) * _tmp0 + DR_D_gyro_bias(0, 1) * _tmp2 + DR_D_gyro_bias(0, 2) * _tmp1;
  const Scalar _tmp5 =
      DR_D_gyro_bias(1, 0) * _tmp0 + DR_D_gyro_bias(1, 1) * _tmp2 + DR_D_gyro_bias(1, 2) * _tmp1;
  const Scalar _tmp6 = std::pow(_tmp3, Scalar(2)) + std::pow(_tmp4, Scalar(2)) +
                       std::pow(_tmp5, Scalar(2)) + std::pow(epsilon, Scalar(2));
  const Scalar _tmp7 = std::sqrt(_tmp6);
  const Scalar _tmp8 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp9 = std::cos(_tmp8);
  const Scalar _tmp10 = _DR[0] * _tmp9;
  const Scalar _tmp11 = std::sin(_tmp8);
  const Scalar _tmp12 = _tmp11 / _tmp7;
  const Scalar _tmp13 = _tmp12 * _tmp5;
  const Scalar _tmp14 = _DR[3] * _tmp12;
  const Scalar _tmp15 = _DR[1] * _tmp12;
  const Scalar _tmp16 = -_DR[2] * _tmp13 + _tmp10 + _tmp14 * _tmp4 + _tmp15 * _tmp3;
  const Scalar _tmp17 = _pose_i[0] * _tmp16;
  const Scalar _tmp18 = _DR[1] * _tmp9;
  const Scalar _tmp19 = _DR[0] * _tmp12;
  const Scalar _tmp20 = _DR[2] * _tmp12;
  const Scalar _tmp21 = _DR[3] * _tmp13 + _tmp18 - _tmp19 * _tmp3 + _tmp20 * _tmp4;
  const Scalar _tmp22 = _pose_i[1] * _tmp21;
  const Scalar _tmp23 = _DR[2] * _tmp9;
  const Scalar _tmp24 = _tmp14 * _tmp3 - _tmp15 * _tmp4 + _tmp19 * _tmp5 + _tmp23;
  const Scalar _tmp25 = _pose_i[2] * _tmp24;
  const Scalar _tmp26 = _DR[3] * _tmp9;
  const Scalar _tmp27 = -_DR[1] * _tmp13 - _tmp19 * _tmp4 - _tmp20 * _tmp3 + _tmp26;
  const Scalar _tmp28 = _pose_i[3] * _tmp27;
  const Scalar _tmp29 = -_tmp17 - _tmp22 - _tmp25 + _tmp28;
  const Scalar _tmp30 = _pose_j[0] * _tmp29;
  const Scalar _tmp31 = _pose_i[3] * _tmp16;
  const Scalar _tmp32 = _pose_i[0] * _tmp27;
  const Scalar _tmp33 = _pose_i[2] * _tmp21;
  const Scalar _tmp34 = _pose_i[1] * _tmp24;
  const Scalar _tmp35 = -_tmp31 - _tmp32 + _tmp33 - _tmp34;
  const Scalar _tmp36 = _pose_j[3] * _tmp35;
  const Scalar _tmp37 = _pose_i[2] * _tmp16;
  const Scalar _tmp38 = _pose_i[1] * _tmp27;
  const Scalar _tmp39 = _pose_i[3] * _tmp21;
  const Scalar _tmp40 = _pose_i[0] * _tmp24;
  const Scalar _tmp41 = -_tmp37 - _tmp38 - _tmp39 + _tmp40;
  const Scalar _tmp42 = _pose_j[2] * _tmp41;
  const Scalar _tmp43 = _pose_i[1] * _tmp16;
  const Scalar _tmp44 = _pose_i[2] * _tmp27;
  const Scalar _tmp45 = _pose_i[0] * _tmp21;
  const Scalar _tmp46 = _pose_i[3] * _tmp24;
  const Scalar _tmp47 = _tmp43 - _tmp44 - _tmp45 - _tmp46;
  const Scalar _tmp48 = _pose_j[1] * _tmp47;
  const Scalar _tmp49 = _tmp30 + _tmp36 + _tmp42 - _tmp48;
  const Scalar _tmp50 = _tmp49 * sqrt_info(0, 0);
  const Scalar _tmp51 = _pose_j[0] * _tmp35;
  const Scalar _tmp52 = _pose_j[1] * _tmp41;
  const Scalar _tmp53 = _pose_j[2] * _tmp47;
  const Scalar _tmp54 = _tmp51 + _tmp52 + _tmp53;
  const Scalar _tmp55 = _pose_j[3] * _tmp29;
  const Scalar _tmp56 =
      2 * std::min<Scalar>(0, (((-_tmp54 + _tmp55) > 0) - ((-_tmp54 + _tmp55) < 0))) + 1;
  const Scalar _tmp57 = 2 * _tmp56;
  const Scalar _tmp58 = -_tmp55;
  const Scalar _tmp59 = 1 - epsilon;
  const Scalar _tmp60 = std::min<Scalar>(_tmp59, std::fabs(_tmp54 + _tmp58));
  const Scalar _tmp61 = std::acos(_tmp60) / std::sqrt(Scalar(1 - std::pow(_tmp60, Scalar(2))));
  const Scalar _tmp62 = _tmp57 * _tmp61;
  const Scalar _tmp63 = _tmp50 * _tmp62;
  const Scalar _tmp64 = _pose_j[1] * _tmp29;
  const Scalar _tmp65 = _pose_j[2] * _tmp35;
  const Scalar _tmp66 = _pose_j[3] * _tmp41;
  const Scalar _tmp67 = _pose_j[0] * _tmp47;
  const Scalar _tmp68 = _tmp64 - _tmp65 + _tmp66 + _tmp67;
  const Scalar _tmp69 = _tmp62 * _tmp68;
  const Scalar _tmp70 = _tmp49 * _tmp62;
  const Scalar _tmp71 = _tmp69 * sqrt_info(1, 1) + _tmp70 * sqrt_info(1, 0);
  const Scalar _tmp72 = _pose_j[2] * _tmp29;
  const Scalar _tmp73 = _pose_j[1] * _tmp35;
  const Scalar _tmp74 = _pose_j[0] * _tmp41;
  const Scalar _tmp75 = _pose_j[3] * _tmp47;
  const Scalar _tmp76 = _tmp72 + _tmp73 - _tmp74 + _tmp75;
  const Scalar _tmp77 = _tmp62 * _tmp76;
  const Scalar _tmp78 =
      _tmp69 * sqrt_info(2, 1) + _tmp70 * sqrt_info(2, 0) + _tmp77 * sqrt_info(2, 2);
  const Scalar _tmp79 = std::pow(_pose_i[1], Scalar(2));
  const Scalar _tmp80 = -2 * _tmp79;
  const Scalar _tmp81 = std::pow(_pose_i[2], Scalar(2));
  const Scalar _tmp82 = 1 - 2 * _tmp81;
  const Scalar _tmp83 = _tmp80 + _tmp82;
  const Scalar _tmp84 = -dt * gravity(0, 0) - vel_i(0, 0) + vel_j(0, 0);
  const Scalar _tmp85 = -accel_bias_hat(0, 0) + accel_bias_i(0, 0);
  const Scalar _tmp86 = -accel_bias_hat(1, 0) + accel_bias_i(1, 0);
  const Scalar _tmp87 = -accel_bias_hat(2, 0) + accel_bias_i(2, 0);
  const Scalar _tmp88 = 2 * _pose_i[3];
  const Scalar _tmp89 = _pose_i[2] * _tmp88;
  const Scalar _tmp90 = 2 * _pose_i[0];
  const Scalar _tmp91 = _pose_i[1] * _tmp90;
  const Scalar _tmp92 = _tmp89 + _tmp91;
  const Scalar _tmp93 = -dt * gravity(1, 0) - vel_i(1, 0) + vel_j(1, 0);
  const Scalar _tmp94 = _pose_i[1] * _tmp88;
  const Scalar _tmp95 = -_tmp94;
  const Scalar _tmp96 = _pose_i[2] * _tmp90;
  const Scalar _tmp97 = _tmp95 + _tmp96;
  const Scalar _tmp98 = -dt * gravity(2, 0) - vel_i(2, 0) + vel_j(2, 0);
  const Scalar _tmp99 = _tmp92 * _tmp93 + _tmp97 * _tmp98;
  const Scalar _tmp100 = -Dv(0, 0) - Dv_D_accel_bias(0, 0) * _tmp85 -
                         Dv_D_accel_bias(0, 1) * _tmp86 - Dv_D_accel_bias(0, 2) * _tmp87 -
                         Dv_D_gyro_bias(0, 0) * _tmp0 - Dv_D_gyro_bias(0, 1) * _tmp2 -
                         Dv_D_gyro_bias(0, 2) * _tmp1 + _tmp83 * _tmp84 + _tmp99;
  const Scalar _tmp101 = _tmp100 * sqrt_info(3, 3) + _tmp69 * sqrt_info(3, 1) +
                         _tmp70 * sqrt_info(3, 0) + _tmp77 * sqrt_info(3, 2);
  const Scalar _tmp102 = std::pow(_pose_i[0], Scalar(2));
  const Scalar _tmp103 = -2 * _tmp102;
  const Scalar _tmp104 = _tmp103 + _tmp82;
  const Scalar _tmp105 = -_tmp89;
  const Scalar _tmp106 = _tmp105 + _tmp91;
  const Scalar _tmp107 = _pose_i[3] * _tmp90;
  const Scalar _tmp108 = 2 * _pose_i[1] * _pose_i[2];
  const Scalar _tmp109 = _tmp107 + _tmp108;
  const Scalar _tmp110 = _tmp106 * _tmp84 + _tmp109 * _tmp98;
  const Scalar _tmp111 = -Dv(1, 0) - Dv_D_accel_bias(1, 0) * _tmp85 -
                         Dv_D_accel_bias(1, 1) * _tmp86 - Dv_D_accel_bias(1, 2) * _tmp87 -
                         Dv_D_gyro_bias(1, 0) * _tmp0 - Dv_D_gyro_bias(1, 1) * _tmp2 -
                         Dv_D_gyro_bias(1, 2) * _tmp1 + _tmp104 * _tmp93 + _tmp110;
  const Scalar _tmp112 = _tmp100 * sqrt_info(4, 3) + _tmp111 * sqrt_info(4, 4) +
                         _tmp69 * sqrt_info(4, 1) + _tmp70 * sqrt_info(4, 0) +
                         _tmp77 * sqrt_info(4, 2);
  const Scalar _tmp113 = _tmp103 + _tmp80 + 1;
  const Scalar _tmp114 = _tmp94 + _tmp96;
  const Scalar _tmp115 = -_tmp107;
  const Scalar _tmp116 = _tmp108 + _tmp115;
  const Scalar _tmp117 = _tmp114 * _tmp84 + _tmp116 * _tmp93;
  const Scalar _tmp118 = -Dv(2, 0) - Dv_D_accel_bias(2, 0) * _tmp85 -
                         Dv_D_accel_bias(2, 1) * _tmp86 - Dv_D_accel_bias(2, 2) * _tmp87 -
                         Dv_D_gyro_bias(2, 0) * _tmp0 - Dv_D_gyro_bias(2, 1) * _tmp2 -
                         Dv_D_gyro_bias(2, 2) * _tmp1 + _tmp113 * _tmp98 + _tmp117;
  const Scalar _tmp119 = _tmp100 * sqrt_info(5, 3) + _tmp111 * sqrt_info(5, 4) +
                         _tmp118 * sqrt_info(5, 5) + _tmp69 * sqrt_info(5, 1) +
                         _tmp70 * sqrt_info(5, 0) + _tmp77 * sqrt_info(5, 2);
  const Scalar _tmp120 = (Scalar(1) / Scalar(2)) * std::pow(dt, Scalar(2));
  const Scalar _tmp121 = -_pose_i[4] + _pose_j[4] - _tmp120 * gravity(0, 0) - dt * vel_i(0, 0);
  const Scalar _tmp122 = -_pose_i[6] + _pose_j[6] - _tmp120 * gravity(2, 0) - dt * vel_i(2, 0);
  const Scalar _tmp123 = -_pose_i[5] + _pose_j[5] - _tmp120 * gravity(1, 0) - dt * vel_i(1, 0);
  const Scalar _tmp124 = _tmp122 * _tmp97 + _tmp123 * _tmp92;
  const Scalar _tmp125 = -Dp(0, 0) - Dp_D_accel_bias(0, 0) * _tmp85 -
                         Dp_D_accel_bias(0, 1) * _tmp86 - Dp_D_accel_bias(0, 2) * _tmp87 -
                         Dp_D_gyro_bias(0, 0) * _tmp0 - Dp_D_gyro_bias(0, 1) * _tmp2 -
                         Dp_D_gyro_bias(0, 2) * _tmp1 + _tmp121 * _tmp83 + _tmp124;
  const Scalar _tmp126 = _tmp57 * sqrt_info(6, 2);
  const Scalar _tmp127 = _tmp100 * sqrt_info(6, 3) + _tmp111 * sqrt_info(6, 4) +
                         _tmp118 * sqrt_info(6, 5) + _tmp125 * sqrt_info(6, 6) +
                         _tmp126 * _tmp61 * _tmp76 + _tmp69 * sqrt_info(6, 1) +
                         _tmp70 * sqrt_info(6, 0);
  const Scalar _tmp128 = _tmp106 * _tmp121 + _tmp109 * _tmp122;
  const Scalar _tmp129 = -Dp(1, 0) - Dp_D_accel_bias(1, 0) * _tmp85 -
                         Dp_D_accel_bias(1, 1) * _tmp86 - Dp_D_accel_bias(1, 2) * _tmp87 -
                         Dp_D_gyro_bias(1, 0) * _tmp0 - Dp_D_gyro_bias(1, 1) * _tmp2 -
                         Dp_D_gyro_bias(1, 2) * _tmp1 + _tmp104 * _tmp123 + _tmp128;
  const Scalar _tmp130 = _tmp100 * sqrt_info(7, 3) + _tmp111 * sqrt_info(7, 4) +
                         _tmp118 * sqrt_info(7, 5) + _tmp125 * sqrt_info(7, 6) +
                         _tmp129 * sqrt_info(7, 7) + _tmp69 * sqrt_info(7, 1) +
                         _tmp70 * sqrt_info(7, 0) + _tmp77 * sqrt_info(7, 2);
  const Scalar _tmp131 = _tmp114 * _tmp121 + _tmp116 * _tmp123;
  const Scalar _tmp132 =
      _tmp100 * sqrt_info(8, 3) + _tmp111 * sqrt_info(8, 4) + _tmp118 * sqrt_info(8, 5) +
      _tmp125 * sqrt_info(8, 6) + _tmp129 * sqrt_info(8, 7) + _tmp69 * sqrt_info(8, 1) +
      _tmp70 * sqrt_info(8, 0) + _tmp77 * sqrt_info(8, 2) +
      sqrt_info(8, 8) * (-Dp(2, 0) - Dp_D_accel_bias(2, 0) * _tmp85 -
                         Dp_D_accel_bias(2, 1) * _tmp86 - Dp_D_accel_bias(2, 2) * _tmp87 -
                         Dp_D_gyro_bias(2, 0) * _tmp0 - Dp_D_gyro_bias(2, 1) * _tmp2 -
                         Dp_D_gyro_bias(2, 2) * _tmp1 + _tmp113 * _tmp122 + _tmp131);
  const Scalar _tmp133 = (Scalar(1) / Scalar(2)) * _tmp38;
  const Scalar _tmp134 = (Scalar(1) / Scalar(2)) * _tmp40;
  const Scalar _tmp135 = (Scalar(1) / Scalar(2)) * _tmp37;
  const Scalar _tmp136 = (Scalar(1) / Scalar(2)) * _tmp39;
  const Scalar _tmp137 = _tmp135 - _tmp136;
  const Scalar _tmp138 = _tmp133 + _tmp134 + _tmp137;
  const Scalar _tmp139 = (Scalar(1) / Scalar(2)) * _tmp43;
  const Scalar _tmp140 = (Scalar(1) / Scalar(2)) * _tmp46;
  const Scalar _tmp141 = (Scalar(1) / Scalar(2)) * _tmp44;
  const Scalar _tmp142 = (Scalar(1) / Scalar(2)) * _tmp45;
  const Scalar _tmp143 = -_tmp141 + _tmp142;
  const Scalar _tmp144 = _tmp139 + _tmp140 + _tmp143;
  const Scalar _tmp145 = (Scalar(1) / Scalar(2)) * _tmp31;
  const Scalar _tmp146 = -_tmp145;
  const Scalar _tmp147 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp148 = -_tmp147;
  const Scalar _tmp149 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp150 = (Scalar(1) / Scalar(2)) * _tmp34;
  const Scalar _tmp151 = _tmp146 + _tmp148 - _tmp149 + _tmp150;
  const Scalar _tmp152 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp153 = -Scalar(1) / Scalar(2) * _tmp28;
  const Scalar _tmp154 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp155 = -_tmp154;
  const Scalar _tmp156 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp157 = -_tmp156;
  const Scalar _tmp158 = _tmp152 + _tmp153 + _tmp155 + _tmp157;
  const Scalar _tmp159 = -_tmp51 - _tmp52 - _tmp53 + _tmp55;
  const Scalar _tmp160 = std::fabs(_tmp159);
  const Scalar _tmp161 = std::min<Scalar>(_tmp160, _tmp59);
  const Scalar _tmp162 = std::acos(_tmp161);
  const Scalar _tmp163 = 1 - std::pow(_tmp161, Scalar(2));
  const Scalar _tmp164 = std::pow(_tmp163, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp165 = _tmp164 * _tmp57;
  const Scalar _tmp166 = _tmp162 * _tmp165;
  const Scalar _tmp167 = _tmp166 * (_pose_j[0] * _tmp151 - _pose_j[1] * _tmp138 +
                                    _pose_j[2] * _tmp144 + _pose_j[3] * _tmp158);
  const Scalar _tmp168 =
      -_pose_j[0] * _tmp158 - _pose_j[1] * _tmp144 - _pose_j[2] * _tmp138 + _pose_j[3] * _tmp151;
  const Scalar _tmp169 = (((_tmp159) > 0) - ((_tmp159) < 0));
  const Scalar _tmp170 = _tmp56 * ((((-_tmp160 + _tmp59) > 0) - ((-_tmp160 + _tmp59) < 0)) + 1);
  const Scalar _tmp171 = _tmp170 / _tmp163;
  const Scalar _tmp172 = _tmp169 * _tmp171;
  const Scalar _tmp173 = _tmp168 * _tmp172;
  const Scalar _tmp174 = std::pow(_tmp163, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp175 = _tmp161 * _tmp162 * _tmp170 * _tmp174;
  const Scalar _tmp176 = _tmp169 * _tmp175;
  const Scalar _tmp177 = _tmp168 * _tmp176;
  const Scalar _tmp178 = _tmp167 * sqrt_info(0, 0) - _tmp173 * _tmp50 + _tmp177 * _tmp50;
  const Scalar _tmp179 = _tmp68 * sqrt_info(1, 1);
  const Scalar _tmp180 = _tmp166 * (_pose_j[0] * _tmp138 + _pose_j[1] * _tmp151 -
                                    _pose_j[2] * _tmp158 + _pose_j[3] * _tmp144);
  const Scalar _tmp181 = _tmp173 * _tmp49;
  const Scalar _tmp182 = _tmp49 * sqrt_info(1, 0);
  const Scalar _tmp183 = _tmp167 * sqrt_info(1, 0) - _tmp173 * _tmp179 + _tmp177 * _tmp179 +
                         _tmp177 * _tmp182 + _tmp180 * sqrt_info(1, 1) - _tmp181 * sqrt_info(1, 0);
  const Scalar _tmp184 = _tmp68 * sqrt_info(2, 1);
  const Scalar _tmp185 =
      -_pose_j[0] * _tmp144 + _pose_j[1] * _tmp158 + _pose_j[2] * _tmp151 + _pose_j[3] * _tmp138;
  const Scalar _tmp186 = _tmp166 * _tmp185;
  const Scalar _tmp187 = _tmp49 * sqrt_info(2, 0);
  const Scalar _tmp188 = _tmp172 * _tmp76;
  const Scalar _tmp189 = _tmp168 * _tmp188;
  const Scalar _tmp190 = _tmp177 * _tmp76;
  const Scalar _tmp191 = _tmp167 * sqrt_info(2, 0) - _tmp173 * _tmp184 - _tmp173 * _tmp187 +
                         _tmp177 * _tmp184 + _tmp177 * _tmp187 + _tmp180 * sqrt_info(2, 1) +
                         _tmp186 * sqrt_info(2, 2) - _tmp189 * sqrt_info(2, 2) +
                         _tmp190 * sqrt_info(2, 2);
  const Scalar _tmp192 = _tmp68 * sqrt_info(3, 1);
  const Scalar _tmp193 = _tmp49 * sqrt_info(3, 0);
  const Scalar _tmp194 = _tmp76 * sqrt_info(3, 2);
  const Scalar _tmp195 = _tmp167 * sqrt_info(3, 0) - _tmp173 * _tmp192 - _tmp173 * _tmp193 +
                         _tmp177 * _tmp192 + _tmp177 * _tmp193 + _tmp177 * _tmp194 +
                         _tmp180 * sqrt_info(3, 1) + _tmp186 * sqrt_info(3, 2) -
                         _tmp189 * sqrt_info(3, 2);
  const Scalar _tmp196 = _tmp68 * sqrt_info(4, 1);
  const Scalar _tmp197 = -_tmp79;
  const Scalar _tmp198 = std::pow(_pose_i[3], Scalar(2));
  const Scalar _tmp199 = _tmp197 + _tmp198;
  const Scalar _tmp200 = -_tmp102;
  const Scalar _tmp201 = _tmp200 + _tmp81;
  const Scalar _tmp202 = _tmp199 + _tmp201;
  const Scalar _tmp203 = _tmp117 + _tmp202 * _tmp98;
  const Scalar _tmp204 = _tmp173 * _tmp68;
  const Scalar _tmp205 = _tmp177 * _tmp49;
  const Scalar _tmp206 = _tmp167 * sqrt_info(4, 0) + _tmp177 * _tmp196 + _tmp180 * sqrt_info(4, 1) -
                         _tmp181 * sqrt_info(4, 0) + _tmp186 * sqrt_info(4, 2) -
                         _tmp189 * sqrt_info(4, 2) + _tmp190 * sqrt_info(4, 2) +
                         _tmp203 * sqrt_info(4, 4) - _tmp204 * sqrt_info(4, 1) +
                         _tmp205 * sqrt_info(4, 0);
  const Scalar _tmp207 = _tmp68 * sqrt_info(5, 1);
  const Scalar _tmp208 = -_tmp91;
  const Scalar _tmp209 = _tmp208 + _tmp89;
  const Scalar _tmp210 = -_tmp198;
  const Scalar _tmp211 = _tmp102 + _tmp197 + _tmp210 + _tmp81;
  const Scalar _tmp212 = -_tmp108;
  const Scalar _tmp213 = _tmp115 + _tmp212;
  const Scalar _tmp214 = _tmp209 * _tmp84 + _tmp211 * _tmp93 + _tmp213 * _tmp98;
  const Scalar _tmp215 = _tmp167 * sqrt_info(5, 0) + _tmp177 * _tmp207 + _tmp180 * sqrt_info(5, 1) -
                         _tmp181 * sqrt_info(5, 0) + _tmp186 * sqrt_info(5, 2) -
                         _tmp189 * sqrt_info(5, 2) + _tmp190 * sqrt_info(5, 2) +
                         _tmp203 * sqrt_info(5, 4) - _tmp204 * sqrt_info(5, 1) +
                         _tmp205 * sqrt_info(5, 0) + _tmp214 * sqrt_info(5, 5);
  const Scalar _tmp216 = _tmp68 * sqrt_info(6, 1);
  const Scalar _tmp217 = _tmp126 * _tmp164;
  const Scalar _tmp218 = _tmp162 * _tmp185;
  const Scalar _tmp219 = _tmp49 * sqrt_info(6, 0);
  const Scalar _tmp220 = _tmp167 * sqrt_info(6, 0) - _tmp173 * _tmp216 - _tmp173 * _tmp219 +
                         _tmp177 * _tmp216 + _tmp177 * _tmp219 + _tmp180 * sqrt_info(6, 1) -
                         _tmp189 * sqrt_info(6, 2) + _tmp190 * sqrt_info(6, 2) +
                         _tmp203 * sqrt_info(6, 4) + _tmp214 * sqrt_info(6, 5) + _tmp217 * _tmp218;
  const Scalar _tmp221 = _tmp68 * sqrt_info(7, 1);
  const Scalar _tmp222 = _tmp122 * _tmp202 + _tmp131;
  const Scalar _tmp223 = _tmp165 * sqrt_info(7, 2);
  const Scalar _tmp224 = _tmp49 * sqrt_info(7, 0);
  const Scalar _tmp225 = _tmp167 * sqrt_info(7, 0) - _tmp173 * _tmp221 + _tmp177 * _tmp221 +
                         _tmp177 * _tmp224 + _tmp180 * sqrt_info(7, 1) - _tmp181 * sqrt_info(7, 0) -
                         _tmp189 * sqrt_info(7, 2) + _tmp190 * sqrt_info(7, 2) +
                         _tmp203 * sqrt_info(7, 4) + _tmp214 * sqrt_info(7, 5) + _tmp218 * _tmp223 +
                         _tmp222 * sqrt_info(7, 7);
  const Scalar _tmp226 = _tmp68 * sqrt_info(8, 1);
  const Scalar _tmp227 = _tmp49 * sqrt_info(8, 0);
  const Scalar _tmp228 = _tmp188 * sqrt_info(8, 2);
  const Scalar _tmp229 = _tmp76 * sqrt_info(8, 2);
  const Scalar _tmp230 =
      _tmp167 * sqrt_info(8, 0) - _tmp168 * _tmp228 - _tmp173 * _tmp227 + _tmp177 * _tmp226 +
      _tmp177 * _tmp227 + _tmp177 * _tmp229 + _tmp180 * sqrt_info(8, 1) +
      _tmp186 * sqrt_info(8, 2) + _tmp203 * sqrt_info(8, 4) - _tmp204 * sqrt_info(8, 1) +
      _tmp214 * sqrt_info(8, 5) + _tmp222 * sqrt_info(8, 7) +
      sqrt_info(8, 8) * (_tmp121 * _tmp209 + _tmp122 * _tmp213 + _tmp123 * _tmp211);
  const Scalar _tmp231 = -_tmp133;
  const Scalar _tmp232 = -_tmp134 + _tmp137 + _tmp231;
  const Scalar _tmp233 = -_tmp140;
  const Scalar _tmp234 = _tmp139 + _tmp141 + _tmp142 + _tmp233;
  const Scalar _tmp235 = _tmp149 + _tmp150;
  const Scalar _tmp236 = _tmp145 + _tmp148 + _tmp235;
  const Scalar _tmp237 = -_tmp152 + _tmp153;
  const Scalar _tmp238 = _tmp154 + _tmp157 + _tmp237;
  const Scalar _tmp239 =
      -_pose_j[0] * _tmp234 - _pose_j[1] * _tmp238 - _pose_j[2] * _tmp236 + _pose_j[3] * _tmp232;
  const Scalar _tmp240 = _tmp172 * _tmp239;
  const Scalar _tmp241 =
      _pose_j[0] * _tmp232 - _pose_j[1] * _tmp236 + _pose_j[2] * _tmp238 + _pose_j[3] * _tmp234;
  const Scalar _tmp242 = _tmp166 * _tmp241;
  const Scalar _tmp243 = _tmp176 * _tmp239;
  const Scalar _tmp244 = -_tmp240 * _tmp50 + _tmp242 * sqrt_info(0, 0) + _tmp243 * _tmp50;
  const Scalar _tmp245 = _tmp240 * _tmp68;
  const Scalar _tmp246 = _tmp240 * _tmp49;
  const Scalar _tmp247 = _tmp166 * (_pose_j[0] * _tmp236 + _pose_j[1] * _tmp232 -
                                    _pose_j[2] * _tmp234 + _pose_j[3] * _tmp238);
  const Scalar _tmp248 = _tmp179 * _tmp243 + _tmp182 * _tmp243 + _tmp242 * sqrt_info(1, 0) -
                         _tmp245 * sqrt_info(1, 1) - _tmp246 * sqrt_info(1, 0) +
                         _tmp247 * sqrt_info(1, 1);
  const Scalar _tmp249 =
      -_pose_j[0] * _tmp238 + _pose_j[1] * _tmp234 + _pose_j[2] * _tmp232 + _pose_j[3] * _tmp236;
  const Scalar _tmp250 = _tmp166 * _tmp249;
  const Scalar _tmp251 = _tmp166 * sqrt_info(2, 0);
  const Scalar _tmp252 = _tmp188 * _tmp239;
  const Scalar _tmp253 = _tmp243 * _tmp76;
  const Scalar _tmp254 = _tmp184 * _tmp243 - _tmp187 * _tmp240 + _tmp187 * _tmp243 +
                         _tmp241 * _tmp251 - _tmp245 * sqrt_info(2, 1) + _tmp247 * sqrt_info(2, 1) +
                         _tmp250 * sqrt_info(2, 2) - _tmp252 * sqrt_info(2, 2) +
                         _tmp253 * sqrt_info(2, 2);
  const Scalar _tmp255 = -_tmp96;
  const Scalar _tmp256 = _tmp255 + _tmp95;
  const Scalar _tmp257 = -_tmp81;
  const Scalar _tmp258 = _tmp102 + _tmp257;
  const Scalar _tmp259 = _tmp210 + _tmp79;
  const Scalar _tmp260 = _tmp258 + _tmp259;
  const Scalar _tmp261 = _tmp107 + _tmp212;
  const Scalar _tmp262 = _tmp256 * _tmp84 + _tmp260 * _tmp98 + _tmp261 * _tmp93;
  const Scalar _tmp263 = -_tmp192 * _tmp240 + _tmp192 * _tmp243 + _tmp193 * _tmp243 +
                         _tmp194 * _tmp243 + _tmp242 * sqrt_info(3, 0) - _tmp246 * sqrt_info(3, 0) +
                         _tmp247 * sqrt_info(3, 1) + _tmp250 * sqrt_info(3, 2) -
                         _tmp252 * sqrt_info(3, 2) + _tmp262 * sqrt_info(3, 3);
  const Scalar _tmp264 = _tmp49 * sqrt_info(4, 0);
  const Scalar _tmp265 = _tmp196 * _tmp243 + _tmp242 * sqrt_info(4, 0) + _tmp243 * _tmp264 -
                         _tmp245 * sqrt_info(4, 1) - _tmp246 * sqrt_info(4, 0) +
                         _tmp247 * sqrt_info(4, 1) + _tmp250 * sqrt_info(4, 2) -
                         _tmp252 * sqrt_info(4, 2) + _tmp253 * sqrt_info(4, 2) +
                         _tmp262 * sqrt_info(4, 3);
  const Scalar _tmp266 = _tmp199 + _tmp258;
  const Scalar _tmp267 = _tmp266 * _tmp84 + _tmp99;
  const Scalar _tmp268 = _tmp49 * sqrt_info(5, 0);
  const Scalar _tmp269 = _tmp207 * _tmp243 + _tmp242 * sqrt_info(5, 0) + _tmp243 * _tmp268 -
                         _tmp245 * sqrt_info(5, 1) - _tmp246 * sqrt_info(5, 0) +
                         _tmp247 * sqrt_info(5, 1) + _tmp250 * sqrt_info(5, 2) -
                         _tmp252 * sqrt_info(5, 2) + _tmp253 * sqrt_info(5, 2) +
                         _tmp262 * sqrt_info(5, 3) + _tmp267 * sqrt_info(5, 5);
  const Scalar _tmp270 = _tmp121 * _tmp256 + _tmp122 * _tmp260 + _tmp123 * _tmp261;
  const Scalar _tmp271 = _tmp162 * _tmp249;
  const Scalar _tmp272 = _tmp216 * _tmp243 + _tmp217 * _tmp271 - _tmp219 * _tmp240 +
                         _tmp219 * _tmp243 + _tmp242 * sqrt_info(6, 0) - _tmp245 * sqrt_info(6, 1) +
                         _tmp247 * sqrt_info(6, 1) - _tmp252 * sqrt_info(6, 2) +
                         _tmp253 * sqrt_info(6, 2) + _tmp262 * sqrt_info(6, 3) +
                         _tmp267 * sqrt_info(6, 5) + _tmp270 * sqrt_info(6, 6);
  const Scalar _tmp273 = -_tmp221 * _tmp240 + _tmp221 * _tmp243 + _tmp223 * _tmp271 +
                         _tmp224 * _tmp243 + _tmp242 * sqrt_info(7, 0) - _tmp246 * sqrt_info(7, 0) +
                         _tmp247 * sqrt_info(7, 1) - _tmp252 * sqrt_info(7, 2) +
                         _tmp253 * sqrt_info(7, 2) + _tmp262 * sqrt_info(7, 3) +
                         _tmp267 * sqrt_info(7, 5) + _tmp270 * sqrt_info(7, 6);
  const Scalar _tmp274 = _tmp226 * _tmp243 - _tmp227 * _tmp240 + _tmp227 * _tmp243 -
                         _tmp228 * _tmp239 + _tmp229 * _tmp243 + _tmp242 * sqrt_info(8, 0) -
                         _tmp245 * sqrt_info(8, 1) + _tmp247 * sqrt_info(8, 1) +
                         _tmp250 * sqrt_info(8, 2) + _tmp262 * sqrt_info(8, 3) +
                         _tmp267 * sqrt_info(8, 5) + _tmp270 * sqrt_info(8, 6) +
                         sqrt_info(8, 8) * (_tmp121 * _tmp266 + _tmp124);
  const Scalar _tmp275 = _tmp134 + _tmp135 + _tmp136 + _tmp231;
  const Scalar _tmp276 = -_tmp139 + _tmp143 + _tmp233;
  const Scalar _tmp277 = _tmp146 + _tmp147 + _tmp235;
  const Scalar _tmp278 = _tmp155 + _tmp156 + _tmp237;
  const Scalar _tmp279 =
      -_pose_j[0] * _tmp275 - _pose_j[1] * _tmp277 - _pose_j[2] * _tmp278 + _pose_j[3] * _tmp276;
  const Scalar _tmp280 = _tmp176 * _tmp279;
  const Scalar _tmp281 = _tmp172 * _tmp279;
  const Scalar _tmp282 = _tmp166 * (_pose_j[0] * _tmp276 - _pose_j[1] * _tmp278 +
                                    _pose_j[2] * _tmp277 + _pose_j[3] * _tmp275);
  const Scalar _tmp283 = _tmp280 * _tmp50 - _tmp281 * _tmp50 + _tmp282 * sqrt_info(0, 0);
  const Scalar _tmp284 = _tmp281 * _tmp49;
  const Scalar _tmp285 = _tmp166 * (_pose_j[0] * _tmp278 + _pose_j[1] * _tmp276 -
                                    _pose_j[2] * _tmp275 + _pose_j[3] * _tmp277);
  const Scalar _tmp286 = _tmp179 * _tmp280 - _tmp179 * _tmp281 + _tmp182 * _tmp280 +
                         _tmp282 * sqrt_info(1, 0) - _tmp284 * sqrt_info(1, 0) +
                         _tmp285 * sqrt_info(1, 1);
  const Scalar _tmp287 = _tmp188 * _tmp279;
  const Scalar _tmp288 = _tmp281 * _tmp68;
  const Scalar _tmp289 = _tmp280 * _tmp76;
  const Scalar _tmp290 = _tmp162 * (-_pose_j[0] * _tmp277 + _pose_j[1] * _tmp275 +
                                    _pose_j[2] * _tmp276 + _pose_j[3] * _tmp278);
  const Scalar _tmp291 = _tmp165 * _tmp290;
  const Scalar _tmp292 = _tmp184 * _tmp280 + _tmp187 * _tmp280 - _tmp187 * _tmp281 +
                         _tmp282 * sqrt_info(2, 0) + _tmp285 * sqrt_info(2, 1) -
                         _tmp287 * sqrt_info(2, 2) - _tmp288 * sqrt_info(2, 1) +
                         _tmp289 * sqrt_info(2, 2) + _tmp291 * sqrt_info(2, 2);
  const Scalar _tmp293 = _tmp198 + _tmp200 + _tmp257 + _tmp79;
  const Scalar _tmp294 = _tmp110 + _tmp293 * _tmp93;
  const Scalar _tmp295 = _tmp192 * _tmp280 - _tmp192 * _tmp281 + _tmp193 * _tmp280 +
                         _tmp194 * _tmp280 + _tmp282 * sqrt_info(3, 0) - _tmp284 * sqrt_info(3, 0) +
                         _tmp285 * sqrt_info(3, 1) - _tmp287 * sqrt_info(3, 2) +
                         _tmp291 * sqrt_info(3, 2) + _tmp294 * sqrt_info(3, 3);
  const Scalar _tmp296 = _tmp280 * _tmp49;
  const Scalar _tmp297 = _tmp105 + _tmp208;
  const Scalar _tmp298 = _tmp255 + _tmp94;
  const Scalar _tmp299 = _tmp201 + _tmp259;
  const Scalar _tmp300 = _tmp297 * _tmp93 + _tmp298 * _tmp98 + _tmp299 * _tmp84;
  const Scalar _tmp301 = _tmp196 * _tmp280 + _tmp282 * sqrt_info(4, 0) - _tmp284 * sqrt_info(4, 0) +
                         _tmp285 * sqrt_info(4, 1) - _tmp287 * sqrt_info(4, 2) -
                         _tmp288 * sqrt_info(4, 1) + _tmp289 * sqrt_info(4, 2) +
                         _tmp291 * sqrt_info(4, 2) + _tmp294 * sqrt_info(4, 3) +
                         _tmp296 * sqrt_info(4, 0) + _tmp300 * sqrt_info(4, 4);
  const Scalar _tmp302 = _tmp207 * _tmp280 + _tmp282 * sqrt_info(5, 0) - _tmp284 * sqrt_info(5, 0) +
                         _tmp285 * sqrt_info(5, 1) - _tmp287 * sqrt_info(5, 2) -
                         _tmp288 * sqrt_info(5, 1) + _tmp289 * sqrt_info(5, 2) +
                         _tmp291 * sqrt_info(5, 2) + _tmp294 * sqrt_info(5, 3) +
                         _tmp296 * sqrt_info(5, 0) + _tmp300 * sqrt_info(5, 4);
  const Scalar _tmp303 = _tmp123 * _tmp293 + _tmp128;
  const Scalar _tmp304 = _tmp216 * _tmp280 + _tmp217 * _tmp290 + _tmp219 * _tmp280 -
                         _tmp219 * _tmp281 + _tmp282 * sqrt_info(6, 0) + _tmp285 * sqrt_info(6, 1) -
                         _tmp287 * sqrt_info(6, 2) - _tmp288 * sqrt_info(6, 1) +
                         _tmp289 * sqrt_info(6, 2) + _tmp294 * sqrt_info(6, 3) +
                         _tmp300 * sqrt_info(6, 4) + _tmp303 * sqrt_info(6, 6);
  const Scalar _tmp305 = _tmp121 * _tmp299 + _tmp122 * _tmp298 + _tmp123 * _tmp297;
  const Scalar _tmp306 =
      _tmp221 * _tmp280 - _tmp221 * _tmp281 + _tmp223 * _tmp290 + _tmp224 * _tmp280 +
      _tmp282 * sqrt_info(7, 0) - _tmp284 * sqrt_info(7, 0) + _tmp285 * sqrt_info(7, 1) -
      _tmp287 * sqrt_info(7, 2) + _tmp289 * sqrt_info(7, 2) + _tmp294 * sqrt_info(7, 3) +
      _tmp300 * sqrt_info(7, 4) + _tmp303 * sqrt_info(7, 6) + _tmp305 * sqrt_info(7, 7);
  const Scalar _tmp307 =
      _tmp226 * _tmp280 + _tmp227 * _tmp280 - _tmp227 * _tmp281 + _tmp229 * _tmp280 +
      _tmp282 * sqrt_info(8, 0) + _tmp285 * sqrt_info(8, 1) - _tmp287 * sqrt_info(8, 2) -
      _tmp288 * sqrt_info(8, 1) + _tmp291 * sqrt_info(8, 2) + _tmp294 * sqrt_info(8, 3) +
      _tmp300 * sqrt_info(8, 4) + _tmp303 * sqrt_info(8, 6) + _tmp305 * sqrt_info(8, 7);
  const Scalar _tmp308 = _tmp83 * sqrt_info(6, 6);
  const Scalar _tmp309 = _tmp106 * sqrt_info(7, 7);
  const Scalar _tmp310 = _tmp83 * sqrt_info(7, 6);
  const Scalar _tmp311 = -_tmp309 - _tmp310;
  const Scalar _tmp312 = _tmp106 * sqrt_info(8, 7);
  const Scalar _tmp313 = _tmp83 * sqrt_info(8, 6);
  const Scalar _tmp314 = _tmp114 * sqrt_info(8, 8);
  const Scalar _tmp315 = -_tmp312 - _tmp313 - _tmp314;
  const Scalar _tmp316 = _tmp92 * sqrt_info(6, 6);
  const Scalar _tmp317 = _tmp92 * sqrt_info(7, 6);
  const Scalar _tmp318 = _tmp104 * sqrt_info(7, 7);
  const Scalar _tmp319 = -_tmp317 - _tmp318;
  const Scalar _tmp320 = _tmp116 * sqrt_info(8, 8);
  const Scalar _tmp321 = _tmp92 * sqrt_info(8, 6);
  const Scalar _tmp322 = _tmp104 * sqrt_info(8, 7);
  const Scalar _tmp323 = -_tmp320 - _tmp321 - _tmp322;
  const Scalar _tmp324 = _tmp97 * sqrt_info(6, 6);
  const Scalar _tmp325 = _tmp109 * sqrt_info(7, 7);
  const Scalar _tmp326 = _tmp97 * sqrt_info(7, 6);
  const Scalar _tmp327 = -_tmp325 - _tmp326;
  const Scalar _tmp328 = _tmp109 * sqrt_info(8, 7);
  const Scalar _tmp329 = _tmp113 * sqrt_info(8, 8);
  const Scalar _tmp330 = _tmp97 * sqrt_info(8, 6);
  const Scalar _tmp331 = -_tmp328 - _tmp329 - _tmp330;
  const Scalar _tmp332 = _tmp83 * sqrt_info(3, 3);
  const Scalar _tmp333 = _tmp106 * sqrt_info(4, 4);
  const Scalar _tmp334 = _tmp83 * sqrt_info(4, 3);
  const Scalar _tmp335 = -_tmp333 - _tmp334;
  const Scalar _tmp336 = _tmp106 * sqrt_info(5, 4);
  const Scalar _tmp337 = _tmp83 * sqrt_info(5, 3);
  const Scalar _tmp338 = _tmp114 * sqrt_info(5, 5);
  const Scalar _tmp339 = -_tmp336 - _tmp337 - _tmp338;
  const Scalar _tmp340 = _tmp106 * sqrt_info(6, 4);
  const Scalar _tmp341 = _tmp83 * sqrt_info(6, 3);
  const Scalar _tmp342 = _tmp114 * sqrt_info(6, 5);
  const Scalar _tmp343 = -_tmp308 * dt - _tmp340 - _tmp341 - _tmp342;
  const Scalar _tmp344 = _tmp106 * sqrt_info(7, 4);
  const Scalar _tmp345 = _tmp83 * sqrt_info(7, 3);
  const Scalar _tmp346 = _tmp114 * sqrt_info(7, 5);
  const Scalar _tmp347 = -_tmp309 * dt - _tmp310 * dt - _tmp344 - _tmp345 - _tmp346;
  const Scalar _tmp348 = _tmp106 * sqrt_info(8, 4);
  const Scalar _tmp349 = _tmp83 * sqrt_info(8, 3);
  const Scalar _tmp350 = _tmp114 * sqrt_info(8, 5);
  const Scalar _tmp351 = -_tmp312 * dt - _tmp313 * dt - _tmp314 * dt - _tmp348 - _tmp349 - _tmp350;
  const Scalar _tmp352 = _tmp92 * sqrt_info(3, 3);
  const Scalar _tmp353 = _tmp92 * sqrt_info(4, 3);
  const Scalar _tmp354 = _tmp104 * sqrt_info(4, 4);
  const Scalar _tmp355 = -_tmp353 - _tmp354;
  const Scalar _tmp356 = _tmp116 * sqrt_info(5, 5);
  const Scalar _tmp357 = _tmp92 * sqrt_info(5, 3);
  const Scalar _tmp358 = _tmp104 * sqrt_info(5, 4);
  const Scalar _tmp359 = -_tmp356 - _tmp357 - _tmp358;
  const Scalar _tmp360 = _tmp116 * sqrt_info(6, 5);
  const Scalar _tmp361 = _tmp92 * sqrt_info(6, 3);
  const Scalar _tmp362 = _tmp104 * sqrt_info(6, 4);
  const Scalar _tmp363 = -_tmp316 * dt - _tmp360 - _tmp361 - _tmp362;
  const Scalar _tmp364 = _tmp116 * sqrt_info(7, 5);
  const Scalar _tmp365 = _tmp92 * sqrt_info(7, 3);
  const Scalar _tmp366 = _tmp104 * sqrt_info(7, 4);
  const Scalar _tmp367 = -_tmp317 * dt - _tmp318 * dt - _tmp364 - _tmp365 - _tmp366;
  const Scalar _tmp368 = _tmp116 * sqrt_info(8, 5);
  const Scalar _tmp369 = _tmp92 * sqrt_info(8, 3);
  const Scalar _tmp370 = _tmp104 * sqrt_info(8, 4);
  const Scalar _tmp371 = -_tmp320 * dt - _tmp321 * dt - _tmp322 * dt - _tmp368 - _tmp369 - _tmp370;
  const Scalar _tmp372 = _tmp97 * sqrt_info(3, 3);
  const Scalar _tmp373 = _tmp109 * sqrt_info(4, 4);
  const Scalar _tmp374 = _tmp97 * sqrt_info(4, 3);
  const Scalar _tmp375 = -_tmp373 - _tmp374;
  const Scalar _tmp376 = _tmp109 * sqrt_info(5, 4);
  const Scalar _tmp377 = _tmp113 * sqrt_info(5, 5);
  const Scalar _tmp378 = _tmp97 * sqrt_info(5, 3);
  const Scalar _tmp379 = -_tmp376 - _tmp377 - _tmp378;
  const Scalar _tmp380 = _tmp109 * sqrt_info(6, 4);
  const Scalar _tmp381 = _tmp113 * sqrt_info(6, 5);
  const Scalar _tmp382 = _tmp97 * sqrt_info(6, 3);
  const Scalar _tmp383 = -_tmp324 * dt - _tmp380 - _tmp381 - _tmp382;
  const Scalar _tmp384 = _tmp109 * sqrt_info(7, 4);
  const Scalar _tmp385 = _tmp113 * sqrt_info(7, 5);
  const Scalar _tmp386 = _tmp97 * sqrt_info(7, 3);
  const Scalar _tmp387 = -_tmp325 * dt - _tmp326 * dt - _tmp384 - _tmp385 - _tmp386;
  const Scalar _tmp388 = _tmp109 * sqrt_info(8, 4);
  const Scalar _tmp389 = _tmp113 * sqrt_info(8, 5);
  const Scalar _tmp390 = _tmp97 * sqrt_info(8, 3);
  const Scalar _tmp391 = -_tmp328 * dt - _tmp329 * dt - _tmp330 * dt - _tmp388 - _tmp389 - _tmp390;
  const Scalar _tmp392 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp393 = (Scalar(1) / Scalar(2)) * _tmp36;
  const Scalar _tmp394 = (Scalar(1) / Scalar(2)) * _tmp42;
  const Scalar _tmp395 = (Scalar(1) / Scalar(2)) * _tmp48;
  const Scalar _tmp396 = -_tmp392 - _tmp393 - _tmp394 + _tmp395;
  const Scalar _tmp397 = _tmp176 * _tmp396;
  const Scalar _tmp398 = _tmp172 * _tmp396;
  const Scalar _tmp399 = -Scalar(1) / Scalar(2) * _tmp51 - Scalar(1) / Scalar(2) * _tmp52 -
                         Scalar(1) / Scalar(2) * _tmp53 + (Scalar(1) / Scalar(2)) * _tmp55;
  const Scalar _tmp400 = _tmp166 * _tmp399;
  const Scalar _tmp401 = _tmp397 * _tmp50 - _tmp398 * _tmp50 + _tmp400 * sqrt_info(0, 0);
  const Scalar _tmp402 = (Scalar(1) / Scalar(2)) * _tmp72;
  const Scalar _tmp403 = (Scalar(1) / Scalar(2)) * _tmp73;
  const Scalar _tmp404 = (Scalar(1) / Scalar(2)) * _tmp74;
  const Scalar _tmp405 = (Scalar(1) / Scalar(2)) * _tmp75;
  const Scalar _tmp406 = _tmp166 * (_tmp402 + _tmp403 - _tmp404 + _tmp405);
  const Scalar _tmp407 = _tmp398 * _tmp49;
  const Scalar _tmp408 = _tmp398 * _tmp68;
  const Scalar _tmp409 = _tmp179 * _tmp397 + _tmp182 * _tmp397 + _tmp400 * sqrt_info(1, 0) +
                         _tmp406 * sqrt_info(1, 1) - _tmp407 * sqrt_info(1, 0) -
                         _tmp408 * sqrt_info(1, 1);
  const Scalar _tmp410 = _tmp176 * _tmp76;
  const Scalar _tmp411 = _tmp396 * _tmp410;
  const Scalar _tmp412 = (Scalar(1) / Scalar(2)) * _tmp64;
  const Scalar _tmp413 = (Scalar(1) / Scalar(2)) * _tmp65;
  const Scalar _tmp414 = (Scalar(1) / Scalar(2)) * _tmp66;
  const Scalar _tmp415 = (Scalar(1) / Scalar(2)) * _tmp67;
  const Scalar _tmp416 = -_tmp412 + _tmp413 - _tmp414 - _tmp415;
  const Scalar _tmp417 = _tmp162 * _tmp416;
  const Scalar _tmp418 = _tmp165 * _tmp417;
  const Scalar _tmp419 = _tmp188 * _tmp396;
  const Scalar _tmp420 = _tmp184 * _tmp397 + _tmp187 * _tmp397 - _tmp187 * _tmp398 +
                         _tmp400 * sqrt_info(2, 0) + _tmp406 * sqrt_info(2, 1) -
                         _tmp408 * sqrt_info(2, 1) + _tmp411 * sqrt_info(2, 2) +
                         _tmp418 * sqrt_info(2, 2) - _tmp419 * sqrt_info(2, 2);
  const Scalar _tmp421 = _tmp176 * _tmp194;
  const Scalar _tmp422 = _tmp192 * _tmp397 - _tmp192 * _tmp398 + _tmp193 * _tmp397 +
                         _tmp396 * _tmp421 + _tmp400 * sqrt_info(3, 0) + _tmp406 * sqrt_info(3, 1) -
                         _tmp407 * sqrt_info(3, 0) + _tmp418 * sqrt_info(3, 2) -
                         _tmp419 * sqrt_info(3, 2);
  const Scalar _tmp423 = _tmp196 * _tmp397 + _tmp264 * _tmp397 + _tmp400 * sqrt_info(4, 0) +
                         _tmp406 * sqrt_info(4, 1) - _tmp407 * sqrt_info(4, 0) -
                         _tmp408 * sqrt_info(4, 1) + _tmp411 * sqrt_info(4, 2) +
                         _tmp418 * sqrt_info(4, 2) - _tmp419 * sqrt_info(4, 2);
  const Scalar _tmp424 = _tmp410 * sqrt_info(5, 2);
  const Scalar _tmp425 = _tmp207 * _tmp397 + _tmp268 * _tmp397 + _tmp396 * _tmp424 +
                         _tmp400 * sqrt_info(5, 0) + _tmp406 * sqrt_info(5, 1) -
                         _tmp407 * sqrt_info(5, 0) - _tmp408 * sqrt_info(5, 1) +
                         _tmp418 * sqrt_info(5, 2) - _tmp419 * sqrt_info(5, 2);
  const Scalar _tmp426 = _tmp216 * _tmp397 + _tmp217 * _tmp417 + _tmp219 * _tmp397 -
                         _tmp219 * _tmp398 + _tmp400 * sqrt_info(6, 0) + _tmp406 * sqrt_info(6, 1) -
                         _tmp408 * sqrt_info(6, 1) + _tmp411 * sqrt_info(6, 2) -
                         _tmp419 * sqrt_info(6, 2);
  const Scalar _tmp427 = _tmp221 * _tmp397 - _tmp221 * _tmp398 + _tmp223 * _tmp417 +
                         _tmp224 * _tmp397 + _tmp400 * sqrt_info(7, 0) + _tmp406 * sqrt_info(7, 1) -
                         _tmp407 * sqrt_info(7, 0) + _tmp411 * sqrt_info(7, 2) -
                         _tmp419 * sqrt_info(7, 2);
  const Scalar _tmp428 = _tmp176 * _tmp229;
  const Scalar _tmp429 = _tmp226 * _tmp397 + _tmp227 * _tmp397 - _tmp227 * _tmp398 -
                         _tmp228 * _tmp396 + _tmp396 * _tmp428 + _tmp400 * sqrt_info(8, 0) +
                         _tmp406 * sqrt_info(8, 1) - _tmp408 * sqrt_info(8, 1) +
                         _tmp418 * sqrt_info(8, 2);
  const Scalar _tmp430 = _tmp161 * _tmp169 * _tmp170 * _tmp174 * _tmp417;
  const Scalar _tmp431 = _tmp172 * _tmp416;
  const Scalar _tmp432 = -_tmp402 - _tmp403 + _tmp404 - _tmp405;
  const Scalar _tmp433 = _tmp166 * _tmp432;
  const Scalar _tmp434 = _tmp430 * _tmp50 - _tmp431 * _tmp50 + _tmp433 * sqrt_info(0, 0);
  const Scalar _tmp435 = _tmp431 * _tmp49;
  const Scalar _tmp436 = _tmp432 * sqrt_info(1, 0);
  const Scalar _tmp437 = _tmp166 * _tmp436 + _tmp179 * _tmp430 - _tmp179 * _tmp431 +
                         _tmp182 * _tmp430 + _tmp400 * sqrt_info(1, 1) - _tmp435 * sqrt_info(1, 0);
  const Scalar _tmp438 = _tmp188 * _tmp416;
  const Scalar _tmp439 = _tmp430 * _tmp76;
  const Scalar _tmp440 = _tmp431 * _tmp68;
  const Scalar _tmp441 = _tmp392 + _tmp393 + _tmp394 - _tmp395;
  const Scalar _tmp442 = _tmp166 * _tmp441;
  const Scalar _tmp443 = _tmp184 * _tmp430 + _tmp187 * _tmp430 - _tmp187 * _tmp431 +
                         _tmp400 * sqrt_info(2, 1) + _tmp433 * sqrt_info(2, 0) -
                         _tmp438 * sqrt_info(2, 2) + _tmp439 * sqrt_info(2, 2) -
                         _tmp440 * sqrt_info(2, 1) + _tmp442 * sqrt_info(2, 2);
  const Scalar _tmp444 = _tmp192 * _tmp430 - _tmp192 * _tmp431 + _tmp193 * _tmp430 -
                         _tmp193 * _tmp431 + _tmp194 * _tmp430 + _tmp400 * sqrt_info(3, 1) +
                         _tmp433 * sqrt_info(3, 0) - _tmp438 * sqrt_info(3, 2) +
                         _tmp442 * sqrt_info(3, 2);
  const Scalar _tmp445 = _tmp430 * _tmp49;
  const Scalar _tmp446 = _tmp196 * _tmp430 + _tmp400 * sqrt_info(4, 1) + _tmp433 * sqrt_info(4, 0) -
                         _tmp435 * sqrt_info(4, 0) - _tmp438 * sqrt_info(4, 2) +
                         _tmp439 * sqrt_info(4, 2) - _tmp440 * sqrt_info(4, 1) +
                         _tmp442 * sqrt_info(4, 2) + _tmp445 * sqrt_info(4, 0);
  const Scalar _tmp447 = _tmp207 * _tmp430 + _tmp400 * sqrt_info(5, 1) + _tmp433 * sqrt_info(5, 0) -
                         _tmp435 * sqrt_info(5, 0) - _tmp438 * sqrt_info(5, 2) +
                         _tmp439 * sqrt_info(5, 2) - _tmp440 * sqrt_info(5, 1) +
                         _tmp442 * sqrt_info(5, 2) + _tmp445 * sqrt_info(5, 0);
  const Scalar _tmp448 = _tmp162 * _tmp441;
  const Scalar _tmp449 = _tmp216 * _tmp430 - _tmp216 * _tmp431 + _tmp217 * _tmp448 +
                         _tmp219 * _tmp430 - _tmp219 * _tmp431 + _tmp400 * sqrt_info(6, 1) +
                         _tmp433 * sqrt_info(6, 0) - _tmp438 * sqrt_info(6, 2) +
                         _tmp439 * sqrt_info(6, 2);
  const Scalar _tmp450 = _tmp221 * _tmp430 - _tmp221 * _tmp431 + _tmp223 * _tmp448 +
                         _tmp400 * sqrt_info(7, 1) + _tmp433 * sqrt_info(7, 0) -
                         _tmp435 * sqrt_info(7, 0) - _tmp438 * sqrt_info(7, 2) +
                         _tmp439 * sqrt_info(7, 2) + _tmp445 * sqrt_info(7, 0);
  const Scalar _tmp451 = _tmp226 * _tmp430 + _tmp227 * _tmp430 - _tmp227 * _tmp431 +
                         _tmp229 * _tmp430 + _tmp400 * sqrt_info(8, 1) + _tmp433 * sqrt_info(8, 0) -
                         _tmp438 * sqrt_info(8, 2) - _tmp440 * sqrt_info(8, 1) +
                         _tmp442 * sqrt_info(8, 2);
  const Scalar _tmp452 = _tmp166 * (_tmp412 - _tmp413 + _tmp414 + _tmp415);
  const Scalar _tmp453 = _tmp172 * _tmp432;
  const Scalar _tmp454 = _tmp176 * _tmp432;
  const Scalar _tmp455 = _tmp452 * sqrt_info(0, 0) - _tmp453 * _tmp50 + _tmp454 * _tmp50;
  const Scalar _tmp456 = _tmp436 * _tmp49;
  const Scalar _tmp457 = _tmp166 * _tmp396;
  const Scalar _tmp458 = _tmp453 * _tmp68;
  const Scalar _tmp459 = -_tmp172 * _tmp456 + _tmp176 * _tmp456 + _tmp179 * _tmp454 +
                         _tmp452 * sqrt_info(1, 0) + _tmp457 * sqrt_info(1, 1) -
                         _tmp458 * sqrt_info(1, 1);
  const Scalar _tmp460 = _tmp453 * _tmp76;
  const Scalar _tmp461 = _tmp410 * _tmp432;
  const Scalar _tmp462 = _tmp184 * _tmp454 - _tmp187 * _tmp453 + _tmp187 * _tmp454 +
                         _tmp400 * sqrt_info(2, 2) + _tmp452 * sqrt_info(2, 0) +
                         _tmp457 * sqrt_info(2, 1) - _tmp458 * sqrt_info(2, 1) -
                         _tmp460 * sqrt_info(2, 2) + _tmp461 * sqrt_info(2, 2);
  const Scalar _tmp463 = _tmp192 * _tmp454 - _tmp193 * _tmp453 + _tmp193 * _tmp454 -
                         _tmp194 * _tmp453 + _tmp400 * sqrt_info(3, 2) + _tmp421 * _tmp432 +
                         _tmp452 * sqrt_info(3, 0) + _tmp457 * sqrt_info(3, 1) -
                         _tmp458 * sqrt_info(3, 1);
  const Scalar _tmp464 = _tmp453 * _tmp49;
  const Scalar _tmp465 = _tmp196 * _tmp454 + _tmp264 * _tmp454 + _tmp400 * sqrt_info(4, 2) +
                         _tmp452 * sqrt_info(4, 0) + _tmp457 * sqrt_info(4, 1) -
                         _tmp458 * sqrt_info(4, 1) - _tmp460 * sqrt_info(4, 2) +
                         _tmp461 * sqrt_info(4, 2) - _tmp464 * sqrt_info(4, 0);
  const Scalar _tmp466 = _tmp207 * _tmp454 + _tmp268 * _tmp454 + _tmp400 * sqrt_info(5, 2) +
                         _tmp424 * _tmp432 + _tmp452 * sqrt_info(5, 0) + _tmp457 * sqrt_info(5, 1) -
                         _tmp458 * sqrt_info(5, 1) - _tmp460 * sqrt_info(5, 2) -
                         _tmp464 * sqrt_info(5, 0);
  const Scalar _tmp467 = _tmp162 * _tmp399;
  const Scalar _tmp468 = _tmp216 * _tmp454 + _tmp217 * _tmp467 - _tmp219 * _tmp453 +
                         _tmp219 * _tmp454 + _tmp452 * sqrt_info(6, 0) + _tmp457 * sqrt_info(6, 1) -
                         _tmp458 * sqrt_info(6, 1) - _tmp460 * sqrt_info(6, 2) +
                         _tmp461 * sqrt_info(6, 2);
  const Scalar _tmp469 = -_tmp221 * _tmp453 + _tmp221 * _tmp454 + _tmp223 * _tmp467 +
                         _tmp224 * _tmp454 + _tmp452 * sqrt_info(7, 0) + _tmp457 * sqrt_info(7, 1) -
                         _tmp460 * sqrt_info(7, 2) + _tmp461 * sqrt_info(7, 2) -
                         _tmp464 * sqrt_info(7, 0);
  const Scalar _tmp470 = _tmp226 * _tmp454 - _tmp227 * _tmp453 + _tmp227 * _tmp454 +
                         _tmp400 * sqrt_info(8, 2) + _tmp428 * _tmp432 + _tmp452 * sqrt_info(8, 0) +
                         _tmp457 * sqrt_info(8, 1) - _tmp458 * sqrt_info(8, 1) -
                         _tmp460 * sqrt_info(8, 2);
  const Scalar _tmp471 = _tmp309 + _tmp310;
  const Scalar _tmp472 = _tmp312 + _tmp313 + _tmp314;
  const Scalar _tmp473 = _tmp317 + _tmp318;
  const Scalar _tmp474 = _tmp320 + _tmp321 + _tmp322;
  const Scalar _tmp475 = _tmp325 + _tmp326;
  const Scalar _tmp476 = _tmp328 + _tmp329 + _tmp330;
  const Scalar _tmp477 = _tmp333 + _tmp334;
  const Scalar _tmp478 = _tmp336 + _tmp337 + _tmp338;
  const Scalar _tmp479 = _tmp340 + _tmp341 + _tmp342;
  const Scalar _tmp480 = _tmp344 + _tmp345 + _tmp346;
  const Scalar _tmp481 = _tmp348 + _tmp349 + _tmp350;
  const Scalar _tmp482 = _tmp353 + _tmp354;
  const Scalar _tmp483 = _tmp356 + _tmp357 + _tmp358;
  const Scalar _tmp484 = _tmp360 + _tmp361 + _tmp362;
  const Scalar _tmp485 = _tmp364 + _tmp365 + _tmp366;
  const Scalar _tmp486 = _tmp368 + _tmp369 + _tmp370;
  const Scalar _tmp487 = _tmp373 + _tmp374;
  const Scalar _tmp488 = _tmp376 + _tmp377 + _tmp378;
  const Scalar _tmp489 = _tmp380 + _tmp381 + _tmp382;
  const Scalar _tmp490 = _tmp384 + _tmp385 + _tmp386;
  const Scalar _tmp491 = _tmp388 + _tmp389 + _tmp390;
  const Scalar _tmp492 = Dv_D_accel_bias(0, 0) * sqrt_info(3, 3);
  const Scalar _tmp493 =
      -Dv_D_accel_bias(0, 0) * sqrt_info(4, 3) - Dv_D_accel_bias(1, 0) * sqrt_info(4, 4);
  const Scalar _tmp494 = -Dv_D_accel_bias(0, 0) * sqrt_info(5, 3) -
                         Dv_D_accel_bias(1, 0) * sqrt_info(5, 4) -
                         Dv_D_accel_bias(2, 0) * sqrt_info(5, 5);
  const Scalar _tmp495 =
      -Dp_D_accel_bias(0, 0) * sqrt_info(6, 6) - Dv_D_accel_bias(0, 0) * sqrt_info(6, 3) -
      Dv_D_accel_bias(1, 0) * sqrt_info(6, 4) - Dv_D_accel_bias(2, 0) * sqrt_info(6, 5);
  const Scalar _tmp496 =
      -Dp_D_accel_bias(0, 0) * sqrt_info(7, 6) - Dp_D_accel_bias(1, 0) * sqrt_info(7, 7) -
      Dv_D_accel_bias(0, 0) * sqrt_info(7, 3) - Dv_D_accel_bias(1, 0) * sqrt_info(7, 4) -
      Dv_D_accel_bias(2, 0) * sqrt_info(7, 5);
  const Scalar _tmp497 =
      -Dp_D_accel_bias(0, 0) * sqrt_info(8, 6) - Dp_D_accel_bias(1, 0) * sqrt_info(8, 7) -
      Dp_D_accel_bias(2, 0) * sqrt_info(8, 8) - Dv_D_accel_bias(0, 0) * sqrt_info(8, 3) -
      Dv_D_accel_bias(1, 0) * sqrt_info(8, 4) - Dv_D_accel_bias(2, 0) * sqrt_info(8, 5);
  const Scalar _tmp498 = Dv_D_accel_bias(0, 1) * sqrt_info(3, 3);
  const Scalar _tmp499 =
      -Dv_D_accel_bias(0, 1) * sqrt_info(4, 3) - Dv_D_accel_bias(1, 1) * sqrt_info(4, 4);
  const Scalar _tmp500 = -Dv_D_accel_bias(0, 1) * sqrt_info(5, 3) -
                         Dv_D_accel_bias(1, 1) * sqrt_info(5, 4) -
                         Dv_D_accel_bias(2, 1) * sqrt_info(5, 5);
  const Scalar _tmp501 =
      -Dp_D_accel_bias(0, 1) * sqrt_info(6, 6) - Dv_D_accel_bias(0, 1) * sqrt_info(6, 3) -
      Dv_D_accel_bias(1, 1) * sqrt_info(6, 4) - Dv_D_accel_bias(2, 1) * sqrt_info(6, 5);
  const Scalar _tmp502 =
      -Dp_D_accel_bias(0, 1) * sqrt_info(7, 6) - Dp_D_accel_bias(1, 1) * sqrt_info(7, 7) -
      Dv_D_accel_bias(0, 1) * sqrt_info(7, 3) - Dv_D_accel_bias(1, 1) * sqrt_info(7, 4) -
      Dv_D_accel_bias(2, 1) * sqrt_info(7, 5);
  const Scalar _tmp503 =
      -Dp_D_accel_bias(0, 1) * sqrt_info(8, 6) - Dp_D_accel_bias(1, 1) * sqrt_info(8, 7) -
      Dp_D_accel_bias(2, 1) * sqrt_info(8, 8) - Dv_D_accel_bias(0, 1) * sqrt_info(8, 3) -
      Dv_D_accel_bias(1, 1) * sqrt_info(8, 4) - Dv_D_accel_bias(2, 1) * sqrt_info(8, 5);
  const Scalar _tmp504 = Dv_D_accel_bias(0, 2) * sqrt_info(3, 3);
  const Scalar _tmp505 =
      -Dv_D_accel_bias(0, 2) * sqrt_info(4, 3) - Dv_D_accel_bias(1, 2) * sqrt_info(4, 4);
  const Scalar _tmp506 = -Dv_D_accel_bias(0, 2) * sqrt_info(5, 3) -
                         Dv_D_accel_bias(1, 2) * sqrt_info(5, 4) -
                         Dv_D_accel_bias(2, 2) * sqrt_info(5, 5);
  const Scalar _tmp507 =
      -Dp_D_accel_bias(0, 2) * sqrt_info(6, 6) - Dv_D_accel_bias(0, 2) * sqrt_info(6, 3) -
      Dv_D_accel_bias(1, 2) * sqrt_info(6, 4) - Dv_D_accel_bias(2, 2) * sqrt_info(6, 5);
  const Scalar _tmp508 =
      -Dp_D_accel_bias(0, 2) * sqrt_info(7, 6) - Dp_D_accel_bias(1, 2) * sqrt_info(7, 7) -
      Dv_D_accel_bias(0, 2) * sqrt_info(7, 3) - Dv_D_accel_bias(1, 2) * sqrt_info(7, 4) -
      Dv_D_accel_bias(2, 2) * sqrt_info(7, 5);
  const Scalar _tmp509 =
      -Dp_D_accel_bias(0, 2) * sqrt_info(8, 6) - Dp_D_accel_bias(1, 2) * sqrt_info(8, 7) -
      Dp_D_accel_bias(2, 2) * sqrt_info(8, 8) - Dv_D_accel_bias(0, 2) * sqrt_info(8, 3) -
      Dv_D_accel_bias(1, 2) * sqrt_info(8, 4) - Dv_D_accel_bias(2, 2) * sqrt_info(8, 5);
  const Scalar _tmp510 = 2 * _tmp5;
  const Scalar _tmp511 = 2 * _tmp4;
  const Scalar _tmp512 = 2 * _tmp3;
  const Scalar _tmp513 = DR_D_gyro_bias(0, 0) * _tmp511 + DR_D_gyro_bias(1, 0) * _tmp510 +
                         DR_D_gyro_bias(2, 0) * _tmp512;
  const Scalar _tmp514 = (Scalar(1) / Scalar(2)) * _tmp11 / (_tmp6 * std::sqrt(_tmp6));
  const Scalar _tmp515 = _tmp513 * _tmp514;
  const Scalar _tmp516 = _tmp3 * _tmp515;
  const Scalar _tmp517 = (Scalar(1) / Scalar(4)) * _tmp513;
  const Scalar _tmp518 = Scalar(1.0) / (_tmp6);
  const Scalar _tmp519 = _tmp5 * _tmp518;
  const Scalar _tmp520 = _tmp517 * _tmp519;
  const Scalar _tmp521 = _tmp4 * _tmp518;
  const Scalar _tmp522 = _tmp517 * _tmp521;
  const Scalar _tmp523 = _DR[3] * _tmp4;
  const Scalar _tmp524 = _tmp5 * _tmp514;
  const Scalar _tmp525 = _tmp513 * _tmp524;
  const Scalar _tmp526 = _tmp3 * _tmp518;
  const Scalar _tmp527 = _tmp18 * _tmp526;
  const Scalar _tmp528 = DR_D_gyro_bias(0, 0) * _tmp14 - DR_D_gyro_bias(1, 0) * _tmp20 +
                         DR_D_gyro_bias(2, 0) * _tmp15 - _DR[1] * _tmp516 + _DR[2] * _tmp525 -
                         _tmp19 * _tmp517 - _tmp23 * _tmp520 + _tmp26 * _tmp522 -
                         _tmp515 * _tmp523 + _tmp517 * _tmp527;
  const Scalar _tmp529 = _tmp517 * _tmp526;
  const Scalar _tmp530 = _DR[0] * _tmp513;
  const Scalar _tmp531 = _tmp514 * _tmp530;
  const Scalar _tmp532 = -DR_D_gyro_bias(0, 0) * _tmp19 - DR_D_gyro_bias(1, 0) * _tmp15 -
                         DR_D_gyro_bias(2, 0) * _tmp20 + _DR[1] * _tmp525 + _DR[2] * _tmp516 -
                         _tmp10 * _tmp522 - _tmp14 * _tmp517 - _tmp18 * _tmp520 - _tmp23 * _tmp529 +
                         _tmp4 * _tmp531;
  const Scalar _tmp533 = _DR[1] * _tmp4;
  const Scalar _tmp534 = -DR_D_gyro_bias(0, 0) * _tmp15 + DR_D_gyro_bias(1, 0) * _tmp19 +
                         DR_D_gyro_bias(2, 0) * _tmp14 - _DR[3] * _tmp516 + _tmp10 * _tmp520 -
                         _tmp18 * _tmp522 - _tmp20 * _tmp517 + _tmp26 * _tmp529 +
                         _tmp515 * _tmp533 - _tmp524 * _tmp530;
  const Scalar _tmp535 = _DR[2] * _tmp4;
  const Scalar _tmp536 = _tmp10 * _tmp526;
  const Scalar _tmp537 = DR_D_gyro_bias(0, 0) * _tmp20 + DR_D_gyro_bias(1, 0) * _tmp14 -
                         DR_D_gyro_bias(2, 0) * _tmp19 - _DR[3] * _tmp525 - _tmp15 * _tmp517 +
                         _tmp23 * _tmp522 + _tmp26 * _tmp520 + _tmp3 * _tmp531 - _tmp515 * _tmp535 -
                         _tmp517 * _tmp536;
  const Scalar _tmp538 =
      -_pose_i[0] * _tmp532 - _pose_i[1] * _tmp534 + _pose_i[2] * _tmp537 - _pose_i[3] * _tmp528;
  const Scalar _tmp539 =
      _pose_i[0] * _tmp534 - _pose_i[1] * _tmp532 - _pose_i[2] * _tmp528 - _pose_i[3] * _tmp537;
  const Scalar _tmp540 =
      -_pose_i[0] * _tmp528 - _pose_i[1] * _tmp537 - _pose_i[2] * _tmp534 + _pose_i[3] * _tmp532;
  const Scalar _tmp541 =
      -_pose_i[0] * _tmp537 + _pose_i[1] * _tmp528 - _pose_i[2] * _tmp532 - _pose_i[3] * _tmp534;
  const Scalar _tmp542 = _tmp166 * (_pose_j[0] * _tmp540 - _pose_j[1] * _tmp541 +
                                    _pose_j[2] * _tmp539 + _pose_j[3] * _tmp538);
  const Scalar _tmp543 =
      _pose_j[0] * _tmp538 + _pose_j[1] * _tmp539 + _pose_j[2] * _tmp541 - _pose_j[3] * _tmp540;
  const Scalar _tmp544 = (((_tmp54 + _tmp58) > 0) - ((_tmp54 + _tmp58) < 0));
  const Scalar _tmp545 = _tmp171 * _tmp544;
  const Scalar _tmp546 = _tmp543 * _tmp545;
  const Scalar _tmp547 = _tmp175 * _tmp544;
  const Scalar _tmp548 = _tmp543 * _tmp547;
  const Scalar _tmp549 = -_tmp50 * _tmp546 + _tmp50 * _tmp548 + _tmp542 * sqrt_info(0, 0);
  const Scalar _tmp550 = _tmp166 * (_pose_j[0] * _tmp541 + _pose_j[1] * _tmp540 -
                                    _pose_j[2] * _tmp538 + _pose_j[3] * _tmp539);
  const Scalar _tmp551 = _tmp49 * _tmp546;
  const Scalar _tmp552 = -_tmp179 * _tmp546 + _tmp179 * _tmp548 + _tmp182 * _tmp548 +
                         _tmp542 * sqrt_info(1, 0) + _tmp550 * sqrt_info(1, 1) -
                         _tmp551 * sqrt_info(1, 0);
  const Scalar _tmp553 =
      -_pose_j[0] * _tmp539 + _pose_j[1] * _tmp538 + _pose_j[2] * _tmp540 + _pose_j[3] * _tmp541;
  const Scalar _tmp554 = _tmp166 * _tmp553;
  const Scalar _tmp555 = _tmp548 * _tmp76;
  const Scalar _tmp556 = _tmp546 * _tmp76;
  const Scalar _tmp557 = -_tmp184 * _tmp546 + _tmp184 * _tmp548 - _tmp187 * _tmp546 +
                         _tmp187 * _tmp548 + _tmp542 * sqrt_info(2, 0) + _tmp550 * sqrt_info(2, 1) +
                         _tmp554 * sqrt_info(2, 2) + _tmp555 * sqrt_info(2, 2) -
                         _tmp556 * sqrt_info(2, 2);
  const Scalar _tmp558 = -Dv_D_gyro_bias(0, 0) * sqrt_info(3, 3) - _tmp192 * _tmp546 +
                         _tmp192 * _tmp548 - _tmp193 * _tmp546 + _tmp193 * _tmp548 -
                         _tmp194 * _tmp546 + _tmp194 * _tmp548 + _tmp542 * sqrt_info(3, 0) +
                         _tmp550 * sqrt_info(3, 1) + _tmp554 * sqrt_info(3, 2);
  const Scalar _tmp559 = _tmp546 * _tmp68;
  const Scalar _tmp560 =
      -Dv_D_gyro_bias(0, 0) * sqrt_info(4, 3) - Dv_D_gyro_bias(1, 0) * sqrt_info(4, 4) +
      _tmp196 * _tmp548 + _tmp264 * _tmp548 + _tmp542 * sqrt_info(4, 0) +
      _tmp550 * sqrt_info(4, 1) - _tmp551 * sqrt_info(4, 0) + _tmp554 * sqrt_info(4, 2) +
      _tmp555 * sqrt_info(4, 2) - _tmp556 * sqrt_info(4, 2) - _tmp559 * sqrt_info(4, 1);
  const Scalar _tmp561 =
      -Dv_D_gyro_bias(0, 0) * sqrt_info(5, 3) - Dv_D_gyro_bias(1, 0) * sqrt_info(5, 4) -
      Dv_D_gyro_bias(2, 0) * sqrt_info(5, 5) + _tmp207 * _tmp548 + _tmp268 * _tmp548 +
      _tmp542 * sqrt_info(5, 0) + _tmp550 * sqrt_info(5, 1) - _tmp551 * sqrt_info(5, 0) +
      _tmp554 * sqrt_info(5, 2) + _tmp555 * sqrt_info(5, 2) - _tmp556 * sqrt_info(5, 2) -
      _tmp559 * sqrt_info(5, 1);
  const Scalar _tmp562 = _tmp162 * _tmp553;
  const Scalar _tmp563 =
      -Dp_D_gyro_bias(0, 0) * sqrt_info(6, 6) - Dv_D_gyro_bias(0, 0) * sqrt_info(6, 3) -
      Dv_D_gyro_bias(1, 0) * sqrt_info(6, 4) - Dv_D_gyro_bias(2, 0) * sqrt_info(6, 5) -
      _tmp216 * _tmp546 + _tmp216 * _tmp548 + _tmp217 * _tmp562 - _tmp219 * _tmp546 +
      _tmp219 * _tmp548 + _tmp542 * sqrt_info(6, 0) + _tmp550 * sqrt_info(6, 1) +
      _tmp555 * sqrt_info(6, 2) - _tmp556 * sqrt_info(6, 2);
  const Scalar _tmp564 =
      -Dp_D_gyro_bias(0, 0) * sqrt_info(7, 6) - Dp_D_gyro_bias(1, 0) * sqrt_info(7, 7) -
      Dv_D_gyro_bias(0, 0) * sqrt_info(7, 3) - Dv_D_gyro_bias(1, 0) * sqrt_info(7, 4) -
      Dv_D_gyro_bias(2, 0) * sqrt_info(7, 5) - _tmp221 * _tmp546 + _tmp221 * _tmp548 +
      _tmp223 * _tmp562 + _tmp224 * _tmp548 + _tmp542 * sqrt_info(7, 0) +
      _tmp550 * sqrt_info(7, 1) - _tmp551 * sqrt_info(7, 0) + _tmp555 * sqrt_info(7, 2) -
      _tmp556 * sqrt_info(7, 2);
  const Scalar _tmp565 =
      -Dp_D_gyro_bias(0, 0) * sqrt_info(8, 6) - Dp_D_gyro_bias(1, 0) * sqrt_info(8, 7) -
      Dp_D_gyro_bias(2, 0) * sqrt_info(8, 8) - Dv_D_gyro_bias(0, 0) * sqrt_info(8, 3) -
      Dv_D_gyro_bias(1, 0) * sqrt_info(8, 4) - Dv_D_gyro_bias(2, 0) * sqrt_info(8, 5) +
      _tmp226 * _tmp548 - _tmp227 * _tmp546 + _tmp227 * _tmp548 + _tmp229 * _tmp548 +
      _tmp542 * sqrt_info(8, 0) + _tmp550 * sqrt_info(8, 1) + _tmp554 * sqrt_info(8, 2) -
      _tmp556 * sqrt_info(8, 2) - _tmp559 * sqrt_info(8, 1);
  const Scalar _tmp566 = DR_D_gyro_bias(0, 1) * _tmp511 + DR_D_gyro_bias(1, 1) * _tmp510 +
                         DR_D_gyro_bias(2, 1) * _tmp512;
  const Scalar _tmp567 = _tmp524 * _tmp566;
  const Scalar _tmp568 = (Scalar(1) / Scalar(4)) * _tmp566;
  const Scalar _tmp569 = _tmp519 * _tmp568;
  const Scalar _tmp570 = _tmp23 * _tmp568;
  const Scalar _tmp571 = _tmp514 * _tmp566;
  const Scalar _tmp572 = _tmp3 * _tmp571;
  const Scalar _tmp573 = _DR[0] * _tmp4;
  const Scalar _tmp574 = _tmp521 * _tmp568;
  const Scalar _tmp575 = -DR_D_gyro_bias(0, 1) * _tmp19 - DR_D_gyro_bias(1, 1) * _tmp15 -
                         DR_D_gyro_bias(2, 1) * _tmp20 + _DR[1] * _tmp567 + _DR[2] * _tmp572 -
                         _tmp10 * _tmp574 - _tmp14 * _tmp568 - _tmp18 * _tmp569 -
                         _tmp526 * _tmp570 + _tmp571 * _tmp573;
  const Scalar _tmp576 = _tmp26 * _tmp568;
  const Scalar _tmp577 = DR_D_gyro_bias(0, 1) * _tmp14 - DR_D_gyro_bias(1, 1) * _tmp20 +
                         DR_D_gyro_bias(2, 1) * _tmp15 - _DR[1] * _tmp572 + _DR[2] * _tmp567 -
                         _tmp19 * _tmp568 - _tmp519 * _tmp570 + _tmp521 * _tmp576 -
                         _tmp523 * _tmp571 + _tmp527 * _tmp568;
  const Scalar _tmp578 = DR_D_gyro_bias(0, 1) * _tmp20 + DR_D_gyro_bias(1, 1) * _tmp14 -
                         DR_D_gyro_bias(2, 1) * _tmp19 + _DR[0] * _tmp572 - _DR[3] * _tmp567 -
                         _tmp15 * _tmp568 + _tmp26 * _tmp569 + _tmp521 * _tmp570 -
                         _tmp535 * _tmp571 - _tmp536 * _tmp568;
  const Scalar _tmp579 = -DR_D_gyro_bias(0, 1) * _tmp15 + DR_D_gyro_bias(1, 1) * _tmp19 +
                         DR_D_gyro_bias(2, 1) * _tmp14 - _DR[0] * _tmp567 - _DR[3] * _tmp572 +
                         _tmp10 * _tmp569 - _tmp18 * _tmp574 - _tmp20 * _tmp568 +
                         _tmp526 * _tmp576 + _tmp533 * _tmp571;
  const Scalar _tmp580 =
      -_pose_i[0] * _tmp578 + _pose_i[1] * _tmp577 - _pose_i[2] * _tmp575 - _pose_i[3] * _tmp579;
  const Scalar _tmp581 =
      _pose_i[0] * _tmp579 - _pose_i[1] * _tmp575 - _pose_i[2] * _tmp577 - _pose_i[3] * _tmp578;
  const Scalar _tmp582 =
      -_pose_i[0] * _tmp575 - _pose_i[1] * _tmp579 + _pose_i[2] * _tmp578 - _pose_i[3] * _tmp577;
  const Scalar _tmp583 =
      -_pose_i[0] * _tmp577 - _pose_i[1] * _tmp578 - _pose_i[2] * _tmp579 + _pose_i[3] * _tmp575;
  const Scalar _tmp584 =
      _pose_j[0] * _tmp582 + _pose_j[1] * _tmp581 + _pose_j[2] * _tmp580 - _pose_j[3] * _tmp583;
  const Scalar _tmp585 = _tmp545 * _tmp584;
  const Scalar _tmp586 =
      _pose_j[0] * _tmp583 - _pose_j[1] * _tmp580 + _pose_j[2] * _tmp581 + _pose_j[3] * _tmp582;
  const Scalar _tmp587 = _tmp166 * _tmp586;
  const Scalar _tmp588 = _tmp547 * _tmp584;
  const Scalar _tmp589 = -_tmp50 * _tmp585 + _tmp50 * _tmp588 + _tmp587 * sqrt_info(0, 0);
  const Scalar _tmp590 = _tmp49 * _tmp585;
  const Scalar _tmp591 = _tmp166 * (_pose_j[0] * _tmp580 + _pose_j[1] * _tmp583 -
                                    _pose_j[2] * _tmp582 + _pose_j[3] * _tmp581);
  const Scalar _tmp592 = -_tmp179 * _tmp585 + _tmp179 * _tmp588 + _tmp182 * _tmp588 +
                         _tmp587 * sqrt_info(1, 0) - _tmp590 * sqrt_info(1, 0) +
                         _tmp591 * sqrt_info(1, 1);
  const Scalar _tmp593 =
      -_pose_j[0] * _tmp581 + _pose_j[1] * _tmp582 + _pose_j[2] * _tmp583 + _pose_j[3] * _tmp580;
  const Scalar _tmp594 = _tmp166 * _tmp593;
  const Scalar _tmp595 = _tmp588 * _tmp76;
  const Scalar _tmp596 = _tmp585 * _tmp76;
  const Scalar _tmp597 = _tmp585 * _tmp68;
  const Scalar _tmp598 = _tmp184 * _tmp588 - _tmp187 * _tmp585 + _tmp187 * _tmp588 +
                         _tmp251 * _tmp586 + _tmp591 * sqrt_info(2, 1) + _tmp594 * sqrt_info(2, 2) +
                         _tmp595 * sqrt_info(2, 2) - _tmp596 * sqrt_info(2, 2) -
                         _tmp597 * sqrt_info(2, 1);
  const Scalar _tmp599 = -Dv_D_gyro_bias(0, 1) * sqrt_info(3, 3) - _tmp192 * _tmp585 +
                         _tmp192 * _tmp588 + _tmp193 * _tmp588 - _tmp194 * _tmp585 +
                         _tmp194 * _tmp588 + _tmp587 * sqrt_info(3, 0) - _tmp590 * sqrt_info(3, 0) +
                         _tmp591 * sqrt_info(3, 1) + _tmp594 * sqrt_info(3, 2);
  const Scalar _tmp600 = _tmp588 * _tmp68;
  const Scalar _tmp601 =
      -Dv_D_gyro_bias(0, 1) * sqrt_info(4, 3) - Dv_D_gyro_bias(1, 1) * sqrt_info(4, 4) +
      _tmp264 * _tmp588 + _tmp587 * sqrt_info(4, 0) - _tmp590 * sqrt_info(4, 0) +
      _tmp591 * sqrt_info(4, 1) + _tmp594 * sqrt_info(4, 2) + _tmp595 * sqrt_info(4, 2) -
      _tmp596 * sqrt_info(4, 2) - _tmp597 * sqrt_info(4, 1) + _tmp600 * sqrt_info(4, 1);
  const Scalar _tmp602 =
      -Dv_D_gyro_bias(0, 1) * sqrt_info(5, 3) - Dv_D_gyro_bias(1, 1) * sqrt_info(5, 4) -
      Dv_D_gyro_bias(2, 1) * sqrt_info(5, 5) + _tmp207 * _tmp588 + _tmp268 * _tmp588 +
      _tmp587 * sqrt_info(5, 0) - _tmp590 * sqrt_info(5, 0) + _tmp591 * sqrt_info(5, 1) +
      _tmp594 * sqrt_info(5, 2) + _tmp595 * sqrt_info(5, 2) - _tmp596 * sqrt_info(5, 2) -
      _tmp597 * sqrt_info(5, 1);
  const Scalar _tmp603 = _tmp162 * _tmp593;
  const Scalar _tmp604 =
      -Dp_D_gyro_bias(0, 1) * sqrt_info(6, 6) - Dv_D_gyro_bias(0, 1) * sqrt_info(6, 3) -
      Dv_D_gyro_bias(1, 1) * sqrt_info(6, 4) - Dv_D_gyro_bias(2, 1) * sqrt_info(6, 5) -
      _tmp216 * _tmp585 + _tmp216 * _tmp588 + _tmp217 * _tmp603 + _tmp219 * _tmp588 +
      _tmp587 * sqrt_info(6, 0) - _tmp590 * sqrt_info(6, 0) + _tmp591 * sqrt_info(6, 1) +
      _tmp595 * sqrt_info(6, 2) - _tmp596 * sqrt_info(6, 2);
  const Scalar _tmp605 =
      -Dp_D_gyro_bias(0, 1) * sqrt_info(7, 6) - Dp_D_gyro_bias(1, 1) * sqrt_info(7, 7) -
      Dv_D_gyro_bias(0, 1) * sqrt_info(7, 3) - Dv_D_gyro_bias(1, 1) * sqrt_info(7, 4) -
      Dv_D_gyro_bias(2, 1) * sqrt_info(7, 5) - _tmp221 * _tmp585 + _tmp221 * _tmp588 +
      _tmp223 * _tmp603 + _tmp224 * _tmp588 + _tmp587 * sqrt_info(7, 0) -
      _tmp590 * sqrt_info(7, 0) + _tmp591 * sqrt_info(7, 1) + _tmp595 * sqrt_info(7, 2) -
      _tmp596 * sqrt_info(7, 2);
  const Scalar _tmp606 =
      -Dp_D_gyro_bias(0, 1) * sqrt_info(8, 6) - Dp_D_gyro_bias(1, 1) * sqrt_info(8, 7) -
      Dp_D_gyro_bias(2, 1) * sqrt_info(8, 8) - Dv_D_gyro_bias(0, 1) * sqrt_info(8, 3) -
      Dv_D_gyro_bias(1, 1) * sqrt_info(8, 4) - Dv_D_gyro_bias(2, 1) * sqrt_info(8, 5) -
      _tmp227 * _tmp585 + _tmp227 * _tmp588 + _tmp229 * _tmp588 + _tmp587 * sqrt_info(8, 0) +
      _tmp591 * sqrt_info(8, 1) + _tmp594 * sqrt_info(8, 2) - _tmp596 * sqrt_info(8, 2) -
      _tmp597 * sqrt_info(8, 1) + _tmp600 * sqrt_info(8, 1);
  const Scalar _tmp607 = DR_D_gyro_bias(0, 2) * _tmp511 + DR_D_gyro_bias(1, 2) * _tmp510 +
                         DR_D_gyro_bias(2, 2) * _tmp512;
  const Scalar _tmp608 = (Scalar(1) / Scalar(4)) * _tmp607;
  const Scalar _tmp609 = _tmp519 * _tmp608;
  const Scalar _tmp610 = _tmp514 * _tmp607;
  const Scalar _tmp611 = _tmp3 * _tmp610;
  const Scalar _tmp612 = _tmp26 * _tmp608;
  const Scalar _tmp613 = _tmp524 * _tmp607;
  const Scalar _tmp614 = DR_D_gyro_bias(0, 2) * _tmp14 - DR_D_gyro_bias(1, 2) * _tmp20 +
                         DR_D_gyro_bias(2, 2) * _tmp15 - _DR[1] * _tmp611 + _DR[2] * _tmp613 -
                         _tmp19 * _tmp608 - _tmp23 * _tmp609 + _tmp521 * _tmp612 -
                         _tmp523 * _tmp610 + _tmp527 * _tmp608;
  const Scalar _tmp615 = _tmp23 * _tmp608;
  const Scalar _tmp616 = _tmp10 * _tmp608;
  const Scalar _tmp617 = DR_D_gyro_bias(0, 2) * _tmp20 + DR_D_gyro_bias(1, 2) * _tmp14 -
                         DR_D_gyro_bias(2, 2) * _tmp19 + _DR[0] * _tmp611 - _DR[3] * _tmp613 -
                         _tmp15 * _tmp608 + _tmp26 * _tmp609 + _tmp521 * _tmp615 -
                         _tmp526 * _tmp616 - _tmp535 * _tmp610;
  const Scalar _tmp618 = -DR_D_gyro_bias(0, 2) * _tmp15 + DR_D_gyro_bias(1, 2) * _tmp19 +
                         DR_D_gyro_bias(2, 2) * _tmp14 - _DR[0] * _tmp613 - _DR[3] * _tmp611 +
                         _tmp10 * _tmp609 - _tmp18 * _tmp521 * _tmp608 - _tmp20 * _tmp608 +
                         _tmp526 * _tmp612 + _tmp533 * _tmp610;
  const Scalar _tmp619 = -DR_D_gyro_bias(0, 2) * _tmp19 - DR_D_gyro_bias(1, 2) * _tmp15 -
                         DR_D_gyro_bias(2, 2) * _tmp20 + _DR[1] * _tmp613 + _DR[2] * _tmp611 -
                         _tmp14 * _tmp608 - _tmp18 * _tmp609 - _tmp521 * _tmp616 -
                         _tmp526 * _tmp615 + _tmp573 * _tmp610;
  const Scalar _tmp620 =
      -_pose_i[0] * _tmp619 - _pose_i[1] * _tmp618 + _pose_i[2] * _tmp617 - _pose_i[3] * _tmp614;
  const Scalar _tmp621 =
      _pose_i[0] * _tmp618 - _pose_i[1] * _tmp619 - _pose_i[2] * _tmp614 - _pose_i[3] * _tmp617;
  const Scalar _tmp622 =
      -_pose_i[0] * _tmp617 + _pose_i[1] * _tmp614 - _pose_i[2] * _tmp619 - _pose_i[3] * _tmp618;
  const Scalar _tmp623 =
      -_pose_i[0] * _tmp614 - _pose_i[1] * _tmp617 - _pose_i[2] * _tmp618 + _pose_i[3] * _tmp619;
  const Scalar _tmp624 = _tmp166 * (_pose_j[0] * _tmp623 - _pose_j[1] * _tmp622 +
                                    _pose_j[2] * _tmp621 + _pose_j[3] * _tmp620);
  const Scalar _tmp625 =
      _pose_j[0] * _tmp620 + _pose_j[1] * _tmp621 + _pose_j[2] * _tmp622 - _pose_j[3] * _tmp623;
  const Scalar _tmp626 = _tmp547 * _tmp625;
  const Scalar _tmp627 = _tmp545 * _tmp625;
  const Scalar _tmp628 = _tmp50 * _tmp626 - _tmp50 * _tmp627 + _tmp624 * sqrt_info(0, 0);
  const Scalar _tmp629 = _tmp166 * (_pose_j[0] * _tmp622 + _pose_j[1] * _tmp623 -
                                    _pose_j[2] * _tmp620 + _pose_j[3] * _tmp621);
  const Scalar _tmp630 = _tmp49 * _tmp627;
  const Scalar _tmp631 = _tmp179 * _tmp626 - _tmp179 * _tmp627 + _tmp182 * _tmp626 +
                         _tmp624 * sqrt_info(1, 0) + _tmp629 * sqrt_info(1, 1) -
                         _tmp630 * sqrt_info(1, 0);
  const Scalar _tmp632 =
      -_pose_j[0] * _tmp621 + _pose_j[1] * _tmp620 + _pose_j[2] * _tmp623 + _pose_j[3] * _tmp622;
  const Scalar _tmp633 = _tmp166 * _tmp632;
  const Scalar _tmp634 = _tmp627 * _tmp76;
  const Scalar _tmp635 = _tmp626 * _tmp76;
  const Scalar _tmp636 = _tmp627 * _tmp68;
  const Scalar _tmp637 = _tmp184 * _tmp626 + _tmp187 * _tmp626 - _tmp187 * _tmp627 +
                         _tmp624 * sqrt_info(2, 0) + _tmp629 * sqrt_info(2, 1) +
                         _tmp633 * sqrt_info(2, 2) - _tmp634 * sqrt_info(2, 2) +
                         _tmp635 * sqrt_info(2, 2) - _tmp636 * sqrt_info(2, 1);
  const Scalar _tmp638 = -Dv_D_gyro_bias(0, 2) * sqrt_info(3, 3) + _tmp192 * _tmp626 -
                         _tmp192 * _tmp627 + _tmp193 * _tmp626 - _tmp193 * _tmp627 +
                         _tmp194 * _tmp626 + _tmp624 * sqrt_info(3, 0) + _tmp629 * sqrt_info(3, 1) +
                         _tmp633 * sqrt_info(3, 2) - _tmp634 * sqrt_info(3, 2);
  const Scalar _tmp639 = _tmp49 * _tmp626;
  const Scalar _tmp640 =
      -Dv_D_gyro_bias(0, 2) * sqrt_info(4, 3) - Dv_D_gyro_bias(1, 2) * sqrt_info(4, 4) +
      _tmp196 * _tmp626 + _tmp624 * sqrt_info(4, 0) + _tmp629 * sqrt_info(4, 1) -
      _tmp630 * sqrt_info(4, 0) + _tmp633 * sqrt_info(4, 2) - _tmp634 * sqrt_info(4, 2) +
      _tmp635 * sqrt_info(4, 2) - _tmp636 * sqrt_info(4, 1) + _tmp639 * sqrt_info(4, 0);
  const Scalar _tmp641 =
      -Dv_D_gyro_bias(0, 2) * sqrt_info(5, 3) - Dv_D_gyro_bias(1, 2) * sqrt_info(5, 4) -
      Dv_D_gyro_bias(2, 2) * sqrt_info(5, 5) + _tmp207 * _tmp626 + _tmp624 * sqrt_info(5, 0) +
      _tmp629 * sqrt_info(5, 1) - _tmp630 * sqrt_info(5, 0) + _tmp633 * sqrt_info(5, 2) -
      _tmp634 * sqrt_info(5, 2) + _tmp635 * sqrt_info(5, 2) - _tmp636 * sqrt_info(5, 1) +
      _tmp639 * sqrt_info(5, 0);
  const Scalar _tmp642 = _tmp162 * _tmp632;
  const Scalar _tmp643 =
      -Dp_D_gyro_bias(0, 2) * sqrt_info(6, 6) - Dv_D_gyro_bias(0, 2) * sqrt_info(6, 3) -
      Dv_D_gyro_bias(1, 2) * sqrt_info(6, 4) - Dv_D_gyro_bias(2, 2) * sqrt_info(6, 5) +
      _tmp216 * _tmp626 - _tmp216 * _tmp627 + _tmp217 * _tmp642 + _tmp219 * _tmp626 -
      _tmp219 * _tmp627 + _tmp624 * sqrt_info(6, 0) + _tmp629 * sqrt_info(6, 1) -
      _tmp634 * sqrt_info(6, 2) + _tmp635 * sqrt_info(6, 2);
  const Scalar _tmp644 =
      -Dp_D_gyro_bias(0, 2) * sqrt_info(7, 6) - Dp_D_gyro_bias(1, 2) * sqrt_info(7, 7) -
      Dv_D_gyro_bias(0, 2) * sqrt_info(7, 3) - Dv_D_gyro_bias(1, 2) * sqrt_info(7, 4) -
      Dv_D_gyro_bias(2, 2) * sqrt_info(7, 5) + _tmp221 * _tmp626 - _tmp221 * _tmp627 +
      _tmp223 * _tmp642 + _tmp224 * _tmp626 + _tmp624 * sqrt_info(7, 0) +
      _tmp629 * sqrt_info(7, 1) - _tmp630 * sqrt_info(7, 0) - _tmp634 * sqrt_info(7, 2) +
      _tmp635 * sqrt_info(7, 2);
  const Scalar _tmp645 =
      -Dp_D_gyro_bias(0, 2) * sqrt_info(8, 6) - Dp_D_gyro_bias(1, 2) * sqrt_info(8, 7) -
      Dp_D_gyro_bias(2, 2) * sqrt_info(8, 8) - Dv_D_gyro_bias(0, 2) * sqrt_info(8, 3) -
      Dv_D_gyro_bias(1, 2) * sqrt_info(8, 4) - Dv_D_gyro_bias(2, 2) * sqrt_info(8, 5) +
      _tmp226 * _tmp626 + _tmp227 * _tmp626 - _tmp227 * _tmp627 + _tmp229 * _tmp626 +
      _tmp624 * sqrt_info(8, 0) + _tmp629 * sqrt_info(8, 1) + _tmp633 * sqrt_info(8, 2) -
      _tmp634 * sqrt_info(8, 2) - _tmp636 * sqrt_info(8, 1);
  const Scalar _tmp646 = _tmp220 * _tmp308;
  const Scalar _tmp647 = _tmp220 * _tmp316;
  const Scalar _tmp648 = _tmp220 * _tmp324;
  const Scalar _tmp649 = _tmp195 * _tmp332;
  const Scalar _tmp650 = _tmp195 * _tmp352;
  const Scalar _tmp651 = _tmp195 * _tmp372;
  const Scalar _tmp652 = _tmp272 * _tmp308;
  const Scalar _tmp653 = _tmp272 * _tmp316;
  const Scalar _tmp654 = _tmp272 * _tmp324;
  const Scalar _tmp655 = _tmp263 * _tmp332;
  const Scalar _tmp656 = _tmp263 * _tmp352;
  const Scalar _tmp657 = _tmp263 * _tmp372;
  const Scalar _tmp658 = _tmp304 * _tmp308;
  const Scalar _tmp659 = _tmp304 * _tmp316;
  const Scalar _tmp660 = _tmp304 * _tmp324;
  const Scalar _tmp661 = _tmp295 * _tmp332;
  const Scalar _tmp662 = _tmp295 * _tmp352;
  const Scalar _tmp663 = _tmp295 * _tmp372;
  const Scalar _tmp664 = std::pow(_tmp83, Scalar(2));
  const Scalar _tmp665 = std::pow(sqrt_info(6, 6), Scalar(2));
  const Scalar _tmp666 = _tmp664 * _tmp665;
  const Scalar _tmp667 = _tmp665 * _tmp92;
  const Scalar _tmp668 = _tmp667 * _tmp83;
  const Scalar _tmp669 = _tmp665 * _tmp83 * _tmp97;
  const Scalar _tmp670 = _tmp308 * _tmp343;
  const Scalar _tmp671 = _tmp308 * _tmp363;
  const Scalar _tmp672 = _tmp308 * _tmp383;
  const Scalar _tmp673 = _tmp308 * _tmp426;
  const Scalar _tmp674 = _tmp308 * _tmp449;
  const Scalar _tmp675 = _tmp308 * _tmp468;
  const Scalar _tmp676 = -_tmp668;
  const Scalar _tmp677 = -_tmp669;
  const Scalar _tmp678 = _tmp308 * _tmp479;
  const Scalar _tmp679 = _tmp308 * _tmp484;
  const Scalar _tmp680 = _tmp308 * _tmp489;
  const Scalar _tmp681 = _tmp308 * _tmp495;
  const Scalar _tmp682 = _tmp308 * _tmp501;
  const Scalar _tmp683 = _tmp308 * _tmp507;
  const Scalar _tmp684 = _tmp308 * _tmp563;
  const Scalar _tmp685 = _tmp308 * _tmp604;
  const Scalar _tmp686 = _tmp308 * _tmp643;
  const Scalar _tmp687 = std::pow(_tmp92, Scalar(2));
  const Scalar _tmp688 = _tmp665 * _tmp687;
  const Scalar _tmp689 = _tmp667 * _tmp97;
  const Scalar _tmp690 = _tmp316 * _tmp343;
  const Scalar _tmp691 = _tmp316 * _tmp363;
  const Scalar _tmp692 = _tmp316 * _tmp383;
  const Scalar _tmp693 = _tmp316 * _tmp426;
  const Scalar _tmp694 = _tmp316 * _tmp449;
  const Scalar _tmp695 = _tmp316 * _tmp468;
  const Scalar _tmp696 = -_tmp689;
  const Scalar _tmp697 = _tmp316 * _tmp479;
  const Scalar _tmp698 = _tmp316 * _tmp484;
  const Scalar _tmp699 = _tmp316 * _tmp489;
  const Scalar _tmp700 = _tmp316 * _tmp495;
  const Scalar _tmp701 = _tmp316 * _tmp501;
  const Scalar _tmp702 = _tmp316 * _tmp507;
  const Scalar _tmp703 = _tmp316 * _tmp563;
  const Scalar _tmp704 = _tmp316 * _tmp604;
  const Scalar _tmp705 = _tmp316 * _tmp643;
  const Scalar _tmp706 = std::pow(_tmp97, Scalar(2));
  const Scalar _tmp707 = _tmp665 * _tmp706;
  const Scalar _tmp708 = _tmp324 * _tmp343;
  const Scalar _tmp709 = _tmp324 * _tmp363;
  const Scalar _tmp710 = _tmp324 * _tmp383;
  const Scalar _tmp711 = _tmp324 * _tmp426;
  const Scalar _tmp712 = _tmp324 * _tmp449;
  const Scalar _tmp713 = _tmp324 * _tmp468;
  const Scalar _tmp714 = _tmp324 * _tmp479;
  const Scalar _tmp715 = _tmp324 * _tmp484;
  const Scalar _tmp716 = _tmp324 * _tmp489;
  const Scalar _tmp717 = _tmp324 * _tmp495;
  const Scalar _tmp718 = _tmp324 * _tmp501;
  const Scalar _tmp719 = _tmp324 * _tmp507;
  const Scalar _tmp720 = _tmp324 * _tmp563;
  const Scalar _tmp721 = _tmp324 * _tmp604;
  const Scalar _tmp722 = _tmp324 * _tmp643;
  const Scalar _tmp723 = std::pow(sqrt_info(3, 3), Scalar(2));
  const Scalar _tmp724 = _tmp664 * _tmp723;
  const Scalar _tmp725 = _tmp723 * _tmp92;
  const Scalar _tmp726 = _tmp725 * _tmp83;
  const Scalar _tmp727 = _tmp723 * _tmp83;
  const Scalar _tmp728 = _tmp727 * _tmp97;
  const Scalar _tmp729 = _tmp332 * _tmp422;
  const Scalar _tmp730 = _tmp332 * _tmp444;
  const Scalar _tmp731 = _tmp332 * _tmp463;
  const Scalar _tmp732 = -_tmp726;
  const Scalar _tmp733 = -_tmp728;
  const Scalar _tmp734 = Dv_D_accel_bias(0, 0) * _tmp727;
  const Scalar _tmp735 = Dv_D_accel_bias(0, 1) * _tmp723;
  const Scalar _tmp736 = _tmp735 * _tmp83;
  const Scalar _tmp737 = Dv_D_accel_bias(0, 2) * _tmp727;
  const Scalar _tmp738 = _tmp332 * _tmp558;
  const Scalar _tmp739 = _tmp332 * _tmp599;
  const Scalar _tmp740 = _tmp332 * _tmp638;
  const Scalar _tmp741 = _tmp687 * _tmp723;
  const Scalar _tmp742 = _tmp725 * _tmp97;
  const Scalar _tmp743 = _tmp352 * _tmp422;
  const Scalar _tmp744 = _tmp352 * _tmp444;
  const Scalar _tmp745 = _tmp352 * _tmp463;
  const Scalar _tmp746 = -_tmp742;
  const Scalar _tmp747 = Dv_D_accel_bias(0, 0) * _tmp725;
  const Scalar _tmp748 = Dv_D_accel_bias(0, 1) * _tmp725;
  const Scalar _tmp749 = Dv_D_accel_bias(0, 2) * _tmp725;
  const Scalar _tmp750 = _tmp352 * _tmp558;
  const Scalar _tmp751 = _tmp352 * _tmp599;
  const Scalar _tmp752 = _tmp352 * _tmp638;
  const Scalar _tmp753 = _tmp706 * _tmp723;
  const Scalar _tmp754 = _tmp372 * _tmp422;
  const Scalar _tmp755 = _tmp372 * _tmp444;
  const Scalar _tmp756 = _tmp372 * _tmp463;
  const Scalar _tmp757 = Dv_D_accel_bias(0, 0) * _tmp723 * _tmp97;
  const Scalar _tmp758 = _tmp735 * _tmp97;
  const Scalar _tmp759 = Dv_D_accel_bias(0, 2) * _tmp723;
  const Scalar _tmp760 = _tmp759 * _tmp97;
  const Scalar _tmp761 = _tmp372 * _tmp558;
  const Scalar _tmp762 = _tmp372 * _tmp599;
  const Scalar _tmp763 = _tmp372 * _tmp638;
  const Scalar _tmp764 = _tmp127 * _tmp308;
  const Scalar _tmp765 = _tmp127 * _tmp316;
  const Scalar _tmp766 = _tmp127 * _tmp324;
  const Scalar _tmp767 = _tmp101 * _tmp332;
  const Scalar _tmp768 = _tmp101 * _tmp352;
  const Scalar _tmp769 = _tmp101 * _tmp372;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 9, 1>& _res = (*res);

    _res(0, 0) = _tmp63;
    _res(1, 0) = _tmp71;
    _res(2, 0) = _tmp78;
    _res(3, 0) = _tmp101;
    _res(4, 0) = _tmp112;
    _res(5, 0) = _tmp119;
    _res(6, 0) = _tmp127;
    _res(7, 0) = _tmp130;
    _res(8, 0) = _tmp132;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 9, 24>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp178;
    _jacobian(1, 0) = _tmp183;
    _jacobian(2, 0) = _tmp191;
    _jacobian(3, 0) = _tmp195;
    _jacobian(4, 0) = _tmp206;
    _jacobian(5, 0) = _tmp215;
    _jacobian(6, 0) = _tmp220;
    _jacobian(7, 0) = _tmp225;
    _jacobian(8, 0) = _tmp230;
    _jacobian(0, 1) = _tmp244;
    _jacobian(1, 1) = _tmp248;
    _jacobian(2, 1) = _tmp254;
    _jacobian(3, 1) = _tmp263;
    _jacobian(4, 1) = _tmp265;
    _jacobian(5, 1) = _tmp269;
    _jacobian(6, 1) = _tmp272;
    _jacobian(7, 1) = _tmp273;
    _jacobian(8, 1) = _tmp274;
    _jacobian(0, 2) = _tmp283;
    _jacobian(1, 2) = _tmp286;
    _jacobian(2, 2) = _tmp292;
    _jacobian(3, 2) = _tmp295;
    _jacobian(4, 2) = _tmp301;
    _jacobian(5, 2) = _tmp302;
    _jacobian(6, 2) = _tmp304;
    _jacobian(7, 2) = _tmp306;
    _jacobian(8, 2) = _tmp307;
    _jacobian(0, 3) = 0;
    _jacobian(1, 3) = 0;
    _jacobian(2, 3) = 0;
    _jacobian(3, 3) = 0;
    _jacobian(4, 3) = 0;
    _jacobian(5, 3) = 0;
    _jacobian(6, 3) = -_tmp308;
    _jacobian(7, 3) = _tmp311;
    _jacobian(8, 3) = _tmp315;
    _jacobian(0, 4) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(3, 4) = 0;
    _jacobian(4, 4) = 0;
    _jacobian(5, 4) = 0;
    _jacobian(6, 4) = -_tmp316;
    _jacobian(7, 4) = _tmp319;
    _jacobian(8, 4) = _tmp323;
    _jacobian(0, 5) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(3, 5) = 0;
    _jacobian(4, 5) = 0;
    _jacobian(5, 5) = 0;
    _jacobian(6, 5) = -_tmp324;
    _jacobian(7, 5) = _tmp327;
    _jacobian(8, 5) = _tmp331;
    _jacobian(0, 6) = 0;
    _jacobian(1, 6) = 0;
    _jacobian(2, 6) = 0;
    _jacobian(3, 6) = -_tmp332;
    _jacobian(4, 6) = _tmp335;
    _jacobian(5, 6) = _tmp339;
    _jacobian(6, 6) = _tmp343;
    _jacobian(7, 6) = _tmp347;
    _jacobian(8, 6) = _tmp351;
    _jacobian(0, 7) = 0;
    _jacobian(1, 7) = 0;
    _jacobian(2, 7) = 0;
    _jacobian(3, 7) = -_tmp352;
    _jacobian(4, 7) = _tmp355;
    _jacobian(5, 7) = _tmp359;
    _jacobian(6, 7) = _tmp363;
    _jacobian(7, 7) = _tmp367;
    _jacobian(8, 7) = _tmp371;
    _jacobian(0, 8) = 0;
    _jacobian(1, 8) = 0;
    _jacobian(2, 8) = 0;
    _jacobian(3, 8) = -_tmp372;
    _jacobian(4, 8) = _tmp375;
    _jacobian(5, 8) = _tmp379;
    _jacobian(6, 8) = _tmp383;
    _jacobian(7, 8) = _tmp387;
    _jacobian(8, 8) = _tmp391;
    _jacobian(0, 9) = _tmp401;
    _jacobian(1, 9) = _tmp409;
    _jacobian(2, 9) = _tmp420;
    _jacobian(3, 9) = _tmp422;
    _jacobian(4, 9) = _tmp423;
    _jacobian(5, 9) = _tmp425;
    _jacobian(6, 9) = _tmp426;
    _jacobian(7, 9) = _tmp427;
    _jacobian(8, 9) = _tmp429;
    _jacobian(0, 10) = _tmp434;
    _jacobian(1, 10) = _tmp437;
    _jacobian(2, 10) = _tmp443;
    _jacobian(3, 10) = _tmp444;
    _jacobian(4, 10) = _tmp446;
    _jacobian(5, 10) = _tmp447;
    _jacobian(6, 10) = _tmp449;
    _jacobian(7, 10) = _tmp450;
    _jacobian(8, 10) = _tmp451;
    _jacobian(0, 11) = _tmp455;
    _jacobian(1, 11) = _tmp459;
    _jacobian(2, 11) = _tmp462;
    _jacobian(3, 11) = _tmp463;
    _jacobian(4, 11) = _tmp465;
    _jacobian(5, 11) = _tmp466;
    _jacobian(6, 11) = _tmp468;
    _jacobian(7, 11) = _tmp469;
    _jacobian(8, 11) = _tmp470;
    _jacobian(0, 12) = 0;
    _jacobian(1, 12) = 0;
    _jacobian(2, 12) = 0;
    _jacobian(3, 12) = 0;
    _jacobian(4, 12) = 0;
    _jacobian(5, 12) = 0;
    _jacobian(6, 12) = _tmp308;
    _jacobian(7, 12) = _tmp471;
    _jacobian(8, 12) = _tmp472;
    _jacobian(0, 13) = 0;
    _jacobian(1, 13) = 0;
    _jacobian(2, 13) = 0;
    _jacobian(3, 13) = 0;
    _jacobian(4, 13) = 0;
    _jacobian(5, 13) = 0;
    _jacobian(6, 13) = _tmp316;
    _jacobian(7, 13) = _tmp473;
    _jacobian(8, 13) = _tmp474;
    _jacobian(0, 14) = 0;
    _jacobian(1, 14) = 0;
    _jacobian(2, 14) = 0;
    _jacobian(3, 14) = 0;
    _jacobian(4, 14) = 0;
    _jacobian(5, 14) = 0;
    _jacobian(6, 14) = _tmp324;
    _jacobian(7, 14) = _tmp475;
    _jacobian(8, 14) = _tmp476;
    _jacobian(0, 15) = 0;
    _jacobian(1, 15) = 0;
    _jacobian(2, 15) = 0;
    _jacobian(3, 15) = _tmp332;
    _jacobian(4, 15) = _tmp477;
    _jacobian(5, 15) = _tmp478;
    _jacobian(6, 15) = _tmp479;
    _jacobian(7, 15) = _tmp480;
    _jacobian(8, 15) = _tmp481;
    _jacobian(0, 16) = 0;
    _jacobian(1, 16) = 0;
    _jacobian(2, 16) = 0;
    _jacobian(3, 16) = _tmp352;
    _jacobian(4, 16) = _tmp482;
    _jacobian(5, 16) = _tmp483;
    _jacobian(6, 16) = _tmp484;
    _jacobian(7, 16) = _tmp485;
    _jacobian(8, 16) = _tmp486;
    _jacobian(0, 17) = 0;
    _jacobian(1, 17) = 0;
    _jacobian(2, 17) = 0;
    _jacobian(3, 17) = _tmp372;
    _jacobian(4, 17) = _tmp487;
    _jacobian(5, 17) = _tmp488;
    _jacobian(6, 17) = _tmp489;
    _jacobian(7, 17) = _tmp490;
    _jacobian(8, 17) = _tmp491;
    _jacobian(0, 18) = 0;
    _jacobian(1, 18) = 0;
    _jacobian(2, 18) = 0;
    _jacobian(3, 18) = -_tmp492;
    _jacobian(4, 18) = _tmp493;
    _jacobian(5, 18) = _tmp494;
    _jacobian(6, 18) = _tmp495;
    _jacobian(7, 18) = _tmp496;
    _jacobian(8, 18) = _tmp497;
    _jacobian(0, 19) = 0;
    _jacobian(1, 19) = 0;
    _jacobian(2, 19) = 0;
    _jacobian(3, 19) = -_tmp498;
    _jacobian(4, 19) = _tmp499;
    _jacobian(5, 19) = _tmp500;
    _jacobian(6, 19) = _tmp501;
    _jacobian(7, 19) = _tmp502;
    _jacobian(8, 19) = _tmp503;
    _jacobian(0, 20) = 0;
    _jacobian(1, 20) = 0;
    _jacobian(2, 20) = 0;
    _jacobian(3, 20) = -_tmp504;
    _jacobian(4, 20) = _tmp505;
    _jacobian(5, 20) = _tmp506;
    _jacobian(6, 20) = _tmp507;
    _jacobian(7, 20) = _tmp508;
    _jacobian(8, 20) = _tmp509;
    _jacobian(0, 21) = _tmp549;
    _jacobian(1, 21) = _tmp552;
    _jacobian(2, 21) = _tmp557;
    _jacobian(3, 21) = _tmp558;
    _jacobian(4, 21) = _tmp560;
    _jacobian(5, 21) = _tmp561;
    _jacobian(6, 21) = _tmp563;
    _jacobian(7, 21) = _tmp564;
    _jacobian(8, 21) = _tmp565;
    _jacobian(0, 22) = _tmp589;
    _jacobian(1, 22) = _tmp592;
    _jacobian(2, 22) = _tmp598;
    _jacobian(3, 22) = _tmp599;
    _jacobian(4, 22) = _tmp601;
    _jacobian(5, 22) = _tmp602;
    _jacobian(6, 22) = _tmp604;
    _jacobian(7, 22) = _tmp605;
    _jacobian(8, 22) = _tmp606;
    _jacobian(0, 23) = _tmp628;
    _jacobian(1, 23) = _tmp631;
    _jacobian(2, 23) = _tmp637;
    _jacobian(3, 23) = _tmp638;
    _jacobian(4, 23) = _tmp640;
    _jacobian(5, 23) = _tmp641;
    _jacobian(6, 23) = _tmp643;
    _jacobian(7, 23) = _tmp644;
    _jacobian(8, 23) = _tmp645;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 24, 24>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp178, Scalar(2)) + std::pow(_tmp183, Scalar(2)) + std::pow(_tmp191, Scalar(2)) +
        std::pow(_tmp195, Scalar(2)) + std::pow(_tmp206, Scalar(2)) + std::pow(_tmp215, Scalar(2)) +
        std::pow(_tmp220, Scalar(2)) + std::pow(_tmp225, Scalar(2)) + std::pow(_tmp230, Scalar(2));
    _hessian(1, 0) = _tmp178 * _tmp244 + _tmp183 * _tmp248 + _tmp191 * _tmp254 + _tmp195 * _tmp263 +
                     _tmp206 * _tmp265 + _tmp215 * _tmp269 + _tmp220 * _tmp272 + _tmp225 * _tmp273 +
                     _tmp230 * _tmp274;
    _hessian(2, 0) = _tmp178 * _tmp283 + _tmp183 * _tmp286 + _tmp191 * _tmp292 + _tmp195 * _tmp295 +
                     _tmp206 * _tmp301 + _tmp215 * _tmp302 + _tmp220 * _tmp304 + _tmp225 * _tmp306 +
                     _tmp230 * _tmp307;
    _hessian(3, 0) = _tmp225 * _tmp311 + _tmp230 * _tmp315 - _tmp646;
    _hessian(4, 0) = _tmp225 * _tmp319 + _tmp230 * _tmp323 - _tmp647;
    _hessian(5, 0) = _tmp225 * _tmp327 + _tmp230 * _tmp331 - _tmp648;
    _hessian(6, 0) = _tmp206 * _tmp335 + _tmp215 * _tmp339 + _tmp220 * _tmp343 + _tmp225 * _tmp347 +
                     _tmp230 * _tmp351 - _tmp649;
    _hessian(7, 0) = _tmp206 * _tmp355 + _tmp215 * _tmp359 + _tmp220 * _tmp363 + _tmp225 * _tmp367 +
                     _tmp230 * _tmp371 - _tmp650;
    _hessian(8, 0) = _tmp206 * _tmp375 + _tmp215 * _tmp379 + _tmp220 * _tmp383 + _tmp225 * _tmp387 +
                     _tmp230 * _tmp391 - _tmp651;
    _hessian(9, 0) = _tmp178 * _tmp401 + _tmp183 * _tmp409 + _tmp191 * _tmp420 + _tmp195 * _tmp422 +
                     _tmp206 * _tmp423 + _tmp215 * _tmp425 + _tmp220 * _tmp426 + _tmp225 * _tmp427 +
                     _tmp230 * _tmp429;
    _hessian(10, 0) = _tmp178 * _tmp434 + _tmp183 * _tmp437 + _tmp191 * _tmp443 +
                      _tmp195 * _tmp444 + _tmp206 * _tmp446 + _tmp215 * _tmp447 +
                      _tmp220 * _tmp449 + _tmp225 * _tmp450 + _tmp230 * _tmp451;
    _hessian(11, 0) = _tmp178 * _tmp455 + _tmp183 * _tmp459 + _tmp191 * _tmp462 +
                      _tmp195 * _tmp463 + _tmp206 * _tmp465 + _tmp215 * _tmp466 +
                      _tmp220 * _tmp468 + _tmp225 * _tmp469 + _tmp230 * _tmp470;
    _hessian(12, 0) = _tmp225 * _tmp471 + _tmp230 * _tmp472 + _tmp646;
    _hessian(13, 0) = _tmp225 * _tmp473 + _tmp230 * _tmp474 + _tmp647;
    _hessian(14, 0) = _tmp225 * _tmp475 + _tmp230 * _tmp476 + _tmp648;
    _hessian(15, 0) = _tmp206 * _tmp477 + _tmp215 * _tmp478 + _tmp220 * _tmp479 +
                      _tmp225 * _tmp480 + _tmp230 * _tmp481 + _tmp649;
    _hessian(16, 0) = _tmp206 * _tmp482 + _tmp215 * _tmp483 + _tmp220 * _tmp484 +
                      _tmp225 * _tmp485 + _tmp230 * _tmp486 + _tmp650;
    _hessian(17, 0) = _tmp206 * _tmp487 + _tmp215 * _tmp488 + _tmp220 * _tmp489 +
                      _tmp225 * _tmp490 + _tmp230 * _tmp491 + _tmp651;
    _hessian(18, 0) = -_tmp195 * _tmp492 + _tmp206 * _tmp493 + _tmp215 * _tmp494 +
                      _tmp220 * _tmp495 + _tmp225 * _tmp496 + _tmp230 * _tmp497;
    _hessian(19, 0) = -_tmp195 * _tmp498 + _tmp206 * _tmp499 + _tmp215 * _tmp500 +
                      _tmp220 * _tmp501 + _tmp225 * _tmp502 + _tmp230 * _tmp503;
    _hessian(20, 0) = -_tmp195 * _tmp504 + _tmp206 * _tmp505 + _tmp215 * _tmp506 +
                      _tmp220 * _tmp507 + _tmp225 * _tmp508 + _tmp230 * _tmp509;
    _hessian(21, 0) = _tmp178 * _tmp549 + _tmp183 * _tmp552 + _tmp191 * _tmp557 +
                      _tmp195 * _tmp558 + _tmp206 * _tmp560 + _tmp215 * _tmp561 +
                      _tmp220 * _tmp563 + _tmp225 * _tmp564 + _tmp230 * _tmp565;
    _hessian(22, 0) = _tmp178 * _tmp589 + _tmp183 * _tmp592 + _tmp191 * _tmp598 +
                      _tmp195 * _tmp599 + _tmp206 * _tmp601 + _tmp215 * _tmp602 +
                      _tmp220 * _tmp604 + _tmp225 * _tmp605 + _tmp230 * _tmp606;
    _hessian(23, 0) = _tmp178 * _tmp628 + _tmp183 * _tmp631 + _tmp191 * _tmp637 +
                      _tmp195 * _tmp638 + _tmp206 * _tmp640 + _tmp215 * _tmp641 +
                      _tmp220 * _tmp643 + _tmp225 * _tmp644 + _tmp230 * _tmp645;
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        std::pow(_tmp244, Scalar(2)) + std::pow(_tmp248, Scalar(2)) + std::pow(_tmp254, Scalar(2)) +
        std::pow(_tmp263, Scalar(2)) + std::pow(_tmp265, Scalar(2)) + std::pow(_tmp269, Scalar(2)) +
        std::pow(_tmp272, Scalar(2)) + std::pow(_tmp273, Scalar(2)) + std::pow(_tmp274, Scalar(2));
    _hessian(2, 1) = _tmp244 * _tmp283 + _tmp248 * _tmp286 + _tmp254 * _tmp292 + _tmp263 * _tmp295 +
                     _tmp265 * _tmp301 + _tmp269 * _tmp302 + _tmp272 * _tmp304 + _tmp273 * _tmp306 +
                     _tmp274 * _tmp307;
    _hessian(3, 1) = _tmp273 * _tmp311 + _tmp274 * _tmp315 - _tmp652;
    _hessian(4, 1) = _tmp273 * _tmp319 + _tmp274 * _tmp323 - _tmp653;
    _hessian(5, 1) = _tmp273 * _tmp327 + _tmp274 * _tmp331 - _tmp654;
    _hessian(6, 1) = _tmp265 * _tmp335 + _tmp269 * _tmp339 + _tmp272 * _tmp343 + _tmp273 * _tmp347 +
                     _tmp274 * _tmp351 - _tmp655;
    _hessian(7, 1) = _tmp265 * _tmp355 + _tmp269 * _tmp359 + _tmp272 * _tmp363 + _tmp273 * _tmp367 +
                     _tmp274 * _tmp371 - _tmp656;
    _hessian(8, 1) = _tmp265 * _tmp375 + _tmp269 * _tmp379 + _tmp272 * _tmp383 + _tmp273 * _tmp387 +
                     _tmp274 * _tmp391 - _tmp657;
    _hessian(9, 1) = _tmp244 * _tmp401 + _tmp248 * _tmp409 + _tmp254 * _tmp420 + _tmp263 * _tmp422 +
                     _tmp265 * _tmp423 + _tmp269 * _tmp425 + _tmp272 * _tmp426 + _tmp273 * _tmp427 +
                     _tmp274 * _tmp429;
    _hessian(10, 1) = _tmp244 * _tmp434 + _tmp248 * _tmp437 + _tmp254 * _tmp443 +
                      _tmp263 * _tmp444 + _tmp265 * _tmp446 + _tmp269 * _tmp447 +
                      _tmp272 * _tmp449 + _tmp273 * _tmp450 + _tmp274 * _tmp451;
    _hessian(11, 1) = _tmp244 * _tmp455 + _tmp248 * _tmp459 + _tmp254 * _tmp462 +
                      _tmp263 * _tmp463 + _tmp265 * _tmp465 + _tmp269 * _tmp466 +
                      _tmp272 * _tmp468 + _tmp273 * _tmp469 + _tmp274 * _tmp470;
    _hessian(12, 1) = _tmp273 * _tmp471 + _tmp274 * _tmp472 + _tmp652;
    _hessian(13, 1) = _tmp273 * _tmp473 + _tmp274 * _tmp474 + _tmp653;
    _hessian(14, 1) = _tmp273 * _tmp475 + _tmp274 * _tmp476 + _tmp654;
    _hessian(15, 1) = _tmp265 * _tmp477 + _tmp269 * _tmp478 + _tmp272 * _tmp479 +
                      _tmp273 * _tmp480 + _tmp274 * _tmp481 + _tmp655;
    _hessian(16, 1) = _tmp265 * _tmp482 + _tmp269 * _tmp483 + _tmp272 * _tmp484 +
                      _tmp273 * _tmp485 + _tmp274 * _tmp486 + _tmp656;
    _hessian(17, 1) = _tmp265 * _tmp487 + _tmp269 * _tmp488 + _tmp272 * _tmp489 +
                      _tmp273 * _tmp490 + _tmp274 * _tmp491 + _tmp657;
    _hessian(18, 1) = -_tmp263 * _tmp492 + _tmp265 * _tmp493 + _tmp269 * _tmp494 +
                      _tmp272 * _tmp495 + _tmp273 * _tmp496 + _tmp274 * _tmp497;
    _hessian(19, 1) = -_tmp263 * _tmp498 + _tmp265 * _tmp499 + _tmp269 * _tmp500 +
                      _tmp272 * _tmp501 + _tmp273 * _tmp502 + _tmp274 * _tmp503;
    _hessian(20, 1) = -_tmp263 * _tmp504 + _tmp265 * _tmp505 + _tmp269 * _tmp506 +
                      _tmp272 * _tmp507 + _tmp273 * _tmp508 + _tmp274 * _tmp509;
    _hessian(21, 1) = _tmp244 * _tmp549 + _tmp248 * _tmp552 + _tmp254 * _tmp557 +
                      _tmp263 * _tmp558 + _tmp265 * _tmp560 + _tmp269 * _tmp561 +
                      _tmp272 * _tmp563 + _tmp273 * _tmp564 + _tmp274 * _tmp565;
    _hessian(22, 1) = _tmp244 * _tmp589 + _tmp248 * _tmp592 + _tmp254 * _tmp598 +
                      _tmp263 * _tmp599 + _tmp265 * _tmp601 + _tmp269 * _tmp602 +
                      _tmp272 * _tmp604 + _tmp273 * _tmp605 + _tmp274 * _tmp606;
    _hessian(23, 1) = _tmp244 * _tmp628 + _tmp248 * _tmp631 + _tmp254 * _tmp637 +
                      _tmp263 * _tmp638 + _tmp265 * _tmp640 + _tmp269 * _tmp641 +
                      _tmp272 * _tmp643 + _tmp273 * _tmp644 + _tmp274 * _tmp645;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) =
        std::pow(_tmp283, Scalar(2)) + std::pow(_tmp286, Scalar(2)) + std::pow(_tmp292, Scalar(2)) +
        std::pow(_tmp295, Scalar(2)) + std::pow(_tmp301, Scalar(2)) + std::pow(_tmp302, Scalar(2)) +
        std::pow(_tmp304, Scalar(2)) + std::pow(_tmp306, Scalar(2)) + std::pow(_tmp307, Scalar(2));
    _hessian(3, 2) = _tmp306 * _tmp311 + _tmp307 * _tmp315 - _tmp658;
    _hessian(4, 2) = _tmp306 * _tmp319 + _tmp307 * _tmp323 - _tmp659;
    _hessian(5, 2) = _tmp306 * _tmp327 + _tmp307 * _tmp331 - _tmp660;
    _hessian(6, 2) = _tmp301 * _tmp335 + _tmp302 * _tmp339 + _tmp304 * _tmp343 + _tmp306 * _tmp347 +
                     _tmp307 * _tmp351 - _tmp661;
    _hessian(7, 2) = _tmp301 * _tmp355 + _tmp302 * _tmp359 + _tmp304 * _tmp363 + _tmp306 * _tmp367 +
                     _tmp307 * _tmp371 - _tmp662;
    _hessian(8, 2) = _tmp301 * _tmp375 + _tmp302 * _tmp379 + _tmp304 * _tmp383 + _tmp306 * _tmp387 +
                     _tmp307 * _tmp391 - _tmp663;
    _hessian(9, 2) = _tmp283 * _tmp401 + _tmp286 * _tmp409 + _tmp292 * _tmp420 + _tmp295 * _tmp422 +
                     _tmp301 * _tmp423 + _tmp302 * _tmp425 + _tmp304 * _tmp426 + _tmp306 * _tmp427 +
                     _tmp307 * _tmp429;
    _hessian(10, 2) = _tmp283 * _tmp434 + _tmp286 * _tmp437 + _tmp292 * _tmp443 +
                      _tmp295 * _tmp444 + _tmp301 * _tmp446 + _tmp302 * _tmp447 +
                      _tmp304 * _tmp449 + _tmp306 * _tmp450 + _tmp307 * _tmp451;
    _hessian(11, 2) = _tmp283 * _tmp455 + _tmp286 * _tmp459 + _tmp292 * _tmp462 +
                      _tmp295 * _tmp463 + _tmp301 * _tmp465 + _tmp302 * _tmp466 +
                      _tmp304 * _tmp468 + _tmp306 * _tmp469 + _tmp307 * _tmp470;
    _hessian(12, 2) = _tmp306 * _tmp471 + _tmp307 * _tmp472 + _tmp658;
    _hessian(13, 2) = _tmp306 * _tmp473 + _tmp307 * _tmp474 + _tmp659;
    _hessian(14, 2) = _tmp306 * _tmp475 + _tmp307 * _tmp476 + _tmp660;
    _hessian(15, 2) = _tmp301 * _tmp477 + _tmp302 * _tmp478 + _tmp304 * _tmp479 +
                      _tmp306 * _tmp480 + _tmp307 * _tmp481 + _tmp661;
    _hessian(16, 2) = _tmp301 * _tmp482 + _tmp302 * _tmp483 + _tmp304 * _tmp484 +
                      _tmp306 * _tmp485 + _tmp307 * _tmp486 + _tmp662;
    _hessian(17, 2) = _tmp301 * _tmp487 + _tmp302 * _tmp488 + _tmp304 * _tmp489 +
                      _tmp306 * _tmp490 + _tmp307 * _tmp491 + _tmp663;
    _hessian(18, 2) = -_tmp295 * _tmp492 + _tmp301 * _tmp493 + _tmp302 * _tmp494 +
                      _tmp304 * _tmp495 + _tmp306 * _tmp496 + _tmp307 * _tmp497;
    _hessian(19, 2) = -_tmp295 * _tmp498 + _tmp301 * _tmp499 + _tmp302 * _tmp500 +
                      _tmp304 * _tmp501 + _tmp306 * _tmp502 + _tmp307 * _tmp503;
    _hessian(20, 2) = -_tmp295 * _tmp504 + _tmp301 * _tmp505 + _tmp302 * _tmp506 +
                      _tmp304 * _tmp507 + _tmp306 * _tmp508 + _tmp307 * _tmp509;
    _hessian(21, 2) = _tmp283 * _tmp549 + _tmp286 * _tmp552 + _tmp292 * _tmp557 +
                      _tmp295 * _tmp558 + _tmp301 * _tmp560 + _tmp302 * _tmp561 +
                      _tmp304 * _tmp563 + _tmp306 * _tmp564 + _tmp307 * _tmp565;
    _hessian(22, 2) = _tmp283 * _tmp589 + _tmp286 * _tmp592 + _tmp292 * _tmp598 +
                      _tmp295 * _tmp599 + _tmp301 * _tmp601 + _tmp302 * _tmp602 +
                      _tmp304 * _tmp604 + _tmp306 * _tmp605 + _tmp307 * _tmp606;
    _hessian(23, 2) = _tmp283 * _tmp628 + _tmp286 * _tmp631 + _tmp292 * _tmp637 +
                      _tmp295 * _tmp638 + _tmp301 * _tmp640 + _tmp302 * _tmp641 +
                      _tmp304 * _tmp643 + _tmp306 * _tmp644 + _tmp307 * _tmp645;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp311, Scalar(2)) + std::pow(_tmp315, Scalar(2)) + _tmp666;
    _hessian(4, 3) = _tmp311 * _tmp319 + _tmp315 * _tmp323 + _tmp668;
    _hessian(5, 3) = _tmp311 * _tmp327 + _tmp315 * _tmp331 + _tmp669;
    _hessian(6, 3) = _tmp311 * _tmp347 + _tmp315 * _tmp351 - _tmp670;
    _hessian(7, 3) = _tmp311 * _tmp367 + _tmp315 * _tmp371 - _tmp671;
    _hessian(8, 3) = _tmp311 * _tmp387 + _tmp315 * _tmp391 - _tmp672;
    _hessian(9, 3) = _tmp311 * _tmp427 + _tmp315 * _tmp429 - _tmp673;
    _hessian(10, 3) = _tmp311 * _tmp450 + _tmp315 * _tmp451 - _tmp674;
    _hessian(11, 3) = _tmp311 * _tmp469 + _tmp315 * _tmp470 - _tmp675;
    _hessian(12, 3) = _tmp311 * _tmp471 + _tmp315 * _tmp472 - _tmp666;
    _hessian(13, 3) = _tmp311 * _tmp473 + _tmp315 * _tmp474 + _tmp676;
    _hessian(14, 3) = _tmp311 * _tmp475 + _tmp315 * _tmp476 + _tmp677;
    _hessian(15, 3) = _tmp311 * _tmp480 + _tmp315 * _tmp481 - _tmp678;
    _hessian(16, 3) = _tmp311 * _tmp485 + _tmp315 * _tmp486 - _tmp679;
    _hessian(17, 3) = _tmp311 * _tmp490 + _tmp315 * _tmp491 - _tmp680;
    _hessian(18, 3) = _tmp311 * _tmp496 + _tmp315 * _tmp497 - _tmp681;
    _hessian(19, 3) = _tmp311 * _tmp502 + _tmp315 * _tmp503 - _tmp682;
    _hessian(20, 3) = _tmp311 * _tmp508 + _tmp315 * _tmp509 - _tmp683;
    _hessian(21, 3) = _tmp311 * _tmp564 + _tmp315 * _tmp565 - _tmp684;
    _hessian(22, 3) = _tmp311 * _tmp605 + _tmp315 * _tmp606 - _tmp685;
    _hessian(23, 3) = _tmp311 * _tmp644 + _tmp315 * _tmp645 - _tmp686;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp319, Scalar(2)) + std::pow(_tmp323, Scalar(2)) + _tmp688;
    _hessian(5, 4) = _tmp319 * _tmp327 + _tmp323 * _tmp331 + _tmp689;
    _hessian(6, 4) = _tmp319 * _tmp347 + _tmp323 * _tmp351 - _tmp690;
    _hessian(7, 4) = _tmp319 * _tmp367 + _tmp323 * _tmp371 - _tmp691;
    _hessian(8, 4) = _tmp319 * _tmp387 + _tmp323 * _tmp391 - _tmp692;
    _hessian(9, 4) = _tmp319 * _tmp427 + _tmp323 * _tmp429 - _tmp693;
    _hessian(10, 4) = _tmp319 * _tmp450 + _tmp323 * _tmp451 - _tmp694;
    _hessian(11, 4) = _tmp319 * _tmp469 + _tmp323 * _tmp470 - _tmp695;
    _hessian(12, 4) = _tmp319 * _tmp471 + _tmp323 * _tmp472 + _tmp676;
    _hessian(13, 4) = _tmp319 * _tmp473 + _tmp323 * _tmp474 - _tmp688;
    _hessian(14, 4) = _tmp319 * _tmp475 + _tmp323 * _tmp476 + _tmp696;
    _hessian(15, 4) = _tmp319 * _tmp480 + _tmp323 * _tmp481 - _tmp697;
    _hessian(16, 4) = _tmp319 * _tmp485 + _tmp323 * _tmp486 - _tmp698;
    _hessian(17, 4) = _tmp319 * _tmp490 + _tmp323 * _tmp491 - _tmp699;
    _hessian(18, 4) = _tmp319 * _tmp496 + _tmp323 * _tmp497 - _tmp700;
    _hessian(19, 4) = _tmp319 * _tmp502 + _tmp323 * _tmp503 - _tmp701;
    _hessian(20, 4) = _tmp319 * _tmp508 + _tmp323 * _tmp509 - _tmp702;
    _hessian(21, 4) = _tmp319 * _tmp564 + _tmp323 * _tmp565 - _tmp703;
    _hessian(22, 4) = _tmp319 * _tmp605 + _tmp323 * _tmp606 - _tmp704;
    _hessian(23, 4) = _tmp319 * _tmp644 + _tmp323 * _tmp645 - _tmp705;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp327, Scalar(2)) + std::pow(_tmp331, Scalar(2)) + _tmp707;
    _hessian(6, 5) = _tmp327 * _tmp347 + _tmp331 * _tmp351 - _tmp708;
    _hessian(7, 5) = _tmp327 * _tmp367 + _tmp331 * _tmp371 - _tmp709;
    _hessian(8, 5) = _tmp327 * _tmp387 + _tmp331 * _tmp391 - _tmp710;
    _hessian(9, 5) = _tmp327 * _tmp427 + _tmp331 * _tmp429 - _tmp711;
    _hessian(10, 5) = _tmp327 * _tmp450 + _tmp331 * _tmp451 - _tmp712;
    _hessian(11, 5) = _tmp327 * _tmp469 + _tmp331 * _tmp470 - _tmp713;
    _hessian(12, 5) = _tmp327 * _tmp471 + _tmp331 * _tmp472 + _tmp677;
    _hessian(13, 5) = _tmp327 * _tmp473 + _tmp331 * _tmp474 + _tmp696;
    _hessian(14, 5) = _tmp327 * _tmp475 + _tmp331 * _tmp476 - _tmp707;
    _hessian(15, 5) = _tmp327 * _tmp480 + _tmp331 * _tmp481 - _tmp714;
    _hessian(16, 5) = _tmp327 * _tmp485 + _tmp331 * _tmp486 - _tmp715;
    _hessian(17, 5) = _tmp327 * _tmp490 + _tmp331 * _tmp491 - _tmp716;
    _hessian(18, 5) = _tmp327 * _tmp496 + _tmp331 * _tmp497 - _tmp717;
    _hessian(19, 5) = _tmp327 * _tmp502 + _tmp331 * _tmp503 - _tmp718;
    _hessian(20, 5) = _tmp327 * _tmp508 + _tmp331 * _tmp509 - _tmp719;
    _hessian(21, 5) = _tmp327 * _tmp564 + _tmp331 * _tmp565 - _tmp720;
    _hessian(22, 5) = _tmp327 * _tmp605 + _tmp331 * _tmp606 - _tmp721;
    _hessian(23, 5) = _tmp327 * _tmp644 + _tmp331 * _tmp645 - _tmp722;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp335, Scalar(2)) + std::pow(_tmp339, Scalar(2)) +
                     std::pow(_tmp343, Scalar(2)) + std::pow(_tmp347, Scalar(2)) +
                     std::pow(_tmp351, Scalar(2)) + _tmp724;
    _hessian(7, 6) = _tmp335 * _tmp355 + _tmp339 * _tmp359 + _tmp343 * _tmp363 + _tmp347 * _tmp367 +
                     _tmp351 * _tmp371 + _tmp726;
    _hessian(8, 6) = _tmp335 * _tmp375 + _tmp339 * _tmp379 + _tmp343 * _tmp383 + _tmp347 * _tmp387 +
                     _tmp351 * _tmp391 + _tmp728;
    _hessian(9, 6) = _tmp335 * _tmp423 + _tmp339 * _tmp425 + _tmp343 * _tmp426 + _tmp347 * _tmp427 +
                     _tmp351 * _tmp429 - _tmp729;
    _hessian(10, 6) = _tmp335 * _tmp446 + _tmp339 * _tmp447 + _tmp343 * _tmp449 +
                      _tmp347 * _tmp450 + _tmp351 * _tmp451 - _tmp730;
    _hessian(11, 6) = _tmp335 * _tmp465 + _tmp339 * _tmp466 + _tmp343 * _tmp468 +
                      _tmp347 * _tmp469 + _tmp351 * _tmp470 - _tmp731;
    _hessian(12, 6) = _tmp347 * _tmp471 + _tmp351 * _tmp472 + _tmp670;
    _hessian(13, 6) = _tmp347 * _tmp473 + _tmp351 * _tmp474 + _tmp690;
    _hessian(14, 6) = _tmp347 * _tmp475 + _tmp351 * _tmp476 + _tmp708;
    _hessian(15, 6) = _tmp335 * _tmp477 + _tmp339 * _tmp478 + _tmp343 * _tmp479 +
                      _tmp347 * _tmp480 + _tmp351 * _tmp481 - _tmp724;
    _hessian(16, 6) = _tmp335 * _tmp482 + _tmp339 * _tmp483 + _tmp343 * _tmp484 +
                      _tmp347 * _tmp485 + _tmp351 * _tmp486 + _tmp732;
    _hessian(17, 6) = _tmp335 * _tmp487 + _tmp339 * _tmp488 + _tmp343 * _tmp489 +
                      _tmp347 * _tmp490 + _tmp351 * _tmp491 + _tmp733;
    _hessian(18, 6) = _tmp335 * _tmp493 + _tmp339 * _tmp494 + _tmp343 * _tmp495 +
                      _tmp347 * _tmp496 + _tmp351 * _tmp497 + _tmp734;
    _hessian(19, 6) = _tmp335 * _tmp499 + _tmp339 * _tmp500 + _tmp343 * _tmp501 +
                      _tmp347 * _tmp502 + _tmp351 * _tmp503 + _tmp736;
    _hessian(20, 6) = _tmp335 * _tmp505 + _tmp339 * _tmp506 + _tmp343 * _tmp507 +
                      _tmp347 * _tmp508 + _tmp351 * _tmp509 + _tmp737;
    _hessian(21, 6) = _tmp335 * _tmp560 + _tmp339 * _tmp561 + _tmp343 * _tmp563 +
                      _tmp347 * _tmp564 + _tmp351 * _tmp565 - _tmp738;
    _hessian(22, 6) = _tmp335 * _tmp601 + _tmp339 * _tmp602 + _tmp343 * _tmp604 +
                      _tmp347 * _tmp605 + _tmp351 * _tmp606 - _tmp739;
    _hessian(23, 6) = _tmp335 * _tmp640 + _tmp339 * _tmp641 + _tmp343 * _tmp643 +
                      _tmp347 * _tmp644 + _tmp351 * _tmp645 - _tmp740;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp355, Scalar(2)) + std::pow(_tmp359, Scalar(2)) +
                     std::pow(_tmp363, Scalar(2)) + std::pow(_tmp367, Scalar(2)) +
                     std::pow(_tmp371, Scalar(2)) + _tmp741;
    _hessian(8, 7) = _tmp355 * _tmp375 + _tmp359 * _tmp379 + _tmp363 * _tmp383 + _tmp367 * _tmp387 +
                     _tmp371 * _tmp391 + _tmp742;
    _hessian(9, 7) = _tmp355 * _tmp423 + _tmp359 * _tmp425 + _tmp363 * _tmp426 + _tmp367 * _tmp427 +
                     _tmp371 * _tmp429 - _tmp743;
    _hessian(10, 7) = _tmp355 * _tmp446 + _tmp359 * _tmp447 + _tmp363 * _tmp449 +
                      _tmp367 * _tmp450 + _tmp371 * _tmp451 - _tmp744;
    _hessian(11, 7) = _tmp355 * _tmp465 + _tmp359 * _tmp466 + _tmp363 * _tmp468 +
                      _tmp367 * _tmp469 + _tmp371 * _tmp470 - _tmp745;
    _hessian(12, 7) = _tmp367 * _tmp471 + _tmp371 * _tmp472 + _tmp671;
    _hessian(13, 7) = _tmp367 * _tmp473 + _tmp371 * _tmp474 + _tmp691;
    _hessian(14, 7) = _tmp367 * _tmp475 + _tmp371 * _tmp476 + _tmp709;
    _hessian(15, 7) = _tmp355 * _tmp477 + _tmp359 * _tmp478 + _tmp363 * _tmp479 +
                      _tmp367 * _tmp480 + _tmp371 * _tmp481 + _tmp732;
    _hessian(16, 7) = _tmp355 * _tmp482 + _tmp359 * _tmp483 + _tmp363 * _tmp484 +
                      _tmp367 * _tmp485 + _tmp371 * _tmp486 - _tmp741;
    _hessian(17, 7) = _tmp355 * _tmp487 + _tmp359 * _tmp488 + _tmp363 * _tmp489 +
                      _tmp367 * _tmp490 + _tmp371 * _tmp491 + _tmp746;
    _hessian(18, 7) = _tmp355 * _tmp493 + _tmp359 * _tmp494 + _tmp363 * _tmp495 +
                      _tmp367 * _tmp496 + _tmp371 * _tmp497 + _tmp747;
    _hessian(19, 7) = _tmp355 * _tmp499 + _tmp359 * _tmp500 + _tmp363 * _tmp501 +
                      _tmp367 * _tmp502 + _tmp371 * _tmp503 + _tmp748;
    _hessian(20, 7) = _tmp355 * _tmp505 + _tmp359 * _tmp506 + _tmp363 * _tmp507 +
                      _tmp367 * _tmp508 + _tmp371 * _tmp509 + _tmp749;
    _hessian(21, 7) = _tmp355 * _tmp560 + _tmp359 * _tmp561 + _tmp363 * _tmp563 +
                      _tmp367 * _tmp564 + _tmp371 * _tmp565 - _tmp750;
    _hessian(22, 7) = _tmp355 * _tmp601 + _tmp359 * _tmp602 + _tmp363 * _tmp604 +
                      _tmp367 * _tmp605 + _tmp371 * _tmp606 - _tmp751;
    _hessian(23, 7) = _tmp355 * _tmp640 + _tmp359 * _tmp641 + _tmp363 * _tmp643 +
                      _tmp367 * _tmp644 + _tmp371 * _tmp645 - _tmp752;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp375, Scalar(2)) + std::pow(_tmp379, Scalar(2)) +
                     std::pow(_tmp383, Scalar(2)) + std::pow(_tmp387, Scalar(2)) +
                     std::pow(_tmp391, Scalar(2)) + _tmp753;
    _hessian(9, 8) = _tmp375 * _tmp423 + _tmp379 * _tmp425 + _tmp383 * _tmp426 + _tmp387 * _tmp427 +
                     _tmp391 * _tmp429 - _tmp754;
    _hessian(10, 8) = _tmp375 * _tmp446 + _tmp379 * _tmp447 + _tmp383 * _tmp449 +
                      _tmp387 * _tmp450 + _tmp391 * _tmp451 - _tmp755;
    _hessian(11, 8) = _tmp375 * _tmp465 + _tmp379 * _tmp466 + _tmp383 * _tmp468 +
                      _tmp387 * _tmp469 + _tmp391 * _tmp470 - _tmp756;
    _hessian(12, 8) = _tmp387 * _tmp471 + _tmp391 * _tmp472 + _tmp672;
    _hessian(13, 8) = _tmp387 * _tmp473 + _tmp391 * _tmp474 + _tmp692;
    _hessian(14, 8) = _tmp387 * _tmp475 + _tmp391 * _tmp476 + _tmp710;
    _hessian(15, 8) = _tmp375 * _tmp477 + _tmp379 * _tmp478 + _tmp383 * _tmp479 +
                      _tmp387 * _tmp480 + _tmp391 * _tmp481 + _tmp733;
    _hessian(16, 8) = _tmp375 * _tmp482 + _tmp379 * _tmp483 + _tmp383 * _tmp484 +
                      _tmp387 * _tmp485 + _tmp391 * _tmp486 + _tmp746;
    _hessian(17, 8) = _tmp375 * _tmp487 + _tmp379 * _tmp488 + _tmp383 * _tmp489 +
                      _tmp387 * _tmp490 + _tmp391 * _tmp491 - _tmp753;
    _hessian(18, 8) = _tmp375 * _tmp493 + _tmp379 * _tmp494 + _tmp383 * _tmp495 +
                      _tmp387 * _tmp496 + _tmp391 * _tmp497 + _tmp757;
    _hessian(19, 8) = _tmp375 * _tmp499 + _tmp379 * _tmp500 + _tmp383 * _tmp501 +
                      _tmp387 * _tmp502 + _tmp391 * _tmp503 + _tmp758;
    _hessian(20, 8) = _tmp375 * _tmp505 + _tmp379 * _tmp506 + _tmp383 * _tmp507 +
                      _tmp387 * _tmp508 + _tmp391 * _tmp509 + _tmp760;
    _hessian(21, 8) = _tmp375 * _tmp560 + _tmp379 * _tmp561 + _tmp383 * _tmp563 +
                      _tmp387 * _tmp564 + _tmp391 * _tmp565 - _tmp761;
    _hessian(22, 8) = _tmp375 * _tmp601 + _tmp379 * _tmp602 + _tmp383 * _tmp604 +
                      _tmp387 * _tmp605 + _tmp391 * _tmp606 - _tmp762;
    _hessian(23, 8) = _tmp375 * _tmp640 + _tmp379 * _tmp641 + _tmp383 * _tmp643 +
                      _tmp387 * _tmp644 + _tmp391 * _tmp645 - _tmp763;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) =
        std::pow(_tmp401, Scalar(2)) + std::pow(_tmp409, Scalar(2)) + std::pow(_tmp420, Scalar(2)) +
        std::pow(_tmp422, Scalar(2)) + std::pow(_tmp423, Scalar(2)) + std::pow(_tmp425, Scalar(2)) +
        std::pow(_tmp426, Scalar(2)) + std::pow(_tmp427, Scalar(2)) + std::pow(_tmp429, Scalar(2));
    _hessian(10, 9) = _tmp401 * _tmp434 + _tmp409 * _tmp437 + _tmp420 * _tmp443 +
                      _tmp422 * _tmp444 + _tmp423 * _tmp446 + _tmp425 * _tmp447 +
                      _tmp426 * _tmp449 + _tmp427 * _tmp450 + _tmp429 * _tmp451;
    _hessian(11, 9) = _tmp401 * _tmp455 + _tmp409 * _tmp459 + _tmp420 * _tmp462 +
                      _tmp422 * _tmp463 + _tmp423 * _tmp465 + _tmp425 * _tmp466 +
                      _tmp426 * _tmp468 + _tmp427 * _tmp469 + _tmp429 * _tmp470;
    _hessian(12, 9) = _tmp427 * _tmp471 + _tmp429 * _tmp472 + _tmp673;
    _hessian(13, 9) = _tmp427 * _tmp473 + _tmp429 * _tmp474 + _tmp693;
    _hessian(14, 9) = _tmp427 * _tmp475 + _tmp429 * _tmp476 + _tmp711;
    _hessian(15, 9) = _tmp423 * _tmp477 + _tmp425 * _tmp478 + _tmp426 * _tmp479 +
                      _tmp427 * _tmp480 + _tmp429 * _tmp481 + _tmp729;
    _hessian(16, 9) = _tmp423 * _tmp482 + _tmp425 * _tmp483 + _tmp426 * _tmp484 +
                      _tmp427 * _tmp485 + _tmp429 * _tmp486 + _tmp743;
    _hessian(17, 9) = _tmp423 * _tmp487 + _tmp425 * _tmp488 + _tmp426 * _tmp489 +
                      _tmp427 * _tmp490 + _tmp429 * _tmp491 + _tmp754;
    _hessian(18, 9) = -_tmp422 * _tmp492 + _tmp423 * _tmp493 + _tmp425 * _tmp494 +
                      _tmp426 * _tmp495 + _tmp427 * _tmp496 + _tmp429 * _tmp497;
    _hessian(19, 9) = -_tmp422 * _tmp498 + _tmp423 * _tmp499 + _tmp425 * _tmp500 +
                      _tmp426 * _tmp501 + _tmp427 * _tmp502 + _tmp429 * _tmp503;
    _hessian(20, 9) = -_tmp422 * _tmp504 + _tmp423 * _tmp505 + _tmp425 * _tmp506 +
                      _tmp426 * _tmp507 + _tmp427 * _tmp508 + _tmp429 * _tmp509;
    _hessian(21, 9) = _tmp401 * _tmp549 + _tmp409 * _tmp552 + _tmp420 * _tmp557 +
                      _tmp422 * _tmp558 + _tmp423 * _tmp560 + _tmp425 * _tmp561 +
                      _tmp426 * _tmp563 + _tmp427 * _tmp564 + _tmp429 * _tmp565;
    _hessian(22, 9) = _tmp401 * _tmp589 + _tmp409 * _tmp592 + _tmp420 * _tmp598 +
                      _tmp422 * _tmp599 + _tmp423 * _tmp601 + _tmp425 * _tmp602 +
                      _tmp426 * _tmp604 + _tmp427 * _tmp605 + _tmp429 * _tmp606;
    _hessian(23, 9) = _tmp401 * _tmp628 + _tmp409 * _tmp631 + _tmp420 * _tmp637 +
                      _tmp422 * _tmp638 + _tmp423 * _tmp640 + _tmp425 * _tmp641 +
                      _tmp426 * _tmp643 + _tmp427 * _tmp644 + _tmp429 * _tmp645;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) =
        std::pow(_tmp434, Scalar(2)) + std::pow(_tmp437, Scalar(2)) + std::pow(_tmp443, Scalar(2)) +
        std::pow(_tmp444, Scalar(2)) + std::pow(_tmp446, Scalar(2)) + std::pow(_tmp447, Scalar(2)) +
        std::pow(_tmp449, Scalar(2)) + std::pow(_tmp450, Scalar(2)) + std::pow(_tmp451, Scalar(2));
    _hessian(11, 10) = _tmp434 * _tmp455 + _tmp437 * _tmp459 + _tmp443 * _tmp462 +
                       _tmp444 * _tmp463 + _tmp446 * _tmp465 + _tmp447 * _tmp466 +
                       _tmp449 * _tmp468 + _tmp450 * _tmp469 + _tmp451 * _tmp470;
    _hessian(12, 10) = _tmp450 * _tmp471 + _tmp451 * _tmp472 + _tmp674;
    _hessian(13, 10) = _tmp450 * _tmp473 + _tmp451 * _tmp474 + _tmp694;
    _hessian(14, 10) = _tmp450 * _tmp475 + _tmp451 * _tmp476 + _tmp712;
    _hessian(15, 10) = _tmp446 * _tmp477 + _tmp447 * _tmp478 + _tmp449 * _tmp479 +
                       _tmp450 * _tmp480 + _tmp451 * _tmp481 + _tmp730;
    _hessian(16, 10) = _tmp446 * _tmp482 + _tmp447 * _tmp483 + _tmp449 * _tmp484 +
                       _tmp450 * _tmp485 + _tmp451 * _tmp486 + _tmp744;
    _hessian(17, 10) = _tmp446 * _tmp487 + _tmp447 * _tmp488 + _tmp449 * _tmp489 +
                       _tmp450 * _tmp490 + _tmp451 * _tmp491 + _tmp755;
    _hessian(18, 10) = -_tmp444 * _tmp492 + _tmp446 * _tmp493 + _tmp447 * _tmp494 +
                       _tmp449 * _tmp495 + _tmp450 * _tmp496 + _tmp451 * _tmp497;
    _hessian(19, 10) = -_tmp444 * _tmp498 + _tmp446 * _tmp499 + _tmp447 * _tmp500 +
                       _tmp449 * _tmp501 + _tmp450 * _tmp502 + _tmp451 * _tmp503;
    _hessian(20, 10) = -_tmp444 * _tmp504 + _tmp446 * _tmp505 + _tmp447 * _tmp506 +
                       _tmp449 * _tmp507 + _tmp450 * _tmp508 + _tmp451 * _tmp509;
    _hessian(21, 10) = _tmp434 * _tmp549 + _tmp437 * _tmp552 + _tmp443 * _tmp557 +
                       _tmp444 * _tmp558 + _tmp446 * _tmp560 + _tmp447 * _tmp561 +
                       _tmp449 * _tmp563 + _tmp450 * _tmp564 + _tmp451 * _tmp565;
    _hessian(22, 10) = _tmp434 * _tmp589 + _tmp437 * _tmp592 + _tmp443 * _tmp598 +
                       _tmp444 * _tmp599 + _tmp446 * _tmp601 + _tmp447 * _tmp602 +
                       _tmp449 * _tmp604 + _tmp450 * _tmp605 + _tmp451 * _tmp606;
    _hessian(23, 10) = _tmp434 * _tmp628 + _tmp437 * _tmp631 + _tmp443 * _tmp637 +
                       _tmp444 * _tmp638 + _tmp446 * _tmp640 + _tmp447 * _tmp641 +
                       _tmp449 * _tmp643 + _tmp450 * _tmp644 + _tmp451 * _tmp645;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) =
        std::pow(_tmp455, Scalar(2)) + std::pow(_tmp459, Scalar(2)) + std::pow(_tmp462, Scalar(2)) +
        std::pow(_tmp463, Scalar(2)) + std::pow(_tmp465, Scalar(2)) + std::pow(_tmp466, Scalar(2)) +
        std::pow(_tmp468, Scalar(2)) + std::pow(_tmp469, Scalar(2)) + std::pow(_tmp470, Scalar(2));
    _hessian(12, 11) = _tmp469 * _tmp471 + _tmp470 * _tmp472 + _tmp675;
    _hessian(13, 11) = _tmp469 * _tmp473 + _tmp470 * _tmp474 + _tmp695;
    _hessian(14, 11) = _tmp469 * _tmp475 + _tmp470 * _tmp476 + _tmp713;
    _hessian(15, 11) = _tmp465 * _tmp477 + _tmp466 * _tmp478 + _tmp468 * _tmp479 +
                       _tmp469 * _tmp480 + _tmp470 * _tmp481 + _tmp731;
    _hessian(16, 11) = _tmp465 * _tmp482 + _tmp466 * _tmp483 + _tmp468 * _tmp484 +
                       _tmp469 * _tmp485 + _tmp470 * _tmp486 + _tmp745;
    _hessian(17, 11) = _tmp465 * _tmp487 + _tmp466 * _tmp488 + _tmp468 * _tmp489 +
                       _tmp469 * _tmp490 + _tmp470 * _tmp491 + _tmp756;
    _hessian(18, 11) = -_tmp463 * _tmp492 + _tmp465 * _tmp493 + _tmp466 * _tmp494 +
                       _tmp468 * _tmp495 + _tmp469 * _tmp496 + _tmp470 * _tmp497;
    _hessian(19, 11) = -_tmp463 * _tmp498 + _tmp465 * _tmp499 + _tmp466 * _tmp500 +
                       _tmp468 * _tmp501 + _tmp469 * _tmp502 + _tmp470 * _tmp503;
    _hessian(20, 11) = -_tmp463 * _tmp504 + _tmp465 * _tmp505 + _tmp466 * _tmp506 +
                       _tmp468 * _tmp507 + _tmp469 * _tmp508 + _tmp470 * _tmp509;
    _hessian(21, 11) = _tmp455 * _tmp549 + _tmp459 * _tmp552 + _tmp462 * _tmp557 +
                       _tmp463 * _tmp558 + _tmp465 * _tmp560 + _tmp466 * _tmp561 +
                       _tmp468 * _tmp563 + _tmp469 * _tmp564 + _tmp470 * _tmp565;
    _hessian(22, 11) = _tmp455 * _tmp589 + _tmp459 * _tmp592 + _tmp462 * _tmp598 +
                       _tmp463 * _tmp599 + _tmp465 * _tmp601 + _tmp466 * _tmp602 +
                       _tmp468 * _tmp604 + _tmp469 * _tmp605 + _tmp470 * _tmp606;
    _hessian(23, 11) = _tmp455 * _tmp628 + _tmp459 * _tmp631 + _tmp462 * _tmp637 +
                       _tmp463 * _tmp638 + _tmp465 * _tmp640 + _tmp466 * _tmp641 +
                       _tmp468 * _tmp643 + _tmp469 * _tmp644 + _tmp470 * _tmp645;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp471, Scalar(2)) + std::pow(_tmp472, Scalar(2)) + _tmp666;
    _hessian(13, 12) = _tmp471 * _tmp473 + _tmp472 * _tmp474 + _tmp668;
    _hessian(14, 12) = _tmp471 * _tmp475 + _tmp472 * _tmp476 + _tmp669;
    _hessian(15, 12) = _tmp471 * _tmp480 + _tmp472 * _tmp481 + _tmp678;
    _hessian(16, 12) = _tmp471 * _tmp485 + _tmp472 * _tmp486 + _tmp679;
    _hessian(17, 12) = _tmp471 * _tmp490 + _tmp472 * _tmp491 + _tmp680;
    _hessian(18, 12) = _tmp471 * _tmp496 + _tmp472 * _tmp497 + _tmp681;
    _hessian(19, 12) = _tmp471 * _tmp502 + _tmp472 * _tmp503 + _tmp682;
    _hessian(20, 12) = _tmp471 * _tmp508 + _tmp472 * _tmp509 + _tmp683;
    _hessian(21, 12) = _tmp471 * _tmp564 + _tmp472 * _tmp565 + _tmp684;
    _hessian(22, 12) = _tmp471 * _tmp605 + _tmp472 * _tmp606 + _tmp685;
    _hessian(23, 12) = _tmp471 * _tmp644 + _tmp472 * _tmp645 + _tmp686;
    _hessian(0, 13) = 0;
    _hessian(1, 13) = 0;
    _hessian(2, 13) = 0;
    _hessian(3, 13) = 0;
    _hessian(4, 13) = 0;
    _hessian(5, 13) = 0;
    _hessian(6, 13) = 0;
    _hessian(7, 13) = 0;
    _hessian(8, 13) = 0;
    _hessian(9, 13) = 0;
    _hessian(10, 13) = 0;
    _hessian(11, 13) = 0;
    _hessian(12, 13) = 0;
    _hessian(13, 13) = std::pow(_tmp473, Scalar(2)) + std::pow(_tmp474, Scalar(2)) + _tmp688;
    _hessian(14, 13) = _tmp473 * _tmp475 + _tmp474 * _tmp476 + _tmp689;
    _hessian(15, 13) = _tmp473 * _tmp480 + _tmp474 * _tmp481 + _tmp697;
    _hessian(16, 13) = _tmp473 * _tmp485 + _tmp474 * _tmp486 + _tmp698;
    _hessian(17, 13) = _tmp473 * _tmp490 + _tmp474 * _tmp491 + _tmp699;
    _hessian(18, 13) = _tmp473 * _tmp496 + _tmp474 * _tmp497 + _tmp700;
    _hessian(19, 13) = _tmp473 * _tmp502 + _tmp474 * _tmp503 + _tmp701;
    _hessian(20, 13) = _tmp473 * _tmp508 + _tmp474 * _tmp509 + _tmp702;
    _hessian(21, 13) = _tmp473 * _tmp564 + _tmp474 * _tmp565 + _tmp703;
    _hessian(22, 13) = _tmp473 * _tmp605 + _tmp474 * _tmp606 + _tmp704;
    _hessian(23, 13) = _tmp473 * _tmp644 + _tmp474 * _tmp645 + _tmp705;
    _hessian(0, 14) = 0;
    _hessian(1, 14) = 0;
    _hessian(2, 14) = 0;
    _hessian(3, 14) = 0;
    _hessian(4, 14) = 0;
    _hessian(5, 14) = 0;
    _hessian(6, 14) = 0;
    _hessian(7, 14) = 0;
    _hessian(8, 14) = 0;
    _hessian(9, 14) = 0;
    _hessian(10, 14) = 0;
    _hessian(11, 14) = 0;
    _hessian(12, 14) = 0;
    _hessian(13, 14) = 0;
    _hessian(14, 14) = std::pow(_tmp475, Scalar(2)) + std::pow(_tmp476, Scalar(2)) + _tmp707;
    _hessian(15, 14) = _tmp475 * _tmp480 + _tmp476 * _tmp481 + _tmp714;
    _hessian(16, 14) = _tmp475 * _tmp485 + _tmp476 * _tmp486 + _tmp715;
    _hessian(17, 14) = _tmp475 * _tmp490 + _tmp476 * _tmp491 + _tmp716;
    _hessian(18, 14) = _tmp475 * _tmp496 + _tmp476 * _tmp497 + _tmp717;
    _hessian(19, 14) = _tmp475 * _tmp502 + _tmp476 * _tmp503 + _tmp718;
    _hessian(20, 14) = _tmp475 * _tmp508 + _tmp476 * _tmp509 + _tmp719;
    _hessian(21, 14) = _tmp475 * _tmp564 + _tmp476 * _tmp565 + _tmp720;
    _hessian(22, 14) = _tmp475 * _tmp605 + _tmp476 * _tmp606 + _tmp721;
    _hessian(23, 14) = _tmp475 * _tmp644 + _tmp476 * _tmp645 + _tmp722;
    _hessian(0, 15) = 0;
    _hessian(1, 15) = 0;
    _hessian(2, 15) = 0;
    _hessian(3, 15) = 0;
    _hessian(4, 15) = 0;
    _hessian(5, 15) = 0;
    _hessian(6, 15) = 0;
    _hessian(7, 15) = 0;
    _hessian(8, 15) = 0;
    _hessian(9, 15) = 0;
    _hessian(10, 15) = 0;
    _hessian(11, 15) = 0;
    _hessian(12, 15) = 0;
    _hessian(13, 15) = 0;
    _hessian(14, 15) = 0;
    _hessian(15, 15) = std::pow(_tmp477, Scalar(2)) + std::pow(_tmp478, Scalar(2)) +
                       std::pow(_tmp479, Scalar(2)) + std::pow(_tmp480, Scalar(2)) +
                       std::pow(_tmp481, Scalar(2)) + _tmp724;
    _hessian(16, 15) = _tmp477 * _tmp482 + _tmp478 * _tmp483 + _tmp479 * _tmp484 +
                       _tmp480 * _tmp485 + _tmp481 * _tmp486 + _tmp726;
    _hessian(17, 15) = _tmp477 * _tmp487 + _tmp478 * _tmp488 + _tmp479 * _tmp489 +
                       _tmp480 * _tmp490 + _tmp481 * _tmp491 + _tmp728;
    _hessian(18, 15) = _tmp477 * _tmp493 + _tmp478 * _tmp494 + _tmp479 * _tmp495 +
                       _tmp480 * _tmp496 + _tmp481 * _tmp497 - _tmp734;
    _hessian(19, 15) = _tmp477 * _tmp499 + _tmp478 * _tmp500 + _tmp479 * _tmp501 +
                       _tmp480 * _tmp502 + _tmp481 * _tmp503 - _tmp736;
    _hessian(20, 15) = _tmp477 * _tmp505 + _tmp478 * _tmp506 + _tmp479 * _tmp507 +
                       _tmp480 * _tmp508 + _tmp481 * _tmp509 - _tmp737;
    _hessian(21, 15) = _tmp477 * _tmp560 + _tmp478 * _tmp561 + _tmp479 * _tmp563 +
                       _tmp480 * _tmp564 + _tmp481 * _tmp565 + _tmp738;
    _hessian(22, 15) = _tmp477 * _tmp601 + _tmp478 * _tmp602 + _tmp479 * _tmp604 +
                       _tmp480 * _tmp605 + _tmp481 * _tmp606 + _tmp739;
    _hessian(23, 15) = _tmp477 * _tmp640 + _tmp478 * _tmp641 + _tmp479 * _tmp643 +
                       _tmp480 * _tmp644 + _tmp481 * _tmp645 + _tmp740;
    _hessian(0, 16) = 0;
    _hessian(1, 16) = 0;
    _hessian(2, 16) = 0;
    _hessian(3, 16) = 0;
    _hessian(4, 16) = 0;
    _hessian(5, 16) = 0;
    _hessian(6, 16) = 0;
    _hessian(7, 16) = 0;
    _hessian(8, 16) = 0;
    _hessian(9, 16) = 0;
    _hessian(10, 16) = 0;
    _hessian(11, 16) = 0;
    _hessian(12, 16) = 0;
    _hessian(13, 16) = 0;
    _hessian(14, 16) = 0;
    _hessian(15, 16) = 0;
    _hessian(16, 16) = std::pow(_tmp482, Scalar(2)) + std::pow(_tmp483, Scalar(2)) +
                       std::pow(_tmp484, Scalar(2)) + std::pow(_tmp485, Scalar(2)) +
                       std::pow(_tmp486, Scalar(2)) + _tmp741;
    _hessian(17, 16) = _tmp482 * _tmp487 + _tmp483 * _tmp488 + _tmp484 * _tmp489 +
                       _tmp485 * _tmp490 + _tmp486 * _tmp491 + _tmp742;
    _hessian(18, 16) = _tmp482 * _tmp493 + _tmp483 * _tmp494 + _tmp484 * _tmp495 +
                       _tmp485 * _tmp496 + _tmp486 * _tmp497 - _tmp747;
    _hessian(19, 16) = _tmp482 * _tmp499 + _tmp483 * _tmp500 + _tmp484 * _tmp501 +
                       _tmp485 * _tmp502 + _tmp486 * _tmp503 - _tmp748;
    _hessian(20, 16) = _tmp482 * _tmp505 + _tmp483 * _tmp506 + _tmp484 * _tmp507 +
                       _tmp485 * _tmp508 + _tmp486 * _tmp509 - _tmp749;
    _hessian(21, 16) = _tmp482 * _tmp560 + _tmp483 * _tmp561 + _tmp484 * _tmp563 +
                       _tmp485 * _tmp564 + _tmp486 * _tmp565 + _tmp750;
    _hessian(22, 16) = _tmp482 * _tmp601 + _tmp483 * _tmp602 + _tmp484 * _tmp604 +
                       _tmp485 * _tmp605 + _tmp486 * _tmp606 + _tmp751;
    _hessian(23, 16) = _tmp482 * _tmp640 + _tmp483 * _tmp641 + _tmp484 * _tmp643 +
                       _tmp485 * _tmp644 + _tmp486 * _tmp645 + _tmp752;
    _hessian(0, 17) = 0;
    _hessian(1, 17) = 0;
    _hessian(2, 17) = 0;
    _hessian(3, 17) = 0;
    _hessian(4, 17) = 0;
    _hessian(5, 17) = 0;
    _hessian(6, 17) = 0;
    _hessian(7, 17) = 0;
    _hessian(8, 17) = 0;
    _hessian(9, 17) = 0;
    _hessian(10, 17) = 0;
    _hessian(11, 17) = 0;
    _hessian(12, 17) = 0;
    _hessian(13, 17) = 0;
    _hessian(14, 17) = 0;
    _hessian(15, 17) = 0;
    _hessian(16, 17) = 0;
    _hessian(17, 17) = std::pow(_tmp487, Scalar(2)) + std::pow(_tmp488, Scalar(2)) +
                       std::pow(_tmp489, Scalar(2)) + std::pow(_tmp490, Scalar(2)) +
                       std::pow(_tmp491, Scalar(2)) + _tmp753;
    _hessian(18, 17) = _tmp487 * _tmp493 + _tmp488 * _tmp494 + _tmp489 * _tmp495 +
                       _tmp490 * _tmp496 + _tmp491 * _tmp497 - _tmp757;
    _hessian(19, 17) = _tmp487 * _tmp499 + _tmp488 * _tmp500 + _tmp489 * _tmp501 +
                       _tmp490 * _tmp502 + _tmp491 * _tmp503 - _tmp758;
    _hessian(20, 17) = _tmp487 * _tmp505 + _tmp488 * _tmp506 + _tmp489 * _tmp507 +
                       _tmp490 * _tmp508 + _tmp491 * _tmp509 - _tmp760;
    _hessian(21, 17) = _tmp487 * _tmp560 + _tmp488 * _tmp561 + _tmp489 * _tmp563 +
                       _tmp490 * _tmp564 + _tmp491 * _tmp565 + _tmp761;
    _hessian(22, 17) = _tmp487 * _tmp601 + _tmp488 * _tmp602 + _tmp489 * _tmp604 +
                       _tmp490 * _tmp605 + _tmp491 * _tmp606 + _tmp762;
    _hessian(23, 17) = _tmp487 * _tmp640 + _tmp488 * _tmp641 + _tmp489 * _tmp643 +
                       _tmp490 * _tmp644 + _tmp491 * _tmp645 + _tmp763;
    _hessian(0, 18) = 0;
    _hessian(1, 18) = 0;
    _hessian(2, 18) = 0;
    _hessian(3, 18) = 0;
    _hessian(4, 18) = 0;
    _hessian(5, 18) = 0;
    _hessian(6, 18) = 0;
    _hessian(7, 18) = 0;
    _hessian(8, 18) = 0;
    _hessian(9, 18) = 0;
    _hessian(10, 18) = 0;
    _hessian(11, 18) = 0;
    _hessian(12, 18) = 0;
    _hessian(13, 18) = 0;
    _hessian(14, 18) = 0;
    _hessian(15, 18) = 0;
    _hessian(16, 18) = 0;
    _hessian(17, 18) = 0;
    _hessian(18, 18) = std::pow(Dv_D_accel_bias(0, 0), Scalar(2)) * _tmp723 +
                       std::pow(_tmp493, Scalar(2)) + std::pow(_tmp494, Scalar(2)) +
                       std::pow(_tmp495, Scalar(2)) + std::pow(_tmp496, Scalar(2)) +
                       std::pow(_tmp497, Scalar(2));
    _hessian(19, 18) = Dv_D_accel_bias(0, 0) * _tmp735 + _tmp493 * _tmp499 + _tmp494 * _tmp500 +
                       _tmp495 * _tmp501 + _tmp496 * _tmp502 + _tmp497 * _tmp503;
    _hessian(20, 18) = Dv_D_accel_bias(0, 0) * _tmp759 + _tmp493 * _tmp505 + _tmp494 * _tmp506 +
                       _tmp495 * _tmp507 + _tmp496 * _tmp508 + _tmp497 * _tmp509;
    _hessian(21, 18) = -_tmp492 * _tmp558 + _tmp493 * _tmp560 + _tmp494 * _tmp561 +
                       _tmp495 * _tmp563 + _tmp496 * _tmp564 + _tmp497 * _tmp565;
    _hessian(22, 18) = -_tmp492 * _tmp599 + _tmp493 * _tmp601 + _tmp494 * _tmp602 +
                       _tmp495 * _tmp604 + _tmp496 * _tmp605 + _tmp497 * _tmp606;
    _hessian(23, 18) = -_tmp492 * _tmp638 + _tmp493 * _tmp640 + _tmp494 * _tmp641 +
                       _tmp495 * _tmp643 + _tmp496 * _tmp644 + _tmp497 * _tmp645;
    _hessian(0, 19) = 0;
    _hessian(1, 19) = 0;
    _hessian(2, 19) = 0;
    _hessian(3, 19) = 0;
    _hessian(4, 19) = 0;
    _hessian(5, 19) = 0;
    _hessian(6, 19) = 0;
    _hessian(7, 19) = 0;
    _hessian(8, 19) = 0;
    _hessian(9, 19) = 0;
    _hessian(10, 19) = 0;
    _hessian(11, 19) = 0;
    _hessian(12, 19) = 0;
    _hessian(13, 19) = 0;
    _hessian(14, 19) = 0;
    _hessian(15, 19) = 0;
    _hessian(16, 19) = 0;
    _hessian(17, 19) = 0;
    _hessian(18, 19) = 0;
    _hessian(19, 19) = std::pow(Dv_D_accel_bias(0, 1), Scalar(2)) * _tmp723 +
                       std::pow(_tmp499, Scalar(2)) + std::pow(_tmp500, Scalar(2)) +
                       std::pow(_tmp501, Scalar(2)) + std::pow(_tmp502, Scalar(2)) +
                       std::pow(_tmp503, Scalar(2));
    _hessian(20, 19) = Dv_D_accel_bias(0, 2) * _tmp735 + _tmp499 * _tmp505 + _tmp500 * _tmp506 +
                       _tmp501 * _tmp507 + _tmp502 * _tmp508 + _tmp503 * _tmp509;
    _hessian(21, 19) = -_tmp498 * _tmp558 + _tmp499 * _tmp560 + _tmp500 * _tmp561 +
                       _tmp501 * _tmp563 + _tmp502 * _tmp564 + _tmp503 * _tmp565;
    _hessian(22, 19) = -_tmp498 * _tmp599 + _tmp499 * _tmp601 + _tmp500 * _tmp602 +
                       _tmp501 * _tmp604 + _tmp502 * _tmp605 + _tmp503 * _tmp606;
    _hessian(23, 19) = -_tmp498 * _tmp638 + _tmp499 * _tmp640 + _tmp500 * _tmp641 +
                       _tmp501 * _tmp643 + _tmp502 * _tmp644 + _tmp503 * _tmp645;
    _hessian(0, 20) = 0;
    _hessian(1, 20) = 0;
    _hessian(2, 20) = 0;
    _hessian(3, 20) = 0;
    _hessian(4, 20) = 0;
    _hessian(5, 20) = 0;
    _hessian(6, 20) = 0;
    _hessian(7, 20) = 0;
    _hessian(8, 20) = 0;
    _hessian(9, 20) = 0;
    _hessian(10, 20) = 0;
    _hessian(11, 20) = 0;
    _hessian(12, 20) = 0;
    _hessian(13, 20) = 0;
    _hessian(14, 20) = 0;
    _hessian(15, 20) = 0;
    _hessian(16, 20) = 0;
    _hessian(17, 20) = 0;
    _hessian(18, 20) = 0;
    _hessian(19, 20) = 0;
    _hessian(20, 20) = std::pow(Dv_D_accel_bias(0, 2), Scalar(2)) * _tmp723 +
                       std::pow(_tmp505, Scalar(2)) + std::pow(_tmp506, Scalar(2)) +
                       std::pow(_tmp507, Scalar(2)) + std::pow(_tmp508, Scalar(2)) +
                       std::pow(_tmp509, Scalar(2));
    _hessian(21, 20) = -_tmp504 * _tmp558 + _tmp505 * _tmp560 + _tmp506 * _tmp561 +
                       _tmp507 * _tmp563 + _tmp508 * _tmp564 + _tmp509 * _tmp565;
    _hessian(22, 20) = -_tmp504 * _tmp599 + _tmp505 * _tmp601 + _tmp506 * _tmp602 +
                       _tmp507 * _tmp604 + _tmp508 * _tmp605 + _tmp509 * _tmp606;
    _hessian(23, 20) = -_tmp504 * _tmp638 + _tmp505 * _tmp640 + _tmp506 * _tmp641 +
                       _tmp507 * _tmp643 + _tmp508 * _tmp644 + _tmp509 * _tmp645;
    _hessian(0, 21) = 0;
    _hessian(1, 21) = 0;
    _hessian(2, 21) = 0;
    _hessian(3, 21) = 0;
    _hessian(4, 21) = 0;
    _hessian(5, 21) = 0;
    _hessian(6, 21) = 0;
    _hessian(7, 21) = 0;
    _hessian(8, 21) = 0;
    _hessian(9, 21) = 0;
    _hessian(10, 21) = 0;
    _hessian(11, 21) = 0;
    _hessian(12, 21) = 0;
    _hessian(13, 21) = 0;
    _hessian(14, 21) = 0;
    _hessian(15, 21) = 0;
    _hessian(16, 21) = 0;
    _hessian(17, 21) = 0;
    _hessian(18, 21) = 0;
    _hessian(19, 21) = 0;
    _hessian(20, 21) = 0;
    _hessian(21, 21) =
        std::pow(_tmp549, Scalar(2)) + std::pow(_tmp552, Scalar(2)) + std::pow(_tmp557, Scalar(2)) +
        std::pow(_tmp558, Scalar(2)) + std::pow(_tmp560, Scalar(2)) + std::pow(_tmp561, Scalar(2)) +
        std::pow(_tmp563, Scalar(2)) + std::pow(_tmp564, Scalar(2)) + std::pow(_tmp565, Scalar(2));
    _hessian(22, 21) = _tmp549 * _tmp589 + _tmp552 * _tmp592 + _tmp557 * _tmp598 +
                       _tmp558 * _tmp599 + _tmp560 * _tmp601 + _tmp561 * _tmp602 +
                       _tmp563 * _tmp604 + _tmp564 * _tmp605 + _tmp565 * _tmp606;
    _hessian(23, 21) = _tmp549 * _tmp628 + _tmp552 * _tmp631 + _tmp557 * _tmp637 +
                       _tmp558 * _tmp638 + _tmp560 * _tmp640 + _tmp561 * _tmp641 +
                       _tmp563 * _tmp643 + _tmp564 * _tmp644 + _tmp565 * _tmp645;
    _hessian(0, 22) = 0;
    _hessian(1, 22) = 0;
    _hessian(2, 22) = 0;
    _hessian(3, 22) = 0;
    _hessian(4, 22) = 0;
    _hessian(5, 22) = 0;
    _hessian(6, 22) = 0;
    _hessian(7, 22) = 0;
    _hessian(8, 22) = 0;
    _hessian(9, 22) = 0;
    _hessian(10, 22) = 0;
    _hessian(11, 22) = 0;
    _hessian(12, 22) = 0;
    _hessian(13, 22) = 0;
    _hessian(14, 22) = 0;
    _hessian(15, 22) = 0;
    _hessian(16, 22) = 0;
    _hessian(17, 22) = 0;
    _hessian(18, 22) = 0;
    _hessian(19, 22) = 0;
    _hessian(20, 22) = 0;
    _hessian(21, 22) = 0;
    _hessian(22, 22) =
        std::pow(_tmp589, Scalar(2)) + std::pow(_tmp592, Scalar(2)) + std::pow(_tmp598, Scalar(2)) +
        std::pow(_tmp599, Scalar(2)) + std::pow(_tmp601, Scalar(2)) + std::pow(_tmp602, Scalar(2)) +
        std::pow(_tmp604, Scalar(2)) + std::pow(_tmp605, Scalar(2)) + std::pow(_tmp606, Scalar(2));
    _hessian(23, 22) = _tmp589 * _tmp628 + _tmp592 * _tmp631 + _tmp598 * _tmp637 +
                       _tmp599 * _tmp638 + _tmp601 * _tmp640 + _tmp602 * _tmp641 +
                       _tmp604 * _tmp643 + _tmp605 * _tmp644 + _tmp606 * _tmp645;
    _hessian(0, 23) = 0;
    _hessian(1, 23) = 0;
    _hessian(2, 23) = 0;
    _hessian(3, 23) = 0;
    _hessian(4, 23) = 0;
    _hessian(5, 23) = 0;
    _hessian(6, 23) = 0;
    _hessian(7, 23) = 0;
    _hessian(8, 23) = 0;
    _hessian(9, 23) = 0;
    _hessian(10, 23) = 0;
    _hessian(11, 23) = 0;
    _hessian(12, 23) = 0;
    _hessian(13, 23) = 0;
    _hessian(14, 23) = 0;
    _hessian(15, 23) = 0;
    _hessian(16, 23) = 0;
    _hessian(17, 23) = 0;
    _hessian(18, 23) = 0;
    _hessian(19, 23) = 0;
    _hessian(20, 23) = 0;
    _hessian(21, 23) = 0;
    _hessian(22, 23) = 0;
    _hessian(23, 23) =
        std::pow(_tmp628, Scalar(2)) + std::pow(_tmp631, Scalar(2)) + std::pow(_tmp637, Scalar(2)) +
        std::pow(_tmp638, Scalar(2)) + std::pow(_tmp640, Scalar(2)) + std::pow(_tmp641, Scalar(2)) +
        std::pow(_tmp643, Scalar(2)) + std::pow(_tmp644, Scalar(2)) + std::pow(_tmp645, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 24, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp101 * _tmp195 + _tmp112 * _tmp206 + _tmp119 * _tmp215 + _tmp127 * _tmp220 +
                 _tmp130 * _tmp225 + _tmp132 * _tmp230 + _tmp178 * _tmp63 + _tmp183 * _tmp71 +
                 _tmp191 * _tmp78;
    _rhs(1, 0) = _tmp101 * _tmp263 + _tmp112 * _tmp265 + _tmp119 * _tmp269 + _tmp127 * _tmp272 +
                 _tmp130 * _tmp273 + _tmp132 * _tmp274 + _tmp244 * _tmp63 + _tmp248 * _tmp71 +
                 _tmp254 * _tmp78;
    _rhs(2, 0) = _tmp101 * _tmp295 + _tmp112 * _tmp301 + _tmp119 * _tmp302 + _tmp127 * _tmp304 +
                 _tmp130 * _tmp306 + _tmp132 * _tmp307 + _tmp283 * _tmp63 + _tmp286 * _tmp71 +
                 _tmp292 * _tmp78;
    _rhs(3, 0) = _tmp130 * _tmp311 + _tmp132 * _tmp315 - _tmp764;
    _rhs(4, 0) = _tmp130 * _tmp319 + _tmp132 * _tmp323 - _tmp765;
    _rhs(5, 0) = _tmp130 * _tmp327 + _tmp132 * _tmp331 - _tmp766;
    _rhs(6, 0) = _tmp112 * _tmp335 + _tmp119 * _tmp339 + _tmp127 * _tmp343 + _tmp130 * _tmp347 +
                 _tmp132 * _tmp351 - _tmp767;
    _rhs(7, 0) = _tmp112 * _tmp355 + _tmp119 * _tmp359 + _tmp127 * _tmp363 + _tmp130 * _tmp367 +
                 _tmp132 * _tmp371 - _tmp768;
    _rhs(8, 0) = _tmp112 * _tmp375 + _tmp119 * _tmp379 + _tmp127 * _tmp383 + _tmp130 * _tmp387 +
                 _tmp132 * _tmp391 - _tmp769;
    _rhs(9, 0) = _tmp101 * _tmp422 + _tmp112 * _tmp423 + _tmp119 * _tmp425 + _tmp127 * _tmp426 +
                 _tmp130 * _tmp427 + _tmp132 * _tmp429 + _tmp401 * _tmp63 + _tmp409 * _tmp71 +
                 _tmp420 * _tmp78;
    _rhs(10, 0) = _tmp101 * _tmp444 + _tmp112 * _tmp446 + _tmp119 * _tmp447 + _tmp127 * _tmp449 +
                  _tmp130 * _tmp450 + _tmp132 * _tmp451 + _tmp434 * _tmp63 + _tmp437 * _tmp71 +
                  _tmp443 * _tmp78;
    _rhs(11, 0) = _tmp101 * _tmp463 + _tmp112 * _tmp465 + _tmp119 * _tmp466 + _tmp127 * _tmp468 +
                  _tmp130 * _tmp469 + _tmp132 * _tmp470 + _tmp455 * _tmp63 + _tmp459 * _tmp71 +
                  _tmp462 * _tmp78;
    _rhs(12, 0) = _tmp130 * _tmp471 + _tmp132 * _tmp472 + _tmp764;
    _rhs(13, 0) = _tmp130 * _tmp473 + _tmp132 * _tmp474 + _tmp765;
    _rhs(14, 0) = _tmp130 * _tmp475 + _tmp132 * _tmp476 + _tmp766;
    _rhs(15, 0) = _tmp112 * _tmp477 + _tmp119 * _tmp478 + _tmp127 * _tmp479 + _tmp130 * _tmp480 +
                  _tmp132 * _tmp481 + _tmp767;
    _rhs(16, 0) = _tmp112 * _tmp482 + _tmp119 * _tmp483 + _tmp127 * _tmp484 + _tmp130 * _tmp485 +
                  _tmp132 * _tmp486 + _tmp768;
    _rhs(17, 0) = _tmp112 * _tmp487 + _tmp119 * _tmp488 + _tmp127 * _tmp489 + _tmp130 * _tmp490 +
                  _tmp132 * _tmp491 + _tmp769;
    _rhs(18, 0) = -_tmp101 * _tmp492 + _tmp112 * _tmp493 + _tmp119 * _tmp494 + _tmp127 * _tmp495 +
                  _tmp130 * _tmp496 + _tmp132 * _tmp497;
    _rhs(19, 0) = -_tmp101 * _tmp498 + _tmp112 * _tmp499 + _tmp119 * _tmp500 + _tmp127 * _tmp501 +
                  _tmp130 * _tmp502 + _tmp132 * _tmp503;
    _rhs(20, 0) = -_tmp101 * _tmp504 + _tmp112 * _tmp505 + _tmp119 * _tmp506 + _tmp127 * _tmp507 +
                  _tmp130 * _tmp508 + _tmp132 * _tmp509;
    _rhs(21, 0) = _tmp101 * _tmp558 + _tmp112 * _tmp560 + _tmp119 * _tmp561 + _tmp127 * _tmp563 +
                  _tmp130 * _tmp564 + _tmp132 * _tmp565 + _tmp549 * _tmp63 + _tmp552 * _tmp71 +
                  _tmp557 * _tmp78;
    _rhs(22, 0) = _tmp101 * _tmp599 + _tmp112 * _tmp601 + _tmp119 * _tmp602 + _tmp127 * _tmp604 +
                  _tmp130 * _tmp605 + _tmp132 * _tmp606 + _tmp589 * _tmp63 + _tmp592 * _tmp71 +
                  _tmp598 * _tmp78;
    _rhs(23, 0) = _tmp101 * _tmp638 + _tmp112 * _tmp640 + _tmp119 * _tmp641 + _tmp127 * _tmp643 +
                  _tmp130 * _tmp644 + _tmp132 * _tmp645 + _tmp628 * _tmp63 + _tmp631 * _tmp71 +
                  _tmp637 * _tmp78;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
