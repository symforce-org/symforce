// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark into the target camera and comparing
 * against the correspondence in the target camera.
 *
 * The landmark is specified as a pixel in the source camera and an inverse range; this means the
 * landmark is fixed in the source camera and always has residual 0 there (this 0 residual is not
 * returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     source_calibration_storage: The storage vector of the source camera calibration
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     source_pixel: The location of the landmark in the source camera
 *     target_pixel: The location of the correspondence in the target camera
 *     weight: The weight of the factor
 *     gnc_mu: The mu convexity parameter for the Barron noise model
 *     gnc_scale: The scale parameter for the Barron noise model
 *     epsilon: Small positive value
 *     camera_model_class: The subclass of CameraCal to use as the camera model
 *
 * Outputs:
 *     res: 2dof residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkAtanReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose,
    const Eigen::Matrix<Scalar, 5, 1>& source_calibration_storage,
    const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 5, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 2, 1>& source_pixel,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 1232

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (351)
  const Scalar _tmp0 = 2 * _target_pose[2];
  const Scalar _tmp1 = _target_pose[0] * _tmp0;
  const Scalar _tmp2 = 2 * _target_pose[3];
  const Scalar _tmp3 = _target_pose[1] * _tmp2;
  const Scalar _tmp4 = -_tmp3;
  const Scalar _tmp5 = _tmp1 + _tmp4;
  const Scalar _tmp6 = 2 * _source_pose[0];
  const Scalar _tmp7 = _source_pose[3] * _tmp6;
  const Scalar _tmp8 = 2 * _source_pose[1];
  const Scalar _tmp9 = _source_pose[2] * _tmp8;
  const Scalar _tmp10 = _tmp7 + _tmp9;
  const Scalar _tmp11 = -source_calibration_storage(3, 0) + source_pixel(1, 0);
  const Scalar _tmp12 = _tmp11 / source_calibration_storage(1, 0);
  const Scalar _tmp13 =
      std::pow(_tmp11, Scalar(2)) / std::pow(source_calibration_storage(1, 0), Scalar(2));
  const Scalar _tmp14 = Scalar(0.5) * source_calibration_storage(4, 0);
  const Scalar _tmp15 = std::tan(_tmp14);
  const Scalar _tmp16 = -source_calibration_storage(2, 0) + source_pixel(0, 0);
  const Scalar _tmp17 =
      std::pow(_tmp16, Scalar(2)) / std::pow(source_calibration_storage(0, 0), Scalar(2));
  const Scalar _tmp18 = _tmp13 + _tmp17 + epsilon;
  const Scalar _tmp19 = std::sqrt(_tmp18);
  const Scalar _tmp20 = _tmp19 * source_calibration_storage(4, 0);
  const Scalar _tmp21 = std::tan(_tmp20);
  const Scalar _tmp22 = (Scalar(1) / Scalar(4)) * std::pow(_tmp21, Scalar(2)) / _tmp18;
  const Scalar _tmp23 = _tmp22 / std::pow(_tmp15, Scalar(2));
  const Scalar _tmp24 = epsilon + 1;
  const Scalar _tmp25 =
      std::pow(Scalar(_tmp13 * _tmp23 + _tmp17 * _tmp23 + _tmp24), Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp26 = (Scalar(1) / Scalar(2)) * _tmp21 / _tmp19;
  const Scalar _tmp27 = _tmp25 * _tmp26 / _tmp15;
  const Scalar _tmp28 = _tmp12 * _tmp27;
  const Scalar _tmp29 = _source_pose[6] - _target_pose[6];
  const Scalar _tmp30 = _tmp29 * source_inverse_range;
  const Scalar _tmp31 = _source_pose[2] * _tmp6;
  const Scalar _tmp32 = _source_pose[3] * _tmp8;
  const Scalar _tmp33 = -_tmp32;
  const Scalar _tmp34 = _tmp31 + _tmp33;
  const Scalar _tmp35 = _tmp16 / source_calibration_storage(0, 0);
  const Scalar _tmp36 = _tmp27 * _tmp35;
  const Scalar _tmp37 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp38 = -2 * _tmp37;
  const Scalar _tmp39 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp40 = 1 - 2 * _tmp39;
  const Scalar _tmp41 = _tmp38 + _tmp40;
  const Scalar _tmp42 = _tmp10 * _tmp28 + _tmp25 * _tmp41 + _tmp30 + _tmp34 * _tmp36;
  const Scalar _tmp43 = _target_pose[2] * _tmp2;
  const Scalar _tmp44 = 2 * _target_pose[0] * _target_pose[1];
  const Scalar _tmp45 = _tmp43 + _tmp44;
  const Scalar _tmp46 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp47 = -2 * _tmp46;
  const Scalar _tmp48 = _tmp38 + _tmp47 + 1;
  const Scalar _tmp49 = _source_pose[1] * _tmp6;
  const Scalar _tmp50 = 2 * _source_pose[2] * _source_pose[3];
  const Scalar _tmp51 = _tmp49 + _tmp50;
  const Scalar _tmp52 = _source_pose[5] - _target_pose[5];
  const Scalar _tmp53 = _tmp52 * source_inverse_range;
  const Scalar _tmp54 = -_tmp7;
  const Scalar _tmp55 = _tmp54 + _tmp9;
  const Scalar _tmp56 = _tmp25 * _tmp55 + _tmp28 * _tmp48 + _tmp36 * _tmp51 + _tmp53;
  const Scalar _tmp57 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp58 = -2 * _tmp57;
  const Scalar _tmp59 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp60 = 1 - 2 * _tmp59;
  const Scalar _tmp61 = _tmp58 + _tmp60;
  const Scalar _tmp62 = _tmp40 + _tmp47;
  const Scalar _tmp63 = -_tmp50;
  const Scalar _tmp64 = _tmp49 + _tmp63;
  const Scalar _tmp65 = _source_pose[4] - _target_pose[4];
  const Scalar _tmp66 = _tmp65 * source_inverse_range;
  const Scalar _tmp67 = _tmp31 + _tmp32;
  const Scalar _tmp68 = _tmp25 * _tmp67 + _tmp28 * _tmp64 + _tmp36 * _tmp62 + _tmp66;
  const Scalar _tmp69 = _tmp42 * _tmp5 + _tmp45 * _tmp56 + _tmp61 * _tmp68;
  const Scalar _tmp70 = Scalar(1.0) / (target_calibration_storage(4, 0));
  const Scalar _tmp71 = _tmp70 * target_calibration_storage(0, 0);
  const Scalar _tmp72 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp73 = -2 * _tmp72;
  const Scalar _tmp74 = _tmp60 + _tmp73;
  const Scalar _tmp75 = _target_pose[1] * _tmp0;
  const Scalar _tmp76 = _target_pose[0] * _tmp2;
  const Scalar _tmp77 = -_tmp76;
  const Scalar _tmp78 = _tmp75 + _tmp77;
  const Scalar _tmp79 = _tmp1 + _tmp3;
  const Scalar _tmp80 = _tmp42 * _tmp74 + _tmp56 * _tmp78 + _tmp68 * _tmp79;
  const Scalar _tmp81 = std::max<Scalar>(_tmp80, epsilon);
  const Scalar _tmp82 = std::pow(_tmp81, Scalar(-2));
  const Scalar _tmp83 = _tmp75 + _tmp76;
  const Scalar _tmp84 = _tmp58 + _tmp73 + 1;
  const Scalar _tmp85 = -_tmp43;
  const Scalar _tmp86 = _tmp44 + _tmp85;
  const Scalar _tmp87 = _tmp42 * _tmp83 + _tmp56 * _tmp84 + _tmp68 * _tmp86;
  const Scalar _tmp88 = std::sqrt(Scalar(std::pow(_tmp69, Scalar(2)) * _tmp82 +
                                         _tmp82 * std::pow(_tmp87, Scalar(2)) + epsilon));
  const Scalar _tmp89 = Scalar(0.5) * target_calibration_storage(4, 0);
  const Scalar _tmp90 = std::atan(2 * _tmp88 * std::tan(_tmp89)) / (_tmp81 * _tmp88);
  const Scalar _tmp91 = target_calibration_storage(2, 0) - target_pixel(0, 0);
  const Scalar _tmp92 = _tmp69 * _tmp71 * _tmp90 + _tmp91;
  const Scalar _tmp93 = _tmp70 * target_calibration_storage(1, 0);
  const Scalar _tmp94 = target_calibration_storage(3, 0) - target_pixel(1, 0);
  const Scalar _tmp95 = _tmp87 * _tmp90 * _tmp93 + _tmp94;
  const Scalar _tmp96 = std::pow(_tmp92, Scalar(2)) + std::pow(_tmp95, Scalar(2)) + epsilon;
  const Scalar _tmp97 = Scalar(1.0) / (_tmp24 - gnc_mu);
  const Scalar _tmp98 = epsilon + std::fabs(_tmp97);
  const Scalar _tmp99 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp100 = _tmp99 / _tmp98;
  const Scalar _tmp101 = 2 - _tmp97;
  const Scalar _tmp102 =
      _tmp101 + epsilon * (2 * std::min<Scalar>(0, (((_tmp101) > 0) - ((_tmp101) < 0))) + 1);
  const Scalar _tmp103 = (Scalar(1) / Scalar(2)) * _tmp102;
  const Scalar _tmp104 = 2 * _tmp98 / _tmp102;
  const Scalar _tmp105 =
      std::sqrt(weight) * std::max<Scalar>(0, (((-std::fabs(_tmp20) + Scalar(M_PI_2)) > 0) -
                                               ((-std::fabs(_tmp20) + Scalar(M_PI_2)) < 0)));
  const Scalar _tmp106 =
      _tmp105 * std::sqrt(Scalar(_tmp104 * (std::pow(Scalar(_tmp100 * _tmp96 + 1), _tmp103) - 1))) *
      std::max<Scalar>(0, (((_tmp80) > 0) - ((_tmp80) < 0))) / std::sqrt(_tmp96);
  const Scalar _tmp107 = _tmp106 * _tmp92;
  const Scalar _tmp108 = _tmp106 * _tmp95;
  const Scalar _tmp109 = std::tan(_tmp14);
  const Scalar _tmp110 = _tmp22 / std::pow(_tmp109, Scalar(2));
  const Scalar _tmp111 = std::pow(Scalar(_tmp110 * _tmp13 + _tmp110 * _tmp17 + _tmp24),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp112 = _tmp26 / _tmp109;
  const Scalar _tmp113 = _tmp111 * _tmp112;
  const Scalar _tmp114 = _tmp113 * _tmp12;
  const Scalar _tmp115 = _tmp111 * _tmp67;
  const Scalar _tmp116 = _tmp113 * _tmp35;
  const Scalar _tmp117 = _tmp114 * _tmp64 + _tmp115 + _tmp116 * _tmp62 + _tmp66;
  const Scalar _tmp118 = _tmp111 * _tmp34;
  const Scalar _tmp119 = _tmp112 * _tmp35;
  const Scalar _tmp120 = _tmp10 * _tmp114 + _tmp111 * _tmp41 + _tmp118 * _tmp119 + _tmp30;
  const Scalar _tmp121 = _tmp111 * _tmp51;
  const Scalar _tmp122 = _tmp111 * _tmp55;
  const Scalar _tmp123 = _tmp114 * _tmp48 + _tmp119 * _tmp121 + _tmp122 + _tmp53;
  const Scalar _tmp124 = _tmp120 * _tmp5 + _tmp123 * _tmp45;
  const Scalar _tmp125 = _tmp117 * _tmp61 + _tmp124;
  const Scalar _tmp126 = std::pow(_tmp125, Scalar(2));
  const Scalar _tmp127 = -_tmp9;
  const Scalar _tmp128 = -_tmp39;
  const Scalar _tmp129 = _tmp128 + _tmp46;
  const Scalar _tmp130 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp131 = -_tmp37;
  const Scalar _tmp132 = _tmp130 + _tmp131;
  const Scalar _tmp133 = _tmp111 * (_tmp127 + _tmp54) + _tmp114 * (_tmp129 + _tmp132);
  const Scalar _tmp134 = _tmp112 * _tmp12;
  const Scalar _tmp135 = -_tmp130;
  const Scalar _tmp136 = _tmp135 + _tmp37;
  const Scalar _tmp137 = _tmp111 * (_tmp129 + _tmp136) + _tmp122 * _tmp134;
  const Scalar _tmp138 = -_tmp49;
  const Scalar _tmp139 = _tmp111 * (_tmp138 + _tmp50) + _tmp115 * _tmp134;
  const Scalar _tmp140 = _tmp133 * _tmp74 + _tmp137 * _tmp78 + _tmp139 * _tmp79;
  const Scalar _tmp141 = _tmp117 * _tmp79 + _tmp123 * _tmp78;
  const Scalar _tmp142 = _tmp120 * _tmp74 + _tmp141;
  const Scalar _tmp143 = (((_tmp142 - epsilon) > 0) - ((_tmp142 - epsilon) < 0)) + 1;
  const Scalar _tmp144 = std::max<Scalar>(_tmp142, epsilon);
  const Scalar _tmp145 = _tmp143 / [&]() {
    const Scalar base = _tmp144;
    return base * base * base;
  }();
  const Scalar _tmp146 = _tmp140 * _tmp145;
  const Scalar _tmp147 = _tmp117 * _tmp86 + _tmp120 * _tmp83;
  const Scalar _tmp148 = _tmp123 * _tmp84 + _tmp147;
  const Scalar _tmp149 = std::pow(_tmp148, Scalar(2));
  const Scalar _tmp150 = _tmp133 * _tmp5 + _tmp137 * _tmp45 + _tmp139 * _tmp61;
  const Scalar _tmp151 = std::pow(_tmp144, Scalar(-2));
  const Scalar _tmp152 = 2 * _tmp151;
  const Scalar _tmp153 = _tmp125 * _tmp152;
  const Scalar _tmp154 = _tmp133 * _tmp83 + _tmp137 * _tmp84 + _tmp139 * _tmp86;
  const Scalar _tmp155 = _tmp148 * _tmp152;
  const Scalar _tmp156 =
      -_tmp126 * _tmp146 - _tmp146 * _tmp149 + _tmp150 * _tmp153 + _tmp154 * _tmp155;
  const Scalar _tmp157 = _tmp125 * _tmp71;
  const Scalar _tmp158 = _tmp126 * _tmp151 + _tmp149 * _tmp151 + epsilon;
  const Scalar _tmp159 = Scalar(1.0) / (_tmp144);
  const Scalar _tmp160 = std::tan(_tmp89);
  const Scalar _tmp161 = std::sqrt(_tmp158);
  const Scalar _tmp162 = std::atan(2 * _tmp160 * _tmp161);
  const Scalar _tmp163 = _tmp159 * _tmp162;
  const Scalar _tmp164 = (Scalar(1) / Scalar(2)) * _tmp163 / (_tmp158 * std::sqrt(_tmp158));
  const Scalar _tmp165 = _tmp157 * _tmp164;
  const Scalar _tmp166 = Scalar(1.0) / (_tmp161);
  const Scalar _tmp167 = _tmp163 * _tmp166;
  const Scalar _tmp168 = _tmp167 * _tmp71;
  const Scalar _tmp169 = (Scalar(1) / Scalar(2)) * _tmp143 * _tmp151 * _tmp162 * _tmp166;
  const Scalar _tmp170 = _tmp157 * _tmp169;
  const Scalar _tmp171 =
      _tmp159 * _tmp160 / (_tmp158 * (4 * _tmp158 * std::pow(_tmp160, Scalar(2)) + 1));
  const Scalar _tmp172 = _tmp157 * _tmp171;
  const Scalar _tmp173 =
      -_tmp140 * _tmp170 + _tmp150 * _tmp168 - _tmp156 * _tmp165 + _tmp156 * _tmp172;
  const Scalar _tmp174 = _tmp148 * _tmp93;
  const Scalar _tmp175 = _tmp167 * _tmp174 + _tmp94;
  const Scalar _tmp176 = _tmp125 * _tmp168 + _tmp91;
  const Scalar _tmp177 = std::pow(_tmp175, Scalar(2)) + std::pow(_tmp176, Scalar(2)) + epsilon;
  const Scalar _tmp178 = std::pow(_tmp177, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp179 = _tmp100 * _tmp177 + 1;
  const Scalar _tmp180 = std::sqrt(Scalar(_tmp104 * (std::pow(_tmp179, _tmp103) - 1)));
  const Scalar _tmp181 = std::max<Scalar>(0, (((_tmp142) > 0) - ((_tmp142) < 0)));
  const Scalar _tmp182 = _tmp105 * _tmp180 * _tmp181;
  const Scalar _tmp183 = _tmp178 * _tmp182;
  const Scalar _tmp184 = _tmp164 * _tmp174;
  const Scalar _tmp185 = _tmp169 * _tmp174;
  const Scalar _tmp186 = _tmp167 * _tmp93;
  const Scalar _tmp187 = _tmp171 * _tmp174;
  const Scalar _tmp188 =
      -_tmp140 * _tmp185 + _tmp154 * _tmp186 - _tmp156 * _tmp184 + _tmp156 * _tmp187;
  const Scalar _tmp189 = 2 * _tmp175;
  const Scalar _tmp190 = 2 * _tmp176;
  const Scalar _tmp191 = _tmp173 * _tmp190 + _tmp188 * _tmp189;
  const Scalar _tmp192 = (Scalar(1) / Scalar(2)) * _tmp176;
  const Scalar _tmp193 =
      _tmp105 * _tmp178 * std::pow(_tmp179, Scalar(_tmp103 - 1)) * _tmp181 * _tmp99 / _tmp180;
  const Scalar _tmp194 = _tmp192 * _tmp193;
  const Scalar _tmp195 = _tmp182 / (_tmp177 * std::sqrt(_tmp177));
  const Scalar _tmp196 = _tmp192 * _tmp195;
  const Scalar _tmp197 = _tmp173 * _tmp183 + _tmp191 * _tmp194 - _tmp191 * _tmp196;
  const Scalar _tmp198 = (Scalar(1) / Scalar(2)) * _tmp175;
  const Scalar _tmp199 = _tmp193 * _tmp198;
  const Scalar _tmp200 = _tmp195 * _tmp198;
  const Scalar _tmp201 = _tmp183 * _tmp188 + _tmp191 * _tmp199 - _tmp191 * _tmp200;
  const Scalar _tmp202 = -_tmp46;
  const Scalar _tmp203 = -_tmp31;
  const Scalar _tmp204 =
      _tmp111 * (_tmp128 + _tmp130 + _tmp202 + _tmp37) + _tmp116 * (_tmp203 + _tmp33);
  const Scalar _tmp205 = _tmp202 + _tmp39;
  const Scalar _tmp206 = _tmp116 * (_tmp136 + _tmp205) + _tmp118;
  const Scalar _tmp207 = _tmp116 * (_tmp127 + _tmp7) + _tmp121;
  const Scalar _tmp208 = _tmp204 * _tmp61 + _tmp206 * _tmp5 + _tmp207 * _tmp45;
  const Scalar _tmp209 = _tmp204 * _tmp79 + _tmp206 * _tmp74 + _tmp207 * _tmp78;
  const Scalar _tmp210 = _tmp145 * _tmp149;
  const Scalar _tmp211 = _tmp126 * _tmp145;
  const Scalar _tmp212 = _tmp204 * _tmp86 + _tmp206 * _tmp83 + _tmp207 * _tmp84;
  const Scalar _tmp213 =
      _tmp153 * _tmp208 + _tmp155 * _tmp212 - _tmp209 * _tmp210 - _tmp209 * _tmp211;
  const Scalar _tmp214 =
      -_tmp165 * _tmp213 + _tmp168 * _tmp208 - _tmp170 * _tmp209 + _tmp172 * _tmp213;
  const Scalar _tmp215 =
      -_tmp184 * _tmp213 - _tmp185 * _tmp209 + _tmp186 * _tmp212 + _tmp187 * _tmp213;
  const Scalar _tmp216 = _tmp189 * _tmp215 + _tmp190 * _tmp214;
  const Scalar _tmp217 = _tmp183 * _tmp214 + _tmp194 * _tmp216 - _tmp196 * _tmp216;
  const Scalar _tmp218 = _tmp183 * _tmp215 + _tmp199 * _tmp216 - _tmp200 * _tmp216;
  const Scalar _tmp219 = _tmp114 * (_tmp138 + _tmp63) + _tmp116 * (_tmp132 + _tmp205);
  const Scalar _tmp220 = _tmp114 * (_tmp131 + _tmp135 + _tmp39 + _tmp46) + _tmp116 * _tmp64;
  const Scalar _tmp221 = _tmp10 * _tmp116 + _tmp114 * (_tmp203 + _tmp32);
  const Scalar _tmp222 = _tmp219 * _tmp45 + _tmp220 * _tmp61 + _tmp221 * _tmp5;
  const Scalar _tmp223 = _tmp219 * _tmp78 + _tmp220 * _tmp79 + _tmp221 * _tmp74;
  const Scalar _tmp224 = _tmp219 * _tmp84 + _tmp220 * _tmp86 + _tmp221 * _tmp83;
  const Scalar _tmp225 =
      _tmp153 * _tmp222 + _tmp155 * _tmp224 - _tmp210 * _tmp223 - _tmp211 * _tmp223;
  const Scalar _tmp226 =
      -_tmp184 * _tmp225 - _tmp185 * _tmp223 + _tmp186 * _tmp224 + _tmp187 * _tmp225;
  const Scalar _tmp227 =
      -_tmp165 * _tmp225 + _tmp168 * _tmp222 - _tmp170 * _tmp223 + _tmp172 * _tmp225;
  const Scalar _tmp228 = _tmp189 * _tmp226 + _tmp190 * _tmp227;
  const Scalar _tmp229 = _tmp183 * _tmp227 + _tmp194 * _tmp228 - _tmp196 * _tmp228;
  const Scalar _tmp230 = _tmp183 * _tmp226 + _tmp199 * _tmp228 - _tmp200 * _tmp228;
  const Scalar _tmp231 = _tmp79 * source_inverse_range;
  const Scalar _tmp232 = _tmp170 * _tmp231;
  const Scalar _tmp233 = _tmp153 * source_inverse_range;
  const Scalar _tmp234 = _tmp233 * _tmp61;
  const Scalar _tmp235 = _tmp211 * source_inverse_range;
  const Scalar _tmp236 = _tmp235 * _tmp79;
  const Scalar _tmp237 = _tmp210 * source_inverse_range;
  const Scalar _tmp238 = _tmp237 * _tmp79;
  const Scalar _tmp239 = _tmp155 * source_inverse_range;
  const Scalar _tmp240 = _tmp239 * _tmp86;
  const Scalar _tmp241 = _tmp234 - _tmp236 - _tmp238 + _tmp240;
  const Scalar _tmp242 = _tmp168 * source_inverse_range;
  const Scalar _tmp243 = _tmp242 * _tmp61;
  const Scalar _tmp244 = -_tmp165 * _tmp241 + _tmp172 * _tmp241 - _tmp232 + _tmp243;
  const Scalar _tmp245 = _tmp185 * _tmp231;
  const Scalar _tmp246 = _tmp186 * source_inverse_range;
  const Scalar _tmp247 = _tmp246 * _tmp86;
  const Scalar _tmp248 = -_tmp184 * _tmp241 + _tmp187 * _tmp241 - _tmp245 + _tmp247;
  const Scalar _tmp249 = _tmp189 * _tmp248 + _tmp190 * _tmp244;
  const Scalar _tmp250 = _tmp183 * _tmp244 + _tmp194 * _tmp249 - _tmp196 * _tmp249;
  const Scalar _tmp251 = _tmp183 * _tmp248 + _tmp199 * _tmp249 - _tmp200 * _tmp249;
  const Scalar _tmp252 = _tmp78 * source_inverse_range;
  const Scalar _tmp253 = _tmp170 * _tmp252;
  const Scalar _tmp254 = _tmp242 * _tmp45;
  const Scalar _tmp255 = _tmp235 * _tmp78;
  const Scalar _tmp256 = _tmp237 * _tmp78;
  const Scalar _tmp257 = _tmp239 * _tmp84;
  const Scalar _tmp258 = _tmp233 * _tmp45;
  const Scalar _tmp259 = -_tmp255 - _tmp256 + _tmp257 + _tmp258;
  const Scalar _tmp260 = _tmp157 * _tmp259;
  const Scalar _tmp261 = -_tmp164 * _tmp260 + _tmp171 * _tmp260 - _tmp253 + _tmp254;
  const Scalar _tmp262 = _tmp246 * _tmp84;
  const Scalar _tmp263 = _tmp185 * _tmp252;
  const Scalar _tmp264 = -_tmp184 * _tmp259 + _tmp187 * _tmp259 + _tmp262 - _tmp263;
  const Scalar _tmp265 = _tmp189 * _tmp264 + _tmp190 * _tmp261;
  const Scalar _tmp266 = _tmp183 * _tmp261 + _tmp194 * _tmp265 - _tmp196 * _tmp265;
  const Scalar _tmp267 = _tmp183 * _tmp264 + _tmp199 * _tmp265 - _tmp200 * _tmp265;
  const Scalar _tmp268 = _tmp239 * _tmp83;
  const Scalar _tmp269 = _tmp235 * _tmp74;
  const Scalar _tmp270 = _tmp233 * _tmp5;
  const Scalar _tmp271 = _tmp237 * _tmp74;
  const Scalar _tmp272 = _tmp268 - _tmp269 + _tmp270 - _tmp271;
  const Scalar _tmp273 = _tmp74 * source_inverse_range;
  const Scalar _tmp274 = _tmp185 * _tmp273;
  const Scalar _tmp275 = _tmp246 * _tmp83;
  const Scalar _tmp276 = -_tmp184 * _tmp272 + _tmp187 * _tmp272 - _tmp274 + _tmp275;
  const Scalar _tmp277 = _tmp242 * _tmp5;
  const Scalar _tmp278 = _tmp170 * _tmp273;
  const Scalar _tmp279 = -_tmp165 * _tmp272 + _tmp172 * _tmp272 + _tmp277 - _tmp278;
  const Scalar _tmp280 = _tmp189 * _tmp276 + _tmp190 * _tmp279;
  const Scalar _tmp281 = _tmp183 * _tmp279 + _tmp194 * _tmp280 - _tmp196 * _tmp280;
  const Scalar _tmp282 = _tmp183 * _tmp276 + _tmp199 * _tmp280 - _tmp200 * _tmp280;
  const Scalar _tmp283 = -_tmp44;
  const Scalar _tmp284 = -_tmp75;
  const Scalar _tmp285 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp286 = -_tmp285;
  const Scalar _tmp287 = _tmp286 + _tmp72;
  const Scalar _tmp288 = -_tmp59;
  const Scalar _tmp289 = _tmp288 + _tmp57;
  const Scalar _tmp290 =
      _tmp117 * (_tmp283 + _tmp43) + _tmp120 * (_tmp284 + _tmp77) + _tmp123 * (_tmp287 + _tmp289);
  const Scalar _tmp291 = -_tmp72;
  const Scalar _tmp292 = _tmp285 + _tmp291;
  const Scalar _tmp293 = _tmp120 * (_tmp289 + _tmp292) + _tmp141;
  const Scalar _tmp294 = _tmp155 * _tmp293 - _tmp210 * _tmp290 - _tmp211 * _tmp290;
  const Scalar _tmp295 = -_tmp165 * _tmp294 - _tmp170 * _tmp290 + _tmp172 * _tmp294;
  const Scalar _tmp296 =
      -_tmp184 * _tmp294 - _tmp185 * _tmp290 + _tmp186 * _tmp293 + _tmp187 * _tmp294;
  const Scalar _tmp297 = _tmp189 * _tmp296 + _tmp190 * _tmp295;
  const Scalar _tmp298 = _tmp195 * _tmp297;
  const Scalar _tmp299 = _tmp183 * _tmp295 - _tmp192 * _tmp298 + _tmp194 * _tmp297;
  const Scalar _tmp300 = _tmp183 * _tmp296 - _tmp198 * _tmp298 + _tmp199 * _tmp297;
  const Scalar _tmp301 = -_tmp57;
  const Scalar _tmp302 = _tmp117 * (_tmp285 + _tmp288 + _tmp301 + _tmp72) + _tmp124;
  const Scalar _tmp303 = -_tmp1;
  const Scalar _tmp304 = _tmp301 + _tmp59;
  const Scalar _tmp305 =
      _tmp117 * (_tmp303 + _tmp4) + _tmp120 * (_tmp287 + _tmp304) + _tmp123 * (_tmp284 + _tmp76);
  const Scalar _tmp306 = _tmp153 * _tmp305 - _tmp210 * _tmp302 - _tmp211 * _tmp302;
  const Scalar _tmp307 =
      -_tmp165 * _tmp306 + _tmp168 * _tmp305 - _tmp170 * _tmp302 + _tmp172 * _tmp306;
  const Scalar _tmp308 = _tmp174 * _tmp306;
  const Scalar _tmp309 = -_tmp164 * _tmp308 + _tmp171 * _tmp308 - _tmp185 * _tmp302;
  const Scalar _tmp310 = _tmp189 * _tmp309 + _tmp190 * _tmp307;
  const Scalar _tmp311 = _tmp183 * _tmp307 + _tmp194 * _tmp310 - _tmp196 * _tmp310;
  const Scalar _tmp312 = _tmp183 * _tmp309 + _tmp199 * _tmp310 - _tmp200 * _tmp310;
  const Scalar _tmp313 = _tmp117 * (_tmp286 + _tmp291 + _tmp57 + _tmp59) +
                         _tmp120 * (_tmp3 + _tmp303) + _tmp123 * (_tmp283 + _tmp85);
  const Scalar _tmp314 = _tmp123 * (_tmp292 + _tmp304) + _tmp147;
  const Scalar _tmp315 = _tmp153 * _tmp314 + _tmp155 * _tmp313;
  const Scalar _tmp316 = -_tmp184 * _tmp315 + _tmp186 * _tmp313 + _tmp187 * _tmp315;
  const Scalar _tmp317 = -_tmp165 * _tmp315 + _tmp168 * _tmp314 + _tmp172 * _tmp315;
  const Scalar _tmp318 = _tmp189 * _tmp316 + _tmp190 * _tmp317;
  const Scalar _tmp319 = _tmp192 * _tmp318;
  const Scalar _tmp320 = _tmp183 * _tmp317 + _tmp193 * _tmp319 - _tmp195 * _tmp319;
  const Scalar _tmp321 = _tmp183 * _tmp316 + _tmp199 * _tmp318 - _tmp200 * _tmp318;
  const Scalar _tmp322 = -_tmp234 + _tmp236 + _tmp238 - _tmp240;
  const Scalar _tmp323 = -_tmp165 * _tmp322 + _tmp172 * _tmp322 + _tmp232 - _tmp243;
  const Scalar _tmp324 = -_tmp184 * _tmp322 + _tmp187 * _tmp322 + _tmp245 - _tmp247;
  const Scalar _tmp325 = _tmp189 * _tmp324 + _tmp190 * _tmp323;
  const Scalar _tmp326 = _tmp183 * _tmp323 + _tmp194 * _tmp325 - _tmp196 * _tmp325;
  const Scalar _tmp327 = _tmp183 * _tmp324 + _tmp199 * _tmp325 - _tmp200 * _tmp325;
  const Scalar _tmp328 = _tmp255 + _tmp256 - _tmp257 - _tmp258;
  const Scalar _tmp329 = _tmp171 * _tmp328;
  const Scalar _tmp330 = _tmp157 * _tmp329 - _tmp165 * _tmp328 + _tmp253 - _tmp254;
  const Scalar _tmp331 = _tmp174 * _tmp329 - _tmp184 * _tmp328 - _tmp262 + _tmp263;
  const Scalar _tmp332 = _tmp189 * _tmp331 + _tmp190 * _tmp330;
  const Scalar _tmp333 = _tmp195 * _tmp332;
  const Scalar _tmp334 = _tmp183 * _tmp330 - _tmp192 * _tmp333 + _tmp194 * _tmp332;
  const Scalar _tmp335 = _tmp183 * _tmp331 - _tmp198 * _tmp333 + _tmp199 * _tmp332;
  const Scalar _tmp336 = -_tmp268 + _tmp269 - _tmp270 + _tmp271;
  const Scalar _tmp337 = -_tmp165 * _tmp336 + _tmp172 * _tmp336 - _tmp277 + _tmp278;
  const Scalar _tmp338 = -_tmp184 * _tmp336 + _tmp187 * _tmp336 + _tmp274 - _tmp275;
  const Scalar _tmp339 = _tmp189 * _tmp338 + _tmp190 * _tmp337;
  const Scalar _tmp340 = _tmp183 * _tmp337 + _tmp194 * _tmp339 - _tmp196 * _tmp339;
  const Scalar _tmp341 = _tmp183 * _tmp338 + _tmp199 * _tmp339 - _tmp200 * _tmp339;
  const Scalar _tmp342 = _tmp29 * _tmp83 + _tmp52 * _tmp84 + _tmp65 * _tmp86;
  const Scalar _tmp343 = _tmp29 * _tmp74 + _tmp52 * _tmp78 + _tmp65 * _tmp79;
  const Scalar _tmp344 = _tmp29 * _tmp5 + _tmp45 * _tmp52 + _tmp61 * _tmp65;
  const Scalar _tmp345 =
      _tmp153 * _tmp344 + _tmp155 * _tmp342 - _tmp210 * _tmp343 - _tmp211 * _tmp343;
  const Scalar _tmp346 =
      -_tmp184 * _tmp345 - _tmp185 * _tmp343 + _tmp186 * _tmp342 + _tmp187 * _tmp345;
  const Scalar _tmp347 =
      -_tmp165 * _tmp345 + _tmp168 * _tmp344 - _tmp170 * _tmp343 + _tmp172 * _tmp345;
  const Scalar _tmp348 = _tmp189 * _tmp346 + _tmp190 * _tmp347;
  const Scalar _tmp349 = _tmp183 * _tmp347 + _tmp194 * _tmp348 - _tmp196 * _tmp348;
  const Scalar _tmp350 = _tmp183 * _tmp346 + _tmp199 * _tmp348 - _tmp200 * _tmp348;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp107;
    _res(1, 0) = _tmp108;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp197;
    _jacobian(1, 0) = _tmp201;
    _jacobian(0, 1) = _tmp217;
    _jacobian(1, 1) = _tmp218;
    _jacobian(0, 2) = _tmp229;
    _jacobian(1, 2) = _tmp230;
    _jacobian(0, 3) = _tmp250;
    _jacobian(1, 3) = _tmp251;
    _jacobian(0, 4) = _tmp266;
    _jacobian(1, 4) = _tmp267;
    _jacobian(0, 5) = _tmp281;
    _jacobian(1, 5) = _tmp282;
    _jacobian(0, 6) = _tmp299;
    _jacobian(1, 6) = _tmp300;
    _jacobian(0, 7) = _tmp311;
    _jacobian(1, 7) = _tmp312;
    _jacobian(0, 8) = _tmp320;
    _jacobian(1, 8) = _tmp321;
    _jacobian(0, 9) = _tmp326;
    _jacobian(1, 9) = _tmp327;
    _jacobian(0, 10) = _tmp334;
    _jacobian(1, 10) = _tmp335;
    _jacobian(0, 11) = _tmp340;
    _jacobian(1, 11) = _tmp341;
    _jacobian(0, 12) = _tmp349;
    _jacobian(1, 12) = _tmp350;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp197, Scalar(2)) + std::pow(_tmp201, Scalar(2));
    _hessian(1, 0) = _tmp197 * _tmp217 + _tmp201 * _tmp218;
    _hessian(2, 0) = _tmp197 * _tmp229 + _tmp201 * _tmp230;
    _hessian(3, 0) = _tmp197 * _tmp250 + _tmp201 * _tmp251;
    _hessian(4, 0) = _tmp197 * _tmp266 + _tmp201 * _tmp267;
    _hessian(5, 0) = _tmp197 * _tmp281 + _tmp201 * _tmp282;
    _hessian(6, 0) = _tmp197 * _tmp299 + _tmp201 * _tmp300;
    _hessian(7, 0) = _tmp197 * _tmp311 + _tmp201 * _tmp312;
    _hessian(8, 0) = _tmp197 * _tmp320 + _tmp201 * _tmp321;
    _hessian(9, 0) = _tmp197 * _tmp326 + _tmp201 * _tmp327;
    _hessian(10, 0) = _tmp197 * _tmp334 + _tmp201 * _tmp335;
    _hessian(11, 0) = _tmp197 * _tmp340 + _tmp201 * _tmp341;
    _hessian(12, 0) = _tmp197 * _tmp349 + _tmp201 * _tmp350;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp217, Scalar(2)) + std::pow(_tmp218, Scalar(2));
    _hessian(2, 1) = _tmp217 * _tmp229 + _tmp218 * _tmp230;
    _hessian(3, 1) = _tmp217 * _tmp250 + _tmp218 * _tmp251;
    _hessian(4, 1) = _tmp217 * _tmp266 + _tmp218 * _tmp267;
    _hessian(5, 1) = _tmp217 * _tmp281 + _tmp218 * _tmp282;
    _hessian(6, 1) = _tmp217 * _tmp299 + _tmp218 * _tmp300;
    _hessian(7, 1) = _tmp217 * _tmp311 + _tmp218 * _tmp312;
    _hessian(8, 1) = _tmp217 * _tmp320 + _tmp218 * _tmp321;
    _hessian(9, 1) = _tmp217 * _tmp326 + _tmp218 * _tmp327;
    _hessian(10, 1) = _tmp217 * _tmp334 + _tmp218 * _tmp335;
    _hessian(11, 1) = _tmp217 * _tmp340 + _tmp218 * _tmp341;
    _hessian(12, 1) = _tmp217 * _tmp349 + _tmp218 * _tmp350;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp229, Scalar(2)) + std::pow(_tmp230, Scalar(2));
    _hessian(3, 2) = _tmp229 * _tmp250 + _tmp230 * _tmp251;
    _hessian(4, 2) = _tmp229 * _tmp266 + _tmp230 * _tmp267;
    _hessian(5, 2) = _tmp229 * _tmp281 + _tmp230 * _tmp282;
    _hessian(6, 2) = _tmp229 * _tmp299 + _tmp230 * _tmp300;
    _hessian(7, 2) = _tmp229 * _tmp311 + _tmp230 * _tmp312;
    _hessian(8, 2) = _tmp229 * _tmp320 + _tmp230 * _tmp321;
    _hessian(9, 2) = _tmp229 * _tmp326 + _tmp230 * _tmp327;
    _hessian(10, 2) = _tmp229 * _tmp334 + _tmp230 * _tmp335;
    _hessian(11, 2) = _tmp229 * _tmp340 + _tmp230 * _tmp341;
    _hessian(12, 2) = _tmp229 * _tmp349 + _tmp230 * _tmp350;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp250, Scalar(2)) + std::pow(_tmp251, Scalar(2));
    _hessian(4, 3) = _tmp250 * _tmp266 + _tmp251 * _tmp267;
    _hessian(5, 3) = _tmp250 * _tmp281 + _tmp251 * _tmp282;
    _hessian(6, 3) = _tmp250 * _tmp299 + _tmp251 * _tmp300;
    _hessian(7, 3) = _tmp250 * _tmp311 + _tmp251 * _tmp312;
    _hessian(8, 3) = _tmp250 * _tmp320 + _tmp251 * _tmp321;
    _hessian(9, 3) = _tmp250 * _tmp326 + _tmp251 * _tmp327;
    _hessian(10, 3) = _tmp250 * _tmp334 + _tmp251 * _tmp335;
    _hessian(11, 3) = _tmp250 * _tmp340 + _tmp251 * _tmp341;
    _hessian(12, 3) = _tmp250 * _tmp349 + _tmp251 * _tmp350;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp266, Scalar(2)) + std::pow(_tmp267, Scalar(2));
    _hessian(5, 4) = _tmp266 * _tmp281 + _tmp267 * _tmp282;
    _hessian(6, 4) = _tmp266 * _tmp299 + _tmp267 * _tmp300;
    _hessian(7, 4) = _tmp266 * _tmp311 + _tmp267 * _tmp312;
    _hessian(8, 4) = _tmp266 * _tmp320 + _tmp267 * _tmp321;
    _hessian(9, 4) = _tmp266 * _tmp326 + _tmp267 * _tmp327;
    _hessian(10, 4) = _tmp266 * _tmp334 + _tmp267 * _tmp335;
    _hessian(11, 4) = _tmp266 * _tmp340 + _tmp267 * _tmp341;
    _hessian(12, 4) = _tmp266 * _tmp349 + _tmp267 * _tmp350;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp281, Scalar(2)) + std::pow(_tmp282, Scalar(2));
    _hessian(6, 5) = _tmp281 * _tmp299 + _tmp282 * _tmp300;
    _hessian(7, 5) = _tmp281 * _tmp311 + _tmp282 * _tmp312;
    _hessian(8, 5) = _tmp281 * _tmp320 + _tmp282 * _tmp321;
    _hessian(9, 5) = _tmp281 * _tmp326 + _tmp282 * _tmp327;
    _hessian(10, 5) = _tmp281 * _tmp334 + _tmp282 * _tmp335;
    _hessian(11, 5) = _tmp281 * _tmp340 + _tmp282 * _tmp341;
    _hessian(12, 5) = _tmp281 * _tmp349 + _tmp282 * _tmp350;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp299, Scalar(2)) + std::pow(_tmp300, Scalar(2));
    _hessian(7, 6) = _tmp299 * _tmp311 + _tmp300 * _tmp312;
    _hessian(8, 6) = _tmp299 * _tmp320 + _tmp300 * _tmp321;
    _hessian(9, 6) = _tmp299 * _tmp326 + _tmp300 * _tmp327;
    _hessian(10, 6) = _tmp299 * _tmp334 + _tmp300 * _tmp335;
    _hessian(11, 6) = _tmp299 * _tmp340 + _tmp300 * _tmp341;
    _hessian(12, 6) = _tmp299 * _tmp349 + _tmp300 * _tmp350;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp311, Scalar(2)) + std::pow(_tmp312, Scalar(2));
    _hessian(8, 7) = _tmp311 * _tmp320 + _tmp312 * _tmp321;
    _hessian(9, 7) = _tmp311 * _tmp326 + _tmp312 * _tmp327;
    _hessian(10, 7) = _tmp311 * _tmp334 + _tmp312 * _tmp335;
    _hessian(11, 7) = _tmp311 * _tmp340 + _tmp312 * _tmp341;
    _hessian(12, 7) = _tmp311 * _tmp349 + _tmp312 * _tmp350;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp320, Scalar(2)) + std::pow(_tmp321, Scalar(2));
    _hessian(9, 8) = _tmp320 * _tmp326 + _tmp321 * _tmp327;
    _hessian(10, 8) = _tmp320 * _tmp334 + _tmp321 * _tmp335;
    _hessian(11, 8) = _tmp320 * _tmp340 + _tmp321 * _tmp341;
    _hessian(12, 8) = _tmp320 * _tmp349 + _tmp321 * _tmp350;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp326, Scalar(2)) + std::pow(_tmp327, Scalar(2));
    _hessian(10, 9) = _tmp326 * _tmp334 + _tmp327 * _tmp335;
    _hessian(11, 9) = _tmp326 * _tmp340 + _tmp327 * _tmp341;
    _hessian(12, 9) = _tmp326 * _tmp349 + _tmp327 * _tmp350;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp334, Scalar(2)) + std::pow(_tmp335, Scalar(2));
    _hessian(11, 10) = _tmp334 * _tmp340 + _tmp335 * _tmp341;
    _hessian(12, 10) = _tmp334 * _tmp349 + _tmp335 * _tmp350;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp340, Scalar(2)) + std::pow(_tmp341, Scalar(2));
    _hessian(12, 11) = _tmp340 * _tmp349 + _tmp341 * _tmp350;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp349, Scalar(2)) + std::pow(_tmp350, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp107 * _tmp197 + _tmp108 * _tmp201;
    _rhs(1, 0) = _tmp107 * _tmp217 + _tmp108 * _tmp218;
    _rhs(2, 0) = _tmp107 * _tmp229 + _tmp108 * _tmp230;
    _rhs(3, 0) = _tmp107 * _tmp250 + _tmp108 * _tmp251;
    _rhs(4, 0) = _tmp107 * _tmp266 + _tmp108 * _tmp267;
    _rhs(5, 0) = _tmp107 * _tmp281 + _tmp108 * _tmp282;
    _rhs(6, 0) = _tmp107 * _tmp299 + _tmp108 * _tmp300;
    _rhs(7, 0) = _tmp107 * _tmp311 + _tmp108 * _tmp312;
    _rhs(8, 0) = _tmp107 * _tmp320 + _tmp108 * _tmp321;
    _rhs(9, 0) = _tmp107 * _tmp326 + _tmp108 * _tmp327;
    _rhs(10, 0) = _tmp107 * _tmp334 + _tmp108 * _tmp335;
    _rhs(11, 0) = _tmp107 * _tmp340 + _tmp108 * _tmp341;
    _rhs(12, 0) = _tmp107 * _tmp349 + _tmp108 * _tmp350;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
