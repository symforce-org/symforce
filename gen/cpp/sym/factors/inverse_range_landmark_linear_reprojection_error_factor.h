// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark into the target camera and comparing
 * against the correspondence in the target camera.
 *
 * The landmark is specified as a pixel in the source camera and an inverse range; this means the
 * landmark is fixed in the source camera and always has residual 0 there (this 0 residual is not
 * returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     source_calibration_storage: The storage vector of the source camera calibration
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     source_pixel: The location of the landmark in the source camera
 *     target_pixel: The location of the correspondence in the target camera
 *     weight: The weight of the factor
 *     gnc_mu: The mu convexity parameter for the Barron noise model
 *     gnc_scale: The scale parameter for the Barron noise model
 *     epsilon: Small positive value
 *     camera_model_class: The subclass of CameraCal to use as the camera model
 *
 * Outputs:
 *     res: 2dof residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkLinearReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose,
    const Eigen::Matrix<Scalar, 4, 1>& source_calibration_storage,
    const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 4, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 2, 1>& source_pixel,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 905

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (228)
  const Scalar _tmp0 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp3 = -2 * _tmp2;
  const Scalar _tmp4 = _tmp1 + _tmp3 + 1;
  const Scalar _tmp5 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp6 = -2 * _tmp5;
  const Scalar _tmp7 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp8 = 1 - 2 * _tmp7;
  const Scalar _tmp9 = -source_calibration_storage(3, 0) + source_pixel(1, 0);
  const Scalar _tmp10 = -source_calibration_storage(2, 0) + source_pixel(0, 0);
  const Scalar _tmp11 = epsilon + 1;
  const Scalar _tmp12 = std::pow(
      Scalar(std::pow(_tmp10, Scalar(2)) / std::pow(source_calibration_storage(0, 0), Scalar(2)) +
             _tmp11 +
             std::pow(_tmp9, Scalar(2)) / std::pow(source_calibration_storage(1, 0), Scalar(2))),
      Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp13 = _tmp10 / source_calibration_storage(0, 0);
  const Scalar _tmp14 = _tmp12 * _tmp13;
  const Scalar _tmp15 = 2 * _source_pose[1];
  const Scalar _tmp16 = _source_pose[0] * _tmp15;
  const Scalar _tmp17 = 2 * _source_pose[2];
  const Scalar _tmp18 = _source_pose[3] * _tmp17;
  const Scalar _tmp19 = -_tmp18;
  const Scalar _tmp20 = _tmp16 + _tmp19;
  const Scalar _tmp21 = _tmp9 / source_calibration_storage(1, 0);
  const Scalar _tmp22 = _tmp12 * _tmp21;
  const Scalar _tmp23 = _source_pose[4] - _target_pose[4];
  const Scalar _tmp24 = _source_pose[0] * _tmp17;
  const Scalar _tmp25 = _source_pose[3] * _tmp15;
  const Scalar _tmp26 = _tmp12 * (_tmp24 + _tmp25);
  const Scalar _tmp27 =
      _tmp14 * (_tmp6 + _tmp8) + _tmp20 * _tmp22 + _tmp23 * source_inverse_range + _tmp26;
  const Scalar _tmp28 = 2 * _target_pose[2];
  const Scalar _tmp29 = _target_pose[0] * _tmp28;
  const Scalar _tmp30 = 2 * _target_pose[3];
  const Scalar _tmp31 = _target_pose[1] * _tmp30;
  const Scalar _tmp32 = -_tmp31;
  const Scalar _tmp33 = _tmp29 + _tmp32;
  const Scalar _tmp34 = -_tmp25;
  const Scalar _tmp35 = _tmp12 * (_tmp24 + _tmp34);
  const Scalar _tmp36 = 2 * _source_pose[0] * _source_pose[3];
  const Scalar _tmp37 = _source_pose[1] * _tmp17;
  const Scalar _tmp38 = _tmp36 + _tmp37;
  const Scalar _tmp39 = _source_pose[6] - _target_pose[6];
  const Scalar _tmp40 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp41 = -2 * _tmp40;
  const Scalar _tmp42 = _tmp12 * (_tmp41 + _tmp6 + 1) + _tmp13 * _tmp35 + _tmp22 * _tmp38 +
                        _tmp39 * source_inverse_range;
  const Scalar _tmp43 = _target_pose[2] * _tmp30;
  const Scalar _tmp44 = 2 * _target_pose[0] * _target_pose[1];
  const Scalar _tmp45 = _tmp43 + _tmp44;
  const Scalar _tmp46 = _tmp12 * (_tmp16 + _tmp18);
  const Scalar _tmp47 = _source_pose[5] - _target_pose[5];
  const Scalar _tmp48 = -_tmp36;
  const Scalar _tmp49 = _tmp12 * (_tmp37 + _tmp48);
  const Scalar _tmp50 =
      _tmp13 * _tmp46 + _tmp22 * (_tmp41 + _tmp8) + _tmp47 * source_inverse_range + _tmp49;
  const Scalar _tmp51 = _tmp33 * _tmp42 + _tmp45 * _tmp50;
  const Scalar _tmp52 = _tmp27 * _tmp4 + _tmp51;
  const Scalar _tmp53 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp54 = 1 - 2 * _tmp53;
  const Scalar _tmp55 = _tmp1 + _tmp54;
  const Scalar _tmp56 = _tmp29 + _tmp31;
  const Scalar _tmp57 = _target_pose[1] * _tmp28;
  const Scalar _tmp58 = _target_pose[0] * _tmp30;
  const Scalar _tmp59 = -_tmp58;
  const Scalar _tmp60 = _tmp57 + _tmp59;
  const Scalar _tmp61 = _tmp27 * _tmp56 + _tmp50 * _tmp60;
  const Scalar _tmp62 = _tmp42 * _tmp55 + _tmp61;
  const Scalar _tmp63 = std::max<Scalar>(_tmp62, epsilon);
  const Scalar _tmp64 = Scalar(1.0) / (_tmp63);
  const Scalar _tmp65 = _tmp64 * target_calibration_storage(0, 0);
  const Scalar _tmp66 = _tmp52 * _tmp65 + target_calibration_storage(2, 0) - target_pixel(0, 0);
  const Scalar _tmp67 = _tmp3 + _tmp54;
  const Scalar _tmp68 = -_tmp43;
  const Scalar _tmp69 = _tmp44 + _tmp68;
  const Scalar _tmp70 = _tmp57 + _tmp58;
  const Scalar _tmp71 = _tmp27 * _tmp69 + _tmp42 * _tmp70;
  const Scalar _tmp72 = _tmp50 * _tmp67 + _tmp71;
  const Scalar _tmp73 = _tmp64 * target_calibration_storage(1, 0);
  const Scalar _tmp74 = _tmp72 * _tmp73 + target_calibration_storage(3, 0) - target_pixel(1, 0);
  const Scalar _tmp75 = std::pow(_tmp66, Scalar(2)) + std::pow(_tmp74, Scalar(2)) + epsilon;
  const Scalar _tmp76 = std::pow(_tmp75, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp77 = std::max<Scalar>(0, (((_tmp62) > 0) - ((_tmp62) < 0)));
  const Scalar _tmp78 = std::sqrt(weight);
  const Scalar _tmp79 = Scalar(1.0) / (_tmp11 - gnc_mu);
  const Scalar _tmp80 = epsilon + std::fabs(_tmp79);
  const Scalar _tmp81 = 2 - _tmp79;
  const Scalar _tmp82 =
      _tmp81 + epsilon * (2 * std::min<Scalar>(0, (((_tmp81) > 0) - ((_tmp81) < 0))) + 1);
  const Scalar _tmp83 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp84 = _tmp75 * _tmp83 / _tmp80 + 1;
  const Scalar _tmp85 = (Scalar(1) / Scalar(2)) * _tmp82;
  const Scalar _tmp86 =
      std::sqrt(Scalar(2)) * std::sqrt(Scalar(_tmp80 * (std::pow(_tmp84, _tmp85) - 1) / _tmp82));
  const Scalar _tmp87 = _tmp77 * _tmp78 * _tmp86;
  const Scalar _tmp88 = _tmp76 * _tmp87;
  const Scalar _tmp89 = _tmp66 * _tmp88;
  const Scalar _tmp90 = _tmp74 * _tmp88;
  const Scalar _tmp91 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp92 = -_tmp5;
  const Scalar _tmp93 = _tmp91 + _tmp92;
  const Scalar _tmp94 = -_tmp40;
  const Scalar _tmp95 = _tmp7 + _tmp94;
  const Scalar _tmp96 = -_tmp37;
  const Scalar _tmp97 = _tmp12 * (_tmp48 + _tmp96) + _tmp22 * (_tmp93 + _tmp95);
  const Scalar _tmp98 = -_tmp91;
  const Scalar _tmp99 = _tmp12 * (_tmp40 + _tmp7 + _tmp92 + _tmp98) + _tmp21 * _tmp49;
  const Scalar _tmp100 = -_tmp16;
  const Scalar _tmp101 = _tmp12 * (_tmp100 + _tmp18) + _tmp21 * _tmp26;
  const Scalar _tmp102 = _tmp101 * _tmp56 + _tmp55 * _tmp97 + _tmp60 * _tmp99;
  const Scalar _tmp103 = std::pow(_tmp63, Scalar(-2));
  const Scalar _tmp104 = (((_tmp62 - epsilon) > 0) - ((_tmp62 - epsilon) < 0)) + 1;
  const Scalar _tmp105 = (Scalar(1) / Scalar(2)) * _tmp103 * _tmp104;
  const Scalar _tmp106 = _tmp52 * target_calibration_storage(0, 0);
  const Scalar _tmp107 = _tmp105 * _tmp106;
  const Scalar _tmp108 =
      -_tmp102 * _tmp107 + _tmp65 * (_tmp101 * _tmp4 + _tmp33 * _tmp97 + _tmp45 * _tmp99);
  const Scalar _tmp109 = 2 * _tmp66;
  const Scalar _tmp110 = _tmp72 * target_calibration_storage(1, 0);
  const Scalar _tmp111 = _tmp105 * _tmp110;
  const Scalar _tmp112 =
      -_tmp102 * _tmp111 + _tmp73 * (_tmp101 * _tmp69 + _tmp67 * _tmp99 + _tmp70 * _tmp97);
  const Scalar _tmp113 = 2 * _tmp74;
  const Scalar _tmp114 = _tmp108 * _tmp109 + _tmp112 * _tmp113;
  const Scalar _tmp115 = (Scalar(1) / Scalar(2)) * _tmp66;
  const Scalar _tmp116 =
      _tmp76 * _tmp77 * _tmp78 * _tmp83 * std::pow(_tmp84, Scalar(_tmp85 - 1)) / _tmp86;
  const Scalar _tmp117 = _tmp115 * _tmp116;
  const Scalar _tmp118 = _tmp87 / (_tmp75 * std::sqrt(_tmp75));
  const Scalar _tmp119 = _tmp115 * _tmp118;
  const Scalar _tmp120 = _tmp108 * _tmp88 + _tmp114 * _tmp117 - _tmp114 * _tmp119;
  const Scalar _tmp121 = (Scalar(1) / Scalar(2)) * _tmp74;
  const Scalar _tmp122 = _tmp114 * _tmp121;
  const Scalar _tmp123 = _tmp112 * _tmp88 + _tmp116 * _tmp122 - _tmp118 * _tmp122;
  const Scalar _tmp124 = _tmp14 * (_tmp36 + _tmp96) + _tmp46;
  const Scalar _tmp125 = -_tmp7;
  const Scalar _tmp126 = _tmp125 + _tmp40;
  const Scalar _tmp127 = _tmp5 + _tmp98;
  const Scalar _tmp128 = _tmp14 * (_tmp126 + _tmp127) + _tmp35;
  const Scalar _tmp129 = -_tmp24;
  const Scalar _tmp130 = _tmp12 * (_tmp126 + _tmp93) + _tmp14 * (_tmp129 + _tmp34);
  const Scalar _tmp131 = _tmp124 * _tmp60 + _tmp128 * _tmp55 + _tmp130 * _tmp56;
  const Scalar _tmp132 =
      -_tmp111 * _tmp131 + _tmp73 * (_tmp124 * _tmp67 + _tmp128 * _tmp70 + _tmp130 * _tmp69);
  const Scalar _tmp133 =
      -_tmp107 * _tmp131 + _tmp65 * (_tmp124 * _tmp45 + _tmp128 * _tmp33 + _tmp130 * _tmp4);
  const Scalar _tmp134 = _tmp109 * _tmp133 + _tmp113 * _tmp132;
  const Scalar _tmp135 = _tmp117 * _tmp134 - _tmp119 * _tmp134 + _tmp133 * _tmp88;
  const Scalar _tmp136 = _tmp116 * _tmp121;
  const Scalar _tmp137 = _tmp118 * _tmp121;
  const Scalar _tmp138 = _tmp132 * _tmp88 + _tmp134 * _tmp136 - _tmp134 * _tmp137;
  const Scalar _tmp139 = _tmp14 * _tmp38 + _tmp22 * (_tmp129 + _tmp25);
  const Scalar _tmp140 = _tmp14 * (_tmp125 + _tmp5 + _tmp91 + _tmp94) + _tmp22 * (_tmp100 + _tmp19);
  const Scalar _tmp141 = _tmp14 * _tmp20 + _tmp22 * (_tmp127 + _tmp95);
  const Scalar _tmp142 = _tmp139 * _tmp55 + _tmp140 * _tmp60 + _tmp141 * _tmp56;
  const Scalar _tmp143 =
      -_tmp111 * _tmp142 + _tmp73 * (_tmp139 * _tmp70 + _tmp140 * _tmp67 + _tmp141 * _tmp69);
  const Scalar _tmp144 =
      -_tmp107 * _tmp142 + _tmp65 * (_tmp139 * _tmp33 + _tmp140 * _tmp45 + _tmp141 * _tmp4);
  const Scalar _tmp145 = _tmp109 * _tmp144 + _tmp113 * _tmp143;
  const Scalar _tmp146 = _tmp117 * _tmp145 - _tmp119 * _tmp145 + _tmp144 * _tmp88;
  const Scalar _tmp147 = _tmp136 * _tmp145 - _tmp137 * _tmp145 + _tmp143 * _tmp88;
  const Scalar _tmp148 = _tmp65 * source_inverse_range;
  const Scalar _tmp149 = _tmp148 * _tmp4;
  const Scalar _tmp150 = _tmp107 * source_inverse_range;
  const Scalar _tmp151 = _tmp150 * _tmp56;
  const Scalar _tmp152 = _tmp149 - _tmp151;
  const Scalar _tmp153 = _tmp111 * source_inverse_range;
  const Scalar _tmp154 = _tmp153 * _tmp56;
  const Scalar _tmp155 = _tmp73 * source_inverse_range;
  const Scalar _tmp156 = _tmp155 * _tmp69;
  const Scalar _tmp157 = -_tmp154 + _tmp156;
  const Scalar _tmp158 = _tmp109 * _tmp152 + _tmp113 * _tmp157;
  const Scalar _tmp159 = _tmp117 * _tmp158 - _tmp119 * _tmp158 + _tmp152 * _tmp88;
  const Scalar _tmp160 = _tmp136 * _tmp158 - _tmp137 * _tmp158 + _tmp157 * _tmp88;
  const Scalar _tmp161 = _tmp148 * _tmp45;
  const Scalar _tmp162 = _tmp150 * _tmp60;
  const Scalar _tmp163 = _tmp161 - _tmp162;
  const Scalar _tmp164 = _tmp155 * _tmp67;
  const Scalar _tmp165 = _tmp153 * _tmp60;
  const Scalar _tmp166 = _tmp164 - _tmp165;
  const Scalar _tmp167 = _tmp109 * _tmp163 + _tmp113 * _tmp166;
  const Scalar _tmp168 = _tmp117 * _tmp167 - _tmp119 * _tmp167 + _tmp163 * _tmp88;
  const Scalar _tmp169 = _tmp136 * _tmp167 - _tmp137 * _tmp167 + _tmp166 * _tmp88;
  const Scalar _tmp170 = _tmp148 * _tmp33;
  const Scalar _tmp171 = _tmp150 * _tmp55;
  const Scalar _tmp172 = _tmp170 - _tmp171;
  const Scalar _tmp173 = _tmp153 * _tmp55;
  const Scalar _tmp174 = _tmp155 * _tmp70;
  const Scalar _tmp175 = -_tmp173 + _tmp174;
  const Scalar _tmp176 = _tmp109 * _tmp172 + _tmp113 * _tmp175;
  const Scalar _tmp177 = _tmp117 * _tmp176 - _tmp119 * _tmp176 + _tmp172 * _tmp88;
  const Scalar _tmp178 = _tmp136 * _tmp176 - _tmp137 * _tmp176 + _tmp175 * _tmp88;
  const Scalar _tmp179 = -_tmp44;
  const Scalar _tmp180 = -_tmp57;
  const Scalar _tmp181 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp182 = -_tmp181;
  const Scalar _tmp183 = -_tmp0;
  const Scalar _tmp184 = _tmp103 * _tmp104 *
                         (_tmp27 * (_tmp179 + _tmp43) + _tmp42 * (_tmp180 + _tmp59) +
                          _tmp50 * (_tmp182 + _tmp183 + _tmp2 + _tmp53));
  const Scalar _tmp185 = (Scalar(1) / Scalar(2)) * _tmp184;
  const Scalar _tmp186 = _tmp181 + _tmp183;
  const Scalar _tmp187 = -_tmp53;
  const Scalar _tmp188 = _tmp187 + _tmp2;
  const Scalar _tmp189 = -_tmp110 * _tmp185 + _tmp73 * (_tmp42 * (_tmp186 + _tmp188) + _tmp61);
  const Scalar _tmp190 = -_tmp106 * _tmp184 * _tmp66 + _tmp113 * _tmp189;
  const Scalar _tmp191 = -_tmp106 * _tmp185 * _tmp88 + _tmp117 * _tmp190 - _tmp119 * _tmp190;
  const Scalar _tmp192 = _tmp136 * _tmp190 - _tmp137 * _tmp190 + _tmp189 * _tmp88;
  const Scalar _tmp193 = -_tmp2;
  const Scalar _tmp194 = _tmp193 + _tmp53;
  const Scalar _tmp195 = _tmp27 * (_tmp186 + _tmp194) + _tmp51;
  const Scalar _tmp196 = -_tmp29;
  const Scalar _tmp197 = _tmp0 + _tmp182;
  const Scalar _tmp198 =
      -_tmp107 * _tmp195 + _tmp65 * (_tmp27 * (_tmp196 + _tmp32) + _tmp42 * (_tmp194 + _tmp197) +
                                     _tmp50 * (_tmp180 + _tmp58));
  const Scalar _tmp199 = -_tmp103 * _tmp104 * _tmp110 * _tmp195 * _tmp74 + _tmp109 * _tmp198;
  const Scalar _tmp200 = _tmp117 * _tmp199 - _tmp119 * _tmp199 + _tmp198 * _tmp88;
  const Scalar _tmp201 = -_tmp111 * _tmp195 * _tmp88 + _tmp136 * _tmp199 - _tmp137 * _tmp199;
  const Scalar _tmp202 = _tmp65 * (_tmp50 * (_tmp0 + _tmp181 + _tmp187 + _tmp193) + _tmp71);
  const Scalar _tmp203 = _tmp73 * (_tmp27 * (_tmp188 + _tmp197) + _tmp42 * (_tmp196 + _tmp31) +
                                   _tmp50 * (_tmp179 + _tmp68));
  const Scalar _tmp204 = _tmp109 * _tmp202 + _tmp113 * _tmp203;
  const Scalar _tmp205 = _tmp117 * _tmp204 - _tmp119 * _tmp204 + _tmp202 * _tmp88;
  const Scalar _tmp206 = _tmp136 * _tmp204 - _tmp137 * _tmp204 + _tmp203 * _tmp88;
  const Scalar _tmp207 = -_tmp149 + _tmp151;
  const Scalar _tmp208 = _tmp154 - _tmp156;
  const Scalar _tmp209 = _tmp109 * _tmp207 + _tmp113 * _tmp208;
  const Scalar _tmp210 = _tmp117 * _tmp209 - _tmp119 * _tmp209 + _tmp207 * _tmp88;
  const Scalar _tmp211 = _tmp136 * _tmp209 - _tmp137 * _tmp209 + _tmp208 * _tmp88;
  const Scalar _tmp212 = -_tmp161 + _tmp162;
  const Scalar _tmp213 = -_tmp164 + _tmp165;
  const Scalar _tmp214 = _tmp109 * _tmp212 + _tmp113 * _tmp213;
  const Scalar _tmp215 = _tmp117 * _tmp214 - _tmp119 * _tmp214 + _tmp212 * _tmp88;
  const Scalar _tmp216 = _tmp136 * _tmp214 - _tmp137 * _tmp214 + _tmp213 * _tmp88;
  const Scalar _tmp217 = -_tmp170 + _tmp171;
  const Scalar _tmp218 = _tmp173 - _tmp174;
  const Scalar _tmp219 = _tmp109 * _tmp217 + _tmp113 * _tmp218;
  const Scalar _tmp220 = _tmp117 * _tmp219 - _tmp119 * _tmp219 + _tmp217 * _tmp88;
  const Scalar _tmp221 = _tmp136 * _tmp219 - _tmp137 * _tmp219 + _tmp218 * _tmp88;
  const Scalar _tmp222 = _tmp23 * _tmp56 + _tmp39 * _tmp55 + _tmp47 * _tmp60;
  const Scalar _tmp223 =
      -_tmp107 * _tmp222 + _tmp65 * (_tmp23 * _tmp4 + _tmp33 * _tmp39 + _tmp45 * _tmp47);
  const Scalar _tmp224 =
      -_tmp111 * _tmp222 + _tmp73 * (_tmp23 * _tmp69 + _tmp39 * _tmp70 + _tmp47 * _tmp67);
  const Scalar _tmp225 = _tmp109 * _tmp223 + _tmp113 * _tmp224;
  const Scalar _tmp226 = _tmp117 * _tmp225 - _tmp119 * _tmp225 + _tmp223 * _tmp88;
  const Scalar _tmp227 = _tmp136 * _tmp225 - _tmp137 * _tmp225 + _tmp224 * _tmp88;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp89;
    _res(1, 0) = _tmp90;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp120;
    _jacobian(1, 0) = _tmp123;
    _jacobian(0, 1) = _tmp135;
    _jacobian(1, 1) = _tmp138;
    _jacobian(0, 2) = _tmp146;
    _jacobian(1, 2) = _tmp147;
    _jacobian(0, 3) = _tmp159;
    _jacobian(1, 3) = _tmp160;
    _jacobian(0, 4) = _tmp168;
    _jacobian(1, 4) = _tmp169;
    _jacobian(0, 5) = _tmp177;
    _jacobian(1, 5) = _tmp178;
    _jacobian(0, 6) = _tmp191;
    _jacobian(1, 6) = _tmp192;
    _jacobian(0, 7) = _tmp200;
    _jacobian(1, 7) = _tmp201;
    _jacobian(0, 8) = _tmp205;
    _jacobian(1, 8) = _tmp206;
    _jacobian(0, 9) = _tmp210;
    _jacobian(1, 9) = _tmp211;
    _jacobian(0, 10) = _tmp215;
    _jacobian(1, 10) = _tmp216;
    _jacobian(0, 11) = _tmp220;
    _jacobian(1, 11) = _tmp221;
    _jacobian(0, 12) = _tmp226;
    _jacobian(1, 12) = _tmp227;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp120, Scalar(2)) + std::pow(_tmp123, Scalar(2));
    _hessian(1, 0) = _tmp120 * _tmp135 + _tmp123 * _tmp138;
    _hessian(2, 0) = _tmp120 * _tmp146 + _tmp123 * _tmp147;
    _hessian(3, 0) = _tmp120 * _tmp159 + _tmp123 * _tmp160;
    _hessian(4, 0) = _tmp120 * _tmp168 + _tmp123 * _tmp169;
    _hessian(5, 0) = _tmp120 * _tmp177 + _tmp123 * _tmp178;
    _hessian(6, 0) = _tmp120 * _tmp191 + _tmp123 * _tmp192;
    _hessian(7, 0) = _tmp120 * _tmp200 + _tmp123 * _tmp201;
    _hessian(8, 0) = _tmp120 * _tmp205 + _tmp123 * _tmp206;
    _hessian(9, 0) = _tmp120 * _tmp210 + _tmp123 * _tmp211;
    _hessian(10, 0) = _tmp120 * _tmp215 + _tmp123 * _tmp216;
    _hessian(11, 0) = _tmp120 * _tmp220 + _tmp123 * _tmp221;
    _hessian(12, 0) = _tmp120 * _tmp226 + _tmp123 * _tmp227;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp135, Scalar(2)) + std::pow(_tmp138, Scalar(2));
    _hessian(2, 1) = _tmp135 * _tmp146 + _tmp138 * _tmp147;
    _hessian(3, 1) = _tmp135 * _tmp159 + _tmp138 * _tmp160;
    _hessian(4, 1) = _tmp135 * _tmp168 + _tmp138 * _tmp169;
    _hessian(5, 1) = _tmp135 * _tmp177 + _tmp138 * _tmp178;
    _hessian(6, 1) = _tmp135 * _tmp191 + _tmp138 * _tmp192;
    _hessian(7, 1) = _tmp135 * _tmp200 + _tmp138 * _tmp201;
    _hessian(8, 1) = _tmp135 * _tmp205 + _tmp138 * _tmp206;
    _hessian(9, 1) = _tmp135 * _tmp210 + _tmp138 * _tmp211;
    _hessian(10, 1) = _tmp135 * _tmp215 + _tmp138 * _tmp216;
    _hessian(11, 1) = _tmp135 * _tmp220 + _tmp138 * _tmp221;
    _hessian(12, 1) = _tmp135 * _tmp226 + _tmp138 * _tmp227;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp146, Scalar(2)) + std::pow(_tmp147, Scalar(2));
    _hessian(3, 2) = _tmp146 * _tmp159 + _tmp147 * _tmp160;
    _hessian(4, 2) = _tmp146 * _tmp168 + _tmp147 * _tmp169;
    _hessian(5, 2) = _tmp146 * _tmp177 + _tmp147 * _tmp178;
    _hessian(6, 2) = _tmp146 * _tmp191 + _tmp147 * _tmp192;
    _hessian(7, 2) = _tmp146 * _tmp200 + _tmp147 * _tmp201;
    _hessian(8, 2) = _tmp146 * _tmp205 + _tmp147 * _tmp206;
    _hessian(9, 2) = _tmp146 * _tmp210 + _tmp147 * _tmp211;
    _hessian(10, 2) = _tmp146 * _tmp215 + _tmp147 * _tmp216;
    _hessian(11, 2) = _tmp146 * _tmp220 + _tmp147 * _tmp221;
    _hessian(12, 2) = _tmp146 * _tmp226 + _tmp147 * _tmp227;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp159, Scalar(2)) + std::pow(_tmp160, Scalar(2));
    _hessian(4, 3) = _tmp159 * _tmp168 + _tmp160 * _tmp169;
    _hessian(5, 3) = _tmp159 * _tmp177 + _tmp160 * _tmp178;
    _hessian(6, 3) = _tmp159 * _tmp191 + _tmp160 * _tmp192;
    _hessian(7, 3) = _tmp159 * _tmp200 + _tmp160 * _tmp201;
    _hessian(8, 3) = _tmp159 * _tmp205 + _tmp160 * _tmp206;
    _hessian(9, 3) = _tmp159 * _tmp210 + _tmp160 * _tmp211;
    _hessian(10, 3) = _tmp159 * _tmp215 + _tmp160 * _tmp216;
    _hessian(11, 3) = _tmp159 * _tmp220 + _tmp160 * _tmp221;
    _hessian(12, 3) = _tmp159 * _tmp226 + _tmp160 * _tmp227;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp168, Scalar(2)) + std::pow(_tmp169, Scalar(2));
    _hessian(5, 4) = _tmp168 * _tmp177 + _tmp169 * _tmp178;
    _hessian(6, 4) = _tmp168 * _tmp191 + _tmp169 * _tmp192;
    _hessian(7, 4) = _tmp168 * _tmp200 + _tmp169 * _tmp201;
    _hessian(8, 4) = _tmp168 * _tmp205 + _tmp169 * _tmp206;
    _hessian(9, 4) = _tmp168 * _tmp210 + _tmp169 * _tmp211;
    _hessian(10, 4) = _tmp168 * _tmp215 + _tmp169 * _tmp216;
    _hessian(11, 4) = _tmp168 * _tmp220 + _tmp169 * _tmp221;
    _hessian(12, 4) = _tmp168 * _tmp226 + _tmp169 * _tmp227;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp177, Scalar(2)) + std::pow(_tmp178, Scalar(2));
    _hessian(6, 5) = _tmp177 * _tmp191 + _tmp178 * _tmp192;
    _hessian(7, 5) = _tmp177 * _tmp200 + _tmp178 * _tmp201;
    _hessian(8, 5) = _tmp177 * _tmp205 + _tmp178 * _tmp206;
    _hessian(9, 5) = _tmp177 * _tmp210 + _tmp178 * _tmp211;
    _hessian(10, 5) = _tmp177 * _tmp215 + _tmp178 * _tmp216;
    _hessian(11, 5) = _tmp177 * _tmp220 + _tmp178 * _tmp221;
    _hessian(12, 5) = _tmp177 * _tmp226 + _tmp178 * _tmp227;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp191, Scalar(2)) + std::pow(_tmp192, Scalar(2));
    _hessian(7, 6) = _tmp191 * _tmp200 + _tmp192 * _tmp201;
    _hessian(8, 6) = _tmp191 * _tmp205 + _tmp192 * _tmp206;
    _hessian(9, 6) = _tmp191 * _tmp210 + _tmp192 * _tmp211;
    _hessian(10, 6) = _tmp191 * _tmp215 + _tmp192 * _tmp216;
    _hessian(11, 6) = _tmp191 * _tmp220 + _tmp192 * _tmp221;
    _hessian(12, 6) = _tmp191 * _tmp226 + _tmp192 * _tmp227;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp200, Scalar(2)) + std::pow(_tmp201, Scalar(2));
    _hessian(8, 7) = _tmp200 * _tmp205 + _tmp201 * _tmp206;
    _hessian(9, 7) = _tmp200 * _tmp210 + _tmp201 * _tmp211;
    _hessian(10, 7) = _tmp200 * _tmp215 + _tmp201 * _tmp216;
    _hessian(11, 7) = _tmp200 * _tmp220 + _tmp201 * _tmp221;
    _hessian(12, 7) = _tmp200 * _tmp226 + _tmp201 * _tmp227;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp205, Scalar(2)) + std::pow(_tmp206, Scalar(2));
    _hessian(9, 8) = _tmp205 * _tmp210 + _tmp206 * _tmp211;
    _hessian(10, 8) = _tmp205 * _tmp215 + _tmp206 * _tmp216;
    _hessian(11, 8) = _tmp205 * _tmp220 + _tmp206 * _tmp221;
    _hessian(12, 8) = _tmp205 * _tmp226 + _tmp206 * _tmp227;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp210, Scalar(2)) + std::pow(_tmp211, Scalar(2));
    _hessian(10, 9) = _tmp210 * _tmp215 + _tmp211 * _tmp216;
    _hessian(11, 9) = _tmp210 * _tmp220 + _tmp211 * _tmp221;
    _hessian(12, 9) = _tmp210 * _tmp226 + _tmp211 * _tmp227;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp215, Scalar(2)) + std::pow(_tmp216, Scalar(2));
    _hessian(11, 10) = _tmp215 * _tmp220 + _tmp216 * _tmp221;
    _hessian(12, 10) = _tmp215 * _tmp226 + _tmp216 * _tmp227;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp220, Scalar(2)) + std::pow(_tmp221, Scalar(2));
    _hessian(12, 11) = _tmp220 * _tmp226 + _tmp221 * _tmp227;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp226, Scalar(2)) + std::pow(_tmp227, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp120 * _tmp89 + _tmp123 * _tmp90;
    _rhs(1, 0) = _tmp135 * _tmp89 + _tmp138 * _tmp90;
    _rhs(2, 0) = _tmp146 * _tmp89 + _tmp147 * _tmp90;
    _rhs(3, 0) = _tmp159 * _tmp89 + _tmp160 * _tmp90;
    _rhs(4, 0) = _tmp168 * _tmp89 + _tmp169 * _tmp90;
    _rhs(5, 0) = _tmp177 * _tmp89 + _tmp178 * _tmp90;
    _rhs(6, 0) = _tmp191 * _tmp89 + _tmp192 * _tmp90;
    _rhs(7, 0) = _tmp200 * _tmp89 + _tmp201 * _tmp90;
    _rhs(8, 0) = _tmp205 * _tmp89 + _tmp206 * _tmp90;
    _rhs(9, 0) = _tmp210 * _tmp89 + _tmp211 * _tmp90;
    _rhs(10, 0) = _tmp215 * _tmp89 + _tmp216 * _tmp90;
    _rhs(11, 0) = _tmp220 * _tmp89 + _tmp221 * _tmp90;
    _rhs(12, 0) = _tmp226 * _tmp89 + _tmp227 * _tmp90;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
