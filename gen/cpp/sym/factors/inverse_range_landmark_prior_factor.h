// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * Factor representing a Gaussian prior on the inverse range of a landmark
 *
 * Args:
 *     landmark_inverse_range: The current inverse range estimate
 *     inverse_range_prior: The mean of the inverse range prior
 *     weight: The weight of the prior
 *     sigma: The standard deviation of the prior
 *     epsilon: Small positive value
 *
 * Outputs:
 *     res: 1dof residual of the prior
 *     jacobian: (1x1) jacobian of res wrt arg landmark_inverse_range (1)
 *     hessian: (1x1) Gauss-Newton hessian for arg landmark_inverse_range (1)
 *     rhs: (1x1) Gauss-Newton rhs for arg landmark_inverse_range (1)
 */
template <typename Scalar>
void InverseRangeLandmarkPriorFactor(const Scalar landmark_inverse_range,
                                     const Scalar inverse_range_prior, const Scalar weight,
                                     const Scalar sigma, const Scalar epsilon,
                                     Eigen::Matrix<Scalar, 1, 1>* const res = nullptr,
                                     Eigen::Matrix<Scalar, 1, 1>* const jacobian = nullptr,
                                     Eigen::Matrix<Scalar, 1, 1>* const hessian = nullptr,
                                     Eigen::Matrix<Scalar, 1, 1>* const rhs = nullptr) {
  // Total ops: 8

  // Input arrays

  // Intermediate terms (4)
  const Scalar _tmp0 = -inverse_range_prior + landmark_inverse_range;
  const Scalar _tmp1 = epsilon + sigma;
  const Scalar _tmp2 = weight / _tmp1;
  const Scalar _tmp3 = std::pow(weight, Scalar(2)) / std::pow(_tmp1, Scalar(2));

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _res = (*res);

    _res(0, 0) = _tmp0 * _tmp2;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp2;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _hessian = (*hessian);

    _hessian(0, 0) = _tmp3;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 1, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp0 * _tmp3;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
