// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (6x6) jacobian of res wrt arg value (6)
 *     hessian: (6x6) Gauss-Newton hessian for arg value (6)
 *     rhs: (6x1) Gauss-Newton rhs for arg value (6)
 */
template <typename Scalar>
void PriorFactorPose3(const sym::Pose3<Scalar>& value, const sym::Pose3<Scalar>& prior,
                      const Eigen::Matrix<Scalar, 6, 6>& sqrt_info, const Scalar epsilon,
                      Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                      Eigen::Matrix<Scalar, 6, 6>* const jacobian = nullptr,
                      Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                      Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 427

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _prior = prior.Data();

  // Intermediate terms (99)
  const Scalar _tmp0 = _prior[3] * _value[3];
  const Scalar _tmp1 = _prior[2] * _value[2];
  const Scalar _tmp2 = _prior[1] * _value[1];
  const Scalar _tmp3 = _prior[0] * _value[0];
  const Scalar _tmp4 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = std::fabs(_tmp4);
  const Scalar _tmp6 = 1 - epsilon;
  const Scalar _tmp7 = std::min<Scalar>(_tmp5, _tmp6);
  const Scalar _tmp8 = 1 - std::pow(_tmp7, Scalar(2));
  const Scalar _tmp9 = 2 / std::sqrt(_tmp8);
  const Scalar _tmp10 = (((_tmp4) > 0) - ((_tmp4) < 0));
  const Scalar _tmp11 = 2 * std::min<Scalar>(0, _tmp10) + 1;
  const Scalar _tmp12 = std::acos(_tmp7);
  const Scalar _tmp13 = _tmp11 * _tmp12;
  const Scalar _tmp14 = _tmp13 * _tmp9;
  const Scalar _tmp15 = _prior[2] * _value[3];
  const Scalar _tmp16 = _prior[1] * _value[0];
  const Scalar _tmp17 = _prior[0] * _value[1];
  const Scalar _tmp18 = _prior[3] * _value[2];
  const Scalar _tmp19 = -_tmp15 + _tmp16 - _tmp17 + _tmp18;
  const Scalar _tmp20 = _tmp19 * sqrt_info(0, 2);
  const Scalar _tmp21 = -_prior[6] + _value[6];
  const Scalar _tmp22 = -_prior[5] + _value[5];
  const Scalar _tmp23 = -_prior[4] + _value[4];
  const Scalar _tmp24 = _prior[2] * _value[0];
  const Scalar _tmp25 = _prior[1] * _value[3];
  const Scalar _tmp26 = _prior[0] * _value[2];
  const Scalar _tmp27 = _prior[3] * _value[1];
  const Scalar _tmp28 = -_tmp24 - _tmp25 + _tmp26 + _tmp27;
  const Scalar _tmp29 = _tmp14 * _tmp28;
  const Scalar _tmp30 = _prior[2] * _value[1];
  const Scalar _tmp31 = _prior[1] * _value[2];
  const Scalar _tmp32 = _prior[0] * _value[3];
  const Scalar _tmp33 = _prior[3] * _value[0];
  const Scalar _tmp34 = _tmp30 - _tmp31 - _tmp32 + _tmp33;
  const Scalar _tmp35 = _tmp11 * sqrt_info(0, 0);
  const Scalar _tmp36 = _tmp12 * _tmp35;
  const Scalar _tmp37 = _tmp36 * _tmp9;
  const Scalar _tmp38 = _tmp14 * _tmp20 + _tmp21 * sqrt_info(0, 5) + _tmp22 * sqrt_info(0, 4) +
                        _tmp23 * sqrt_info(0, 3) + _tmp29 * sqrt_info(0, 1) + _tmp34 * _tmp37;
  const Scalar _tmp39 = _tmp14 * _tmp19;
  const Scalar _tmp40 = _tmp21 * sqrt_info(1, 5) + _tmp22 * sqrt_info(1, 4) +
                        _tmp23 * sqrt_info(1, 3) + _tmp29 * sqrt_info(1, 1) +
                        _tmp39 * sqrt_info(1, 2);
  const Scalar _tmp41 = _tmp21 * sqrt_info(2, 5) + _tmp22 * sqrt_info(2, 4) +
                        _tmp23 * sqrt_info(2, 3) + _tmp39 * sqrt_info(2, 2);
  const Scalar _tmp42 =
      _tmp21 * sqrt_info(3, 5) + _tmp22 * sqrt_info(3, 4) + _tmp23 * sqrt_info(3, 3);
  const Scalar _tmp43 = _tmp21 * sqrt_info(4, 5) + _tmp22 * sqrt_info(4, 4);
  const Scalar _tmp44 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp45 = (Scalar(1) / Scalar(2)) * _tmp31;
  const Scalar _tmp46 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp48 = -_tmp44 + _tmp45 + _tmp46 - _tmp47;
  const Scalar _tmp49 = _tmp34 * _tmp48;
  const Scalar _tmp50 = _tmp10 * ((((-_tmp5 + _tmp6) > 0) - ((-_tmp5 + _tmp6) < 0)) + 1);
  const Scalar _tmp51 = _tmp50 / _tmp8;
  const Scalar _tmp52 = _tmp35 * _tmp51;
  const Scalar _tmp53 = _tmp28 * sqrt_info(0, 1);
  const Scalar _tmp54 = _tmp50 * _tmp7 / (_tmp8 * std::sqrt(_tmp8));
  const Scalar _tmp55 = _tmp13 * _tmp54;
  const Scalar _tmp56 = _tmp53 * _tmp55;
  const Scalar _tmp57 = _tmp11 * _tmp51;
  const Scalar _tmp58 = _tmp48 * _tmp57;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp63 = _tmp14 * (-_tmp59 + _tmp60 - _tmp61 + _tmp62);
  const Scalar _tmp64 = _tmp48 * _tmp55;
  const Scalar _tmp65 = _tmp36 * _tmp54;
  const Scalar _tmp66 = _tmp9 * ((Scalar(1) / Scalar(2)) * _tmp0 + (Scalar(1) / Scalar(2)) * _tmp1 +
                                 (Scalar(1) / Scalar(2)) * _tmp2 + (Scalar(1) / Scalar(2)) * _tmp3);
  const Scalar _tmp67 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp68 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp69 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp70 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp71 = _tmp67 + _tmp68 - _tmp69 - _tmp70;
  const Scalar _tmp72 = _tmp14 * _tmp71;
  const Scalar _tmp73 = -_tmp20 * _tmp58 + _tmp20 * _tmp64 + _tmp36 * _tmp66 + _tmp48 * _tmp56 -
                        _tmp49 * _tmp52 + _tmp49 * _tmp65 - _tmp53 * _tmp58 +
                        _tmp63 * sqrt_info(0, 1) + _tmp72 * sqrt_info(0, 2);
  const Scalar _tmp74 = _tmp28 * sqrt_info(1, 1);
  const Scalar _tmp75 = _tmp19 * sqrt_info(1, 2);
  const Scalar _tmp76 = -_tmp58 * _tmp74 - _tmp58 * _tmp75 + _tmp63 * sqrt_info(1, 1) +
                        _tmp64 * _tmp74 + _tmp64 * _tmp75 + _tmp72 * sqrt_info(1, 2);
  const Scalar _tmp77 = _tmp19 * sqrt_info(2, 2);
  const Scalar _tmp78 = _tmp57 * sqrt_info(2, 2);
  const Scalar _tmp79 = -_tmp19 * _tmp48 * _tmp78 + _tmp64 * _tmp77 + _tmp72 * sqrt_info(2, 2);
  const Scalar _tmp80 = _tmp57 * _tmp71;
  const Scalar _tmp81 = _tmp59 - _tmp60 + _tmp61 - _tmp62;
  const Scalar _tmp82 = _tmp34 * _tmp65;
  const Scalar _tmp83 = _tmp55 * _tmp71;
  const Scalar _tmp84 = _tmp34 * _tmp52;
  const Scalar _tmp85 = _tmp14 * (_tmp44 - _tmp45 - _tmp46 + _tmp47);
  const Scalar _tmp86 = _tmp13 * _tmp66;
  const Scalar _tmp87 = -_tmp20 * _tmp80 + _tmp20 * _tmp83 + _tmp37 * _tmp81 - _tmp53 * _tmp80 +
                        _tmp56 * _tmp71 + _tmp71 * _tmp82 - _tmp71 * _tmp84 +
                        _tmp85 * sqrt_info(0, 2) + _tmp86 * sqrt_info(0, 1);
  const Scalar _tmp88 = -_tmp74 * _tmp80 + _tmp74 * _tmp83 - _tmp75 * _tmp80 + _tmp75 * _tmp83 +
                        _tmp85 * sqrt_info(1, 2) + _tmp86 * sqrt_info(1, 1);
  const Scalar _tmp89 = -_tmp77 * _tmp80 + _tmp77 * _tmp83 + _tmp85 * sqrt_info(2, 2);
  const Scalar _tmp90 = _tmp57 * _tmp81;
  const Scalar _tmp91 = _tmp55 * _tmp81;
  const Scalar _tmp92 = _tmp14 * _tmp48;
  const Scalar _tmp93 = -_tmp20 * _tmp90 + _tmp20 * _tmp91 +
                        _tmp37 * (-_tmp67 - _tmp68 + _tmp69 + _tmp70) - _tmp53 * _tmp90 +
                        _tmp56 * _tmp81 + _tmp81 * _tmp82 - _tmp81 * _tmp84 +
                        _tmp86 * sqrt_info(0, 2) + _tmp92 * sqrt_info(0, 1);
  const Scalar _tmp94 = _tmp19 * _tmp81;
  const Scalar _tmp95 = _tmp94 * sqrt_info(1, 2);
  const Scalar _tmp96 = _tmp55 * _tmp95 - _tmp57 * _tmp95 - _tmp74 * _tmp90 + _tmp74 * _tmp91 +
                        _tmp86 * sqrt_info(1, 2) + _tmp92 * sqrt_info(1, 1);
  const Scalar _tmp97 =
      _tmp55 * _tmp94 * sqrt_info(2, 2) - _tmp78 * _tmp94 + _tmp86 * sqrt_info(2, 2);
  const Scalar _tmp98 = std::pow(sqrt_info(5, 5), Scalar(2));

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp38;
    _res(1, 0) = _tmp40;
    _res(2, 0) = _tmp41;
    _res(3, 0) = _tmp42;
    _res(4, 0) = _tmp43;
    _res(5, 0) = _tmp21 * sqrt_info(5, 5);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp73;
    _jacobian(1, 0) = _tmp76;
    _jacobian(2, 0) = _tmp79;
    _jacobian(3, 0) = 0;
    _jacobian(4, 0) = 0;
    _jacobian(5, 0) = 0;
    _jacobian(0, 1) = _tmp87;
    _jacobian(1, 1) = _tmp88;
    _jacobian(2, 1) = _tmp89;
    _jacobian(3, 1) = 0;
    _jacobian(4, 1) = 0;
    _jacobian(5, 1) = 0;
    _jacobian(0, 2) = _tmp93;
    _jacobian(1, 2) = _tmp96;
    _jacobian(2, 2) = _tmp97;
    _jacobian(3, 2) = 0;
    _jacobian(4, 2) = 0;
    _jacobian(5, 2) = 0;
    _jacobian(0, 3) = sqrt_info(0, 3);
    _jacobian(1, 3) = sqrt_info(1, 3);
    _jacobian(2, 3) = sqrt_info(2, 3);
    _jacobian(3, 3) = sqrt_info(3, 3);
    _jacobian(4, 3) = 0;
    _jacobian(5, 3) = 0;
    _jacobian(0, 4) = sqrt_info(0, 4);
    _jacobian(1, 4) = sqrt_info(1, 4);
    _jacobian(2, 4) = sqrt_info(2, 4);
    _jacobian(3, 4) = sqrt_info(3, 4);
    _jacobian(4, 4) = sqrt_info(4, 4);
    _jacobian(5, 4) = 0;
    _jacobian(0, 5) = sqrt_info(0, 5);
    _jacobian(1, 5) = sqrt_info(1, 5);
    _jacobian(2, 5) = sqrt_info(2, 5);
    _jacobian(3, 5) = sqrt_info(3, 5);
    _jacobian(4, 5) = sqrt_info(4, 5);
    _jacobian(5, 5) = sqrt_info(5, 5);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp73, Scalar(2)) + std::pow(_tmp76, Scalar(2)) + std::pow(_tmp79, Scalar(2));
    _hessian(1, 0) = _tmp73 * _tmp87 + _tmp76 * _tmp88 + _tmp79 * _tmp89;
    _hessian(2, 0) = _tmp73 * _tmp93 + _tmp76 * _tmp96 + _tmp79 * _tmp97;
    _hessian(3, 0) = _tmp73 * sqrt_info(0, 3) + _tmp76 * sqrt_info(1, 3) + _tmp79 * sqrt_info(2, 3);
    _hessian(4, 0) = _tmp73 * sqrt_info(0, 4) + _tmp76 * sqrt_info(1, 4) + _tmp79 * sqrt_info(2, 4);
    _hessian(5, 0) = _tmp73 * sqrt_info(0, 5) + _tmp76 * sqrt_info(1, 5) + _tmp79 * sqrt_info(2, 5);
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        std::pow(_tmp87, Scalar(2)) + std::pow(_tmp88, Scalar(2)) + std::pow(_tmp89, Scalar(2));
    _hessian(2, 1) = _tmp87 * _tmp93 + _tmp88 * _tmp96 + _tmp89 * _tmp97;
    _hessian(3, 1) = _tmp87 * sqrt_info(0, 3) + _tmp88 * sqrt_info(1, 3) + _tmp89 * sqrt_info(2, 3);
    _hessian(4, 1) = _tmp87 * sqrt_info(0, 4) + _tmp88 * sqrt_info(1, 4) + _tmp89 * sqrt_info(2, 4);
    _hessian(5, 1) = _tmp87 * sqrt_info(0, 5) + _tmp88 * sqrt_info(1, 5) + _tmp89 * sqrt_info(2, 5);
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) =
        std::pow(_tmp93, Scalar(2)) + std::pow(_tmp96, Scalar(2)) + std::pow(_tmp97, Scalar(2));
    _hessian(3, 2) = _tmp93 * sqrt_info(0, 3) + _tmp96 * sqrt_info(1, 3) + _tmp97 * sqrt_info(2, 3);
    _hessian(4, 2) = _tmp93 * sqrt_info(0, 4) + _tmp96 * sqrt_info(1, 4) + _tmp97 * sqrt_info(2, 4);
    _hessian(5, 2) = _tmp93 * sqrt_info(0, 5) + _tmp96 * sqrt_info(1, 5) + _tmp97 * sqrt_info(2, 5);
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(sqrt_info(0, 3), Scalar(2)) + std::pow(sqrt_info(1, 3), Scalar(2)) +
                     std::pow(sqrt_info(2, 3), Scalar(2)) + std::pow(sqrt_info(3, 3), Scalar(2));
    _hessian(4, 3) = sqrt_info(0, 3) * sqrt_info(0, 4) + sqrt_info(1, 3) * sqrt_info(1, 4) +
                     sqrt_info(2, 3) * sqrt_info(2, 4) + sqrt_info(3, 3) * sqrt_info(3, 4);
    _hessian(5, 3) = sqrt_info(0, 3) * sqrt_info(0, 5) + sqrt_info(1, 3) * sqrt_info(1, 5) +
                     sqrt_info(2, 3) * sqrt_info(2, 5) + sqrt_info(3, 3) * sqrt_info(3, 5);
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(sqrt_info(0, 4), Scalar(2)) + std::pow(sqrt_info(1, 4), Scalar(2)) +
                     std::pow(sqrt_info(2, 4), Scalar(2)) + std::pow(sqrt_info(3, 4), Scalar(2)) +
                     std::pow(sqrt_info(4, 4), Scalar(2));
    _hessian(5, 4) = sqrt_info(0, 4) * sqrt_info(0, 5) + sqrt_info(1, 4) * sqrt_info(1, 5) +
                     sqrt_info(2, 4) * sqrt_info(2, 5) + sqrt_info(3, 4) * sqrt_info(3, 5) +
                     sqrt_info(4, 4) * sqrt_info(4, 5);
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = _tmp98 + std::pow(sqrt_info(0, 5), Scalar(2)) +
                     std::pow(sqrt_info(1, 5), Scalar(2)) + std::pow(sqrt_info(2, 5), Scalar(2)) +
                     std::pow(sqrt_info(3, 5), Scalar(2)) + std::pow(sqrt_info(4, 5), Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp38 * _tmp73 + _tmp40 * _tmp76 + _tmp41 * _tmp79;
    _rhs(1, 0) = _tmp38 * _tmp87 + _tmp40 * _tmp88 + _tmp41 * _tmp89;
    _rhs(2, 0) = _tmp38 * _tmp93 + _tmp40 * _tmp96 + _tmp41 * _tmp97;
    _rhs(3, 0) = _tmp38 * sqrt_info(0, 3) + _tmp40 * sqrt_info(1, 3) + _tmp41 * sqrt_info(2, 3) +
                 _tmp42 * sqrt_info(3, 3);
    _rhs(4, 0) = _tmp38 * sqrt_info(0, 4) + _tmp40 * sqrt_info(1, 4) + _tmp41 * sqrt_info(2, 4) +
                 _tmp42 * sqrt_info(3, 4) + _tmp43 * sqrt_info(4, 4);
    _rhs(5, 0) = _tmp21 * _tmp98 + _tmp38 * sqrt_info(0, 5) + _tmp40 * sqrt_info(1, 5) +
                 _tmp41 * sqrt_info(2, 5) + _tmp42 * sqrt_info(3, 5) + _tmp43 * sqrt_info(4, 5);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
