// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Pass in a single scalar if
 *                isotropic, a vector if diagonal, and a square matrix otherwise.
 *     jacobian: (6x6) jacobian of res wrt arg value (6)
 *     hessian: (6x6) Gauss-Newton hessian for arg value (6)
 *     rhs: (6x1) Gauss-Newton rhs for arg value (6)
 */
template <typename Scalar>
void PriorFactorPose3Diagonal(const sym::Pose3<Scalar>& value, const sym::Pose3<Scalar>& prior,
                              const Eigen::Matrix<Scalar, 6, 1>& sqrt_info, const Scalar epsilon,
                              Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                              Eigen::Matrix<Scalar, 6, 6>* const jacobian = nullptr,
                              Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                              Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 212

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _prior = prior.Data();

  // Intermediate terms (85)
  const Scalar _tmp0 = _prior[2] * _value[1];
  const Scalar _tmp1 = _prior[1] * _value[2];
  const Scalar _tmp2 = _prior[0] * _value[3];
  const Scalar _tmp3 = _prior[3] * _value[0];
  const Scalar _tmp4 = _tmp0 - _tmp1 - _tmp2 + _tmp3;
  const Scalar _tmp5 = _prior[3] * _value[3];
  const Scalar _tmp6 = _prior[2] * _value[2];
  const Scalar _tmp7 = _prior[1] * _value[1];
  const Scalar _tmp8 = _prior[0] * _value[0];
  const Scalar _tmp9 = _tmp5 + _tmp6 + _tmp7 + _tmp8;
  const Scalar _tmp10 = std::fabs(_tmp9);
  const Scalar _tmp11 = 1 - epsilon;
  const Scalar _tmp12 = std::min<Scalar>(_tmp10, _tmp11);
  const Scalar _tmp13 = std::acos(_tmp12);
  const Scalar _tmp14 = (((_tmp9) > 0) - ((_tmp9) < 0));
  const Scalar _tmp15 = 2 * std::min<Scalar>(0, _tmp14) + 1;
  const Scalar _tmp16 = _tmp15 * sqrt_info(0, 0);
  const Scalar _tmp17 = _tmp13 * _tmp16;
  const Scalar _tmp18 = 1 - std::pow(_tmp12, Scalar(2));
  const Scalar _tmp19 = 2 / std::sqrt(_tmp18);
  const Scalar _tmp20 = _tmp17 * _tmp19;
  const Scalar _tmp21 = _tmp20 * _tmp4;
  const Scalar _tmp22 = _tmp13 * _tmp15;
  const Scalar _tmp23 = _tmp19 * _tmp22;
  const Scalar _tmp24 = _prior[2] * _value[0];
  const Scalar _tmp25 = _prior[1] * _value[3];
  const Scalar _tmp26 = _prior[0] * _value[2];
  const Scalar _tmp27 = _prior[3] * _value[1];
  const Scalar _tmp28 = sqrt_info(1, 0) * (-_tmp24 - _tmp25 + _tmp26 + _tmp27);
  const Scalar _tmp29 = _tmp23 * _tmp28;
  const Scalar _tmp30 = _prior[2] * _value[3];
  const Scalar _tmp31 = _prior[1] * _value[0];
  const Scalar _tmp32 = _prior[0] * _value[1];
  const Scalar _tmp33 = _prior[3] * _value[2];
  const Scalar _tmp34 = -_tmp30 + _tmp31 - _tmp32 + _tmp33;
  const Scalar _tmp35 = _tmp23 * sqrt_info(2, 0);
  const Scalar _tmp36 = _tmp34 * _tmp35;
  const Scalar _tmp37 = -_prior[4] + _value[4];
  const Scalar _tmp38 = -_prior[5] + _value[5];
  const Scalar _tmp39 = -_prior[6] + _value[6];
  const Scalar _tmp40 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp41 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp42 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp43 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp44 = -_tmp40 + _tmp41 + _tmp42 - _tmp43;
  const Scalar _tmp45 = _tmp14 * ((((-_tmp10 + _tmp11) > 0) - ((-_tmp10 + _tmp11) < 0)) + 1);
  const Scalar _tmp46 = _tmp12 * _tmp45 / (_tmp18 * std::sqrt(_tmp18));
  const Scalar _tmp47 = _tmp17 * _tmp4 * _tmp46;
  const Scalar _tmp48 = _tmp16 * _tmp4;
  const Scalar _tmp49 = _tmp45 / _tmp18;
  const Scalar _tmp50 = _tmp44 * _tmp49;
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp5 + (Scalar(1) / Scalar(2)) * _tmp6 +
                        (Scalar(1) / Scalar(2)) * _tmp7 + (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp52 = _tmp20 * _tmp51 + _tmp44 * _tmp47 - _tmp48 * _tmp50;
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp31;
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp57 = _tmp23 * sqrt_info(1, 0);
  const Scalar _tmp58 = _tmp15 * _tmp28;
  const Scalar _tmp59 = _tmp22 * _tmp46;
  const Scalar _tmp60 = _tmp44 * _tmp59;
  const Scalar _tmp61 =
      _tmp28 * _tmp60 - _tmp50 * _tmp58 + _tmp57 * (-_tmp53 + _tmp54 - _tmp55 + _tmp56);
  const Scalar _tmp62 = _tmp34 * sqrt_info(2, 0);
  const Scalar _tmp63 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp64 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp65 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp66 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp67 = _tmp63 + _tmp64 - _tmp65 - _tmp66;
  const Scalar _tmp68 = _tmp15 * _tmp62;
  const Scalar _tmp69 = _tmp35 * _tmp67 - _tmp50 * _tmp68 + _tmp60 * _tmp62;
  const Scalar _tmp70 = _tmp49 * _tmp67;
  const Scalar _tmp71 = _tmp53 - _tmp54 + _tmp55 - _tmp56;
  const Scalar _tmp72 = _tmp20 * _tmp71 + _tmp47 * _tmp67 - _tmp48 * _tmp70;
  const Scalar _tmp73 = _tmp59 * _tmp67;
  const Scalar _tmp74 = _tmp28 * _tmp73 + _tmp51 * _tmp57 - _tmp58 * _tmp70;
  const Scalar _tmp75 =
      _tmp35 * (_tmp40 - _tmp41 - _tmp42 + _tmp43) + _tmp62 * _tmp73 - _tmp68 * _tmp70;
  const Scalar _tmp76 = _tmp49 * _tmp71;
  const Scalar _tmp77 =
      _tmp20 * (-_tmp63 - _tmp64 + _tmp65 + _tmp66) + _tmp47 * _tmp71 - _tmp48 * _tmp76;
  const Scalar _tmp78 = _tmp59 * _tmp71;
  const Scalar _tmp79 = _tmp15 * _tmp76;
  const Scalar _tmp80 = _tmp28 * _tmp78 - _tmp28 * _tmp79 + _tmp44 * _tmp57;
  const Scalar _tmp81 = _tmp35 * _tmp51 + _tmp62 * _tmp78 - _tmp62 * _tmp79;
  const Scalar _tmp82 = std::pow(sqrt_info(3, 0), Scalar(2));
  const Scalar _tmp83 = std::pow(sqrt_info(4, 0), Scalar(2));
  const Scalar _tmp84 = std::pow(sqrt_info(5, 0), Scalar(2));

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp21;
    _res(1, 0) = _tmp29;
    _res(2, 0) = _tmp36;
    _res(3, 0) = _tmp37 * sqrt_info(3, 0);
    _res(4, 0) = _tmp38 * sqrt_info(4, 0);
    _res(5, 0) = _tmp39 * sqrt_info(5, 0);
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _jacobian = (*jacobian);

    _jacobian.setZero();

    _jacobian(0, 0) = _tmp52;
    _jacobian(1, 0) = _tmp61;
    _jacobian(2, 0) = _tmp69;
    _jacobian(0, 1) = _tmp72;
    _jacobian(1, 1) = _tmp74;
    _jacobian(2, 1) = _tmp75;
    _jacobian(0, 2) = _tmp77;
    _jacobian(1, 2) = _tmp80;
    _jacobian(2, 2) = _tmp81;
    _jacobian(3, 3) = sqrt_info(3, 0);
    _jacobian(4, 4) = sqrt_info(4, 0);
    _jacobian(5, 5) = sqrt_info(5, 0);
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) =
        std::pow(_tmp52, Scalar(2)) + std::pow(_tmp61, Scalar(2)) + std::pow(_tmp69, Scalar(2));
    _hessian(1, 0) = _tmp52 * _tmp72 + _tmp61 * _tmp74 + _tmp69 * _tmp75;
    _hessian(2, 0) = _tmp52 * _tmp77 + _tmp61 * _tmp80 + _tmp69 * _tmp81;
    _hessian(1, 1) =
        std::pow(_tmp72, Scalar(2)) + std::pow(_tmp74, Scalar(2)) + std::pow(_tmp75, Scalar(2));
    _hessian(2, 1) = _tmp72 * _tmp77 + _tmp74 * _tmp80 + _tmp75 * _tmp81;
    _hessian(2, 2) =
        std::pow(_tmp77, Scalar(2)) + std::pow(_tmp80, Scalar(2)) + std::pow(_tmp81, Scalar(2));
    _hessian(3, 3) = _tmp82;
    _hessian(4, 4) = _tmp83;
    _hessian(5, 5) = _tmp84;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp21 * _tmp52 + _tmp29 * _tmp61 + _tmp36 * _tmp69;
    _rhs(1, 0) = _tmp21 * _tmp72 + _tmp29 * _tmp74 + _tmp36 * _tmp75;
    _rhs(2, 0) = _tmp21 * _tmp77 + _tmp29 * _tmp80 + _tmp36 * _tmp81;
    _rhs(3, 0) = _tmp37 * _tmp82;
    _rhs(4, 0) = _tmp38 * _tmp83;
    _rhs(5, 0) = _tmp39 * _tmp84;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
