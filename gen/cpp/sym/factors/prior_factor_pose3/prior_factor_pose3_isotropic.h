// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Pass in a single scalar if
 *                isotropic, a vector if diagonal, and a square matrix otherwise.
 *     jacobian: (6x6) jacobian of res wrt arg value (6)
 *     hessian: (6x6) Gauss-Newton hessian for arg value (6)
 *     rhs: (6x1) Gauss-Newton rhs for arg value (6)
 */
template <typename Scalar>
void PriorFactorPose3Isotropic(const sym::Pose3<Scalar>& value, const sym::Pose3<Scalar>& prior,
                               const Scalar sqrt_info, const Scalar epsilon,
                               Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                               Eigen::Matrix<Scalar, 6, 6>* const jacobian = nullptr,
                               Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                               Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 200

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _prior = prior.Data();

  // Intermediate terms (74)
  const Scalar _tmp0 = _prior[2] * _value[1];
  const Scalar _tmp1 = _prior[1] * _value[2];
  const Scalar _tmp2 = _prior[0] * _value[3];
  const Scalar _tmp3 = _prior[3] * _value[0];
  const Scalar _tmp4 = _tmp0 - _tmp1 - _tmp2 + _tmp3;
  const Scalar _tmp5 = _prior[3] * _value[3];
  const Scalar _tmp6 = _prior[2] * _value[2];
  const Scalar _tmp7 = _prior[1] * _value[1];
  const Scalar _tmp8 = _prior[0] * _value[0];
  const Scalar _tmp9 = _tmp5 + _tmp6 + _tmp7 + _tmp8;
  const Scalar _tmp10 = std::fabs(_tmp9);
  const Scalar _tmp11 = 1 - epsilon;
  const Scalar _tmp12 = std::min<Scalar>(_tmp10, _tmp11);
  const Scalar _tmp13 = 1 - std::pow(_tmp12, Scalar(2));
  const Scalar _tmp14 = (((_tmp9) > 0) - ((_tmp9) < 0));
  const Scalar _tmp15 = sqrt_info * (2 * std::min<Scalar>(0, _tmp14) + 1);
  const Scalar _tmp16 = _tmp15 * std::acos(_tmp12);
  const Scalar _tmp17 = 2 * _tmp16 / std::sqrt(_tmp13);
  const Scalar _tmp18 = _tmp17 * _tmp4;
  const Scalar _tmp19 = _prior[2] * _value[0];
  const Scalar _tmp20 = _prior[1] * _value[3];
  const Scalar _tmp21 = _prior[0] * _value[2];
  const Scalar _tmp22 = _prior[3] * _value[1];
  const Scalar _tmp23 = -_tmp19 - _tmp20 + _tmp21 + _tmp22;
  const Scalar _tmp24 = _tmp17 * _tmp23;
  const Scalar _tmp25 = _prior[2] * _value[3];
  const Scalar _tmp26 = _prior[1] * _value[0];
  const Scalar _tmp27 = _prior[0] * _value[1];
  const Scalar _tmp28 = _prior[3] * _value[2];
  const Scalar _tmp29 = -_tmp25 + _tmp26 - _tmp27 + _tmp28;
  const Scalar _tmp30 = _tmp17 * _tmp29;
  const Scalar _tmp31 = -_prior[4] + _value[4];
  const Scalar _tmp32 = -_prior[5] + _value[5];
  const Scalar _tmp33 = -_prior[6] + _value[6];
  const Scalar _tmp34 =
      _tmp17 * ((Scalar(1) / Scalar(2)) * _tmp5 + (Scalar(1) / Scalar(2)) * _tmp6 +
                (Scalar(1) / Scalar(2)) * _tmp7 + (Scalar(1) / Scalar(2)) * _tmp8);
  const Scalar _tmp35 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp36 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp37 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp38 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp39 = -_tmp35 + _tmp36 + _tmp37 - _tmp38;
  const Scalar _tmp40 = _tmp14 * ((((-_tmp10 + _tmp11) > 0) - ((-_tmp10 + _tmp11) < 0)) + 1);
  const Scalar _tmp41 = _tmp12 * _tmp16 / (_tmp13 * std::sqrt(_tmp13));
  const Scalar _tmp42 = _tmp40 * _tmp41;
  const Scalar _tmp43 = _tmp4 * _tmp42;
  const Scalar _tmp44 = _tmp15 / _tmp13;
  const Scalar _tmp45 = _tmp40 * _tmp44;
  const Scalar _tmp46 = _tmp4 * _tmp45;
  const Scalar _tmp47 = _tmp34 + _tmp39 * _tmp43 - _tmp39 * _tmp46;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp51 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp52 = _tmp23 * _tmp40;
  const Scalar _tmp53 = _tmp39 * _tmp52;
  const Scalar _tmp54 =
      _tmp17 * (-_tmp48 + _tmp49 - _tmp50 + _tmp51) + _tmp41 * _tmp53 - _tmp44 * _tmp53;
  const Scalar _tmp55 = _tmp29 * _tmp42;
  const Scalar _tmp56 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp57 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp22;
  const Scalar _tmp60 = _tmp56 + _tmp57 - _tmp58 - _tmp59;
  const Scalar _tmp61 = _tmp29 * _tmp45;
  const Scalar _tmp62 = _tmp17 * _tmp60 + _tmp39 * _tmp55 - _tmp39 * _tmp61;
  const Scalar _tmp63 = _tmp45 * _tmp60;
  const Scalar _tmp64 = _tmp48 - _tmp49 + _tmp50 - _tmp51;
  const Scalar _tmp65 = _tmp17 * _tmp64 - _tmp4 * _tmp63 + _tmp43 * _tmp60;
  const Scalar _tmp66 = _tmp41 * _tmp52;
  const Scalar _tmp67 = _tmp44 * _tmp52;
  const Scalar _tmp68 = _tmp34 + _tmp60 * _tmp66 - _tmp60 * _tmp67;
  const Scalar _tmp69 =
      _tmp17 * (_tmp35 - _tmp36 - _tmp37 + _tmp38) - _tmp29 * _tmp63 + _tmp55 * _tmp60;
  const Scalar _tmp70 =
      _tmp17 * (-_tmp56 - _tmp57 + _tmp58 + _tmp59) + _tmp43 * _tmp64 - _tmp46 * _tmp64;
  const Scalar _tmp71 = _tmp17 * _tmp39 + _tmp64 * _tmp66 - _tmp64 * _tmp67;
  const Scalar _tmp72 = _tmp34 + _tmp55 * _tmp64 - _tmp61 * _tmp64;
  const Scalar _tmp73 = std::pow(sqrt_info, Scalar(2));

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp18;
    _res(1, 0) = _tmp24;
    _res(2, 0) = _tmp30;
    _res(3, 0) = _tmp31 * sqrt_info;
    _res(4, 0) = _tmp32 * sqrt_info;
    _res(5, 0) = _tmp33 * sqrt_info;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _jacobian = (*jacobian);

    _jacobian.setZero();

    _jacobian(0, 0) = _tmp47;
    _jacobian(1, 0) = _tmp54;
    _jacobian(2, 0) = _tmp62;
    _jacobian(0, 1) = _tmp65;
    _jacobian(1, 1) = _tmp68;
    _jacobian(2, 1) = _tmp69;
    _jacobian(0, 2) = _tmp70;
    _jacobian(1, 2) = _tmp71;
    _jacobian(2, 2) = _tmp72;
    _jacobian(3, 3) = sqrt_info;
    _jacobian(4, 4) = sqrt_info;
    _jacobian(5, 5) = sqrt_info;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) =
        std::pow(_tmp47, Scalar(2)) + std::pow(_tmp54, Scalar(2)) + std::pow(_tmp62, Scalar(2));
    _hessian(1, 0) = _tmp47 * _tmp65 + _tmp54 * _tmp68 + _tmp62 * _tmp69;
    _hessian(2, 0) = _tmp47 * _tmp70 + _tmp54 * _tmp71 + _tmp62 * _tmp72;
    _hessian(1, 1) =
        std::pow(_tmp65, Scalar(2)) + std::pow(_tmp68, Scalar(2)) + std::pow(_tmp69, Scalar(2));
    _hessian(2, 1) = _tmp65 * _tmp70 + _tmp68 * _tmp71 + _tmp69 * _tmp72;
    _hessian(2, 2) =
        std::pow(_tmp70, Scalar(2)) + std::pow(_tmp71, Scalar(2)) + std::pow(_tmp72, Scalar(2));
    _hessian(3, 3) = _tmp73;
    _hessian(4, 4) = _tmp73;
    _hessian(5, 5) = _tmp73;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp18 * _tmp47 + _tmp24 * _tmp54 + _tmp30 * _tmp62;
    _rhs(1, 0) = _tmp18 * _tmp65 + _tmp24 * _tmp68 + _tmp30 * _tmp69;
    _rhs(2, 0) = _tmp18 * _tmp70 + _tmp24 * _tmp71 + _tmp30 * _tmp72;
    _rhs(3, 0) = _tmp31 * _tmp73;
    _rhs(4, 0) = _tmp32 * _tmp73;
    _rhs(5, 0) = _tmp33 * _tmp73;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
