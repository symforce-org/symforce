// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x3) jacobian of res wrt arg value (3)
 *     hessian: (3x3) Gauss-Newton hessian for arg value (3)
 *     rhs: (3x1) Gauss-Newton rhs for arg value (3)
 */
template <typename Scalar>
void PriorFactorRot3(const sym::Rot3<Scalar>& value, const sym::Rot3<Scalar>& prior,
                     const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                     Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                     Eigen::Matrix<Scalar, 3, 3>* const jacobian = nullptr,
                     Eigen::Matrix<Scalar, 3, 3>* const hessian = nullptr,
                     Eigen::Matrix<Scalar, 3, 1>* const rhs = nullptr) {
  // Total ops: 287

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _prior = prior.Data();

  // Intermediate terms (94)
  const Scalar _tmp0 = _prior[3] * _value[3];
  const Scalar _tmp1 = _prior[0] * _value[0];
  const Scalar _tmp2 = _prior[2] * _value[2];
  const Scalar _tmp3 = _prior[1] * _value[1];
  const Scalar _tmp4 = -_tmp1 - _tmp2 - _tmp3;
  const Scalar _tmp5 = _tmp0 - _tmp4;
  const Scalar _tmp6 = 2 * std::min<Scalar>(0, (((_tmp5) > 0) - ((_tmp5) < 0))) + 1;
  const Scalar _tmp7 = 2 * _tmp6;
  const Scalar _tmp8 = _tmp7 * sqrt_info(0, 1);
  const Scalar _tmp9 = _prior[3] * _value[1];
  const Scalar _tmp10 = _prior[0] * _value[2];
  const Scalar _tmp11 = _prior[2] * _value[0];
  const Scalar _tmp12 = _prior[1] * _value[3];
  const Scalar _tmp13 = _tmp10 - _tmp11 - _tmp12 + _tmp9;
  const Scalar _tmp14 = 1 - epsilon;
  const Scalar _tmp15 = std::min<Scalar>(_tmp14, std::fabs(_tmp5));
  const Scalar _tmp16 = std::acos(_tmp15) / std::sqrt(Scalar(1 - std::pow(_tmp15, Scalar(2))));
  const Scalar _tmp17 = _tmp13 * _tmp16;
  const Scalar _tmp18 = _prior[3] * _value[0];
  const Scalar _tmp19 = _prior[0] * _value[3];
  const Scalar _tmp20 = _prior[2] * _value[1];
  const Scalar _tmp21 = _prior[1] * _value[2];
  const Scalar _tmp22 = sqrt_info(0, 0) * (_tmp18 - _tmp19 + _tmp20 - _tmp21);
  const Scalar _tmp23 = _tmp16 * _tmp7;
  const Scalar _tmp24 = _prior[3] * _value[2];
  const Scalar _tmp25 = _prior[0] * _value[1];
  const Scalar _tmp26 = _prior[2] * _value[3];
  const Scalar _tmp27 = _prior[1] * _value[0];
  const Scalar _tmp28 = _tmp24 - _tmp25 - _tmp26 + _tmp27;
  const Scalar _tmp29 = _tmp23 * _tmp28;
  const Scalar _tmp30 = _tmp17 * _tmp8 + _tmp22 * _tmp23 + _tmp29 * sqrt_info(0, 2);
  const Scalar _tmp31 = _tmp7 * sqrt_info(1, 1);
  const Scalar _tmp32 = _tmp17 * _tmp31 + _tmp29 * sqrt_info(1, 2);
  const Scalar _tmp33 = _tmp29 * sqrt_info(2, 2);
  const Scalar _tmp34 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp35 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp36 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp37 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp38 = _tmp34 - _tmp35 + _tmp36 - _tmp37;
  const Scalar _tmp39 = std::fabs(_tmp0 + _tmp1 + _tmp2 + _tmp3);
  const Scalar _tmp40 = std::min<Scalar>(_tmp14, _tmp39);
  const Scalar _tmp41 = std::acos(_tmp40);
  const Scalar _tmp42 = 1 - std::pow(_tmp40, Scalar(2));
  const Scalar _tmp43 = _tmp6 * ((((_tmp14 - _tmp39) > 0) - ((_tmp14 - _tmp39) < 0)) + 1) *
                        (((-_tmp0 + _tmp4) > 0) - ((-_tmp0 + _tmp4) < 0));
  const Scalar _tmp44 = _tmp40 * _tmp41 * _tmp43 / (_tmp42 * std::sqrt(_tmp42));
  const Scalar _tmp45 = _tmp38 * _tmp44;
  const Scalar _tmp46 = _tmp28 * sqrt_info(0, 2);
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp48 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp49 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp50 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp51 = _tmp47 - _tmp48 - _tmp49 + _tmp50;
  const Scalar _tmp52 = _tmp41 / std::sqrt(_tmp42);
  const Scalar _tmp53 = _tmp51 * _tmp52;
  const Scalar _tmp54 = _tmp43 / _tmp42;
  const Scalar _tmp55 = _tmp22 * _tmp54;
  const Scalar _tmp56 = _tmp13 * _tmp54;
  const Scalar _tmp57 = _tmp38 * _tmp56;
  const Scalar _tmp58 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp59 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp62 = _tmp52 * _tmp7;
  const Scalar _tmp63 = _tmp62 * (-_tmp58 - _tmp59 + _tmp60 + _tmp61);
  const Scalar _tmp64 = (Scalar(1) / Scalar(2)) * _tmp0 + (Scalar(1) / Scalar(2)) * _tmp1 +
                        (Scalar(1) / Scalar(2)) * _tmp2 + (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp65 = _tmp62 * sqrt_info(0, 0);
  const Scalar _tmp66 = _tmp13 * sqrt_info(0, 1);
  const Scalar _tmp67 = _tmp28 * _tmp54;
  const Scalar _tmp68 = _tmp38 * _tmp67;
  const Scalar _tmp69 = _tmp22 * _tmp45 - _tmp38 * _tmp55 + _tmp45 * _tmp46 + _tmp45 * _tmp66 +
                        _tmp53 * _tmp8 - _tmp57 * sqrt_info(0, 1) + _tmp63 * sqrt_info(0, 2) +
                        _tmp64 * _tmp65 - _tmp68 * sqrt_info(0, 2);
  const Scalar _tmp70 = _tmp28 * _tmp45;
  const Scalar _tmp71 = _tmp13 * sqrt_info(1, 1);
  const Scalar _tmp72 = _tmp31 * _tmp53 + _tmp45 * _tmp71 - _tmp57 * sqrt_info(1, 1) +
                        _tmp63 * sqrt_info(1, 2) - _tmp68 * sqrt_info(1, 2) +
                        _tmp70 * sqrt_info(1, 2);
  const Scalar _tmp73 =
      _tmp63 * sqrt_info(2, 2) - _tmp68 * sqrt_info(2, 2) + _tmp70 * sqrt_info(2, 2);
  const Scalar _tmp74 = _tmp58 + _tmp59 - _tmp60 - _tmp61;
  const Scalar _tmp75 = _tmp44 * _tmp74;
  const Scalar _tmp76 = _tmp56 * _tmp74;
  const Scalar _tmp77 = _tmp38 * _tmp62;
  const Scalar _tmp78 = _tmp52 * _tmp64;
  const Scalar _tmp79 = _tmp67 * sqrt_info(0, 2);
  const Scalar _tmp80 = _tmp22 * _tmp75 + _tmp46 * _tmp75 - _tmp55 * _tmp74 +
                        _tmp65 * (-_tmp47 + _tmp48 + _tmp49 - _tmp50) + _tmp66 * _tmp75 -
                        _tmp74 * _tmp79 - _tmp76 * sqrt_info(0, 1) + _tmp77 * sqrt_info(0, 2) +
                        _tmp78 * _tmp8;
  const Scalar _tmp81 = _tmp28 * _tmp75;
  const Scalar _tmp82 = _tmp67 * _tmp74;
  const Scalar _tmp83 = _tmp31 * _tmp78 + _tmp71 * _tmp75 - _tmp76 * sqrt_info(1, 1) +
                        _tmp77 * sqrt_info(1, 2) + _tmp81 * sqrt_info(1, 2) -
                        _tmp82 * sqrt_info(1, 2);
  const Scalar _tmp84 =
      _tmp77 * sqrt_info(2, 2) + _tmp81 * sqrt_info(2, 2) - _tmp82 * sqrt_info(2, 2);
  const Scalar _tmp85 = _tmp44 * _tmp51;
  const Scalar _tmp86 = _tmp62 * _tmp64;
  const Scalar _tmp87 = _tmp28 * _tmp85;
  const Scalar _tmp88 = _tmp52 * (-_tmp34 + _tmp35 - _tmp36 + _tmp37);
  const Scalar _tmp89 = _tmp51 * _tmp56;
  const Scalar _tmp90 = _tmp22 * _tmp85 - _tmp51 * _tmp55 - _tmp51 * _tmp79 + _tmp65 * _tmp74 +
                        _tmp66 * _tmp85 + _tmp8 * _tmp88 + _tmp86 * sqrt_info(0, 2) +
                        _tmp87 * sqrt_info(0, 2) - _tmp89 * sqrt_info(0, 1);
  const Scalar _tmp91 = _tmp51 * _tmp67;
  const Scalar _tmp92 = _tmp31 * _tmp88 + _tmp71 * _tmp85 + _tmp86 * sqrt_info(1, 2) +
                        _tmp87 * sqrt_info(1, 2) - _tmp89 * sqrt_info(1, 1) -
                        _tmp91 * sqrt_info(1, 2);
  const Scalar _tmp93 =
      _tmp86 * sqrt_info(2, 2) + _tmp87 * sqrt_info(2, 2) - _tmp91 * sqrt_info(2, 2);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp30;
    _res(1, 0) = _tmp32;
    _res(2, 0) = _tmp33;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp69;
    _jacobian(1, 0) = _tmp72;
    _jacobian(2, 0) = _tmp73;
    _jacobian(0, 1) = _tmp80;
    _jacobian(1, 1) = _tmp83;
    _jacobian(2, 1) = _tmp84;
    _jacobian(0, 2) = _tmp90;
    _jacobian(1, 2) = _tmp92;
    _jacobian(2, 2) = _tmp93;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp69, Scalar(2)) + std::pow(_tmp72, Scalar(2)) + std::pow(_tmp73, Scalar(2));
    _hessian(1, 0) = _tmp69 * _tmp80 + _tmp72 * _tmp83 + _tmp73 * _tmp84;
    _hessian(2, 0) = _tmp69 * _tmp90 + _tmp72 * _tmp92 + _tmp73 * _tmp93;
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        std::pow(_tmp80, Scalar(2)) + std::pow(_tmp83, Scalar(2)) + std::pow(_tmp84, Scalar(2));
    _hessian(2, 1) = _tmp80 * _tmp90 + _tmp83 * _tmp92 + _tmp84 * _tmp93;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) =
        std::pow(_tmp90, Scalar(2)) + std::pow(_tmp92, Scalar(2)) + std::pow(_tmp93, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp30 * _tmp69 + _tmp32 * _tmp72 + _tmp33 * _tmp73;
    _rhs(1, 0) = _tmp30 * _tmp80 + _tmp32 * _tmp83 + _tmp33 * _tmp84;
    _rhs(2, 0) = _tmp30 * _tmp90 + _tmp32 * _tmp92 + _tmp33 * _tmp93;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
