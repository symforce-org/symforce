// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Pass in a single scalar if
 *                isotropic, a vector if diagonal, and a square matrix otherwise.
 *     jacobian: (3x3) jacobian of res wrt arg value (3)
 *     hessian: (3x3) Gauss-Newton hessian for arg value (3)
 *     rhs: (3x1) Gauss-Newton rhs for arg value (3)
 */
template <typename Scalar>
void PriorFactorRot3Diagonal(const sym::Rot3<Scalar>& value, const sym::Rot3<Scalar>& prior,
                             const Eigen::Matrix<Scalar, 3, 1>& sqrt_info, const Scalar epsilon,
                             Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                             Eigen::Matrix<Scalar, 3, 3>* const jacobian = nullptr,
                             Eigen::Matrix<Scalar, 3, 3>* const hessian = nullptr,
                             Eigen::Matrix<Scalar, 3, 1>* const rhs = nullptr) {
  // Total ops: 212

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _prior = prior.Data();

  // Intermediate terms (77)
  const Scalar _tmp0 = _prior[3] * _value[0];
  const Scalar _tmp1 = _prior[0] * _value[3];
  const Scalar _tmp2 = _prior[2] * _value[1];
  const Scalar _tmp3 = _prior[1] * _value[2];
  const Scalar _tmp4 = _tmp0 - _tmp1 + _tmp2 - _tmp3;
  const Scalar _tmp5 = _prior[3] * _value[3];
  const Scalar _tmp6 = _prior[0] * _value[0];
  const Scalar _tmp7 = _prior[2] * _value[2];
  const Scalar _tmp8 = _prior[1] * _value[1];
  const Scalar _tmp9 = -_tmp6 - _tmp7 - _tmp8;
  const Scalar _tmp10 = _tmp5 - _tmp9;
  const Scalar _tmp11 = 2 * std::min<Scalar>(0, (((_tmp10) > 0) - ((_tmp10) < 0))) + 1;
  const Scalar _tmp12 = 2 * _tmp11;
  const Scalar _tmp13 = _tmp12 * sqrt_info(0, 0);
  const Scalar _tmp14 = 1 - epsilon;
  const Scalar _tmp15 = std::min<Scalar>(_tmp14, std::fabs(_tmp10));
  const Scalar _tmp16 = std::acos(_tmp15) / std::sqrt(Scalar(1 - std::pow(_tmp15, Scalar(2))));
  const Scalar _tmp17 = _tmp13 * _tmp16 * _tmp4;
  const Scalar _tmp18 = _prior[3] * _value[1];
  const Scalar _tmp19 = _prior[0] * _value[2];
  const Scalar _tmp20 = _prior[2] * _value[0];
  const Scalar _tmp21 = _prior[1] * _value[3];
  const Scalar _tmp22 = _tmp18 + _tmp19 - _tmp20 - _tmp21;
  const Scalar _tmp23 = _tmp12 * sqrt_info(1, 0);
  const Scalar _tmp24 = _tmp16 * _tmp22 * _tmp23;
  const Scalar _tmp25 = _prior[3] * _value[2];
  const Scalar _tmp26 = _prior[0] * _value[1];
  const Scalar _tmp27 = _prior[2] * _value[3];
  const Scalar _tmp28 = _prior[1] * _value[0];
  const Scalar _tmp29 = _tmp25 - _tmp26 - _tmp27 + _tmp28;
  const Scalar _tmp30 = _tmp12 * sqrt_info(2, 0);
  const Scalar _tmp31 = _tmp16 * _tmp29 * _tmp30;
  const Scalar _tmp32 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp33 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp34 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp35 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp36 = _tmp32 - _tmp33 + _tmp34 - _tmp35;
  const Scalar _tmp37 = std::fabs(_tmp5 + _tmp6 + _tmp7 + _tmp8);
  const Scalar _tmp38 = std::min<Scalar>(_tmp14, _tmp37);
  const Scalar _tmp39 = 1 - std::pow(_tmp38, Scalar(2));
  const Scalar _tmp40 = _tmp11 * ((((_tmp14 - _tmp37) > 0) - ((_tmp14 - _tmp37) < 0)) + 1) *
                        (((-_tmp5 + _tmp9) > 0) - ((-_tmp5 + _tmp9) < 0));
  const Scalar _tmp41 = _tmp40 / _tmp39;
  const Scalar _tmp42 = _tmp36 * _tmp41;
  const Scalar _tmp43 = _tmp4 * sqrt_info(0, 0);
  const Scalar _tmp44 = std::acos(_tmp38);
  const Scalar _tmp45 = _tmp38 * _tmp40 * _tmp44 / (_tmp39 * std::sqrt(_tmp39));
  const Scalar _tmp46 = _tmp36 * _tmp45;
  const Scalar _tmp47 = (Scalar(1) / Scalar(2)) * _tmp5 + (Scalar(1) / Scalar(2)) * _tmp6 +
                        (Scalar(1) / Scalar(2)) * _tmp7 + (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp48 = _tmp44 / std::sqrt(_tmp39);
  const Scalar _tmp49 = _tmp13 * _tmp48;
  const Scalar _tmp50 = -_tmp42 * _tmp43 + _tmp43 * _tmp46 + _tmp47 * _tmp49;
  const Scalar _tmp51 = _tmp22 * sqrt_info(1, 0);
  const Scalar _tmp52 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp53 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp54 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp55 = (Scalar(1) / Scalar(2)) * _tmp28;
  const Scalar _tmp56 = _tmp52 - _tmp53 - _tmp54 + _tmp55;
  const Scalar _tmp57 = _tmp23 * _tmp48;
  const Scalar _tmp58 = -_tmp42 * _tmp51 + _tmp46 * _tmp51 + _tmp56 * _tmp57;
  const Scalar _tmp59 = _tmp29 * sqrt_info(2, 0);
  const Scalar _tmp60 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp61 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp62 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp63 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp64 = _tmp30 * _tmp48;
  const Scalar _tmp65 =
      -_tmp42 * _tmp59 + _tmp46 * _tmp59 + _tmp64 * (-_tmp60 - _tmp61 + _tmp62 + _tmp63);
  const Scalar _tmp66 = _tmp60 + _tmp61 - _tmp62 - _tmp63;
  const Scalar _tmp67 = _tmp41 * _tmp66;
  const Scalar _tmp68 = _tmp45 * _tmp66;
  const Scalar _tmp69 =
      -_tmp43 * _tmp67 + _tmp43 * _tmp68 + _tmp49 * (-_tmp52 + _tmp53 + _tmp54 - _tmp55);
  const Scalar _tmp70 = _tmp47 * _tmp57 - _tmp51 * _tmp67 + _tmp51 * _tmp68;
  const Scalar _tmp71 = _tmp36 * _tmp64 - _tmp59 * _tmp67 + _tmp59 * _tmp68;
  const Scalar _tmp72 = _tmp41 * _tmp56;
  const Scalar _tmp73 = _tmp45 * _tmp56;
  const Scalar _tmp74 = -_tmp43 * _tmp72 + _tmp43 * _tmp73 + _tmp49 * _tmp66;
  const Scalar _tmp75 =
      -_tmp51 * _tmp72 + _tmp51 * _tmp73 + _tmp57 * (-_tmp32 + _tmp33 - _tmp34 + _tmp35);
  const Scalar _tmp76 = _tmp47 * _tmp64 - _tmp59 * _tmp72 + _tmp59 * _tmp73;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp17;
    _res(1, 0) = _tmp24;
    _res(2, 0) = _tmp31;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp50;
    _jacobian(1, 0) = _tmp58;
    _jacobian(2, 0) = _tmp65;
    _jacobian(0, 1) = _tmp69;
    _jacobian(1, 1) = _tmp70;
    _jacobian(2, 1) = _tmp71;
    _jacobian(0, 2) = _tmp74;
    _jacobian(1, 2) = _tmp75;
    _jacobian(2, 2) = _tmp76;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp50, Scalar(2)) + std::pow(_tmp58, Scalar(2)) + std::pow(_tmp65, Scalar(2));
    _hessian(1, 0) = _tmp50 * _tmp69 + _tmp58 * _tmp70 + _tmp65 * _tmp71;
    _hessian(2, 0) = _tmp50 * _tmp74 + _tmp58 * _tmp75 + _tmp65 * _tmp76;
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        std::pow(_tmp69, Scalar(2)) + std::pow(_tmp70, Scalar(2)) + std::pow(_tmp71, Scalar(2));
    _hessian(2, 1) = _tmp69 * _tmp74 + _tmp70 * _tmp75 + _tmp71 * _tmp76;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) =
        std::pow(_tmp74, Scalar(2)) + std::pow(_tmp75, Scalar(2)) + std::pow(_tmp76, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp17 * _tmp50 + _tmp24 * _tmp58 + _tmp31 * _tmp65;
    _rhs(1, 0) = _tmp17 * _tmp69 + _tmp24 * _tmp70 + _tmp31 * _tmp71;
    _rhs(2, 0) = _tmp17 * _tmp74 + _tmp24 * _tmp75 + _tmp31 * _tmp76;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
