// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     ops/CLASS/lie_group_ops.cc.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./lie_group_ops.h"

#include <cmath>

#include <sym/unit3.h>

namespace sym {

template <typename Scalar>
sym::Unit3<Scalar> LieGroupOps<Unit3<Scalar>>::FromTangent(const TangentVec& vec,
                                                           const Scalar epsilon) {
  // Total ops: 13

  // Input arrays

  // Intermediate terms (3)
  const Scalar _tmp0 =
      std::sqrt(Scalar(std::pow(epsilon, Scalar(2)) + std::pow(vec(0, 0), Scalar(2)) +
                       std::pow(vec(1, 0), Scalar(2))));
  const Scalar _tmp1 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp2 = std::sin(_tmp1) / _tmp0;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = -_tmp2 * vec(1, 0);
  _res[1] = _tmp2 * vec(0, 0);
  _res[2] = 0;
  _res[3] = std::cos(_tmp1);

  return sym::Unit3<Scalar>(_res);
}

template <typename Scalar>
typename LieGroupOps<Unit3<Scalar>>::TangentVec LieGroupOps<Unit3<Scalar>>::ToTangent(
    const sym::Unit3<Scalar>& a, const Scalar epsilon) {
  // Total ops: 17

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();

  // Intermediate terms (2)
  const Scalar _tmp0 = std::min<Scalar>(std::fabs(_a[3]), 1 - epsilon);
  const Scalar _tmp1 = 2 * (2 * std::min<Scalar>(0, (((_a[3]) > 0) - ((_a[3]) < 0))) + 1) *
                       std::acos(_tmp0) / std::sqrt(Scalar(1 - std::pow(_tmp0, Scalar(2))));

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) = _a[1] * _tmp1;
  _res(1, 0) = -_a[0] * _tmp1;

  return _res;
}

template <typename Scalar>
sym::Unit3<Scalar> LieGroupOps<Unit3<Scalar>>::Retract(const sym::Unit3<Scalar>& a,
                                                       const TangentVec& vec,
                                                       const Scalar epsilon) {
  // Total ops: 34

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();

  // Intermediate terms (8)
  const Scalar _tmp0 =
      std::sqrt(Scalar(std::pow(epsilon, Scalar(2)) + std::pow(vec(0, 0), Scalar(2)) +
                       std::pow(vec(1, 0), Scalar(2))));
  const Scalar _tmp1 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp2 = std::cos(_tmp1);
  const Scalar _tmp3 = std::sin(_tmp1) / _tmp0;
  const Scalar _tmp4 = _a[3] * _tmp3;
  const Scalar _tmp5 = _a[2] * _tmp3;
  const Scalar _tmp6 = _a[0] * _tmp3;
  const Scalar _tmp7 = _a[1] * _tmp3;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = _a[0] * _tmp2 - _tmp4 * vec(1, 0) - _tmp5 * vec(0, 0);
  _res[1] = _a[1] * _tmp2 + _tmp4 * vec(0, 0) - _tmp5 * vec(1, 0);
  _res[2] = _a[2] * _tmp2 + _tmp6 * vec(0, 0) + _tmp7 * vec(1, 0);
  _res[3] = _a[3] * _tmp2 + _tmp6 * vec(1, 0) - _tmp7 * vec(0, 0);

  return sym::Unit3<Scalar>(_res);
}

template <typename Scalar>
typename LieGroupOps<Unit3<Scalar>>::TangentVec LieGroupOps<Unit3<Scalar>>::LocalCoordinates(
    const sym::Unit3<Scalar>& a, const sym::Unit3<Scalar>& b, const Scalar epsilon) {
  // Total ops: 38

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();

  // Intermediate terms (3)
  const Scalar _tmp0 = _a[0] * _b[0] + _a[1] * _b[1] + _a[2] * _b[2] + _a[3] * _b[3];
  const Scalar _tmp1 = std::min<Scalar>(std::fabs(_tmp0), 1 - epsilon);
  const Scalar _tmp2 = 2 * (2 * std::min<Scalar>(0, (((_tmp0) > 0) - ((_tmp0) < 0))) + 1) *
                       std::acos(_tmp1) / std::sqrt(Scalar(1 - std::pow(_tmp1, Scalar(2))));

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) = _tmp2 * (_a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1]);
  _res(1, 0) = -_tmp2 * (-_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0]);

  return _res;
}

template <typename Scalar>
sym::Unit3<Scalar> LieGroupOps<Unit3<Scalar>>::Interpolate(const sym::Unit3<Scalar>& a,
                                                           const sym::Unit3<Scalar>& b,
                                                           const Scalar alpha,
                                                           const Scalar epsilon) {
  // Total ops: 78

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();

  // Intermediate terms (14)
  const Scalar _tmp0 = _a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp1 = _a[0] * _b[0] + _a[1] * _b[1] + _a[2] * _b[2] + _a[3] * _b[3];
  const Scalar _tmp2 = std::min<Scalar>(std::fabs(_tmp1), 1 - epsilon);
  const Scalar _tmp3 = 1 - std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = 2 * std::min<Scalar>(0, (((_tmp1) > 0) - ((_tmp1) < 0))) + 1;
  const Scalar _tmp5 = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp6 = std::acos(_tmp2);
  const Scalar _tmp7 = 4 * std::pow(_tmp4, Scalar(2)) * std::pow(_tmp6, Scalar(2)) *
                       std::pow(alpha, Scalar(2)) / _tmp3;
  const Scalar _tmp8 =
      std::sqrt(Scalar(std::pow(_tmp0, Scalar(2)) * _tmp7 + std::pow(_tmp5, Scalar(2)) * _tmp7 +
                       std::pow(epsilon, Scalar(2))));
  const Scalar _tmp9 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp10 = 2 * _tmp4 * _tmp6 * alpha * std::sin(_tmp9) / (std::sqrt(_tmp3) * _tmp8);
  const Scalar _tmp11 = _tmp0 * _tmp10;
  const Scalar _tmp12 = std::cos(_tmp9);
  const Scalar _tmp13 = _tmp10 * _tmp5;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = _a[0] * _tmp12 - _a[2] * _tmp11 + _a[3] * _tmp13;
  _res[1] = _a[1] * _tmp12 + _a[2] * _tmp13 + _a[3] * _tmp11;
  _res[2] = _a[0] * _tmp11 - _a[1] * _tmp13 + _a[2] * _tmp12;
  _res[3] = -_a[0] * _tmp13 - _a[1] * _tmp11 + _a[3] * _tmp12;

  return sym::Unit3<Scalar>(_res);
}

}  // namespace sym

// Explicit instantiation
template struct sym::LieGroupOps<sym::Unit3<double>>;
template struct sym::LieGroupOps<sym::Unit3<float>>;
