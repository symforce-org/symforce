// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>
#include <Eigen/Sparse>



namespace sym {


/**
* This function was autogenerated. Do not modify by hand.
*
* Args:
*     x0: Scalar
*     x1: Scalar
*     x2: Scalar
*     x3: Scalar
*     x4: Scalar
*
* Outputs:
*     result: Matrix105_163
*/
template <typename Scalar>
Eigen::SparseMatrix<Scalar> ComputeALpSc105(const Scalar x0, const Scalar x1, const Scalar x2, const Scalar x3, const Scalar x4) {

    // Total ops: 540

    // Input arrays

    // Intermediate terms (110)
    const Scalar _tmp0 = 2*x2;
    const Scalar _tmp1 = 2*x3;
    const Scalar _tmp2 = _tmp1 - 2;
    const Scalar _tmp3 = x1 + 2;
    const Scalar _tmp4 = x2 + 2;
    const Scalar _tmp5 = _tmp4 + x3;
    const Scalar _tmp6 = x2 + x4;
    const Scalar _tmp7 = std::pow(x2, Scalar(2));
    const Scalar _tmp8 = x2 - 4;
    const Scalar _tmp9 = x1*x2;
    const Scalar _tmp10 = _tmp1 + x1;
    const Scalar _tmp11 = -x2;
    const Scalar _tmp12 = x2 - 1;
    const Scalar _tmp13 = x0*x4;
    const Scalar _tmp14 = x2*x3;
    const Scalar _tmp15 = 2*x1;
    const Scalar _tmp16 = _tmp15 + 2;
    const Scalar _tmp17 = -x4;
    const Scalar _tmp18 = _tmp17 + x1;
    const Scalar _tmp19 = -x0;
    const Scalar _tmp20 = x3 + x4;
    const Scalar _tmp21 = 2*x0;
    const Scalar _tmp22 = x4 + 4;
    const Scalar _tmp23 = std::pow(x4, Scalar(2));
    const Scalar _tmp24 = -x3;
    const Scalar _tmp25 = _tmp15 + 1;
    const Scalar _tmp26 = -x1;
    const Scalar _tmp27 = _tmp26 + x0;
    const Scalar _tmp28 = x1 - 1;
    const Scalar _tmp29 = x3 - 2;
    const Scalar _tmp30 = x3 + 1;
    const Scalar _tmp31 = std::pow(x0, Scalar(2));
    const Scalar _tmp32 = 2*_tmp31;
    const Scalar _tmp33 = x1 + x2;
    const Scalar _tmp34 = x0*x1;
    const Scalar _tmp35 = Scalar(1.0) / (x3);
    const Scalar _tmp36 = (Scalar(1)/Scalar(2))*_tmp35;
    const Scalar _tmp37 = std::pow(x3, Scalar(2));
    const Scalar _tmp38 = 2*_tmp37;
    const Scalar _tmp39 = -_tmp38;
    const Scalar _tmp40 = x3 + 2;
    const Scalar _tmp41 = 2*x4;
    const Scalar _tmp42 = _tmp0 - _tmp41;
    const Scalar _tmp43 = 3*x2;
    const Scalar _tmp44 = _tmp21 + x3;
    const Scalar _tmp45 = x0 - 1;
    const Scalar _tmp46 = x0 + 1;
    const Scalar _tmp47 = _tmp17 + x0;
    const Scalar _tmp48 = _tmp29*x4;
    const Scalar _tmp49 = 4*_tmp35;
    const Scalar _tmp50 = _tmp37*x4;
    const Scalar _tmp51 = x1 + 1;
    const Scalar _tmp52 = x2 - 2;
    const Scalar _tmp53 = x0*x2;
    const Scalar _tmp54 = Scalar(1.0) / (x2);
    const Scalar _tmp55 = 3 - _tmp15;
    const Scalar _tmp56 = x4 + 2;
    const Scalar _tmp57 = -_tmp0;
    const Scalar _tmp58 = Scalar(1.0) / (x1);
    const Scalar _tmp59 = (Scalar(1)/Scalar(2))*x0;
    const Scalar _tmp60 = _tmp1*x0;
    const Scalar _tmp61 = x3*x4;
    const Scalar _tmp62 = Scalar(1.0) / (x4);
    const Scalar _tmp63 = _tmp61*_tmp9;
    const Scalar _tmp64 = _tmp11 + _tmp46;
    const Scalar _tmp65 = _tmp21 + 1;
    const Scalar _tmp66 = 4*x2;
    const Scalar _tmp67 = _tmp15 - 2;
    const Scalar _tmp68 = _tmp31*x3;
    const Scalar _tmp69 = x3 - 1;
    const Scalar _tmp70 = -_tmp69;
    const Scalar _tmp71 = x0 + 2;
    const Scalar _tmp72 = 3*x4;
    const Scalar _tmp73 = x2 + 1;
    const Scalar _tmp74 = -_tmp73;
    const Scalar _tmp75 = _tmp1 + x0;
    const Scalar _tmp76 = x4 - 2;
    const Scalar _tmp77 = _tmp76*x3;
    const Scalar _tmp78 = x1*x3;
    const Scalar _tmp79 = _tmp35*x4;
    const Scalar _tmp80 = _tmp11 + x1;
    const Scalar _tmp81 = -_tmp62;
    const Scalar _tmp82 = (Scalar(1)/Scalar(2))*x2;
    const Scalar _tmp83 = x2 + x3;
    const Scalar _tmp84 = _tmp15 - 1;
    const Scalar _tmp85 = _tmp17 + x3;
    const Scalar _tmp86 = x4 + 1;
    const Scalar _tmp87 = -_tmp67;
    const Scalar _tmp88 = x4 - 1;
    const Scalar _tmp89 = _tmp0 - _tmp1;
    const Scalar _tmp90 = _tmp31*x1;
    const Scalar _tmp91 = _tmp41 - 2;
    const Scalar _tmp92 = _tmp1*x2;
    const Scalar _tmp93 = 4*x0;
    const Scalar _tmp94 = -_tmp37 + x1;
    const Scalar _tmp95 = x1*x4;
    const Scalar _tmp96 = x0 + x4;
    const Scalar _tmp97 = -_tmp45;
    const Scalar _tmp98 = _tmp28*x2;
    const Scalar _tmp99 = x0 + x2;
    const Scalar _tmp100 = x2*x4;
    const Scalar _tmp101 = _tmp0 - 1;
    const Scalar _tmp102 = _tmp101 + _tmp21;
    const Scalar _tmp103 = _tmp1 + 2;
    const Scalar _tmp104 = Scalar(1.0) / (x0);
    const Scalar _tmp105 = 2*_tmp104;
    const Scalar _tmp106 = 2*_tmp58;
    const Scalar _tmp107 = _tmp11 + 1;
    const Scalar _tmp108 = -_tmp40;
    const Scalar _tmp109 = -_tmp23;

    // Output terms (1)
    static constexpr int kRows_result = 105;
    static constexpr int kCols_result = 163;
    static constexpr int kNumNonZero_result = 331;
    static constexpr int kColPtrs_result[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 65, 68, 70, 73, 76, 79, 82, 84, 86, 88, 91, 94, 97, 100, 103, 106, 109, 112, 113, 115, 117, 119, 122, 125, 128, 131, 134, 137, 140, 141, 143, 145, 148, 151, 154, 157, 160, 163, 166, 169, 171, 173, 175, 178, 181, 184, 187, 190, 193, 196, 199, 201, 203, 205, 208, 211, 214, 217, 220, 222, 225, 228, 230, 232, 234, 237, 240, 243, 246, 249, 252, 255, 258, 260, 262, 264, 267, 270, 273, 276, 279, 282, 285, 288, 290, 292, 293, 296, 299, 301, 304, 306, 308, 310, 311, 313, 314, 316, 320, 324, 329, 331};
    static constexpr int kRowIndices_result[] = {0, 1, 2, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 40, 41, 43, 44, 45, 51, 52, 53, 54, 55, 56, 62, 63, 64, 65, 66, 67, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89, 95, 96, 97, 98, 99, 100, 102, 103, 104, 0, 1, 4, 0, 1, 5, 0, 1, 6, 3, 13, 3, 12, 14, 4, 7, 15, 5, 8, 16, 6, 9, 17, 7, 10, 8, 11, 9, 12, 10, 11, 15, 10, 11, 16, 10, 11, 17, 13, 14, 24, 14, 23, 25, 15, 18, 26, 16, 19, 27, 17, 20, 28, 18, 19, 22, 20, 23, 21, 22, 21, 22, 27, 21, 22, 28, 24, 25, 35, 25, 34, 36, 26, 29, 37, 27, 30, 38, 28, 31, 39, 29, 30, 33, 31, 34, 32, 33, 37, 32, 33, 38, 32, 33, 39, 35, 36, 46, 36, 45, 47, 37, 40, 48, 38, 41, 49, 39, 42, 50, 40, 43, 41, 44, 42, 45, 43, 44, 48, 43, 44, 49, 43, 44, 50, 46, 47, 57, 47, 56, 58, 48, 51, 59, 49, 52, 60, 50, 53, 61, 51, 54, 52, 55, 53, 56, 54, 55, 59, 54, 55, 60, 54, 55, 61, 57, 58, 68, 58, 67, 69, 62, 70, 60, 63, 71, 61, 64, 72, 62, 65, 63, 66, 64, 67, 65, 66, 70, 65, 66, 71, 65, 66, 72, 68, 69, 79, 69, 78, 80, 70, 73, 81, 71, 74, 82, 72, 75, 83, 73, 76, 74, 77, 75, 78, 76, 77, 81, 76, 77, 82, 76, 77, 83, 79, 80, 90, 80, 89, 91, 81, 84, 92, 82, 85, 93, 83, 86, 94, 84, 87, 85, 88, 86, 87, 88, 92, 87, 88, 93, 88, 94, 90, 91, 101, 91, 100, 92, 95, 93, 96, 97, 95, 98, 96, 97, 100, 98, 99, 102, 103, 98, 99, 102, 103, 98, 99, 102, 103, 104, 101, 104};
    Scalar result_empty_value_ptr[331];
    Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
        kRows_result,
        kCols_result,
        kNumNonZero_result,
        kColPtrs_result,
        kRowIndices_result,
        result_empty_value_ptr
    );
    Scalar* result_value_ptr = result.valuePtr();


    result_value_ptr[0] = -_tmp0*x4 - x0;
    result_value_ptr[1] = _tmp2*x1;
    result_value_ptr[2] = _tmp3;
    result_value_ptr[3] = _tmp5;
    result_value_ptr[4] = -_tmp6;
    result_value_ptr[5] = x0;
    result_value_ptr[6] = _tmp7 + _tmp8 + x3;
    result_value_ptr[7] = Scalar(1.0) / (_tmp7);
    result_value_ptr[8] = x4*(_tmp9 + x0);
    result_value_ptr[9] = -_tmp10;
    result_value_ptr[10] = _tmp11;
    result_value_ptr[11] = _tmp12;
    result_value_ptr[12] = -x4*(_tmp13 + _tmp14);
    result_value_ptr[13] = -1;
    result_value_ptr[14] = _tmp16;
    result_value_ptr[15] = -x3*(_tmp18 + x0);
    result_value_ptr[16] = _tmp19 + _tmp20*x1 + x3;
    result_value_ptr[17] = -_tmp21;
    result_value_ptr[18] = x2;
    result_value_ptr[19] = x3;
    result_value_ptr[20] = -_tmp22;
    result_value_ptr[21] = -x3*(_tmp24 + x0)/_tmp23;
    result_value_ptr[22] = -x1*(_tmp11 + _tmp25);
    result_value_ptr[23] = _tmp20 + _tmp27*x3 + 1;
    result_value_ptr[24] = _tmp28;
    result_value_ptr[25] = -_tmp4;
    result_value_ptr[26] = -_tmp29 - x0;
    result_value_ptr[27] = -_tmp30*_tmp32;
    result_value_ptr[28] = x0 - 3;
    result_value_ptr[29] = -_tmp33;
    result_value_ptr[30] = -4*_tmp34;
    result_value_ptr[31] = _tmp13*x3 - 2;
    result_value_ptr[32] = x0 + x3*(_tmp6 - 1);
    result_value_ptr[33] = -_tmp0 - _tmp20;
    result_value_ptr[34] = _tmp36*x2 - 2;
    result_value_ptr[35] = _tmp39 + x0;
    result_value_ptr[36] = _tmp40*x1 + x4;
    result_value_ptr[37] = 3;
    result_value_ptr[38] = x0 + x2*(_tmp9 + x2) + x3;
    result_value_ptr[39] = -_tmp42;
    result_value_ptr[40] = Scalar(1.0)*x1;
    result_value_ptr[41] = -_tmp43 + x1;
    result_value_ptr[42] = _tmp12 + x3;
    result_value_ptr[43] = _tmp15*x4;
    result_value_ptr[44] = -_tmp15 - 8;
    result_value_ptr[45] = _tmp28 + _tmp44;
    result_value_ptr[46] = -_tmp3 - x4;
    result_value_ptr[47] = _tmp1 + _tmp13*_tmp15 + _tmp15;
    result_value_ptr[48] = -_tmp11 - _tmp9*x3;
    result_value_ptr[49] = _tmp27 + x2;
    result_value_ptr[50] = -_tmp45*_tmp46 + x4;
    result_value_ptr[51] = -_tmp18*_tmp31 - _tmp24;
    result_value_ptr[52] = -_tmp23*x0;
    result_value_ptr[53] = -_tmp0/_tmp46;
    result_value_ptr[54] = _tmp41;
    result_value_ptr[55] = _tmp1*x1 + x0;
    result_value_ptr[56] = _tmp14*_tmp47 + x4;
    result_value_ptr[57] = _tmp28*x1;
    result_value_ptr[58] = -_tmp48 - 1;
    result_value_ptr[59] = _tmp8;
    result_value_ptr[60] = -x2*(_tmp27 + x4);
    result_value_ptr[61] = 3;
    result_value_ptr[62] = _tmp49*x4;
    result_value_ptr[63] = _tmp50;
    result_value_ptr[64] = x3;
    result_value_ptr[65] = _tmp12*(_tmp51 + x4);
    result_value_ptr[66] = _tmp47 + _tmp52;
    result_value_ptr[67] = x0*(x1 + 3);
    result_value_ptr[68] = _tmp10 + _tmp53 + x2;
    result_value_ptr[69] = _tmp54 - 2;
    result_value_ptr[70] = -4/_tmp27;
    result_value_ptr[71] = _tmp55;
    result_value_ptr[72] = -_tmp30 - x1;
    result_value_ptr[73] = _tmp13 + _tmp56;
    result_value_ptr[74] = x1*(x3 + Scalar(-1.0));
    result_value_ptr[75] = -_tmp51;
    result_value_ptr[76] = -_tmp11 - 3*x0;
    result_value_ptr[77] = _tmp23*(_tmp57 + x0);
    result_value_ptr[78] = _tmp14*_tmp23;
    result_value_ptr[79] = _tmp7*x0 - 4;
    result_value_ptr[80] = 3*x3;
    result_value_ptr[81] = -_tmp49;
    result_value_ptr[82] = _tmp23 + _tmp58*_tmp59;
    result_value_ptr[83] = _tmp26;
    result_value_ptr[84] = -_tmp60;
    result_value_ptr[85] = _tmp36 - x0 - 3;
    result_value_ptr[86] = _tmp61 - _tmp7 + 2;
    result_value_ptr[87] = _tmp62 + x1 - 2;
    result_value_ptr[88] = _tmp63;
    result_value_ptr[89] = _tmp64;
    result_value_ptr[90] = _tmp11 + _tmp65;
    result_value_ptr[91] = _tmp66 + x3;
    result_value_ptr[92] = _tmp67;
    result_value_ptr[93] = -_tmp68*_tmp9;
    result_value_ptr[94] = _tmp70;
    result_value_ptr[95] = -_tmp33*(_tmp24 + x1);
    result_value_ptr[96] = -_tmp56*x2;
    result_value_ptr[97] = _tmp21 + 4*x4;
    result_value_ptr[98] = -_tmp26 - _tmp40;
    result_value_ptr[99] = -_tmp5;
    result_value_ptr[100] = -_tmp24 - Scalar(1)/Scalar(2)*_tmp34;
    result_value_ptr[101] = _tmp71;
    result_value_ptr[102] = -_tmp72 + 6*x1 + 6;
    result_value_ptr[103] = _tmp52;
    result_value_ptr[104] = -_tmp33*_tmp7;
    result_value_ptr[105] = -2;
    result_value_ptr[106] = _tmp46;
    result_value_ptr[107] = _tmp70;
    result_value_ptr[108] = _tmp74;
    result_value_ptr[109] = _tmp75;
    result_value_ptr[110] = _tmp6;
    result_value_ptr[111] = -_tmp0 - x4;
    result_value_ptr[112] = -_tmp77;
    result_value_ptr[113] = -_tmp78*(_tmp41 + 2);
    result_value_ptr[114] = 2;
    result_value_ptr[115] = -_tmp66 - 6;
    result_value_ptr[116] = _tmp7*_tmp79;
    result_value_ptr[117] = _tmp17 + _tmp69*x4;
    result_value_ptr[118] = 8 - x1;
    result_value_ptr[119] = _tmp24;
    result_value_ptr[120] = _tmp44;
    result_value_ptr[121] = -x0*(_tmp80 + x3);
    result_value_ptr[122] = -_tmp76 - x0;
    result_value_ptr[123] = -_tmp56*_tmp69;
    result_value_ptr[124] = _tmp81 + x3;
    result_value_ptr[125] = _tmp1;
    result_value_ptr[126] = -_tmp79*(_tmp82 - 1);
    result_value_ptr[127] = -_tmp0*_tmp50;
    result_value_ptr[128] = _tmp0;
    result_value_ptr[129] = _tmp56;
    result_value_ptr[130] = _tmp21*_tmp62*_tmp83;
    result_value_ptr[131] = -Scalar(1)/Scalar(2)*_tmp9;
    result_value_ptr[132] = _tmp17 + _tmp73;
    result_value_ptr[133] = _tmp34*_tmp62 + x3;
    result_value_ptr[134] = _tmp14 - _tmp34*x3;
    result_value_ptr[135] = _tmp84;
    result_value_ptr[136] = x1 + 4;
    result_value_ptr[137] = _tmp40 + x0;
    result_value_ptr[138] = _tmp85*x4;
    result_value_ptr[139] = _tmp13*_tmp86*x1;
    result_value_ptr[140] = 2;
    result_value_ptr[141] = _tmp70;
    result_value_ptr[142] = _tmp87;
    result_value_ptr[143] = _tmp51*x0;
    result_value_ptr[144] = -_tmp14/_tmp88;
    result_value_ptr[145] = -_tmp61*_tmp89;
    result_value_ptr[146] = 2;
    result_value_ptr[147] = _tmp90 + 4;
    result_value_ptr[148] = _tmp34 - 4;
    result_value_ptr[149] = _tmp16;
    result_value_ptr[150] = _tmp37*x1 + x2;
    result_value_ptr[151] = -_tmp57 - x1;
    result_value_ptr[152] = _tmp19 + _tmp6;
    result_value_ptr[153] = -_tmp15 - x4;
    result_value_ptr[154] = -_tmp58 - _tmp6;
    result_value_ptr[155] = -_tmp9*(x3 + 4);
    result_value_ptr[156] = -3;
    result_value_ptr[157] = _tmp13 + x1;
    result_value_ptr[158] = 1 - Scalar(1)/Scalar(2)*_tmp54;
    result_value_ptr[159] = _tmp91;
    result_value_ptr[160] = 4*_tmp62 - _tmp92;
    result_value_ptr[161] = _tmp39;
    result_value_ptr[162] = -x3/_tmp33;
    result_value_ptr[163] = -4*_tmp13;
    result_value_ptr[164] = -_tmp81 - 4;
    result_value_ptr[165] = _tmp48;
    result_value_ptr[166] = _tmp93 - 4;
    result_value_ptr[167] = 2*_tmp9;
    result_value_ptr[168] = _tmp29 + 2*_tmp62;
    result_value_ptr[169] = _tmp37*_tmp62 + 1;
    result_value_ptr[170] = _tmp94*x4;
    result_value_ptr[171] = _tmp69;
    result_value_ptr[172] = _tmp30;
    result_value_ptr[173] = x1*(_tmp95 + Scalar(0.5));
    result_value_ptr[174] = -_tmp96*(_tmp24 + _tmp86);
    result_value_ptr[175] = -_tmp42 - 6;
    result_value_ptr[176] = -_tmp52*_tmp69;
    result_value_ptr[177] = -Scalar(1.0)*[&]() { const Scalar base = x1; return base * base * base; }();
    result_value_ptr[178] = -_tmp75;
    result_value_ptr[179] = -_tmp40*x4 + x0;
    result_value_ptr[180] = -2/(_tmp22 + x0);
    result_value_ptr[181] = -_tmp24 - x2;
    result_value_ptr[182] = _tmp34 + _tmp88;
    result_value_ptr[183] = _tmp55;
    result_value_ptr[184] = _tmp41/(_tmp24 + _tmp33);
    result_value_ptr[185] = -_tmp15*_tmp54;
    result_value_ptr[186] = -_tmp80*x1;
    result_value_ptr[187] = _tmp97;
    result_value_ptr[188] = _tmp71;
    result_value_ptr[189] = _tmp98 - 1;
    result_value_ptr[190] = -_tmp99*(_tmp100 + x3);
    result_value_ptr[191] = -_tmp25;
    result_value_ptr[192] = _tmp11;
    result_value_ptr[193] = x1/(_tmp3 + _tmp43);
    result_value_ptr[194] = _tmp22;
    result_value_ptr[195] = -_tmp0 - 8;
    result_value_ptr[196] = -_tmp102;
    result_value_ptr[197] = -_tmp52;
    result_value_ptr[198] = _tmp1*x4 + _tmp41;
    result_value_ptr[199] = _tmp99*x2 + x0;
    result_value_ptr[200] = _tmp1 + 3*x1;
    result_value_ptr[201] = -_tmp45 - x3;
    result_value_ptr[202] = _tmp85;
    result_value_ptr[203] = -_tmp103 - _tmp17;
    result_value_ptr[204] = 2 - x0/_tmp84;
    result_value_ptr[205] = _tmp35*(2 - _tmp105);
    result_value_ptr[206] = x3;
    result_value_ptr[207] = -2;
    result_value_ptr[208] = x4 + 3;
    result_value_ptr[209] = -_tmp86*x3 + 1;
    result_value_ptr[210] = 10;
    result_value_ptr[211] = -_tmp96*x1;
    result_value_ptr[212] = -_tmp19 - _tmp98 - 3;
    result_value_ptr[213] = _tmp60;
    result_value_ptr[214] = _tmp24 + _tmp3;
    result_value_ptr[215] = 2 - 2/_tmp12;
    result_value_ptr[216] = -_tmp34 - 2;
    result_value_ptr[217] = 9;
    result_value_ptr[218] = -_tmp29 - x2;
    result_value_ptr[219] = _tmp74;
    result_value_ptr[220] = -_tmp51*_tmp76 + 2;
    result_value_ptr[221] = _tmp97;
    result_value_ptr[222] = _tmp96 - 4;
    result_value_ptr[223] = -x2 + Scalar(-2.0);
    result_value_ptr[224] = -_tmp64*x1 + x0;
    result_value_ptr[225] = -_tmp106 - _tmp107;
    result_value_ptr[226] = _tmp108;
    result_value_ptr[227] = -4*_tmp68;
    result_value_ptr[228] = _tmp51 + _tmp59;
    result_value_ptr[229] = _tmp7*x4*(_tmp82 + 2);
    result_value_ptr[230] = -x2 - 4;
    result_value_ptr[231] = _tmp87;
    result_value_ptr[232] = 2 - _tmp79;
    result_value_ptr[233] = -1;
    result_value_ptr[234] = _tmp50;
    result_value_ptr[235] = 1;
    result_value_ptr[236] = _tmp14*x4;
    result_value_ptr[237] = 1;
    result_value_ptr[238] = _tmp53;
    result_value_ptr[239] = _tmp1 + _tmp21 + _tmp57 - 4;
    result_value_ptr[240] = _tmp103*_tmp13;
    result_value_ptr[241] = x2*(-_tmp106*_tmp35 + _tmp20);
    result_value_ptr[242] = _tmp94;
    result_value_ptr[243] = _tmp19 + x1 + Scalar(2.0);
    result_value_ptr[244] = _tmp104*(_tmp11 + _tmp51);
    result_value_ptr[245] = _tmp1 + 1;
    result_value_ptr[246] = _tmp86;
    result_value_ptr[247] = _tmp24 + _tmp4;
    result_value_ptr[248] = -_tmp17 - _tmp25;
    result_value_ptr[249] = _tmp2 + x2;
    result_value_ptr[250] = -_tmp24 - x1*(_tmp7 + 2);
    result_value_ptr[251] = _tmp13;
    result_value_ptr[252] = _tmp6;
    result_value_ptr[253] = -4;
    result_value_ptr[254] = -_tmp77 - 2;
    result_value_ptr[255] = (Scalar(1)/Scalar(4))*_tmp58*_tmp79;
    result_value_ptr[256] = 4 - _tmp33;
    result_value_ptr[257] = _tmp105;
    result_value_ptr[258] = _tmp66 + 4;
    result_value_ptr[259] = -_tmp72 - _tmp99;
    result_value_ptr[260] = _tmp6 + 2;
    result_value_ptr[261] = -_tmp26 - _tmp73;
    result_value_ptr[262] = _tmp100;
    result_value_ptr[263] = 2*_tmp54;
    result_value_ptr[264] = -_tmp98;
    result_value_ptr[265] = 4*_tmp61;
    result_value_ptr[266] = _tmp15 - _tmp21;
    result_value_ptr[267] = x4 + x0/_tmp96;
    result_value_ptr[268] = _tmp38 - 2;
    result_value_ptr[269] = x3*(_tmp100 + _tmp24);
    result_value_ptr[270] = _tmp0 + _tmp92;
    result_value_ptr[271] = 2;
    result_value_ptr[272] = -_tmp7*x3;
    result_value_ptr[273] = [&]() { const Scalar base = x2; return base * base * base; }() - 1;
    result_value_ptr[274] = -x1*(_tmp21 + 4);
    result_value_ptr[275] = -_tmp93;
    result_value_ptr[276] = _tmp21 + 2*_tmp7;
    result_value_ptr[277] = -_tmp65;
    result_value_ptr[278] = _tmp30 + _tmp33 + x0;
    result_value_ptr[279] = _tmp89;
    result_value_ptr[280] = (Scalar(1)/Scalar(4))*x0;
    result_value_ptr[281] = _tmp17;
    result_value_ptr[282] = x3*(_tmp41 + 5);
    result_value_ptr[283] = x2;
    result_value_ptr[284] = -_tmp41*_tmp83;
    result_value_ptr[285] = -2;
    result_value_ptr[286] = x0 + x1;
    result_value_ptr[287] = _tmp102;
    result_value_ptr[288] = _tmp108;
    result_value_ptr[289] = _tmp3*_tmp60;
    result_value_ptr[290] = _tmp52*_tmp54*x0;
    result_value_ptr[291] = -_tmp90*x4;
    result_value_ptr[292] = -_tmp58*x3 - x2;
    result_value_ptr[293] = _tmp109;
    result_value_ptr[294] = Scalar(-0.14285714285714285);
    result_value_ptr[295] = -x4*(_tmp19 + _tmp3);
    result_value_ptr[296] = _tmp15 + _tmp78 + x0;
    result_value_ptr[297] = _tmp38 + _tmp46;
    result_value_ptr[298] = -_tmp100;
    result_value_ptr[299] = -_tmp107 - _tmp20;
    result_value_ptr[300] = -_tmp78;
    result_value_ptr[301] = -Scalar(1)/Scalar(2)*_tmp58*x4;
    result_value_ptr[302] = -x3/(_tmp95 + x0);
    result_value_ptr[303] = -_tmp29 - x1;
    result_value_ptr[304] = -std::pow(x1, Scalar(2))*x2;
    result_value_ptr[305] = -x3 - 3;
    result_value_ptr[306] = -1;
    result_value_ptr[307] = _tmp2*x0;
    result_value_ptr[308] = _tmp108;
    result_value_ptr[309] = -_tmp16;
    result_value_ptr[310] = -_tmp109 - _tmp30;
    result_value_ptr[311] = _tmp101;
    result_value_ptr[312] = -x0/(_tmp33 - 2);
    result_value_ptr[313] = -_tmp68;
    result_value_ptr[314] = -4;
    result_value_ptr[315] = -_tmp53 - _tmp95 + 1;
    result_value_ptr[316] = _tmp14 + _tmp33;
    result_value_ptr[317] = -_tmp32 - x4;
    result_value_ptr[318] = x0 - 4;
    result_value_ptr[319] = 1;
    result_value_ptr[320] = _tmp63;
    result_value_ptr[321] = -_tmp1 - 4;
    result_value_ptr[322] = -_tmp91;
    result_value_ptr[323] = 2 - _tmp21;
    result_value_ptr[324] = x2*(_tmp104 + _tmp6);
    result_value_ptr[325] = -_tmp15*x0 - x0;
    result_value_ptr[326] = x2;
    result_value_ptr[327] = 4 - _tmp0;
    result_value_ptr[328] = _tmp100*(_tmp11 + x0);
    result_value_ptr[329] = x3;
    result_value_ptr[330] = 2;

    return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
