// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>
#include <Eigen/Sparse>



namespace sym {


/**
* This function was autogenerated. Do not modify by hand.
*
* Args:
*     x0: Scalar
*     x1: Scalar
*     x2: Scalar
*     x3: Scalar
*     x4: Scalar
*
* Outputs:
*     result: Matrix100_100
*/
template <typename Scalar>
Eigen::SparseMatrix<Scalar> ComputeARotor1(const Scalar x0, const Scalar x1, const Scalar x2, const Scalar x3, const Scalar x4) {

    // Total ops: 1035

    // Input arrays

    // Intermediate terms (202)
    const Scalar _tmp0 = 2*x2;
    const Scalar _tmp1 = _tmp0 - 1;
    const Scalar _tmp2 = _tmp0 + 2;
    const Scalar _tmp3 = x2 + 1;
    const Scalar _tmp4 = -x0 - 6;
    const Scalar _tmp5 = Scalar(1.0) / (x2);
    const Scalar _tmp6 = Scalar(1.0) / (x4);
    const Scalar _tmp7 = _tmp6*x3;
    const Scalar _tmp8 = 2*x0;
    const Scalar _tmp9 = 2*x3;
    const Scalar _tmp10 = _tmp9 - 2;
    const Scalar _tmp11 = std::pow(x2, Scalar(2));
    const Scalar _tmp12 = -x4;
    const Scalar _tmp13 = x4 + 1;
    const Scalar _tmp14 = -x1;
    const Scalar _tmp15 = _tmp14 + x0;
    const Scalar _tmp16 = Scalar(1.0) / (_tmp15);
    const Scalar _tmp17 = x1 + 1;
    const Scalar _tmp18 = _tmp12 + _tmp17;
    const Scalar _tmp19 = x0 - 2;
    const Scalar _tmp20 = -x0;
    const Scalar _tmp21 = x3 - 3;
    const Scalar _tmp22 = 4*x2;
    const Scalar _tmp23 = _tmp6*x1;
    const Scalar _tmp24 = std::pow(x1, Scalar(2));
    const Scalar _tmp25 = x0 + 2;
    const Scalar _tmp26 = _tmp5*x4;
    const Scalar _tmp27 = -_tmp26;
    const Scalar _tmp28 = x4 + 2;
    const Scalar _tmp29 = _tmp28 + x2;
    const Scalar _tmp30 = x0*x2;
    const Scalar _tmp31 = x4 - 4;
    const Scalar _tmp32 = 2*x1;
    const Scalar _tmp33 = _tmp9 + 1;
    const Scalar _tmp34 = _tmp25*x1;
    const Scalar _tmp35 = _tmp32 + 2;
    const Scalar _tmp36 = -x2;
    const Scalar _tmp37 = Scalar(1.0) / (x0);
    const Scalar _tmp38 = 4*x1;
    const Scalar _tmp39 = std::pow(x3, Scalar(2));
    const Scalar _tmp40 = x1 + x2;
    const Scalar _tmp41 = -_tmp19;
    const Scalar _tmp42 = _tmp40 + 4;
    const Scalar _tmp43 = x0 + x2;
    const Scalar _tmp44 = x2 - 2;
    const Scalar _tmp45 = _tmp44*x4;
    const Scalar _tmp46 = _tmp12 + x1;
    const Scalar _tmp47 = x1 + 2;
    const Scalar _tmp48 = x2 - 1;
    const Scalar _tmp49 = x1 + 4;
    const Scalar _tmp50 = x0 - 1;
    const Scalar _tmp51 = x3 - 1;
    const Scalar _tmp52 = std::pow(x4, Scalar(2));
    const Scalar _tmp53 = -_tmp30;
    const Scalar _tmp54 = x0*x1;
    const Scalar _tmp55 = (Scalar(1)/Scalar(2))*x4 + Scalar(1)/Scalar(2);
    const Scalar _tmp56 = _tmp44*x0;
    const Scalar _tmp57 = _tmp56 + 1;
    const Scalar _tmp58 = _tmp32*x4;
    const Scalar _tmp59 = -_tmp58;
    const Scalar _tmp60 = 2*x4;
    const Scalar _tmp61 = -x3;
    const Scalar _tmp62 = x3*x4;
    const Scalar _tmp63 = -_tmp12 - _tmp62 - 1;
    const Scalar _tmp64 = _tmp0*x0;
    const Scalar _tmp65 = _tmp47 + _tmp61;
    const Scalar _tmp66 = _tmp19 + x2;
    const Scalar _tmp67 = -_tmp9;
    const Scalar _tmp68 = -_tmp0;
    const Scalar _tmp69 = x4 - 3;
    const Scalar _tmp70 = -_tmp62;
    const Scalar _tmp71 = x3 + 1;
    const Scalar _tmp72 = _tmp61 + x0;
    const Scalar _tmp73 = _tmp60 + 2;
    const Scalar _tmp74 = x2*x4;
    const Scalar _tmp75 = (Scalar(1)/Scalar(4))*x2;
    const Scalar _tmp76 = x1*x4;
    const Scalar _tmp77 = x2 + 2;
    const Scalar _tmp78 = std::pow(x0, Scalar(2));
    const Scalar _tmp79 = x0 + x3;
    const Scalar _tmp80 = Scalar(1.0) / (x1);
    const Scalar _tmp81 = x1 + x4;
    const Scalar _tmp82 = 2*_tmp5;
    const Scalar _tmp83 = _tmp15 + 1;
    const Scalar _tmp84 = -_tmp83;
    const Scalar _tmp85 = _tmp9*x4;
    const Scalar _tmp86 = _tmp61 + x1;
    const Scalar _tmp87 = _tmp60 - 2;
    const Scalar _tmp88 = x1 - 2;
    const Scalar _tmp89 = _tmp80*x4;
    const Scalar _tmp90 = _tmp32 + x0;
    const Scalar _tmp91 = _tmp78*x4;
    const Scalar _tmp92 = _tmp0*x1;
    const Scalar _tmp93 = _tmp12 + x0;
    const Scalar _tmp94 = _tmp81 - 1;
    const Scalar _tmp95 = 4*_tmp5;
    const Scalar _tmp96 = _tmp19*x0;
    const Scalar _tmp97 = x0*x3;
    const Scalar _tmp98 = _tmp60 + x2;
    const Scalar _tmp99 = x3 + 2;
    const Scalar _tmp100 = -_tmp60;
    const Scalar _tmp101 = Scalar(1.0) / (_tmp3);
    const Scalar _tmp102 = _tmp13*x4;
    const Scalar _tmp103 = x4 - 1;
    const Scalar _tmp104 = _tmp8*x3;
    const Scalar _tmp105 = _tmp104 + _tmp20;
    const Scalar _tmp106 = 4*x3;
    const Scalar _tmp107 = x2*x3;
    const Scalar _tmp108 = x4 - 2;
    const Scalar _tmp109 = _tmp108*x0;
    const Scalar _tmp110 = _tmp0 + 4;
    const Scalar _tmp111 = _tmp74 - 1;
    const Scalar _tmp112 = _tmp99 + x2;
    const Scalar _tmp113 = 3*x4;
    const Scalar _tmp114 = 2*_tmp37;
    const Scalar _tmp115 = _tmp39*x0;
    const Scalar _tmp116 = _tmp76 - 1;
    const Scalar _tmp117 = _tmp37*x4;
    const Scalar _tmp118 = _tmp8 + x4;
    const Scalar _tmp119 = -_tmp107;
    const Scalar _tmp120 = x2 + x4;
    const Scalar _tmp121 = _tmp20 + x3;
    const Scalar _tmp122 = _tmp32 + _tmp9;
    const Scalar _tmp123 = _tmp122 + 4;
    const Scalar _tmp124 = _tmp9 + x4;
    const Scalar _tmp125 = x0 + 1;
    const Scalar _tmp126 = -_tmp32;
    const Scalar _tmp127 = -_tmp8;
    const Scalar _tmp128 = _tmp88 + x4;
    const Scalar _tmp129 = _tmp125 + _tmp36;
    const Scalar _tmp130 = Scalar(1.0) / (_tmp120);
    const Scalar _tmp131 = x3 - 2;
    const Scalar _tmp132 = x0*x4;
    const Scalar _tmp133 = _tmp14 + 1;
    const Scalar _tmp134 = _tmp131*x2;
    const Scalar _tmp135 = x1*x3;
    const Scalar _tmp136 = _tmp135 + 1;
    const Scalar _tmp137 = x2 + x3;
    const Scalar _tmp138 = _tmp17*x1;
    const Scalar _tmp139 = x1*x2;
    const Scalar _tmp140 = _tmp32 + 1;
    const Scalar _tmp141 = _tmp9 - 1;
    const Scalar _tmp142 = -_tmp25 - _tmp61;
    const Scalar _tmp143 = (Scalar(1)/Scalar(2))*_tmp11;
    const Scalar _tmp144 = x1 + x3;
    const Scalar _tmp145 = x2 - 3;
    const Scalar _tmp146 = _tmp8 + x1;
    const Scalar _tmp147 = 4 - _tmp32;
    const Scalar _tmp148 = _tmp5*x0;
    const Scalar _tmp149 = _tmp36 + x0;
    const Scalar _tmp150 = _tmp0*x4;
    const Scalar _tmp151 = 4*x4;
    const Scalar _tmp152 = Scalar(1.0) / (_tmp50);
    const Scalar _tmp153 = _tmp9*x1;
    const Scalar _tmp154 = _tmp30*x3;
    const Scalar _tmp155 = Scalar(1.0) / (x3);
    const Scalar _tmp156 = _tmp36 + x1;
    const Scalar _tmp157 = x1 - 1;
    const Scalar _tmp158 = _tmp60 + 6;
    const Scalar _tmp159 = _tmp155*x1;
    const Scalar _tmp160 = _tmp159 + x4;
    const Scalar _tmp161 = -_tmp151;
    const Scalar _tmp162 = _tmp37*x1;
    const Scalar _tmp163 = _tmp14 + x3;
    const Scalar _tmp164 = _tmp92 + x2;
    const Scalar _tmp165 = _tmp24*x4;
    const Scalar _tmp166 = _tmp135 + 2;
    const Scalar _tmp167 = -3*x1;
    const Scalar _tmp168 = -_tmp20 - _tmp71;
    const Scalar _tmp169 = x3 + x4;
    const Scalar _tmp170 = _tmp13 + _tmp61;
    const Scalar _tmp171 = -_tmp170;
    const Scalar _tmp172 = _tmp97 - 1;
    const Scalar _tmp173 = _tmp26*x3;
    const Scalar _tmp174 = _tmp36 + _tmp71;
    const Scalar _tmp175 = _tmp8*x4;
    const Scalar _tmp176 = x0 + x4;
    const Scalar _tmp177 = -_tmp78;
    const Scalar _tmp178 = x0 + x1;
    const Scalar _tmp179 = -x2 - 3;
    const Scalar _tmp180 = -_tmp157;
    const Scalar _tmp181 = (Scalar(1)/Scalar(2))*x1;
    const Scalar _tmp182 = 2*_tmp24;
    const Scalar _tmp183 = x2 + 4;
    const Scalar _tmp184 = -_tmp0*_tmp132;
    const Scalar _tmp185 = _tmp144 - 1;
    const Scalar _tmp186 = _tmp8 + 2;
    const Scalar _tmp187 = -_tmp100 - _tmp9;
    const Scalar _tmp188 = _tmp37*_tmp9;
    const Scalar _tmp189 = _tmp12 + x3;
    const Scalar _tmp190 = _tmp40 + x3;
    const Scalar _tmp191 = _tmp37*x2;
    const Scalar _tmp192 = _tmp155*x0;
    const Scalar _tmp193 = _tmp0*x3;
    const Scalar _tmp194 = _tmp28 + _tmp36;
    const Scalar _tmp195 = Scalar(1.0)*x1;
    const Scalar _tmp196 = _tmp13 + x1;
    const Scalar _tmp197 = _tmp156*x3;
    const Scalar _tmp198 = _tmp8 - 2;
    const Scalar _tmp199 = _tmp5*x1;
    const Scalar _tmp200 = -_tmp99*x1;
    const Scalar _tmp201 = _tmp12 + x2;

    // Output terms (1)
    static constexpr int kRows_result = 100;
    static constexpr int kCols_result = 100;
    static constexpr int kNumNonZero_result = 688;
    static constexpr int kColPtrs_result[] = {0, 2, 4, 6, 15, 24, 34, 43, 52, 61, 95, 131, 165, 172, 179, 186, 199, 212, 224, 228, 232, 236, 238, 240, 242, 248, 254, 260, 273, 286, 297, 301, 305, 309, 311, 313, 315, 321, 328, 335, 348, 361, 374, 378, 382, 386, 388, 389, 391, 398, 405, 412, 425, 438, 451, 455, 459, 463, 465, 467, 469, 470, 471, 472, 473, 474, 475, 477, 479, 481, 486, 492, 498, 502, 506, 510, 518, 526, 534, 546, 550, 554, 558, 565, 573, 581, 592, 596, 600, 604, 612, 620, 628, 640, 644, 648, 652, 660, 668, 676, 688};
    static constexpr int kRowIndices_result[] = {60, 66, 61, 67, 62, 68, 3, 4, 5, 9, 10, 11, 69, 70, 71, 3, 4, 5, 9, 10, 11, 69, 70, 71, 3, 4, 5, 9, 10, 11, 65, 69, 70, 71, 66, 72, 75, 79, 82, 86, 89, 93, 96, 67, 73, 76, 80, 83, 87, 90, 94, 97, 68, 74, 77, 81, 84, 88, 91, 95, 98, 3, 4, 5, 9, 10, 11, 21, 22, 23, 33, 34, 35, 45, 47, 57, 58, 59, 69, 70, 71, 73, 74, 76, 77, 80, 81, 84, 87, 88, 90, 94, 95, 97, 98, 3, 4, 5, 9, 10, 11, 21, 22, 23, 33, 34, 35, 45, 46, 47, 57, 58, 59, 69, 70, 71, 74, 75, 77, 79, 81, 82, 84, 86, 88, 89, 91, 93, 95, 96, 98, 3, 5, 9, 10, 11, 21, 22, 23, 33, 34, 35, 45, 46, 47, 57, 58, 59, 69, 70, 71, 72, 75, 76, 79, 80, 82, 83, 86, 87, 90, 93, 94, 96, 97, 12, 16, 17, 22, 23, 72, 75, 13, 15, 17, 21, 23, 73, 76, 14, 15, 16, 21, 22, 74, 77, 9, 10, 11, 13, 14, 15, 16, 17, 21, 22, 23, 76, 77, 9, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 75, 77, 9, 11, 12, 13, 15, 16, 17, 21, 22, 23, 75, 76, 12, 18, 22, 23, 13, 19, 21, 23, 14, 20, 21, 22, 15, 21, 16, 22, 17, 23, 24, 29, 34, 35, 79, 82, 25, 27, 29, 33, 80, 83, 26, 28, 33, 34, 81, 84, 9, 10, 11, 25, 26, 27, 28, 29, 33, 34, 35, 83, 84, 9, 10, 11, 24, 26, 27, 28, 29, 33, 34, 35, 82, 84, 9, 10, 24, 25, 27, 28, 29, 33, 34, 82, 83, 24, 30, 34, 35, 25, 31, 33, 35, 26, 32, 33, 34, 27, 33, 28, 34, 29, 35, 36, 41, 46, 47, 86, 89, 37, 39, 41, 45, 47, 87, 90, 38, 39, 40, 45, 46, 88, 91, 9, 10, 11, 37, 38, 39, 40, 41, 45, 46, 47, 90, 91, 9, 10, 11, 36, 38, 39, 40, 41, 45, 46, 47, 89, 91, 9, 10, 11, 36, 37, 39, 40, 41, 45, 46, 47, 89, 90, 36, 42, 46, 47, 37, 43, 45, 47, 38, 44, 45, 46, 39, 45, 40, 41, 47, 48, 52, 53, 58, 59, 93, 96, 49, 51, 53, 57, 59, 94, 97, 50, 51, 52, 57, 58, 95, 98, 9, 10, 11, 49, 50, 51, 52, 53, 57, 58, 59, 97, 98, 9, 10, 11, 48, 50, 51, 52, 53, 57, 58, 59, 96, 98, 9, 10, 11, 48, 49, 51, 52, 53, 57, 58, 59, 96, 97, 48, 54, 58, 59, 49, 55, 57, 59, 50, 56, 57, 58, 51, 57, 52, 58, 53, 59, 0, 1, 2, 3, 4, 5, 0, 6, 1, 7, 2, 8, 3, 4, 5, 9, 11, 3, 4, 5, 9, 10, 11, 3, 4, 5, 9, 10, 11, 6, 10, 11, 18, 7, 9, 11, 19, 8, 9, 10, 20, 6, 10, 11, 18, 22, 23, 75, 78, 7, 9, 11, 19, 21, 23, 76, 78, 8, 9, 10, 20, 21, 22, 77, 78, 6, 7, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 6, 10, 11, 30, 7, 9, 11, 31, 8, 9, 10, 32, 6, 10, 11, 30, 34, 35, 82, 7, 9, 11, 31, 33, 35, 83, 85, 8, 9, 10, 32, 33, 34, 84, 85, 6, 7, 8, 9, 10, 30, 31, 32, 33, 34, 35, 6, 10, 11, 42, 7, 9, 11, 43, 8, 9, 10, 44, 6, 10, 11, 42, 46, 47, 89, 92, 7, 9, 11, 43, 45, 47, 90, 92, 8, 9, 10, 44, 45, 46, 91, 92, 6, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 47, 6, 10, 11, 54, 7, 9, 11, 55, 8, 9, 10, 56, 6, 10, 11, 54, 58, 59, 96, 99, 7, 9, 11, 55, 57, 59, 97, 99, 8, 9, 10, 56, 57, 58, 98, 99, 6, 7, 8, 9, 10, 11, 54, 55, 56, 57, 58, 59};
    Scalar result_empty_value_ptr[688];
    Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
        kRows_result,
        kCols_result,
        kNumNonZero_result,
        kColPtrs_result,
        kRowIndices_result,
        result_empty_value_ptr
    );
    Scalar* result_value_ptr = result.valuePtr();


    result_value_ptr[0] = Scalar(-1.0);
    result_value_ptr[1] = _tmp1*x3;
    result_value_ptr[2] = Scalar(1.0);
    result_value_ptr[3] = -_tmp2;
    result_value_ptr[4] = _tmp3;
    result_value_ptr[5] = _tmp4;
    result_value_ptr[6] = -_tmp5*_tmp7;
    result_value_ptr[7] = _tmp10 + _tmp8;
    result_value_ptr[8] = -4*_tmp11 - x4;
    result_value_ptr[9] = _tmp12;
    result_value_ptr[10] = _tmp13;
    result_value_ptr[11] = _tmp16*x2;
    result_value_ptr[12] = _tmp18;
    result_value_ptr[13] = -x3*(_tmp19 + x3);
    result_value_ptr[14] = _tmp17 + _tmp20;
    result_value_ptr[15] = _tmp21;
    result_value_ptr[16] = _tmp22*x1 + 2;
    result_value_ptr[17] = _tmp12 + _tmp23 + 2;
    result_value_ptr[18] = _tmp24;
    result_value_ptr[19] = -_tmp25;
    result_value_ptr[20] = _tmp27 + x3;
    result_value_ptr[21] = -_tmp29*_tmp30;
    result_value_ptr[22] = -_tmp31*x1;
    result_value_ptr[23] = -_tmp22 + x0;
    result_value_ptr[24] = -_tmp26*_tmp32;
    result_value_ptr[25] = -_tmp20 - _tmp33;
    result_value_ptr[26] = 2 - _tmp34;
    result_value_ptr[27] = -_tmp21;
    result_value_ptr[28] = -_tmp35 - _tmp8;
    result_value_ptr[29] = _tmp36;
    result_value_ptr[30] = -_tmp37*_tmp38 - 2;
    result_value_ptr[31] = x4*(_tmp39 + 1);
    result_value_ptr[32] = -1;
    result_value_ptr[33] = -_tmp40;
    result_value_ptr[34] = _tmp41;
    result_value_ptr[35] = x4*(_tmp42 + x0);
    result_value_ptr[36] = _tmp17;
    result_value_ptr[37] = _tmp43*_tmp45;
    result_value_ptr[38] = -x2 + Scalar(2.0)*x4;
    result_value_ptr[39] = -_tmp3 - _tmp46;
    result_value_ptr[40] = -x3*(_tmp20 + _tmp47);
    result_value_ptr[41] = _tmp48*x2 + x1;
    result_value_ptr[42] = _tmp49;
    result_value_ptr[43] = _tmp50*x4 + _tmp51;
    result_value_ptr[44] = _tmp52*_tmp9;
    result_value_ptr[45] = _tmp14;
    result_value_ptr[46] = 4;
    result_value_ptr[47] = _tmp53;
    result_value_ptr[48] = _tmp15*x4;
    result_value_ptr[49] = _tmp1;
    result_value_ptr[50] = _tmp54;
    result_value_ptr[51] = -_tmp31 - x0;
    result_value_ptr[52] = 1;
    result_value_ptr[53] = 2 - _tmp52;
    result_value_ptr[54] = x0*(_tmp55 + x1);
    result_value_ptr[55] = -_tmp57 - x3;
    result_value_ptr[56] = -_tmp59 - x0;
    result_value_ptr[57] = _tmp30 + _tmp60;
    result_value_ptr[58] = _tmp61;
    result_value_ptr[59] = -x2/_tmp17;
    result_value_ptr[60] = -_tmp3 - x3;
    result_value_ptr[61] = _tmp21 + x0;
    result_value_ptr[62] = _tmp63;
    result_value_ptr[63] = x4*(_tmp64 + 2);
    result_value_ptr[64] = -_tmp24*_tmp37;
    result_value_ptr[65] = _tmp65*x0;
    result_value_ptr[66] = -4;
    result_value_ptr[67] = _tmp7;
    result_value_ptr[68] = -_tmp32*_tmp66;
    result_value_ptr[69] = x2*(_tmp9 + x0);
    result_value_ptr[70] = _tmp67;
    result_value_ptr[71] = -_tmp47 - _tmp68 - x4;
    result_value_ptr[72] = _tmp69;
    result_value_ptr[73] = (Scalar(3)/Scalar(2))*x0;
    result_value_ptr[74] = -_tmp70 - _tmp71;
    result_value_ptr[75] = _tmp72*x4;
    result_value_ptr[76] = _tmp32*_tmp5;
    result_value_ptr[77] = _tmp73;
    result_value_ptr[78] = -_tmp43 - _tmp74;
    result_value_ptr[79] = _tmp66;
    result_value_ptr[80] = _tmp75;
    result_value_ptr[81] = -_tmp12 - _tmp76;
    result_value_ptr[82] = -_tmp20 - _tmp77;
    result_value_ptr[83] = _tmp58;
    result_value_ptr[84] = 2*_tmp78;
    result_value_ptr[85] = -_tmp15 - 2;
    result_value_ptr[86] = -_tmp32*_tmp79 - _tmp61;
    result_value_ptr[87] = -2;
    result_value_ptr[88] = -4*_tmp52*_tmp80;
    result_value_ptr[89] = _tmp67 + _tmp81;
    result_value_ptr[90] = -_tmp71 + (Scalar(3)/Scalar(2))*x1;
    result_value_ptr[91] = -_tmp47;
    result_value_ptr[92] = -_tmp48 - _tmp61 - _tmp82;
    result_value_ptr[93] = _tmp35;
    result_value_ptr[94] = 2/_tmp19;
    result_value_ptr[95] = _tmp84;
    result_value_ptr[96] = _tmp85;
    result_value_ptr[97] = -_tmp86*x0;
    result_value_ptr[98] = _tmp12;
    result_value_ptr[99] = _tmp87*x2;
    result_value_ptr[100] = x0;
    result_value_ptr[101] = _tmp74*_tmp88;
    result_value_ptr[102] = _tmp81;
    result_value_ptr[103] = -_tmp89;
    result_value_ptr[104] = _tmp90;
    result_value_ptr[105] = 6*x0 - 2;
    result_value_ptr[106] = 2 - _tmp91;
    result_value_ptr[107] = -_tmp92;
    result_value_ptr[108] = -_tmp28*_tmp37 - x0;
    result_value_ptr[109] = _tmp39*_tmp93;
    result_value_ptr[110] = x0;
    result_value_ptr[111] = x4/(_tmp0 + x4);
    result_value_ptr[112] = _tmp94*x3 + 1;
    result_value_ptr[113] = _tmp95 + x1;
    result_value_ptr[114] = _tmp96;
    result_value_ptr[115] = x3*(_tmp20 + _tmp97);
    result_value_ptr[116] = Scalar(2.0)*_tmp25*x2;
    result_value_ptr[117] = _tmp19 + _tmp98;
    result_value_ptr[118] = 8 - _tmp8;
    result_value_ptr[119] = Scalar(1)/Scalar(2);
    result_value_ptr[120] = -_tmp99*x2 + 2;
    result_value_ptr[121] = _tmp38 + _tmp60;
    result_value_ptr[122] = -_tmp79;
    result_value_ptr[123] = -_tmp100 - _tmp49;
    result_value_ptr[124] = _tmp101*x4 + 1;
    result_value_ptr[125] = -_tmp102;
    result_value_ptr[126] = -_tmp36 - _tmp38;
    result_value_ptr[127] = -_tmp2 - _tmp32;
    result_value_ptr[128] = _tmp15 + _tmp71;
    result_value_ptr[129] = -_tmp36 - _tmp86*x1;
    result_value_ptr[130] = _tmp103*_tmp80 - x2;
    result_value_ptr[131] = _tmp60;
    result_value_ptr[132] = _tmp105*x2;
    result_value_ptr[133] = _tmp52;
    result_value_ptr[134] = 3;
    result_value_ptr[135] = -_tmp106 - 1;
    result_value_ptr[136] = -_tmp34;
    result_value_ptr[137] = _tmp28 + _tmp54;
    result_value_ptr[138] = -2;
    result_value_ptr[139] = _tmp107 + _tmp109;
    result_value_ptr[140] = -_tmp110 - _tmp67;
    result_value_ptr[141] = _tmp13*_tmp30;
    result_value_ptr[142] = _tmp111*x0 - 2;
    result_value_ptr[143] = _tmp29;
    result_value_ptr[144] = -_tmp112*x3;
    result_value_ptr[145] = -Scalar(2.0)*x0;
    result_value_ptr[146] = -_tmp77;
    result_value_ptr[147] = _tmp113;
    result_value_ptr[148] = -x1*(-_tmp114 + x3);
    result_value_ptr[149] = _tmp44;
    result_value_ptr[150] = -_tmp115;
    result_value_ptr[151] = _tmp116*_tmp79;
    result_value_ptr[152] = _tmp117/(_tmp8 + 1) + x3;
    result_value_ptr[153] = 2;
    result_value_ptr[154] = _tmp60;
    result_value_ptr[155] = -_tmp118*_tmp60;
    result_value_ptr[156] = -x3*(_tmp119 + x0);
    result_value_ptr[157] = _tmp107;
    result_value_ptr[158] = -_tmp120 - _tmp121;
    result_value_ptr[159] = _tmp60 - 4;
    result_value_ptr[160] = _tmp123;
    result_value_ptr[161] = _tmp63;
    result_value_ptr[162] = -_tmp26/(_tmp13 + x3);
    result_value_ptr[163] = -x4 + Scalar(-1.0);
    result_value_ptr[164] = _tmp120;
    result_value_ptr[165] = _tmp68 + _tmp99;
    result_value_ptr[166] = _tmp124;
    result_value_ptr[167] = _tmp125*x3 - x2;
    result_value_ptr[168] = _tmp76;
    result_value_ptr[169] = -_tmp43;
    result_value_ptr[170] = _tmp125;
    result_value_ptr[171] = -_tmp126 - _tmp8;
    result_value_ptr[172] = -_tmp127 - _tmp98;
    result_value_ptr[173] = _tmp115;
    result_value_ptr[174] = _tmp128;
    result_value_ptr[175] = -_tmp129;
    result_value_ptr[176] = -_tmp130*_tmp9 + 1;
    result_value_ptr[177] = _tmp131;
    result_value_ptr[178] = _tmp50*x0;
    result_value_ptr[179] = _tmp106 - _tmp32;
    result_value_ptr[180] = _tmp62*x1;
    result_value_ptr[181] = -_tmp44;
    result_value_ptr[182] = -_tmp117 - _tmp121;
    result_value_ptr[183] = _tmp8 + 3;
    result_value_ptr[184] = -_tmp106*_tmp13;
    result_value_ptr[185] = x1*(_tmp87 + x3);
    result_value_ptr[186] = _tmp43*(_tmp0 + _tmp61);
    result_value_ptr[187] = -_tmp122;
    result_value_ptr[188] = _tmp78 + x3;
    result_value_ptr[189] = -_tmp107 - _tmp112;
    result_value_ptr[190] = -Scalar(0.5)*_tmp37*_tmp80;
    result_value_ptr[191] = _tmp100;
    result_value_ptr[192] = _tmp100 + _tmp8;
    result_value_ptr[193] = -_tmp28 - _tmp40;
    result_value_ptr[194] = -_tmp132 - _tmp133 - _tmp61;
    result_value_ptr[195] = _tmp134;
    result_value_ptr[196] = _tmp136;
    result_value_ptr[197] = -_tmp137 - 4;
    result_value_ptr[198] = _tmp20;
    result_value_ptr[199] = _tmp119;
    result_value_ptr[200] = _tmp108*x2 - x1;
    result_value_ptr[201] = _tmp138 + x1;
    result_value_ptr[202] = -_tmp139*_tmp52;
    result_value_ptr[203] = _tmp11;
    result_value_ptr[204] = -_tmp94;
    result_value_ptr[205] = _tmp78*_tmp99 - 1;
    result_value_ptr[206] = _tmp37*x3 + 2;
    result_value_ptr[207] = _tmp140;
    result_value_ptr[208] = x1*(_tmp37 + 2);
    result_value_ptr[209] = _tmp60 + 1;
    result_value_ptr[210] = _tmp141;
    result_value_ptr[211] = x2*(_tmp50 + x4);
    result_value_ptr[212] = _tmp52;
    result_value_ptr[213] = -4*_tmp56;
    result_value_ptr[214] = -_tmp103*x4;
    result_value_ptr[215] = -_tmp141*x3;
    result_value_ptr[216] = -2;
    result_value_ptr[217] = -_tmp21 - x2;
    result_value_ptr[218] = -_tmp131*x0 + 2;
    result_value_ptr[219] = -_tmp78*x1;
    result_value_ptr[220] = -_tmp57;
    result_value_ptr[221] = _tmp142;
    result_value_ptr[222] = -_tmp44*x2;
    result_value_ptr[223] = -_tmp108*x1;
    result_value_ptr[224] = -_tmp143 - _tmp19;
    result_value_ptr[225] = _tmp36;
    result_value_ptr[226] = -Scalar(1)/Scalar(2)*_tmp7*x2;
    result_value_ptr[227] = _tmp144*_tmp17;
    result_value_ptr[228] = _tmp145;
    result_value_ptr[229] = _tmp77;
    result_value_ptr[230] = 5*x3;
    result_value_ptr[231] = _tmp14 + _tmp77;
    result_value_ptr[232] = 1 - _tmp146;
    result_value_ptr[233] = _tmp127;
    result_value_ptr[234] = -_tmp98;
    result_value_ptr[235] = _tmp147;
    result_value_ptr[236] = -_tmp120*x0;
    result_value_ptr[237] = _tmp86 + x4;
    result_value_ptr[238] = _tmp59;
    result_value_ptr[239] = _tmp6*x2;
    result_value_ptr[240] = -[&]() { const Scalar base = x4; return base * base * base; }();
    result_value_ptr[241] = -_tmp67 - x0;
    result_value_ptr[242] = -_tmp5*_tmp8;
    result_value_ptr[243] = _tmp124;
    result_value_ptr[244] = -_tmp148 - x4;
    result_value_ptr[245] = _tmp146;
    result_value_ptr[246] = Scalar(2.5)*x3;
    result_value_ptr[247] = -_tmp149;
    result_value_ptr[248] = _tmp137*_tmp150;
    result_value_ptr[249] = -_tmp151 - 12;
    result_value_ptr[250] = _tmp152*_tmp95*x3;
    result_value_ptr[251] = _tmp25*(x1 - 4);
    result_value_ptr[252] = -2;
    result_value_ptr[253] = _tmp42 + x4;
    result_value_ptr[254] = _tmp8 + 4;
    result_value_ptr[255] = _tmp70 + _tmp76;
    result_value_ptr[256] = -_tmp11*x4 + _tmp32;
    result_value_ptr[257] = _tmp44;
    result_value_ptr[258] = -_tmp107*(_tmp15 + x3);
    result_value_ptr[259] = -_tmp153 - 3;
    result_value_ptr[260] = _tmp84;
    result_value_ptr[261] = _tmp68;
    result_value_ptr[262] = -_tmp154;
    result_value_ptr[263] = _tmp61;
    result_value_ptr[264] = -_tmp155*_tmp76;
    result_value_ptr[265] = 3*_tmp54 + 1;
    result_value_ptr[266] = -_tmp44*x3 - _tmp61;
    result_value_ptr[267] = -2*_tmp130;
    result_value_ptr[268] = -_tmp156 - _tmp9;
    result_value_ptr[269] = _tmp12 + _tmp135 + _tmp157;
    result_value_ptr[270] = -_tmp100 - _tmp129;
    result_value_ptr[271] = -_tmp122 - _tmp60;
    result_value_ptr[272] = _tmp36 + 3*x0;
    result_value_ptr[273] = _tmp145 + _tmp8;
    result_value_ptr[274] = _tmp40*_tmp76;
    result_value_ptr[275] = _tmp108;
    result_value_ptr[276] = -x2*(_tmp138 + x2);
    result_value_ptr[277] = -_tmp71 + 2*_tmp80;
    result_value_ptr[278] = _tmp77 - 3*x3;
    result_value_ptr[279] = _tmp35;
    result_value_ptr[280] = _tmp158 + _tmp36;
    result_value_ptr[281] = -_tmp2*x0;
    result_value_ptr[282] = _tmp157;
    result_value_ptr[283] = -_tmp160 - 4;
    result_value_ptr[284] = -_tmp120*_tmp37;
    result_value_ptr[285] = _tmp161 + _tmp22 + 8;
    result_value_ptr[286] = x2/(_tmp126 + x0);
    result_value_ptr[287] = -2*_tmp52 - x2;
    result_value_ptr[288] = -_tmp3;
    result_value_ptr[289] = 4;
    result_value_ptr[290] = _tmp162;
    result_value_ptr[291] = -_tmp163 - Scalar(1)/Scalar(3)*x0;
    result_value_ptr[292] = _tmp12 + _tmp164;
    result_value_ptr[293] = _tmp165 + x3;
    result_value_ptr[294] = x2 - x2/_tmp166;
    result_value_ptr[295] = _tmp135*_tmp5 + x2;
    result_value_ptr[296] = _tmp113 + _tmp167 + 6;
    result_value_ptr[297] = _tmp168;
    result_value_ptr[298] = _tmp102*_tmp8;
    result_value_ptr[299] = x0/(_tmp169*x4 + x4);
    result_value_ptr[300] = -_tmp111;
    result_value_ptr[301] = _tmp171;
    result_value_ptr[302] = _tmp141*_tmp5 - 2;
    result_value_ptr[303] = _tmp29;
    result_value_ptr[304] = -_tmp160*x1;
    result_value_ptr[305] = -x1/_tmp172;
    result_value_ptr[306] = -std::pow(_tmp13, Scalar(2))*x2;
    result_value_ptr[307] = 2 - _tmp97;
    result_value_ptr[308] = _tmp70;
    result_value_ptr[309] = -_tmp152*x1;
    result_value_ptr[310] = -x4*(_tmp155 + 1);
    result_value_ptr[311] = x4*(_tmp25 + _tmp70);
    result_value_ptr[312] = _tmp15*x1 + x3;
    result_value_ptr[313] = 2/(_tmp155*x2 - 2);
    result_value_ptr[314] = -x2*(_tmp135 + x1);
    result_value_ptr[315] = -_tmp173;
    result_value_ptr[316] = 2;
    result_value_ptr[317] = -_tmp51*x2 + 1;
    result_value_ptr[318] = _tmp87 + x1;
    result_value_ptr[319] = -_tmp32 - _tmp74;
    result_value_ptr[320] = -_tmp15 - _tmp48;
    result_value_ptr[321] = _tmp76*_tmp77;
    result_value_ptr[322] = _tmp108 + _tmp9;
    result_value_ptr[323] = _tmp4;
    result_value_ptr[324] = -_tmp78 - x4;
    result_value_ptr[325] = 5 - _tmp60;
    result_value_ptr[326] = _tmp16*x1 + x0;
    result_value_ptr[327] = _tmp96;
    result_value_ptr[328] = -_tmp158 - _tmp67;
    result_value_ptr[329] = _tmp20;
    result_value_ptr[330] = x3*(_tmp20 + _tmp54 + 1);
    result_value_ptr[331] = _tmp41;
    result_value_ptr[332] = _tmp128*x3;
    result_value_ptr[333] = -_tmp174;
    result_value_ptr[334] = _tmp97;
    result_value_ptr[335] = _tmp35;
    result_value_ptr[336] = 1 - _tmp175;
    result_value_ptr[337] = _tmp17*_tmp24 - 1;
    result_value_ptr[338] = _tmp176;
    result_value_ptr[339] = _tmp177 + _tmp178;
    result_value_ptr[340] = _tmp179;
    result_value_ptr[341] = _tmp180;
    result_value_ptr[342] = x0 - 4;
    result_value_ptr[343] = x0;
    result_value_ptr[344] = _tmp88;
    result_value_ptr[345] = x3/(_tmp80 + 2);
    result_value_ptr[346] = -_tmp151 - 6*x2;
    result_value_ptr[347] = _tmp0*_tmp62;
    result_value_ptr[348] = -_tmp157*_tmp71;
    result_value_ptr[349] = _tmp12 + _tmp40 + _tmp61;
    result_value_ptr[350] = _tmp155*_tmp22;
    result_value_ptr[351] = -_tmp136*x4 - 2;
    result_value_ptr[352] = _tmp141;
    result_value_ptr[353] = _tmp13*_tmp39 + _tmp80;
    result_value_ptr[354] = _tmp39*_tmp78;
    result_value_ptr[355] = _tmp88;
    result_value_ptr[356] = -_tmp116;
    result_value_ptr[357] = _tmp176 + _tmp97;
    result_value_ptr[358] = _tmp171;
    result_value_ptr[359] = _tmp44;
    result_value_ptr[360] = _tmp20;
    result_value_ptr[361] = -_tmp50;
    result_value_ptr[362] = -_tmp33*x4 - 2;
    result_value_ptr[363] = _tmp150;
    result_value_ptr[364] = _tmp173*_tmp47;
    result_value_ptr[365] = x0*(_tmp32 + _tmp61);
    result_value_ptr[366] = -x2/_tmp51;
    result_value_ptr[367] = -_tmp140*x4;
    result_value_ptr[368] = -x3*(_tmp8 - 3);
    result_value_ptr[369] = -_tmp148*_tmp155*_tmp79;
    result_value_ptr[370] = x4*(_tmp100 + x2);
    result_value_ptr[371] = _tmp44;
    result_value_ptr[372] = -x0*(_tmp8 - 1);
    result_value_ptr[373] = x1 + Scalar(1.0) / (_tmp156);
    result_value_ptr[374] = -_tmp101 + x4;
    result_value_ptr[375] = _tmp11*_tmp3;
    result_value_ptr[376] = _tmp127;
    result_value_ptr[377] = _tmp181*(_tmp169 + _tmp36);
    result_value_ptr[378] = -Scalar(2)/Scalar(3)*_tmp5;
    result_value_ptr[379] = _tmp182 + _tmp61;
    result_value_ptr[380] = _tmp183 + _tmp76;
    result_value_ptr[381] = _tmp73 + x3;
    result_value_ptr[382] = _tmp36;
    result_value_ptr[383] = _tmp184;
    result_value_ptr[384] = _tmp60;
    result_value_ptr[385] = x4;
    result_value_ptr[386] = _tmp27;
    result_value_ptr[387] = -1;
    result_value_ptr[388] = 2 - _tmp175;
    result_value_ptr[389] = x3;
    result_value_ptr[390] = -_tmp166;
    result_value_ptr[391] = _tmp61;
    result_value_ptr[392] = _tmp28;
    result_value_ptr[393] = _tmp185;
    result_value_ptr[394] = _tmp186;
    result_value_ptr[395] = _tmp72*_tmp8*_tmp93;
    result_value_ptr[396] = -x2*(_tmp40 - 2);
    result_value_ptr[397] = _tmp180;
    result_value_ptr[398] = _tmp48;
    result_value_ptr[399] = -_tmp172;
    result_value_ptr[400] = -_tmp182 + x0;
    result_value_ptr[401] = -_tmp37*(_tmp13 + _tmp36);
    result_value_ptr[402] = _tmp31;
    result_value_ptr[403] = _tmp77;
    result_value_ptr[404] = 1 - _tmp60;
    result_value_ptr[405] = -_tmp165 - _tmp30;
    result_value_ptr[406] = _tmp70;
    result_value_ptr[407] = -_tmp25 + _tmp54;
    result_value_ptr[408] = -_tmp71;
    result_value_ptr[409] = _tmp187;
    result_value_ptr[410] = _tmp125 + _tmp188*_tmp6;
    result_value_ptr[411] = _tmp14;
    result_value_ptr[412] = -_tmp13*x0;
    result_value_ptr[413] = -4*x0;
    result_value_ptr[414] = _tmp8;
    result_value_ptr[415] = _tmp52;
    result_value_ptr[416] = -x0 + Scalar(-0.5);
    result_value_ptr[417] = _tmp54 + x3;
    result_value_ptr[418] = -x1/_tmp43;
    result_value_ptr[419] = -2/(-_tmp108*_tmp5 + x1);
    result_value_ptr[420] = 2;
    result_value_ptr[421] = -_tmp55;
    result_value_ptr[422] = -_tmp6;
    result_value_ptr[423] = -_tmp88;
    result_value_ptr[424] = _tmp25;
    result_value_ptr[425] = -_tmp52;
    result_value_ptr[426] = -_tmp9 - 4;
    result_value_ptr[427] = x4*(_tmp0 - 4);
    result_value_ptr[428] = _tmp132*_tmp79 + x1;
    result_value_ptr[429] = x3*(-_tmp13*x3 + x0);
    result_value_ptr[430] = _tmp135 - _tmp71*x3;
    result_value_ptr[431] = _tmp41;
    result_value_ptr[432] = _tmp174;
    result_value_ptr[433] = _tmp31*x3;
    result_value_ptr[434] = _tmp125*x0;
    result_value_ptr[435] = -_tmp54 - x2;
    result_value_ptr[436] = _tmp114*(_tmp12 + _tmp32);
    result_value_ptr[437] = _tmp60;
    result_value_ptr[438] = _tmp103 + x3;
    result_value_ptr[439] = _tmp31 + x2;
    result_value_ptr[440] = -_tmp69 - x0;
    result_value_ptr[441] = -1;
    result_value_ptr[442] = 6 - _tmp32;
    result_value_ptr[443] = -_tmp143*_tmp149;
    result_value_ptr[444] = -_tmp86;
    result_value_ptr[445] = -_tmp110*x4 - _tmp12;
    result_value_ptr[446] = -_tmp185*x0;
    result_value_ptr[447] = _tmp83;
    result_value_ptr[448] = _tmp13;
    result_value_ptr[449] = -_tmp151 - 2;
    result_value_ptr[450] = x2 + Scalar(1.0);
    result_value_ptr[451] = _tmp69;
    result_value_ptr[452] = -_tmp19 - x1;
    result_value_ptr[453] = -_tmp37;
    result_value_ptr[454] = _tmp60 + _tmp90;
    result_value_ptr[455] = _tmp140*_tmp189;
    result_value_ptr[456] = Scalar(0.5);
    result_value_ptr[457] = _tmp2;
    result_value_ptr[458] = _tmp78 - 1;
    result_value_ptr[459] = _tmp45 - x1;
    result_value_ptr[460] = _tmp190 - 5;
    result_value_ptr[461] = -_tmp146*x0;
    result_value_ptr[462] = _tmp107 + _tmp120 + _tmp76;
    result_value_ptr[463] = x4*(_tmp25 + x4);
    result_value_ptr[464] = -_tmp191;
    result_value_ptr[465] = _tmp52;
    result_value_ptr[466] = -_tmp186;
    result_value_ptr[467] = _tmp0;
    result_value_ptr[468] = -_tmp5*(_tmp100 + x0) + 2;
    result_value_ptr[469] = _tmp25;
    result_value_ptr[470] = _tmp39 + _tmp43;
    result_value_ptr[471] = -_tmp18*_tmp43;
    result_value_ptr[472] = _tmp60;
    result_value_ptr[473] = std::pow(_tmp28, Scalar(2));
    result_value_ptr[474] = -_tmp108*_tmp135;
    result_value_ptr[475] = _tmp13 + _tmp74;
    result_value_ptr[476] = _tmp44;
    result_value_ptr[477] = _tmp106;
    result_value_ptr[478] = _tmp85;
    result_value_ptr[479] = _tmp156 + 3;
    result_value_ptr[480] = x2;
    result_value_ptr[481] = -_tmp3 - _tmp47*_tmp60;
    result_value_ptr[482] = x3*(2*_tmp23 + 2) + x3;
    result_value_ptr[483] = _tmp9;
    result_value_ptr[484] = _tmp8 - 4;
    result_value_ptr[485] = -_tmp32*_tmp72 + 2;
    result_value_ptr[486] = _tmp82;
    result_value_ptr[487] = _tmp167;
    result_value_ptr[488] = _tmp149/_tmp47;
    result_value_ptr[489] = _tmp192 - _tmp78*x3;
    result_value_ptr[490] = x2*(_tmp100 + x1);
    result_value_ptr[491] = _tmp28;
    result_value_ptr[492] = -x4 - 3;
    result_value_ptr[493] = -_tmp19*x3;
    result_value_ptr[494] = x0*(-_tmp76 + x0) - 1;
    result_value_ptr[495] = 2;
    result_value_ptr[496] = 1;
    result_value_ptr[497] = _tmp188 + _tmp60;
    result_value_ptr[498] = -3;
    result_value_ptr[499] = -_tmp149 - _tmp193;
    result_value_ptr[500] = _tmp154;
    result_value_ptr[501] = _tmp194*x1 + x0;
    result_value_ptr[502] = _tmp37*(_tmp60 + x1);
    result_value_ptr[503] = -_tmp135*_tmp17*_tmp176;
    result_value_ptr[504] = _tmp72;
    result_value_ptr[505] = _tmp28;
    result_value_ptr[506] = _tmp153 + x2;
    result_value_ptr[507] = _tmp189 + _tmp88;
    result_value_ptr[508] = _tmp37*_tmp76 + x1;
    result_value_ptr[509] = -x2/_tmp52;
    result_value_ptr[510] = _tmp123;
    result_value_ptr[511] = Scalar(2.0) - _tmp195;
    result_value_ptr[512] = x0*(-_tmp107*_tmp80 + x4);
    result_value_ptr[513] = _tmp113 - x0;
    result_value_ptr[514] = _tmp28 + _tmp68;
    result_value_ptr[515] = -_tmp15*x0;
    result_value_ptr[516] = _tmp13*_tmp135;
    result_value_ptr[517] = Scalar(4.0);
    result_value_ptr[518] = _tmp0 + _tmp133;
    result_value_ptr[519] = -2*_tmp6 - 2;
    result_value_ptr[520] = 4 - _tmp9;
    result_value_ptr[521] = -_tmp157*_tmp62;
    result_value_ptr[522] = _tmp88;
    result_value_ptr[523] = _tmp187;
    result_value_ptr[524] = -_tmp2 - _tmp20 - x1;
    result_value_ptr[525] = _tmp192 + _tmp61;
    result_value_ptr[526] = _tmp51;
    result_value_ptr[527] = x3*(_tmp89 + 2);
    result_value_ptr[528] = 1;
    result_value_ptr[529] = x1*(_tmp32 + _tmp82);
    result_value_ptr[530] = -_tmp144*_tmp8;
    result_value_ptr[531] = _tmp68;
    result_value_ptr[532] = _tmp195 + Scalar(1.0)*x0;
    result_value_ptr[533] = -_tmp61 - x2;
    result_value_ptr[534] = -_tmp81*x1 + x0;
    result_value_ptr[535] = -_tmp183;
    result_value_ptr[536] = _tmp164;
    result_value_ptr[537] = _tmp20;
    result_value_ptr[538] = -_tmp5*x3;
    result_value_ptr[539] = x2*(_tmp0 + _tmp8);
    result_value_ptr[540] = _tmp125;
    result_value_ptr[541] = x1*(_tmp61 + _tmp77);
    result_value_ptr[542] = _tmp168;
    result_value_ptr[543] = -_tmp114 - _tmp35;
    result_value_ptr[544] = _tmp139*_tmp79;
    result_value_ptr[545] = _tmp36;
    result_value_ptr[546] = 2*_tmp11*_tmp169;
    result_value_ptr[547] = 2;
    result_value_ptr[548] = -_tmp2 - _tmp61 - x4;
    result_value_ptr[549] = _tmp125 - _tmp51*x4;
    result_value_ptr[550] = _tmp177;
    result_value_ptr[551] = _tmp33;
    result_value_ptr[552] = _tmp184;
    result_value_ptr[553] = 2/_tmp125;
    result_value_ptr[554] = x1;
    result_value_ptr[555] = _tmp108 + x1*(_tmp30 + x4);
    result_value_ptr[556] = -_tmp14 - _tmp8;
    result_value_ptr[557] = -_tmp11 + x1;
    result_value_ptr[558] = _tmp74;
    result_value_ptr[559] = _tmp194 + x3;
    result_value_ptr[560] = -_tmp12 - _tmp64;
    result_value_ptr[561] = -_tmp58*_tmp77;
    result_value_ptr[562] = _tmp128;
    result_value_ptr[563] = -x1*(-_tmp139 + x0);
    result_value_ptr[564] = Scalar(8.0)*x3 + Scalar(-8.0);
    result_value_ptr[565] = -x2/_tmp144;
    result_value_ptr[566] = Scalar(-2.0);
    result_value_ptr[567] = 1 - _tmp75;
    result_value_ptr[568] = 1 - 3*x2;
    result_value_ptr[569] = x0*(_tmp72 + x1);
    result_value_ptr[570] = _tmp86;
    result_value_ptr[571] = -_tmp134;
    result_value_ptr[572] = -_tmp47 - _tmp48*x4;
    result_value_ptr[573] = -_tmp65;
    result_value_ptr[574] = _tmp142;
    result_value_ptr[575] = -2/_tmp11;
    result_value_ptr[576] = _tmp104 - 2;
    result_value_ptr[577] = _tmp17 + _tmp9;
    result_value_ptr[578] = _tmp46 + Scalar(2.0);
    result_value_ptr[579] = _tmp86;
    result_value_ptr[580] = _tmp145*x0;
    result_value_ptr[581] = _tmp77*_tmp9;
    result_value_ptr[582] = _tmp138 + _tmp36;
    result_value_ptr[583] = _tmp47 + x3;
    result_value_ptr[584] = _tmp8*x1 + x3;
    result_value_ptr[585] = -_tmp0*_tmp80;
    result_value_ptr[586] = -((Scalar(1)/Scalar(2))*_tmp107 + 1)/_tmp108;
    result_value_ptr[587] = -_tmp72;
    result_value_ptr[588] = -_tmp3*_tmp6;
    result_value_ptr[589] = _tmp67 + _tmp74 + x1;
    result_value_ptr[590] = -_tmp52*x1;
    result_value_ptr[591] = -_tmp120 - _tmp20;
    result_value_ptr[592] = -x4*(_tmp121 + 4);
    result_value_ptr[593] = -4;
    result_value_ptr[594] = _tmp32 + _tmp60;
    result_value_ptr[595] = _tmp40*x0;
    result_value_ptr[596] = -_tmp141 - _tmp97;
    result_value_ptr[597] = -_tmp24*(_tmp40 + 2);
    result_value_ptr[598] = _tmp196;
    result_value_ptr[599] = 4 - _tmp40;
    result_value_ptr[600] = _tmp161;
    result_value_ptr[601] = -2;
    result_value_ptr[602] = _tmp126;
    result_value_ptr[603] = _tmp62*_tmp78;
    result_value_ptr[604] = -_tmp43*(_tmp12 + _tmp47);
    result_value_ptr[605] = -_tmp24;
    result_value_ptr[606] = _tmp0 + 8*x3;
    result_value_ptr[607] = _tmp67;
    result_value_ptr[608] = _tmp49 + _tmp54;
    result_value_ptr[609] = 4;
    result_value_ptr[610] = Scalar(2.0)*x3;
    result_value_ptr[611] = _tmp108 + x3;
    result_value_ptr[612] = _tmp120 + _tmp32;
    result_value_ptr[613] = _tmp120 + _tmp9;
    result_value_ptr[614] = -_tmp163 - _tmp28;
    result_value_ptr[615] = _tmp25;
    result_value_ptr[616] = -_tmp35 - x4;
    result_value_ptr[617] = _tmp68 + _tmp79 + 4;
    result_value_ptr[618] = _tmp64 + x1;
    result_value_ptr[619] = -_tmp197;
    result_value_ptr[620] = _tmp10;
    result_value_ptr[621] = _tmp144 + _tmp20;
    result_value_ptr[622] = -6;
    result_value_ptr[623] = _tmp198;
    result_value_ptr[624] = x0*(_tmp132 - 1) + x0;
    result_value_ptr[625] = (Scalar(1)/Scalar(4))*_tmp199 + 2;
    result_value_ptr[626] = _tmp103*_tmp30 + 2;
    result_value_ptr[627] = 2/_tmp176;
    result_value_ptr[628] = _tmp191 + _tmp9;
    result_value_ptr[629] = -_tmp193;
    result_value_ptr[630] = _tmp200;
    result_value_ptr[631] = _tmp0;
    result_value_ptr[632] = _tmp132;
    result_value_ptr[633] = _tmp17;
    result_value_ptr[634] = -_tmp91;
    result_value_ptr[635] = -_tmp79 - x1;
    result_value_ptr[636] = -_tmp201;
    result_value_ptr[637] = _tmp54 + 3;
    result_value_ptr[638] = _tmp162 - _tmp17;
    result_value_ptr[639] = -4*_tmp6;
    result_value_ptr[640] = -_tmp199;
    result_value_ptr[641] = -_tmp24*_tmp62*x2;
    result_value_ptr[642] = _tmp196;
    result_value_ptr[643] = _tmp19 + x4;
    result_value_ptr[644] = _tmp24 + _tmp99;
    result_value_ptr[645] = x3/(-_tmp5*_tmp9 + _tmp60);
    result_value_ptr[646] = _tmp201;
    result_value_ptr[647] = -_tmp144*_tmp155 - _tmp88;
    result_value_ptr[648] = -8*x4;
    result_value_ptr[649] = -_tmp135 - _tmp36;
    result_value_ptr[650] = -x4/_tmp131;
    result_value_ptr[651] = _tmp50 + _tmp81;
    result_value_ptr[652] = _tmp147;
    result_value_ptr[653] = _tmp139;
    result_value_ptr[654] = _tmp178;
    result_value_ptr[655] = -_tmp12 - Scalar(1)/Scalar(2)*_tmp139;
    result_value_ptr[656] = -6*x3;
    result_value_ptr[657] = -_tmp44 - x3;
    result_value_ptr[658] = _tmp53;
    result_value_ptr[659] = _tmp176*_tmp37;
    result_value_ptr[660] = -x1*(_tmp159 + 2);
    result_value_ptr[661] = _tmp43;
    result_value_ptr[662] = -_tmp93 - x1;
    result_value_ptr[663] = -_tmp105 - _tmp61 - 1;
    result_value_ptr[664] = -_tmp0 - _tmp9;
    result_value_ptr[665] = _tmp52/(_tmp109 + x2);
    result_value_ptr[666] = _tmp200;
    result_value_ptr[667] = -x0*(_tmp22 + x4);
    result_value_ptr[668] = _tmp43 - 1;
    result_value_ptr[669] = _tmp197;
    result_value_ptr[670] = -2;
    result_value_ptr[671] = _tmp190*_tmp80;
    result_value_ptr[672] = -x3*(_tmp3 + _tmp61) + 1;
    result_value_ptr[673] = Scalar(5)/Scalar(2) - _tmp181;
    result_value_ptr[674] = _tmp179;
    result_value_ptr[675] = _tmp68 + _tmp8;
    result_value_ptr[676] = -_tmp170*x4;
    result_value_ptr[677] = _tmp198 + _tmp62;
    result_value_ptr[678] = _tmp8;
    result_value_ptr[679] = -x2*(_tmp61 + _tmp97);
    result_value_ptr[680] = -_tmp74 - 3;
    result_value_ptr[681] = -2 + _tmp6/_tmp137;
    result_value_ptr[682] = -_tmp155;
    result_value_ptr[683] = _tmp107 + _tmp8;
    result_value_ptr[684] = -x0*(_tmp150 + x4);
    result_value_ptr[685] = 1 - _tmp64/_tmp48;
    result_value_ptr[686] = _tmp118;
    result_value_ptr[687] = _tmp79;

    return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
