// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>
#include <Eigen/Sparse>



namespace sym {


/**
* This function was autogenerated. Do not modify by hand.
*
* Args:
*     x0: Scalar
*     x1: Scalar
*     x2: Scalar
*     x3: Scalar
*     x4: Scalar
*
* Outputs:
*     result: Matrix163_163
*/
template <typename Scalar>
__attribute__((noinline))
Eigen::SparseMatrix<Scalar> ComputeAtBLpSc105(const Scalar x0, const Scalar x1, const Scalar x2, const Scalar x3, const Scalar x4) {

    // Total ops: 2575

    // Input arrays

    // Intermediate terms (634)
    const Scalar _tmp0 = 2*x2;
    const Scalar _tmp1 = _tmp0*x4;
    const Scalar _tmp2 = _tmp1 + x0;
    const Scalar _tmp3 = _tmp2*x0;
    const Scalar _tmp4 = x2 - 4;
    const Scalar _tmp5 = _tmp4*x0;
    const Scalar _tmp6 = x0*x4;
    const Scalar _tmp7 = Scalar(1.0) / (x3);
    const Scalar _tmp8 = 4*_tmp7;
    const Scalar _tmp9 = x2 - 1;
    const Scalar _tmp10 = x4 + 1;
    const Scalar _tmp11 = _tmp9*(_tmp10 + x1);
    const Scalar _tmp12 = 2*x1;
    const Scalar _tmp13 = _tmp12 + 1;
    const Scalar _tmp14 = _tmp13 + x3;
    const Scalar _tmp15 = 2*x3;
    const Scalar _tmp16 = _tmp15 - 2;
    const Scalar _tmp17 = _tmp16*x1;
    const Scalar _tmp18 = -x1;
    const Scalar _tmp19 = _tmp18 + x0;
    const Scalar _tmp20 = _tmp19 + x4;
    const Scalar _tmp21 = std::pow(x3, Scalar(2));
    const Scalar _tmp22 = _tmp21*x4;
    const Scalar _tmp23 = -x4;
    const Scalar _tmp24 = x0 + x2;
    const Scalar _tmp25 = _tmp23 + _tmp24 - 2;
    const Scalar _tmp26 = x1 + 2;
    const Scalar _tmp27 = x2 + 2;
    const Scalar _tmp28 = _tmp27 + x3;
    const Scalar _tmp29 = x3 + Scalar(-1.0);
    const Scalar _tmp30 = _tmp10*x1;
    const Scalar _tmp31 = std::pow(x4, Scalar(2));
    const Scalar _tmp32 = Scalar(1.0) / (x1);
    const Scalar _tmp33 = (Scalar(1)/Scalar(2))*x0;
    const Scalar _tmp34 = _tmp31 + _tmp32*_tmp33;
    const Scalar _tmp35 = x2 + x4;
    const Scalar _tmp36 = x3*x4;
    const Scalar _tmp37 = x1 - 1;
    const Scalar _tmp38 = _tmp36 + _tmp37;
    const Scalar _tmp39 = -_tmp0;
    const Scalar _tmp40 = _tmp39 + x0;
    const Scalar _tmp41 = _tmp31*_tmp40;
    const Scalar _tmp42 = _tmp15*x0;
    const Scalar _tmp43 = std::pow(x0, Scalar(2));
    const Scalar _tmp44 = 4*x2;
    const Scalar _tmp45 = _tmp43*_tmp44;
    const Scalar _tmp46 = x2*x3;
    const Scalar _tmp47 = 12*x0;
    const Scalar _tmp48 = std::pow(x2, Scalar(2));
    const Scalar _tmp49 = _tmp36 - _tmp48 + 2;
    const Scalar _tmp50 = _tmp4 + _tmp48 + x3;
    const Scalar _tmp51 = _tmp15*x4;
    const Scalar _tmp52 = x1*x4;
    const Scalar _tmp53 = _tmp15*_tmp52;
    const Scalar _tmp54 = _tmp12*x2;
    const Scalar _tmp55 = _tmp21*_tmp31;
    const Scalar _tmp56 = _tmp44 + x3;
    const Scalar _tmp57 = x3 - 1;
    const Scalar _tmp58 = _tmp57*x4;
    const Scalar _tmp59 = Scalar(1.0) / (x2);
    const Scalar _tmp60 = Scalar(1.0) / (x0);
    const Scalar _tmp61 = 2*x4;
    const Scalar _tmp62 = _tmp59*_tmp61;
    const Scalar _tmp63 = _tmp60*_tmp62 + 2;
    const Scalar _tmp64 = (Scalar(1)/Scalar(2))*_tmp7;
    const Scalar _tmp65 = x0 + 3;
    const Scalar _tmp66 = -_tmp64 + _tmp65;
    const Scalar _tmp67 = _tmp63*x2;
    const Scalar _tmp68 = -x2;
    const Scalar _tmp69 = x0 + 1;
    const Scalar _tmp70 = _tmp68 + _tmp69;
    const Scalar _tmp71 = _tmp12 - 2;
    const Scalar _tmp72 = x1 + x2;
    const Scalar _tmp73 = -x3;
    const Scalar _tmp74 = _tmp73 + x1;
    const Scalar _tmp75 = _tmp72*_tmp74;
    const Scalar _tmp76 = x1*x2;
    const Scalar _tmp77 = _tmp76 + x0;
    const Scalar _tmp78 = 6*x4;
    const Scalar _tmp79 = 12*x1;
    const Scalar _tmp80 = 6*x1;
    const Scalar _tmp81 = Scalar(1.0) / (x4);
    const Scalar _tmp82 = _tmp15 + x1;
    const Scalar _tmp83 = _tmp44*x3 - 1;
    const Scalar _tmp84 = _tmp48*_tmp72;
    const Scalar _tmp85 = x4 - 2;
    const Scalar _tmp86 = _tmp85*x3;
    const Scalar _tmp87 = _tmp59*x1;
    const Scalar _tmp88 = _tmp87 + x1;
    const Scalar _tmp89 = _tmp61 + 2;
    const Scalar _tmp90 = x1*x3;
    const Scalar _tmp91 = 4*x1;
    const Scalar _tmp92 = _tmp0 + _tmp23 + _tmp91;
    const Scalar _tmp93 = _tmp44 + 6;
    const Scalar _tmp94 = x3 + 3;
    const Scalar _tmp95 = _tmp46 + _tmp6;
    const Scalar _tmp96 = _tmp23 + _tmp58;
    const Scalar _tmp97 = _tmp85 + x0;
    const Scalar _tmp98 = _tmp15 + 1;
    const Scalar _tmp99 = _tmp68 + _tmp98;
    const Scalar _tmp100 = 4*x3;
    const Scalar _tmp101 = x1 - 8;
    const Scalar _tmp102 = 2*x0;
    const Scalar _tmp103 = _tmp102 + x3;
    const Scalar _tmp104 = x4 + 2;
    const Scalar _tmp105 = _tmp104*_tmp57;
    const Scalar _tmp106 = _tmp12 + 2;
    const Scalar _tmp107 = _tmp27*x4 + 1;
    const Scalar _tmp108 = x0 + 2;
    const Scalar _tmp109 = _tmp7*x4;
    const Scalar _tmp110 = _tmp109*_tmp48;
    const Scalar _tmp111 = x0 + x1;
    const Scalar _tmp112 = _tmp111 + _tmp23;
    const Scalar _tmp113 = x0 - 1;
    const Scalar _tmp114 = _tmp113*_tmp59;
    const Scalar _tmp115 = x1 + x3;
    const Scalar _tmp116 = -_tmp114 + _tmp115;
    const Scalar _tmp117 = x2 + 1;
    const Scalar _tmp118 = _tmp117 + _tmp23;
    const Scalar _tmp119 = _tmp12 + _tmp15;
    const Scalar _tmp120 = -x0;
    const Scalar _tmp121 = x3 + x4;
    const Scalar _tmp122 = _tmp120 + _tmp121*x1 + x3;
    const Scalar _tmp123 = _tmp72 + x0;
    const Scalar _tmp124 = _tmp123*x3;
    const Scalar _tmp125 = _tmp12 - 1;
    const Scalar _tmp126 = _tmp57*x3;
    const Scalar _tmp127 = _tmp23 + x3;
    const Scalar _tmp128 = (Scalar(1)/Scalar(4))*_tmp6;
    const Scalar _tmp129 = x1 + 1;
    const Scalar _tmp130 = _tmp129*_tmp43;
    const Scalar _tmp131 = _tmp44*x4;
    const Scalar _tmp132 = _tmp0 - _tmp15;
    const Scalar _tmp133 = _tmp100*_tmp31;
    const Scalar _tmp134 = x0*x1;
    const Scalar _tmp135 = _tmp134 - 4;
    const Scalar _tmp136 = 4*x4;
    const Scalar _tmp137 = _tmp39 + x1;
    const Scalar _tmp138 = -_tmp12;
    const Scalar _tmp139 = x0 + x4;
    const Scalar _tmp140 = _tmp138 + _tmp139;
    const Scalar _tmp141 = _tmp120 + _tmp35;
    const Scalar _tmp142 = x4 + 4;
    const Scalar _tmp143 = x4 - 1;
    const Scalar _tmp144 = Scalar(1.0) / (_tmp143);
    const Scalar _tmp145 = x0*x3;
    const Scalar _tmp146 = Scalar(1.0) / (_tmp31);
    const Scalar _tmp147 = _tmp73 + x0;
    const Scalar _tmp148 = _tmp146*_tmp147;
    const Scalar _tmp149 = _tmp21*_tmp81 + 1;
    const Scalar _tmp150 = x1*(_tmp13 + _tmp68);
    const Scalar _tmp151 = -_tmp81;
    const Scalar _tmp152 = _tmp151 + 4;
    const Scalar _tmp153 = _tmp15*_tmp76;
    const Scalar _tmp154 = _tmp52 + Scalar(0.5);
    const Scalar _tmp155 = _tmp10 + x3;
    const Scalar _tmp156 = _tmp155 + _tmp19*x3;
    const Scalar _tmp157 = x2*x4;
    const Scalar _tmp158 = _tmp157 + _tmp73;
    const Scalar _tmp159 = _tmp158*x3;
    const Scalar _tmp160 = -_tmp21 + x1;
    const Scalar _tmp161 = _tmp160*_tmp36;
    const Scalar _tmp162 = -_tmp61;
    const Scalar _tmp163 = _tmp0 + _tmp162;
    const Scalar _tmp164 = _tmp163 + 6;
    const Scalar _tmp165 = _tmp15 + x0;
    const Scalar _tmp166 = _tmp73 + x2;
    const Scalar _tmp167 = _tmp76 + x3;
    const Scalar _tmp168 = 1 - Scalar(1)/Scalar(2)*_tmp59;
    const Scalar _tmp169 = _tmp139*(_tmp10 + _tmp73);
    const Scalar _tmp170 = x0 - 2;
    const Scalar _tmp171 = _tmp170 + x3;
    const Scalar _tmp172 = _tmp24*x2;
    const Scalar _tmp173 = _tmp172 + x0;
    const Scalar _tmp174 = x3 + 1;
    const Scalar _tmp175 = 2*_tmp174*[&]() { const Scalar base = x0; return base * base * base; }();
    const Scalar _tmp176 = _tmp170*x0;
    const Scalar _tmp177 = _tmp57 + x0;
    const Scalar _tmp178 = x0 - 3;
    const Scalar _tmp179 = x3 - 2;
    const Scalar _tmp180 = _tmp179*x3;
    const Scalar _tmp181 = x2 - 2;
    const Scalar _tmp182 = _tmp15 + 2;
    const Scalar _tmp183 = _tmp182 + _tmp23;
    const Scalar _tmp184 = -_tmp1*_tmp32 + x3;
    const Scalar _tmp185 = 3*x1;
    const Scalar _tmp186 = _tmp15 + _tmp185;
    const Scalar _tmp187 = 2*_tmp60;
    const Scalar _tmp188 = _tmp7*(2 - _tmp187);
    const Scalar _tmp189 = x4 + 3;
    const Scalar _tmp190 = _tmp139*x1;
    const Scalar _tmp191 = _tmp115*x0;
    const Scalar _tmp192 = _tmp10*x3 - 1;
    const Scalar _tmp193 = _tmp37*x2;
    const Scalar _tmp194 = _tmp120 + _tmp193 + 3;
    const Scalar _tmp195 = 4*x0;
    const Scalar _tmp196 = Scalar(1.0) / (_tmp125);
    const Scalar _tmp197 = _tmp185 + 1;
    const Scalar _tmp198 = x0 + x3*(_tmp9 + x4);
    const Scalar _tmp199 = _tmp129*_tmp85 - 2;
    const Scalar _tmp200 = _tmp129 + _tmp33;
    const Scalar _tmp201 = _tmp0 + _tmp121;
    const Scalar _tmp202 = x0/_tmp10;
    const Scalar _tmp203 = x2 + Scalar(2.0);
    const Scalar _tmp204 = x2 + 4;
    const Scalar _tmp205 = _tmp64*x2 - 2;
    const Scalar _tmp206 = x3 + 2;
    const Scalar _tmp207 = 2 - _tmp109;
    const Scalar _tmp208 = 2*_tmp21;
    const Scalar _tmp209 = -_tmp208 + x0;
    const Scalar _tmp210 = _tmp12*x4;
    const Scalar _tmp211 = (Scalar(1)/Scalar(2))*x2;
    const Scalar _tmp212 = _tmp211 + 2;
    const Scalar _tmp213 = _tmp212*_tmp48;
    const Scalar _tmp214 = _tmp31*x0;
    const Scalar _tmp215 = _tmp206*x1 + x4;
    const Scalar _tmp216 = _tmp8 + x0 + 4;
    const Scalar _tmp217 = x0*x2;
    const Scalar _tmp218 = 2*_tmp7;
    const Scalar _tmp219 = _tmp121 - _tmp218*_tmp32;
    const Scalar _tmp220 = _tmp219*x2;
    const Scalar _tmp221 = x3*(_tmp48 + 1);
    const Scalar _tmp222 = _tmp179 + x2;
    const Scalar _tmp223 = -_tmp102;
    const Scalar _tmp224 = _tmp223 + _tmp26;
    const Scalar _tmp225 = x0 + x3;
    const Scalar _tmp226 = _tmp225 + x2*(_tmp76 + x2);
    const Scalar _tmp227 = _tmp73 + x1*(_tmp48 + 2);
    const Scalar _tmp228 = _tmp44 + 4;
    const Scalar _tmp229 = _tmp174 + x0;
    const Scalar _tmp230 = _tmp229*x2 + x3;
    const Scalar _tmp231 = _tmp35 + 2;
    const Scalar _tmp232 = std::pow(x1, Scalar(2));
    const Scalar _tmp233 = _tmp4 + x1;
    const Scalar _tmp234 = _tmp12*_tmp157;
    const Scalar _tmp235 = 3*x2;
    const Scalar _tmp236 = -_tmp235 + x1;
    const Scalar _tmp237 = _tmp102 + 1;
    const Scalar _tmp238 = _tmp23 + _tmp237;
    const Scalar _tmp239 = 3*x4;
    const Scalar _tmp240 = _tmp239 + _tmp24;
    const Scalar _tmp241 = -x4 - x0/_tmp139;
    const Scalar _tmp242 = _tmp15*x2;
    const Scalar _tmp243 = _tmp0 + _tmp242;
    const Scalar _tmp244 = _tmp9 + x3;
    const Scalar _tmp245 = _tmp244*x4;
    const Scalar _tmp246 = _tmp117 + _tmp18;
    const Scalar _tmp247 = _tmp246*x4;
    const Scalar _tmp248 = _tmp208 - 2;
    const Scalar _tmp249 = _tmp248*x4;
    const Scalar _tmp250 = _tmp162 + _tmp69;
    const Scalar _tmp251 = _tmp27 + _tmp73;
    const Scalar _tmp252 = 2*_tmp59;
    const Scalar _tmp253 = _tmp12 + 8;
    const Scalar _tmp254 = _tmp206*x4;
    const Scalar _tmp255 = _tmp120 + _tmp26;
    const Scalar _tmp256 = _tmp255 + x2;
    const Scalar _tmp257 = _tmp102 + _tmp57 + x1;
    const Scalar _tmp258 = _tmp59*x0;
    const Scalar _tmp259 = _tmp181*_tmp258;
    const Scalar _tmp260 = _tmp26 + x4;
    const Scalar _tmp261 = _tmp0 + _tmp61 + 6;
    const Scalar _tmp262 = _tmp32*x3 + x2;
    const Scalar _tmp263 = _tmp119 + _tmp12*_tmp6;
    const Scalar _tmp264 = _tmp26*_tmp42;
    const Scalar _tmp265 = _tmp12 + _tmp90 + x0;
    const Scalar _tmp266 = 4*_tmp21;
    const Scalar _tmp267 = _tmp102 + 2;
    const Scalar _tmp268 = _tmp19 + x2;
    const Scalar _tmp269 = _tmp239*_tmp60 + _tmp73 + 2;
    const Scalar _tmp270 = -_tmp113*_tmp69 + x4;
    const Scalar _tmp271 = _tmp15*_tmp6;
    const Scalar _tmp272 = _tmp0 - 1;
    const Scalar _tmp273 = _tmp91 + 1;
    const Scalar _tmp274 = _tmp43*(_tmp23 + x1) + _tmp73;
    const Scalar _tmp275 = _tmp43*x3;
    const Scalar _tmp276 = _tmp157 + x1;
    const Scalar _tmp277 = -_tmp31;
    const Scalar _tmp278 = _tmp174 + _tmp277;
    const Scalar _tmp279 = Scalar(1.0) / (_tmp69);
    const Scalar _tmp280 = Scalar(1.0) / (_tmp72 - 2);
    const Scalar _tmp281 = _tmp280*x0;
    const Scalar _tmp282 = _tmp46 + _tmp72;
    const Scalar _tmp283 = _tmp15*_tmp31;
    const Scalar _tmp284 = _tmp283*_tmp76;
    const Scalar _tmp285 = _tmp35 + _tmp60;
    const Scalar _tmp286 = 2*_tmp43;
    const Scalar _tmp287 = _tmp286 + x4;
    const Scalar _tmp288 = _tmp76*x4;
    const Scalar _tmp289 = _tmp15 + 4;
    const Scalar _tmp290 = _tmp12*x0;
    const Scalar _tmp291 = _tmp290 + x0;
    const Scalar _tmp292 = _tmp15*x1 + x0;
    const Scalar _tmp293 = _tmp195 + _tmp277;
    const Scalar _tmp294 = _tmp217 + _tmp52 - 1;
    const Scalar _tmp295 = _tmp46*(_tmp23 + x0) + x4;
    const Scalar _tmp296 = x0 - 4;
    const Scalar _tmp297 = _tmp61 - 2;
    const Scalar _tmp298 = x4 + Scalar(1.0);
    const Scalar _tmp299 = _tmp37*x1;
    const Scalar _tmp300 = _tmp102 - 2;
    const Scalar _tmp301 = _tmp0 - 4;
    const Scalar _tmp302 = _tmp179*x4;
    const Scalar _tmp303 = _tmp302 + 1;
    const Scalar _tmp304 = _tmp68 + x0;
    const Scalar _tmp305 = _tmp157*_tmp304;
    const Scalar _tmp306 = _tmp18 + _tmp76 + _tmp9;
    const Scalar _tmp307 = 8*_tmp7;
    const Scalar _tmp308 = _tmp104 + _tmp6;
    const Scalar _tmp309 = _tmp61 + x0;
    const Scalar _tmp310 = _tmp309*_tmp32;
    const Scalar _tmp311 = Scalar(2.0)*x3;
    const Scalar _tmp312 = _tmp311 + x4;
    const Scalar _tmp313 = _tmp157 - 2;
    const Scalar _tmp314 = 3*x0;
    const Scalar _tmp315 = _tmp314 + _tmp68;
    const Scalar _tmp316 = _tmp179 + x1;
    const Scalar _tmp317 = x1 + 3;
    const Scalar _tmp318 = (Scalar(3)/Scalar(2))*x3 + Scalar(1)/Scalar(2);
    const Scalar _tmp319 = _tmp48*x0;
    const Scalar _tmp320 = _tmp319 - 4;
    const Scalar _tmp321 = 2 - _tmp59;
    const Scalar _tmp322 = _tmp15*_tmp60;
    const Scalar _tmp323 = _tmp32*_tmp322;
    const Scalar _tmp324 = _tmp15 + _tmp217 + _tmp72;
    const Scalar _tmp325 = _tmp36 + x4;
    const Scalar _tmp326 = Scalar(1.0) / (_tmp19);
    const Scalar _tmp327 = _tmp102 + _tmp136;
    const Scalar _tmp328 = -_tmp36;
    const Scalar _tmp329 = _tmp328 + _tmp69;
    const Scalar _tmp330 = _tmp12 - 3;
    const Scalar _tmp331 = _tmp329*x1;
    const Scalar _tmp332 = _tmp129 + x3;
    const Scalar _tmp333 = _tmp0 + 1;
    const Scalar _tmp334 = _tmp121*_tmp333;
    const Scalar _tmp335 = x1 - 2;
    const Scalar _tmp336 = _tmp335 + _tmp81;
    const Scalar _tmp337 = _tmp18 + _tmp206;
    const Scalar _tmp338 = (Scalar(1)/Scalar(2))*_tmp134 + _tmp73;
    const Scalar _tmp339 = 12*x2;
    const Scalar _tmp340 = 3*x3;
    const Scalar _tmp341 = _tmp6*x1;
    const Scalar _tmp342 = _tmp0 + _tmp206;
    const Scalar _tmp343 = -_tmp44;
    const Scalar _tmp344 = _tmp237 + _tmp68;
    const Scalar _tmp345 = _tmp51*_tmp59;
    const Scalar _tmp346 = _tmp15*_tmp59;
    const Scalar _tmp347 = 6*x0;
    const Scalar _tmp348 = Scalar(1.0) / (_tmp206);
    const Scalar _tmp349 = _tmp195 - 1;
    const Scalar _tmp350 = _tmp104*x2;
    const Scalar _tmp351 = _tmp231*_tmp60;
    const Scalar _tmp352 = _tmp0*_tmp60;
    const Scalar _tmp353 = Scalar(1.0) / (_tmp48);
    const Scalar _tmp354 = _tmp0 + x3;
    const Scalar _tmp355 = _tmp0*_tmp6;
    const Scalar _tmp356 = _tmp0*x0;
    const Scalar _tmp357 = _tmp70*x1;
    const Scalar _tmp358 = _tmp341*_tmp71;
    const Scalar _tmp359 = -_tmp239;
    const Scalar _tmp360 = _tmp0 + _tmp359;
    const Scalar _tmp361 = _tmp31*_tmp46;
    const Scalar _tmp362 = _tmp139 + _tmp187;
    const Scalar _tmp363 = _tmp15*_tmp157;
    const Scalar _tmp364 = _tmp36*_tmp76;
    const Scalar _tmp365 = _tmp0 + _tmp102 + _tmp54;
    const Scalar _tmp366 = _tmp129 + _tmp6;
    const Scalar _tmp367 = _tmp68 + _tmp43/_tmp24;
    const Scalar _tmp368 = _tmp61*x0;
    const Scalar _tmp369 = _tmp359 + _tmp80 + 6;
    const Scalar _tmp370 = _tmp211 - 1;
    const Scalar _tmp371 = (Scalar(1)/Scalar(2))*_tmp76;
    const Scalar _tmp372 = _tmp15*_tmp170 - 4;
    const Scalar _tmp373 = _tmp335*_tmp57;
    const Scalar _tmp374 = _tmp115 + _tmp68;
    const Scalar _tmp375 = _tmp43*_tmp52;
    const Scalar _tmp376 = _tmp134*x3;
    const Scalar _tmp377 = _tmp376 - _tmp46;
    const Scalar _tmp378 = 6*x2;
    const Scalar _tmp379 = -_tmp78;
    const Scalar _tmp380 = _tmp0 + x4;
    const Scalar _tmp381 = _tmp68 + x1;
    const Scalar _tmp382 = _tmp381*x3;
    const Scalar _tmp383 = _tmp151 + x3;
    const Scalar _tmp384 = _tmp108 + x3;
    const Scalar _tmp385 = _tmp145 + x0;
    const Scalar _tmp386 = _tmp385 + _tmp74;
    const Scalar _tmp387 = Scalar(2.0)*_tmp6;
    const Scalar _tmp388 = Scalar(2.0)*x0;
    const Scalar _tmp389 = _tmp23 + _tmp72;
    const Scalar _tmp390 = _tmp389*x2;
    const Scalar _tmp391 = _tmp76*x3;
    const Scalar _tmp392 = _tmp65*x1;
    const Scalar _tmp393 = _tmp48*_tmp52;
    const Scalar _tmp394 = 2*_tmp31;
    const Scalar _tmp395 = -_tmp54 + x0;
    const Scalar _tmp396 = Scalar(1.0) / (_tmp9);
    const Scalar _tmp397 = _tmp44*x1;
    const Scalar _tmp398 = _tmp396*x0;
    const Scalar _tmp399 = _tmp31*_tmp95;
    const Scalar _tmp400 = _tmp10 + x2;
    const Scalar _tmp401 = 5*x4;
    const Scalar _tmp402 = 4*_tmp43;
    const Scalar _tmp403 = _tmp32/_tmp85;
    const Scalar _tmp404 = _tmp102 + _tmp23;
    const Scalar _tmp405 = _tmp23 + _tmp26;
    const Scalar _tmp406 = _tmp403*x4;
    const Scalar _tmp407 = Scalar(1.0) / (_tmp129);
    const Scalar _tmp408 = -_tmp407*x2 + _tmp76;
    const Scalar _tmp409 = _tmp129 + _tmp68;
    const Scalar _tmp410 = _tmp1*_tmp21;
    const Scalar _tmp411 = _tmp32 + _tmp35;
    const Scalar _tmp412 = _tmp145 + 1;
    const Scalar _tmp413 = _tmp217*_tmp412;
    const Scalar _tmp414 = _tmp68 + x1*(_tmp23 + x2);
    const Scalar _tmp415 = x2 + x3;
    const Scalar _tmp416 = x3 + 4;
    const Scalar _tmp417 = _tmp6 + x1;
    const Scalar _tmp418 = _tmp0 - 2;
    const Scalar _tmp419 = _tmp134*_tmp81 + x3;
    const Scalar _tmp420 = _tmp15*_tmp217;
    const Scalar _tmp421 = _tmp43*x1;
    const Scalar _tmp422 = _tmp421 + 4;
    const Scalar _tmp423 = 4*_tmp81;
    const Scalar _tmp424 = _tmp242 - _tmp423;
    const Scalar _tmp425 = _tmp127 + x2;
    const Scalar _tmp426 = -_tmp117*x4 + _tmp69;
    const Scalar _tmp427 = x1 + 4;
    const Scalar _tmp428 = _tmp73 + 1;
    const Scalar _tmp429 = _tmp33 + _tmp428;
    const Scalar _tmp430 = _tmp21*x1 + x2;
    const Scalar _tmp431 = 4*_tmp6;
    const Scalar _tmp432 = _tmp12 + x4;
    const Scalar _tmp433 = _tmp195 - 4;
    const Scalar _tmp434 = _tmp225*x3;
    const Scalar _tmp435 = _tmp120 + 2;
    const Scalar _tmp436 = _tmp435 + (Scalar(1)/Scalar(2))*x1;
    const Scalar _tmp437 = _tmp376 + x4;
    const Scalar _tmp438 = Scalar(2.0)*x1;
    const Scalar _tmp439 = _tmp132*_tmp36;
    const Scalar _tmp440 = [&]() { const Scalar base = x2; return base * base * base; }();
    const Scalar _tmp441 = _tmp26*_tmp81;
    const Scalar _tmp442 = _tmp57*x0;
    const Scalar _tmp443 = 2*_tmp48;
    const Scalar _tmp444 = _tmp115 + _tmp170;
    const Scalar _tmp445 = _tmp407*_tmp59;
    const Scalar _tmp446 = _tmp120 + _tmp206;
    const Scalar _tmp447 = _tmp445*x4;
    const Scalar _tmp448 = _tmp446*x3;
    const Scalar _tmp449 = x1 - 4;
    const Scalar _tmp450 = _tmp102*_tmp81;
    const Scalar _tmp451 = _tmp416*_tmp76;
    const Scalar _tmp452 = Scalar(1.0) / (_tmp72 + _tmp73);
    const Scalar _tmp453 = _tmp74*_tmp90;
    const Scalar _tmp454 = _tmp81*x3;
    const Scalar _tmp455 = _tmp290 + 1;
    const Scalar _tmp456 = x3/_tmp72;
    const Scalar _tmp457 = [&]() { const Scalar base = x1; return base * base * base; }();
    const Scalar _tmp458 = Scalar(1.0)*_tmp457;
    const Scalar _tmp459 = _tmp24*(_tmp157 + x3);
    const Scalar _tmp460 = _tmp120 + _tmp27;
    const Scalar _tmp461 = _tmp102 + _tmp12;
    const Scalar _tmp462 = Scalar(1.0) / (_tmp142 + x0);
    const Scalar _tmp463 = 2*_tmp462;
    const Scalar _tmp464 = Scalar(1.0) / (_tmp235 + _tmp26);
    const Scalar _tmp465 = _tmp464*x1;
    const Scalar _tmp466 = Scalar(1.0) / (_tmp18 + _tmp217);
    const Scalar _tmp467 = _tmp466*x1;
    const Scalar _tmp468 = _tmp127*_tmp179;
    const Scalar _tmp469 = 2*_tmp81;
    const Scalar _tmp470 = _tmp179 + _tmp469;
    const Scalar _tmp471 = _tmp102 + _tmp272;
    const Scalar _tmp472 = _tmp23 + _tmp52 + 2;
    const Scalar _tmp473 = _tmp108*x4;
    const Scalar _tmp474 = _tmp166*x4;
    const Scalar _tmp475 = _tmp0 + 2;
    const Scalar _tmp476 = x3 - 5;
    const Scalar _tmp477 = _tmp181*_tmp57;
    const Scalar _tmp478 = -_tmp254 + x0;
    const Scalar _tmp479 = _tmp134 + _tmp143;
    const Scalar _tmp480 = _tmp217 + _tmp304;
    const Scalar _tmp481 = _tmp60*_tmp7;
    const Scalar _tmp482 = x2 + 3;
    const Scalar _tmp483 = _tmp134*_tmp181*_tmp335;
    const Scalar _tmp484 = -_tmp157 + _tmp268;
    const Scalar _tmp485 = _tmp160*x4;
    const Scalar _tmp486 = _tmp23 + _tmp348*x3;
    const Scalar _tmp487 = _tmp450 - 1;
    const Scalar _tmp488 = _tmp138 + _tmp35;
    const Scalar _tmp489 = _tmp488*x3;
    const Scalar _tmp490 = _tmp21*_tmp37;
    const Scalar _tmp491 = _tmp138 + x0;
    const Scalar _tmp492 = _tmp113*x4;
    const Scalar _tmp493 = _tmp26 + _tmp73;
    const Scalar _tmp494 = _tmp36*x0 - 2;
    const Scalar _tmp495 = _tmp217 + 1;
    const Scalar _tmp496 = _tmp495*x2;
    const Scalar _tmp497 = _tmp108*x2;
    const Scalar _tmp498 = x1 + x4;
    const Scalar _tmp499 = 1 - _tmp193;
    const Scalar _tmp500 = _tmp196*x0 - 2;
    const Scalar _tmp501 = 2 - 2*_tmp396;
    const Scalar _tmp502 = _tmp22*_tmp48;
    const Scalar _tmp503 = _tmp104 + x3;
    const Scalar _tmp504 = _tmp102 + 4;
    const Scalar _tmp505 = Scalar(1.0) / (_tmp415);
    const Scalar _tmp506 = 4*_tmp36;
    const Scalar _tmp507 = _tmp0 + 8;
    const Scalar _tmp508 = _tmp505*x0;
    const Scalar _tmp509 = _tmp139 - 4;
    const Scalar _tmp510 = _tmp113 + x4;
    const Scalar _tmp511 = _tmp394 - 2;
    const Scalar _tmp512 = _tmp51 + _tmp61;
    const Scalar _tmp513 = 2*_tmp32 + _tmp68 + 1;
    const Scalar _tmp514 = _tmp26*_tmp46;
    const Scalar _tmp515 = -_tmp193 + x0;
    const Scalar _tmp516 = _tmp91*x0;
    const Scalar _tmp517 = _tmp129*(_tmp157 - 1);
    const Scalar _tmp518 = _tmp60*x3 + _tmp68 + 2;
    const Scalar _tmp519 = _tmp91 + 4;
    const Scalar _tmp520 = _tmp102 + _tmp138;
    const Scalar _tmp521 = _tmp12 - 4;
    const Scalar _tmp522 = _tmp102 + Scalar(2.0);
    const Scalar _tmp523 = _tmp185 + _tmp23;
    const Scalar _tmp524 = _tmp44 - 4;
    const Scalar _tmp525 = _tmp12 + _tmp16;
    const Scalar _tmp526 = _tmp525 + _tmp61;
    const Scalar _tmp527 = _tmp526*x4;
    const Scalar _tmp528 = _tmp449*x1;
    const Scalar _tmp529 = _tmp300 + _tmp44;
    const Scalar _tmp530 = _tmp143*_tmp61;
    const Scalar _tmp531 = _tmp16 + x2;
    const Scalar _tmp532 = _tmp195 - 2;
    const Scalar _tmp533 = -_tmp357 + x0;
    const Scalar _tmp534 = _tmp335*x2;
    const Scalar _tmp535 = _tmp102 + _tmp39;
    const Scalar _tmp536 = _tmp15 + _tmp535 - 4;
    const Scalar _tmp537 = (Scalar(1)/Scalar(2))*x4;
    const Scalar _tmp538 = _tmp537 + 1;
    const Scalar _tmp539 = _tmp23 + x3*(_tmp61 + x1);
    const Scalar _tmp540 = _tmp100*_tmp43;
    const Scalar _tmp541 = (Scalar(1)/Scalar(4))*_tmp109*_tmp32;
    const Scalar _tmp542 = _tmp0 + _tmp73;
    const Scalar _tmp543 = _tmp138 + _tmp398*_tmp59;
    const Scalar _tmp544 = _tmp213*x4;
    const Scalar _tmp545 = _tmp182*_tmp6;
    const Scalar _tmp546 = _tmp12*_tmp48;
    const Scalar _tmp547 = _tmp26*_tmp341;
    const Scalar _tmp548 = _tmp26*_tmp43;
    const Scalar _tmp549 = _tmp129*(_tmp9 + x0);
    const Scalar _tmp550 = _tmp218*_tmp48;
    const Scalar _tmp551 = _tmp129 + _tmp239;
    const Scalar _tmp552 = _tmp157*_tmp232;
    const Scalar _tmp553 = _tmp181 + _tmp81;
    const Scalar _tmp554 = _tmp60*x4 + x4;
    const Scalar _tmp555 = _tmp232*_tmp31;
    const Scalar _tmp556 = _tmp232*x2;
    const Scalar _tmp557 = _tmp44*_tmp442;
    const Scalar _tmp558 = _tmp409*_tmp60;
    const Scalar _tmp559 = _tmp440 - 1;
    const Scalar _tmp560 = _tmp516 + x2;
    const Scalar _tmp561 = _tmp13 + _tmp23;
    const Scalar _tmp562 = _tmp43 + x3;
    const Scalar _tmp563 = _tmp562*x3;
    const Scalar _tmp564 = _tmp102 + _tmp443;
    const Scalar _tmp565 = Scalar(1.0) / (_tmp181);
    const Scalar _tmp566 = _tmp138 + _tmp396*x2 + x4;
    const Scalar _tmp567 = _tmp86 + 2;
    const Scalar _tmp568 = _tmp61 + 5;
    const Scalar _tmp569 = Scalar(1.0)*x1;
    const Scalar _tmp570 = _tmp174 + x2;
    const Scalar _tmp571 = _tmp48*x3;
    const Scalar _tmp572 = _tmp12*_tmp19 + x1;
    const Scalar _tmp573 = _tmp24*x0 + x3;
    const Scalar _tmp574 = x4 - 4;
    const Scalar _tmp575 = std::pow(_tmp37, Scalar(2));
    const Scalar _tmp576 = _tmp177*_tmp74;
    const Scalar _tmp577 = _tmp21*x0;
    const Scalar _tmp578 = -_tmp76;
    const Scalar _tmp579 = _tmp117 + _tmp454 + _tmp578;
    const Scalar _tmp580 = _tmp0 - 8;
    const Scalar _tmp581 = x0/(_tmp26 - _tmp52 + x0);
    const Scalar _tmp582 = -_tmp32*x2 + x0;
    const Scalar _tmp583 = _tmp120 + _tmp121;
    const Scalar _tmp584 = _tmp504*x1;
    const Scalar _tmp585 = _tmp32*_tmp537;
    const Scalar _tmp586 = _tmp102 + _tmp15;
    const Scalar _tmp587 = _tmp123 + _tmp174;
    const Scalar _tmp588 = Scalar(1.0) / (_tmp52 + x0);
    const Scalar _tmp589 = _tmp588*x3;
    const Scalar _tmp590 = _tmp347 + _tmp378;
    const Scalar _tmp591 = 5*x2 + x3;
    const Scalar _tmp592 = _tmp129 + x0;
    const Scalar _tmp593 = _tmp592*x4;
    const Scalar _tmp594 = (Scalar(1)/Scalar(4))*x0;
    const Scalar _tmp595 = _tmp129*x1 + _tmp68;
    const Scalar _tmp596 = _tmp32*_tmp61;
    const Scalar _tmp597 = _tmp77 + x1;
    const Scalar _tmp598 = _tmp218 + x3;
    const Scalar _tmp599 = _tmp391 + _tmp68;
    const Scalar _tmp600 = _tmp108*_tmp260;
    const Scalar _tmp601 = _tmp208 + _tmp69;
    const Scalar _tmp602 = _tmp155 + _tmp68;
    const Scalar _tmp603 = x3/_tmp108;
    const Scalar _tmp604 = _tmp69*(_tmp174 + _tmp61);
    const Scalar _tmp605 = _tmp474 - 1;
    const Scalar _tmp606 = Scalar(1.0)*x0 - 2;
    const Scalar _tmp607 = _tmp606*x4;
    const Scalar _tmp608 = _tmp145 + _tmp400;
    const Scalar _tmp609 = _tmp389*x0;
    const Scalar _tmp610 = _tmp415*_tmp61;
    const Scalar _tmp611 = _tmp525*x0;
    const Scalar _tmp612 = _tmp0 + _tmp12;
    const Scalar _tmp613 = _tmp15 + x2;
    const Scalar _tmp614 = _tmp36 + x3;
    const Scalar _tmp615 = -_tmp283;
    const Scalar _tmp616 = 12*_tmp81;
    const Scalar _tmp617 = _tmp314 + _tmp359;
    const Scalar _tmp618 = _tmp104 + _tmp18;
    const Scalar _tmp619 = _tmp172*_tmp31;
    const Scalar _tmp620 = _tmp147 + _tmp18 + x2;
    const Scalar _tmp621 = _tmp85*x4 + x4;
    const Scalar _tmp622 = _tmp0*_tmp279;
    const Scalar _tmp623 = _tmp285*x2;
    const Scalar _tmp624 = _tmp52 - 2;
    const Scalar _tmp625 = _tmp218 + _tmp428;
    const Scalar _tmp626 = _tmp394 + 4;
    const Scalar _tmp627 = _tmp0*_tmp121;
    const Scalar _tmp628 = _tmp454*_tmp69;
    const Scalar _tmp629 = 2*_tmp232 + _tmp73;
    const Scalar _tmp630 = x0/(_tmp0 + _tmp615);
    const Scalar _tmp631 = -_tmp129*_tmp415 + x3;
    const Scalar _tmp632 = _tmp0 + _tmp258;
    const Scalar _tmp633 = _tmp10 + _tmp120;

    // Output terms (1)
    static constexpr int kRows_result = 163;
    static constexpr int kCols_result = 163;
    static constexpr int kNumNonZero_result = 891;
    static constexpr int kColPtrs_result[] = {0, 4, 8, 9, 12, 15, 18, 23, 28, 31, 34, 37, 40, 44, 49, 52, 55, 58, 61, 65, 70, 73, 76, 79, 81, 86, 86, 89, 92, 95, 98, 103, 108, 111, 114, 117, 120, 125, 130, 133, 136, 139, 142, 147, 152, 155, 158, 161, 164, 168, 173, 175, 178, 181, 184, 189, 193, 196, 200, 204, 207, 213, 219, 225, 228, 234, 240, 246, 252, 259, 266, 271, 280, 289, 298, 303, 310, 316, 323, 330, 337, 344, 349, 357, 365, 373, 378, 385, 391, 398, 405, 409, 416, 419, 427, 435, 443, 448, 455, 460, 467, 473, 480, 487, 491, 500, 509, 518, 523, 530, 536, 543, 548, 555, 562, 567, 575, 584, 593, 598, 603, 610, 617, 624, 631, 638, 643, 652, 661, 670, 674, 681, 688, 695, 702, 709, 716, 721, 730, 739, 748, 753, 759, 766, 773, 779, 785, 792, 797, 806, 815, 823, 828, 833, 838, 843, 846, 853, 856, 861, 869, 877, 887, 891};
    static constexpr int kRowIndices_result[] = {0, 60, 61, 62, 1, 60, 61, 62, 2, 3, 65, 68, 4, 66, 69, 5, 67, 70, 6, 68, 71, 72, 73, 7, 69, 71, 72, 73, 8, 64, 70, 9, 76, 79, 10, 77, 80, 11, 78, 81, 12, 82, 83, 84, 13, 80, 82, 83, 84, 14, 75, 81, 15, 87, 90, 16, 88, 91, 17, 89, 92, 18, 93, 94, 95, 19, 91, 93, 94, 95, 20, 86, 92, 21, 98, 101, 22, 99, 102, 100, 103, 24, 101, 104, 105, 106, 26, 97, 103, 27, 109, 112, 28, 110, 113, 29, 111, 114, 30, 112, 115, 116, 117, 31, 113, 115, 116, 117, 32, 108, 114, 33, 120, 123, 34, 121, 124, 35, 122, 125, 36, 123, 126, 127, 128, 37, 124, 126, 127, 128, 38, 119, 125, 39, 131, 134, 40, 132, 135, 41, 133, 136, 42, 134, 137, 138, 139, 43, 135, 137, 138, 139, 44, 130, 136, 45, 142, 145, 46, 143, 146, 47, 144, 147, 48, 145, 148, 149, 49, 146, 148, 149, 150, 50, 141, 51, 153, 156, 52, 154, 157, 53, 155, 158, 54, 156, 159, 160, 161, 55, 159, 160, 161, 56, 152, 158, 57, 159, 160, 161, 58, 159, 160, 161, 59, 161, 162, 0, 1, 60, 61, 62, 65, 0, 1, 60, 61, 62, 66, 0, 1, 60, 61, 62, 67, 63, 64, 74, 8, 63, 64, 70, 74, 75, 3, 60, 65, 68, 71, 76, 4, 61, 66, 69, 72, 77, 5, 62, 67, 70, 73, 78, 3, 6, 65, 68, 71, 72, 73, 4, 7, 66, 69, 71, 72, 73, 5, 8, 64, 67, 70, 6, 7, 65, 68, 69, 71, 72, 73, 76, 6, 7, 66, 68, 69, 71, 72, 73, 77, 6, 7, 67, 68, 69, 71, 72, 73, 78, 63, 64, 74, 75, 85, 14, 64, 74, 75, 81, 85, 86, 9, 65, 71, 76, 79, 87, 10, 66, 72, 77, 80, 83, 88, 11, 67, 73, 78, 81, 84, 89, 9, 12, 76, 79, 82, 83, 84, 10, 13, 77, 80, 82, 83, 84, 11, 14, 75, 78, 81, 12, 13, 76, 80, 82, 83, 84, 87, 12, 13, 77, 80, 82, 83, 84, 88, 12, 13, 78, 80, 82, 83, 84, 89, 74, 75, 85, 86, 96, 20, 75, 85, 86, 92, 96, 97, 15, 76, 87, 90, 93, 98, 16, 77, 83, 88, 91, 94, 99, 17, 78, 84, 89, 92, 95, 100, 18, 93, 94, 95, 16, 19, 88, 91, 93, 94, 95, 17, 89, 92, 18, 19, 87, 91, 93, 94, 95, 98, 18, 19, 88, 91, 93, 94, 95, 99, 18, 19, 89, 91, 93, 94, 95, 100, 85, 86, 96, 97, 107, 26, 86, 96, 97, 103, 107, 108, 87, 93, 98, 104, 109, 22, 88, 94, 99, 102, 105, 110, 89, 95, 100, 103, 106, 111, 21, 24, 98, 101, 104, 105, 106, 22, 25, 99, 102, 104, 105, 106, 26, 97, 100, 103, 24, 25, 98, 101, 102, 104, 105, 106, 109, 24, 25, 99, 101, 102, 104, 105, 106, 110, 24, 25, 100, 101, 102, 104, 105, 106, 111, 96, 97, 107, 108, 118, 32, 97, 107, 108, 114, 118, 119, 27, 98, 104, 109, 112, 115, 28, 99, 105, 110, 113, 116, 121, 29, 111, 114, 117, 122, 27, 30, 109, 112, 115, 116, 117, 28, 31, 110, 113, 115, 116, 117, 29, 32, 108, 111, 114, 30, 31, 109, 112, 113, 115, 116, 117, 30, 31, 110, 112, 113, 115, 116, 117, 121, 30, 31, 111, 112, 113, 115, 116, 117, 122, 107, 108, 118, 119, 129, 38, 108, 118, 119, 125, 33, 109, 115, 120, 123, 126, 131, 34, 110, 116, 121, 124, 127, 132, 35, 111, 117, 122, 125, 128, 133, 33, 36, 120, 123, 126, 127, 128, 34, 37, 121, 124, 126, 127, 128, 35, 38, 119, 122, 125, 36, 37, 120, 123, 124, 126, 127, 128, 131, 36, 37, 121, 123, 124, 126, 127, 128, 132, 36, 37, 122, 123, 124, 126, 127, 128, 133, 119, 129, 130, 140, 44, 119, 129, 130, 136, 140, 141, 39, 120, 126, 131, 134, 137, 142, 40, 121, 127, 132, 135, 138, 143, 41, 122, 128, 133, 136, 139, 144, 39, 42, 131, 134, 137, 138, 139, 40, 43, 132, 135, 137, 138, 139, 41, 44, 130, 133, 136, 42, 43, 131, 134, 135, 137, 138, 139, 142, 42, 43, 132, 134, 135, 137, 138, 139, 143, 42, 43, 133, 134, 135, 137, 138, 139, 144, 129, 130, 140, 141, 151, 50, 130, 140, 141, 151, 152, 45, 131, 137, 142, 145, 148, 153, 46, 132, 138, 143, 146, 149, 154, 47, 133, 139, 144, 147, 150, 45, 48, 142, 145, 148, 149, 46, 49, 143, 146, 148, 149, 150, 47, 50, 141, 144, 147, 48, 49, 142, 145, 146, 148, 149, 150, 153, 48, 49, 143, 145, 146, 148, 149, 150, 154, 48, 49, 144, 145, 146, 148, 149, 150, 140, 141, 151, 152, 162, 56, 141, 151, 152, 158, 51, 142, 148, 153, 156, 52, 143, 149, 154, 157, 53, 155, 158, 51, 54, 153, 156, 159, 160, 161, 52, 154, 157, 53, 56, 152, 155, 158, 54, 55, 57, 58, 156, 159, 160, 161, 54, 55, 57, 58, 156, 159, 160, 161, 54, 55, 57, 58, 59, 156, 159, 160, 161, 162, 59, 151, 161, 162};
    Scalar result_empty_value_ptr[891];
    Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
        kRows_result,
        kCols_result,
        kNumNonZero_result,
        kColPtrs_result,
        kRowIndices_result,
        result_empty_value_ptr
    );
    Scalar* result_value_ptr = result.valuePtr();


    result_value_ptr[0] = -_tmp3;
    result_value_ptr[1] = _tmp5;
    result_value_ptr[2] = _tmp6*_tmp8;
    result_value_ptr[3] = _tmp11*x0;
    result_value_ptr[4] = -_tmp14*_tmp17;
    result_value_ptr[5] = _tmp14*_tmp20*x2;
    result_value_ptr[6] = -_tmp14*_tmp22;
    result_value_ptr[7] = -_tmp14*_tmp25;
    result_value_ptr[8] = _tmp26*(_tmp15 + Scalar(-1.0));
    result_value_ptr[9] = -_tmp10*_tmp28;
    result_value_ptr[10] = -_tmp29*_tmp30;
    result_value_ptr[11] = -_tmp10*_tmp34;
    result_value_ptr[12] = _tmp35*_tmp38;
    result_value_ptr[13] = -_tmp38*_tmp41;
    result_value_ptr[14] = _tmp38*_tmp42;
    result_value_ptr[15] = -_tmp45;
    result_value_ptr[16] = -_tmp46*_tmp47;
    result_value_ptr[17] = -_tmp44*_tmp49*x0;
    result_value_ptr[18] = _tmp50*_tmp51;
    result_value_ptr[19] = -_tmp53;
    result_value_ptr[20] = _tmp54*_tmp55;
    result_value_ptr[21] = _tmp51*_tmp56;
    result_value_ptr[22] = -_tmp15*_tmp58;
    result_value_ptr[23] = -_tmp59*_tmp63;
    result_value_ptr[24] = _tmp66*_tmp67;
    result_value_ptr[25] = -_tmp67*_tmp70;
    result_value_ptr[26] = -_tmp67*_tmp71;
    result_value_ptr[27] = _tmp67*_tmp75;
    result_value_ptr[28] = -_tmp77*_tmp78;
    result_value_ptr[29] = _tmp79 - 18;
    result_value_ptr[30] = -_tmp80 - 6*_tmp81 + 12;
    result_value_ptr[31] = -_tmp82*_tmp83;
    result_value_ptr[32] = -_tmp83*_tmp84;
    result_value_ptr[33] = -_tmp83*_tmp86;
    result_value_ptr[34] = _tmp88*x2;
    result_value_ptr[35] = _tmp57*_tmp88;
    result_value_ptr[36] = _tmp88*_tmp89*_tmp90;
    result_value_ptr[37] = _tmp9*_tmp92;
    result_value_ptr[38] = _tmp35*_tmp92;
    result_value_ptr[39] = -_tmp92*_tmp93;
    result_value_ptr[40] = -_tmp94*_tmp95*x4;
    result_value_ptr[41] = _tmp94*_tmp96;
    result_value_ptr[42] = -_tmp94*x3;
    result_value_ptr[43] = -_tmp94*_tmp97;
    result_value_ptr[44] = _tmp99;
    result_value_ptr[45] = -_tmp100 - _tmp39 - 2;
    result_value_ptr[46] = _tmp101*_tmp99;
    result_value_ptr[47] = -_tmp103*_tmp99;
    result_value_ptr[48] = _tmp105*_tmp99;
    result_value_ptr[49] = -_tmp106*_tmp107;
    result_value_ptr[50] = -_tmp107*_tmp108;
    result_value_ptr[51] = -_tmp107*_tmp110;
    result_value_ptr[52] = -_tmp112*_tmp116*x3;
    result_value_ptr[53] = _tmp116*_tmp118;
    result_value_ptr[54] = -2*_tmp114 + _tmp119;
    result_value_ptr[55] = -_tmp122*_tmp124;
    result_value_ptr[56] = -_tmp124*_tmp125;
    result_value_ptr[57] = _tmp123*_tmp126;
    result_value_ptr[58] = -Scalar(1)/Scalar(2)*_tmp43;
    result_value_ptr[59] = _tmp127*_tmp128;
    result_value_ptr[60] = (Scalar(1)/Scalar(4))*_tmp130;
    result_value_ptr[61] = -_tmp131;
    result_value_ptr[62] = _tmp132*_tmp133;
    result_value_ptr[63] = -_tmp135*_tmp136;
    result_value_ptr[64] = _tmp136*_tmp137;
    result_value_ptr[65] = -_tmp140*x3;
    result_value_ptr[66] = _tmp140*_tmp71;
    result_value_ptr[67] = -_tmp102 - _tmp61 + _tmp91;
    result_value_ptr[68] = -_tmp106*_tmp140;
    result_value_ptr[69] = -_tmp140*_tmp141;
    result_value_ptr[70] = _tmp118*_tmp142;
    result_value_ptr[71] = -_tmp104*_tmp118;
    result_value_ptr[72] = _tmp118*_tmp144*_tmp46;
    result_value_ptr[73] = _tmp145*_tmp148;
    result_value_ptr[74] = _tmp102*_tmp21;
    result_value_ptr[75] = -_tmp149*x0;
    result_value_ptr[76] = _tmp150*_tmp26;
    result_value_ptr[77] = _tmp152*_tmp26;
    result_value_ptr[78] = -_tmp26*_tmp57;
    result_value_ptr[79] = _tmp153;
    result_value_ptr[80] = _tmp154*_tmp90;
    result_value_ptr[81] = -_tmp156*_tmp159;
    result_value_ptr[82] = -_tmp158*_tmp161;
    result_value_ptr[83] = _tmp159*_tmp164;
    result_value_ptr[84] = _tmp159*_tmp165;
    result_value_ptr[85] = _tmp159*_tmp166;
    result_value_ptr[86] = -_tmp167*_tmp27;
    result_value_ptr[87] = _tmp167*_tmp168;
    result_value_ptr[88] = -_tmp167*_tmp169;
    result_value_ptr[89] = _tmp143*_tmp171;
    result_value_ptr[90] = _tmp13*_tmp143;
    result_value_ptr[91] = -_tmp143*_tmp173;
    result_value_ptr[92] = _tmp170*_tmp175;
    result_value_ptr[93] = -_tmp142*_tmp176;
    result_value_ptr[94] = _tmp176*_tmp177;
    result_value_ptr[95] = -_tmp178*_tmp180;
    result_value_ptr[96] = _tmp180*_tmp181;
    result_value_ptr[97] = _tmp180*_tmp183;
    result_value_ptr[98] = _tmp184*_tmp72;
    result_value_ptr[99] = -_tmp184*_tmp186;
    result_value_ptr[100] = -_tmp184*_tmp188;
    result_value_ptr[101] = -_tmp184*_tmp189;
    result_value_ptr[102] = _tmp184*_tmp190;
    result_value_ptr[103] = _tmp115*_tmp43*_tmp91;
    result_value_ptr[104] = -_tmp127*_tmp191;
    result_value_ptr[105] = -_tmp115*_tmp145;
    result_value_ptr[106] = _tmp191*_tmp192;
    result_value_ptr[107] = _tmp191*_tmp194;
    result_value_ptr[108] = -_tmp195*_tmp36 + 8;
    result_value_ptr[109] = -_tmp195 - 8;
    result_value_ptr[110] = _tmp195*_tmp196 - 8;
    result_value_ptr[111] = _tmp197*_tmp198;
    result_value_ptr[112] = -_tmp197*_tmp199;
    result_value_ptr[113] = _tmp197*_tmp200;
    result_value_ptr[114] = _tmp201*_tmp202;
    result_value_ptr[115] = _tmp202*_tmp203;
    result_value_ptr[116] = _tmp202*_tmp204;
    result_value_ptr[117] = _tmp205*_tmp35;
    result_value_ptr[118] = -_tmp206*_tmp35;
    result_value_ptr[119] = _tmp207*_tmp35;
    result_value_ptr[120] = _tmp209*_tmp210;
    result_value_ptr[121] = _tmp12*_tmp213*_tmp31;
    result_value_ptr[122] = _tmp12*_tmp55;
    result_value_ptr[123] = _tmp210;
    result_value_ptr[124] = _tmp12*_tmp182*_tmp214;
    result_value_ptr[125] = -_tmp215*_tmp216;
    result_value_ptr[126] = _tmp216*_tmp71;
    result_value_ptr[127] = -_tmp216;
    result_value_ptr[128] = -_tmp216*_tmp217;
    result_value_ptr[129] = -_tmp216*_tmp220;
    result_value_ptr[130] = 3*_tmp221;
    result_value_ptr[131] = -_tmp221*_tmp222;
    result_value_ptr[132] = -_tmp221;
    result_value_ptr[133] = -_tmp224*_tmp226;
    result_value_ptr[134] = _tmp224*_tmp227;
    result_value_ptr[135] = -_tmp224*_tmp228;
    result_value_ptr[136] = _tmp163*_tmp230;
    result_value_ptr[137] = _tmp100 + _tmp229*_tmp44;
    result_value_ptr[138] = -_tmp230*_tmp231;
    result_value_ptr[139] = Scalar(2.0)*_tmp232;
    result_value_ptr[140] = -_tmp12*_tmp233;
    result_value_ptr[141] = _tmp234;
    result_value_ptr[142] = _tmp236*_tmp238;
    result_value_ptr[143] = -_tmp238*_tmp240;
    result_value_ptr[144] = -_tmp193*_tmp238;
    result_value_ptr[145] = -_tmp238*_tmp241;
    result_value_ptr[146] = _tmp238*_tmp243;
    result_value_ptr[147] = -_tmp245;
    result_value_ptr[148] = _tmp247;
    result_value_ptr[149] = -_tmp133;
    result_value_ptr[150] = -_tmp249;
    result_value_ptr[151] = _tmp162;
    result_value_ptr[152] = _tmp210*_tmp250;
    result_value_ptr[153] = _tmp250*_tmp251;
    result_value_ptr[154] = _tmp250*_tmp252;
    result_value_ptr[155] = _tmp253*x4;
    result_value_ptr[156] = -_tmp128;
    result_value_ptr[157] = _tmp254;
    result_value_ptr[158] = _tmp256*_tmp257;
    result_value_ptr[159] = _tmp256*x2;
    result_value_ptr[160] = _tmp256*_tmp259;
    result_value_ptr[161] = _tmp260*_tmp261;
    result_value_ptr[162] = -_tmp111*_tmp261;
    result_value_ptr[163] = _tmp261*_tmp262;
    result_value_ptr[164] = -_tmp263*_tmp70;
    result_value_ptr[165] = -_tmp264*_tmp70;
    result_value_ptr[166] = _tmp31*_tmp70;
    result_value_ptr[167] = -_tmp265*_tmp70;
    result_value_ptr[168] = -_tmp153 - _tmp39;
    result_value_ptr[169] = -_tmp210*_tmp43;
    result_value_ptr[170] = Scalar(-0.2857142857142857);
    result_value_ptr[171] = _tmp266 + _tmp267;
    result_value_ptr[172] = -_tmp15 - _tmp39 - _tmp89;
    result_value_ptr[173] = _tmp268*_tmp269;
    result_value_ptr[174] = -_tmp237*_tmp269;
    result_value_ptr[175] = -_tmp270*_tmp53;
    result_value_ptr[176] = -_tmp17*_tmp271;
    result_value_ptr[177] = -_tmp272*_tmp53;
    result_value_ptr[178] = -_tmp273*_tmp274;
    result_value_ptr[179] = -_tmp106*_tmp273;
    result_value_ptr[180] = -_tmp273*_tmp275;
    result_value_ptr[181] = -_tmp214*_tmp276;
    result_value_ptr[182] = -_tmp276*_tmp278;
    result_value_ptr[183] = -_tmp131 - _tmp91;
    result_value_ptr[184] = _tmp131*_tmp279;
    result_value_ptr[185] = _tmp281*_tmp61;
    result_value_ptr[186] = -_tmp282*_tmp61;
    result_value_ptr[187] = -_tmp284;
    result_value_ptr[188] = -_tmp1*_tmp285;
    result_value_ptr[189] = -_tmp31*_tmp54;
    result_value_ptr[190] = _tmp287*_tmp288;
    result_value_ptr[191] = _tmp288*_tmp289;
    result_value_ptr[192] = _tmp288*_tmp291;
    result_value_ptr[193] = -_tmp292*_tmp293;
    result_value_ptr[194] = _tmp293*_tmp94;
    result_value_ptr[195] = _tmp293*_tmp294;
    result_value_ptr[196] = -_tmp115*_tmp295;
    result_value_ptr[197] = -_tmp115*_tmp296;
    result_value_ptr[198] = _tmp115*_tmp297;
    result_value_ptr[199] = -_tmp115*x2;
    result_value_ptr[200] = -_tmp298*_tmp299;
    result_value_ptr[201] = -_tmp298;
    result_value_ptr[202] = _tmp298*_tmp300;
    result_value_ptr[203] = _tmp298*_tmp301;
    result_value_ptr[204] = _tmp129*_tmp303;
    result_value_ptr[205] = -_tmp129*_tmp305;
    result_value_ptr[206] = -_tmp106;
    result_value_ptr[207] = 2*_tmp3;
    result_value_ptr[208] = -_tmp17*_tmp306;
    result_value_ptr[209] = _tmp20*_tmp306*x2 - _tmp239 - 2*_tmp5;
    result_value_ptr[210] = -_tmp22*_tmp306 - _tmp307*_tmp6;
    result_value_ptr[211] = -_tmp102*_tmp11 - _tmp25*_tmp306;
    result_value_ptr[212] = -_tmp308*x4;
    result_value_ptr[213] = _tmp2*_tmp310;
    result_value_ptr[214] = -_tmp134*_tmp16*_tmp312;
    result_value_ptr[215] = _tmp20*_tmp217*_tmp312 - _tmp310*_tmp4;
    result_value_ptr[216] = -4*_tmp109*_tmp310 - _tmp21*_tmp312*_tmp6 + _tmp313*x3;
    result_value_ptr[217] = -_tmp11*_tmp310 - _tmp25*_tmp312*x0;
    result_value_ptr[218] = -_tmp313*_tmp315;
    result_value_ptr[219] = 8*_tmp157 + _tmp195;
    result_value_ptr[220] = _tmp16*_tmp316*_tmp90;
    result_value_ptr[221] = -_tmp20*_tmp316*_tmp46 - _tmp44 + 16;
    result_value_ptr[222] = -16*_tmp109 + _tmp316*[&]() { const Scalar base = x3; return base * base * base; }()*x4;
    result_value_ptr[223] = -4*_tmp11 + _tmp25*_tmp316*x3 - _tmp317*_tmp318*x0;
    result_value_ptr[224] = -_tmp318*_tmp320;
    result_value_ptr[225] = _tmp145*_tmp324*_tmp325 + _tmp321*_tmp323;
    result_value_ptr[226] = -_tmp100*_tmp325*_tmp326*x0;
    result_value_ptr[227] = -_tmp323*_tmp327;
    result_value_ptr[228] = _tmp329*_tmp52*_tmp77;
    result_value_ptr[229] = _tmp143*_tmp21*_tmp324;
    result_value_ptr[230] = -_tmp143*_tmp266*_tmp326 - _tmp330*_tmp331 + _tmp332*_tmp334;
    result_value_ptr[231] = _tmp331*_tmp336;
    result_value_ptr[232] = _tmp334*_tmp337;
    result_value_ptr[233] = _tmp334*_tmp338;
    result_value_ptr[234] = -_tmp28*_tmp6;
    result_value_ptr[235] = -_tmp339 + _tmp340 + 6;
    result_value_ptr[236] = _tmp129*_tmp342 - _tmp29*_tmp341 + _tmp308*(_tmp206 + _tmp343);
    result_value_ptr[237] = -_tmp34*_tmp6;
    result_value_ptr[238] = -_tmp342*_tmp344;
    result_value_ptr[239] = -_tmp181*_tmp342;
    result_value_ptr[240] = _tmp345*_tmp35;
    result_value_ptr[241] = _tmp328;
    result_value_ptr[242] = -_tmp284 + _tmp315*x4 - _tmp346*_tmp40*[&]() { const Scalar base = x4; return base * base * base; }();
    result_value_ptr[243] = _tmp266*_tmp59*_tmp6;
    result_value_ptr[244] = _tmp232*_tmp242*_tmp43;
    result_value_ptr[245] = -_tmp12*_tmp69;
    result_value_ptr[246] = _tmp347;
    result_value_ptr[247] = -_tmp317*_tmp348*_tmp43;
    result_value_ptr[248] = -_tmp320*_tmp348*x0 + _tmp349*_tmp8 + 18*x3;
    result_value_ptr[249] = 6*_tmp36 - 6*_tmp48 + 12;
    result_value_ptr[250] = _tmp349*_tmp350;
    result_value_ptr[251] = -_tmp165*_tmp349;
    result_value_ptr[252] = -_tmp28*_tmp351;
    result_value_ptr[253] = _tmp352*_tmp50;
    result_value_ptr[254] = -_tmp29*_tmp351*x1;
    result_value_ptr[255] = -_tmp34*_tmp351 - _tmp54*_tmp60;
    result_value_ptr[256] = _tmp48*_tmp53*_tmp60;
    result_value_ptr[257] = _tmp352*_tmp56;
    result_value_ptr[258] = -_tmp352*_tmp57;
    result_value_ptr[259] = -_tmp255*_tmp35;
    result_value_ptr[260] = -_tmp353*_tmp354;
    result_value_ptr[261] = _tmp255*_tmp41;
    result_value_ptr[262] = -_tmp255*_tmp42 + _tmp354*_tmp66;
    result_value_ptr[263] = -_tmp354*_tmp70;
    result_value_ptr[264] = -_tmp354*_tmp71;
    result_value_ptr[265] = _tmp354*_tmp75;
    result_value_ptr[266] = -_tmp286;
    result_value_ptr[267] = -_tmp355*_tmp77;
    result_value_ptr[268] = _tmp330*_tmp356;
    result_value_ptr[269] = -_tmp347*x3;
    result_value_ptr[270] = -_tmp102*_tmp49 - _tmp336*_tmp356;
    result_value_ptr[271] = _tmp50*x3;
    result_value_ptr[272] = _tmp341*_tmp353;
    result_value_ptr[273] = _tmp129*_tmp182;
    result_value_ptr[274] = -_tmp90;
    result_value_ptr[275] = -_tmp341*_tmp66;
    result_value_ptr[276] = -_tmp182*_tmp344 + _tmp22*_tmp76 + _tmp357*_tmp6;
    result_value_ptr[277] = _tmp358 + _tmp56*x3;
    result_value_ptr[278] = -_tmp126 - _tmp341*_tmp75;
    result_value_ptr[279] = -_tmp181*_tmp182;
    result_value_ptr[280] = _tmp50*_tmp6;
    result_value_ptr[281] = -_tmp353*_tmp360;
    result_value_ptr[282] = 3*_tmp361;
    result_value_ptr[283] = -_tmp341;
    result_value_ptr[284] = _tmp360*_tmp66;
    result_value_ptr[285] = _tmp145*_tmp31*_tmp76 - _tmp360*_tmp70;
    result_value_ptr[286] = -_tmp340*_tmp43*_tmp76 - _tmp360*_tmp71 + _tmp56*_tmp6;
    result_value_ptr[287] = _tmp360*_tmp75 - _tmp57*_tmp6;
    result_value_ptr[288] = _tmp314 + 3;
    result_value_ptr[289] = -_tmp362*_tmp50;
    result_value_ptr[290] = _tmp345;
    result_value_ptr[291] = _tmp179*_tmp8;
    result_value_ptr[292] = _tmp362*x1;
    result_value_ptr[293] = -_tmp363*_tmp66;
    result_value_ptr[294] = -_tmp362*_tmp364 + _tmp363*_tmp70;
    result_value_ptr[295] = -_tmp362*_tmp56 + _tmp363*_tmp71;
    result_value_ptr[296] = _tmp179*_tmp350 + _tmp362*_tmp57 - _tmp363*_tmp75;
    result_value_ptr[297] = -_tmp165*_tmp179;
    result_value_ptr[298] = _tmp321*_tmp365;
    result_value_ptr[299] = _tmp332*_tmp366;
    result_value_ptr[300] = -_tmp28*_tmp57 - _tmp327*_tmp365 + _tmp337*_tmp366;
    result_value_ptr[301] = _tmp338*_tmp366;
    result_value_ptr[302] = _tmp15*_tmp57;
    result_value_ptr[303] = -_tmp106*_tmp367;
    result_value_ptr[304] = -_tmp332*_tmp368;
    result_value_ptr[305] = -_tmp337*_tmp368;
    result_value_ptr[306] = -_tmp108*_tmp367 + _tmp117*_tmp369 - _tmp338*_tmp368;
    result_value_ptr[307] = -_tmp110*_tmp367;
    result_value_ptr[308] = -_tmp109*_tmp117*_tmp370;
    result_value_ptr[309] = _tmp0*_tmp117;
    result_value_ptr[310] = _tmp182*_tmp82;
    result_value_ptr[311] = _tmp129*_tmp170;
    result_value_ptr[312] = -_tmp170*_tmp344;
    result_value_ptr[313] = -_tmp170*_tmp181 + _tmp182*_tmp48*_tmp72 - _tmp286 - _tmp300;
    result_value_ptr[314] = _tmp182*_tmp86;
    result_value_ptr[315] = -_tmp371*(_tmp113 + _tmp43);
    result_value_ptr[316] = -_tmp335*_tmp76;
    result_value_ptr[317] = -_tmp361*_tmp372;
    result_value_ptr[318] = _tmp275*_tmp372*_tmp76;
    result_value_ptr[319] = _tmp117*x0*x1*x4 - _tmp372*_tmp69 - _tmp373*x1;
    result_value_ptr[320] = -_tmp232*_tmp335*_tmp89*x3;
    result_value_ptr[321] = _tmp374*_tmp375;
    result_value_ptr[322] = _tmp341*_tmp377;
    result_value_ptr[323] = 6 - _tmp378;
    result_value_ptr[324] = -_tmp307;
    result_value_ptr[325] = -_tmp0*_tmp104;
    result_value_ptr[326] = _tmp100 + _tmp102 - _tmp378 + _tmp379 + _tmp380*_tmp382;
    result_value_ptr[327] = 24*x2 + 36;
    result_value_ptr[328] = -_tmp382*_tmp383;
    result_value_ptr[329] = -_tmp382*_tmp384;
    result_value_ptr[330] = _tmp386*_tmp82;
    result_value_ptr[331] = -_tmp387*_tmp95;
    result_value_ptr[332] = _tmp386*_tmp84;
    result_value_ptr[333] = _tmp386*_tmp86;
    result_value_ptr[334] = _tmp388*_tmp96;
    result_value_ptr[335] = -_tmp311*x0;
    result_value_ptr[336] = -_tmp388*_tmp97;
    result_value_ptr[337] = _tmp389*_tmp48;
    result_value_ptr[338] = -_tmp218;
    result_value_ptr[339] = _tmp390*_tmp57;
    result_value_ptr[340] = _tmp389*_tmp391*_tmp89 + _tmp8;
    result_value_ptr[341] = -_tmp101*_tmp218;
    result_value_ptr[342] = _tmp103*_tmp218;
    result_value_ptr[343] = -_tmp105*_tmp218;
    result_value_ptr[344] = -_tmp235*_tmp9;
    result_value_ptr[345] = -_tmp106*_tmp392;
    result_value_ptr[346] = -_tmp108*_tmp392;
    result_value_ptr[347] = -_tmp235*_tmp35;
    result_value_ptr[348] = -_tmp393*_tmp65*_tmp7 + 3*_tmp93*x2;
    result_value_ptr[349] = _tmp394*_tmp95;
    result_value_ptr[350] = -_tmp395;
    result_value_ptr[351] = -_tmp102*_tmp396 + 2;
    result_value_ptr[352] = _tmp102 - _tmp397;
    result_value_ptr[353] = -_tmp101*_tmp395 - _tmp61*_tmp96;
    result_value_ptr[354] = _tmp103*_tmp395 + _tmp51;
    result_value_ptr[355] = -_tmp105*_tmp395 + _tmp61*_tmp97;
    result_value_ptr[356] = -_tmp371*(_tmp398 - 1);
    result_value_ptr[357] = 5*_tmp399;
    result_value_ptr[358] = _tmp400;
    result_value_ptr[359] = _tmp117*_tmp195;
    result_value_ptr[360] = -_tmp0 - _tmp89;
    result_value_ptr[361] = _tmp101*_tmp400 - _tmp401*_tmp96;
    result_value_ptr[362] = -_tmp103*_tmp400 + 5*_tmp36 + _tmp374*_tmp402;
    result_value_ptr[363] = _tmp105*_tmp400 + _tmp401*_tmp97;
    result_value_ptr[364] = _tmp195*_tmp377;
    result_value_ptr[365] = _tmp399*_tmp403;
    result_value_ptr[366] = _tmp404;
    result_value_ptr[367] = _tmp380*_tmp405;
    result_value_ptr[368] = -_tmp162 - _tmp195;
    result_value_ptr[369] = _tmp101*_tmp404 - _tmp406*_tmp96;
    result_value_ptr[370] = -_tmp103*_tmp404 + _tmp36*_tmp403;
    result_value_ptr[371] = _tmp105*_tmp404 - _tmp383*_tmp405 + _tmp406*_tmp97;
    result_value_ptr[372] = -_tmp384*_tmp405;
    result_value_ptr[373] = -_tmp28*_tmp408;
    result_value_ptr[374] = -_tmp379 - _tmp79 - 12;
    result_value_ptr[375] = _tmp15*_tmp408 + _tmp370*_tmp61*_tmp7 + _tmp409*_tmp410;
    result_value_ptr[376] = _tmp343;
    result_value_ptr[377] = _tmp409*_tmp411;
    result_value_ptr[378] = -_tmp142*_tmp413;
    result_value_ptr[379] = -_tmp36*_tmp369*_tmp414;
    result_value_ptr[380] = _tmp31*_tmp370*_tmp414;
    result_value_ptr[381] = _tmp104*_tmp413 - _tmp363*_tmp414 - 8*_tmp376*_tmp415;
    result_value_ptr[382] = -_tmp144*_tmp319*_tmp412*x3;
    result_value_ptr[383] = _tmp232*_tmp36*_tmp416*_tmp44;
    result_value_ptr[384] = -_tmp36*_tmp417*_tmp91;
    result_value_ptr[385] = _tmp112*_tmp145*_tmp418;
    result_value_ptr[386] = _tmp15 + 6;
    result_value_ptr[387] = -_tmp118*_tmp418*x0 - _tmp419*_tmp420 + (Scalar(1)/Scalar(2))*_tmp94*x1*x2;
    result_value_ptr[388] = -_tmp102*_tmp418;
    result_value_ptr[389] = -_tmp420*_tmp422;
    result_value_ptr[390] = _tmp420*_tmp424;
    result_value_ptr[391] = _tmp122*_tmp425;
    result_value_ptr[392] = -_tmp117*_tmp426;
    result_value_ptr[393] = -_tmp374*_tmp426*x0;
    result_value_ptr[394] = _tmp125*_tmp425 - _tmp377*_tmp426 - _tmp427*_tmp429;
    result_value_ptr[395] = -_tmp425*_tmp57;
    result_value_ptr[396] = -_tmp429*_tmp430;
    result_value_ptr[397] = _tmp429*_tmp431;
    result_value_ptr[398] = -_tmp102*_tmp179;
    result_value_ptr[399] = _tmp380*_tmp431;
    result_value_ptr[400] = -_tmp383*_tmp431;
    result_value_ptr[401] = _tmp127*_tmp302 + _tmp30*_tmp6*_tmp82 - _tmp384*_tmp431;
    result_value_ptr[402] = _tmp129*_tmp179*x0;
    result_value_ptr[403] = -_tmp432*_tmp82;
    result_value_ptr[404] = _tmp433*_tmp82;
    result_value_ptr[405] = -_tmp242*_tmp60;
    result_value_ptr[406] = _tmp132*_tmp21*_tmp60*_tmp61;
    result_value_ptr[407] = -_tmp135*_tmp322;
    result_value_ptr[408] = _tmp137*_tmp322;
    result_value_ptr[409] = _tmp122*_tmp309;
    result_value_ptr[410] = -_tmp21*_tmp225;
    result_value_ptr[411] = _tmp125*_tmp309;
    result_value_ptr[412] = -_tmp309*_tmp57 + _tmp434*_tmp71;
    result_value_ptr[413] = -_tmp15*_tmp225;
    result_value_ptr[414] = -_tmp106*_tmp434;
    result_value_ptr[415] = -_tmp141*_tmp434;
    result_value_ptr[416] = -_tmp37*_tmp45;
    result_value_ptr[417] = _tmp127*_tmp355*_tmp37;
    result_value_ptr[418] = _tmp0*_tmp130*_tmp37;
    result_value_ptr[419] = Scalar(2.0)*_tmp76;
    result_value_ptr[420] = -_tmp436*x3;
    result_value_ptr[421] = -_tmp419*_tmp437;
    result_value_ptr[422] = _tmp436*_tmp71;
    result_value_ptr[423] = -_tmp223 - _tmp422*_tmp437 - _tmp427 - _tmp438*_tmp439;
    result_value_ptr[424] = -_tmp106*_tmp436 + _tmp135*_tmp438;
    result_value_ptr[425] = -_tmp137*_tmp438 - _tmp141*_tmp436;
    result_value_ptr[426] = _tmp424*_tmp437;
    result_value_ptr[427] = 2*_tmp440;
    result_value_ptr[428] = -_tmp126*x0;
    result_value_ptr[429] = -_tmp427*_tmp441;
    result_value_ptr[430] = _tmp442*_tmp71;
    result_value_ptr[431] = -_tmp102*_tmp57 - _tmp132*_tmp48*_tmp51;
    result_value_ptr[432] = -_tmp106*_tmp442 + _tmp135*_tmp443 - _tmp430*_tmp441;
    result_value_ptr[433] = -_tmp137*_tmp443 - _tmp141*_tmp442;
    result_value_ptr[434] = _tmp195*_tmp26;
    result_value_ptr[435] = _tmp444*x2;
    result_value_ptr[436] = -_tmp36*_tmp445;
    result_value_ptr[437] = _tmp10*_tmp134*_tmp36*_tmp446;
    result_value_ptr[438] = _tmp447*_tmp71;
    result_value_ptr[439] = -_tmp407*_tmp62 - _tmp439*_tmp444;
    result_value_ptr[440] = -_tmp106*_tmp447 + _tmp135*_tmp444;
    result_value_ptr[441] = -_tmp137*_tmp444 - _tmp141*_tmp447 - _tmp432*_tmp448;
    result_value_ptr[442] = _tmp433*_tmp448;
    result_value_ptr[443] = -_tmp267*_tmp410;
    result_value_ptr[444] = _tmp415*_tmp449*_tmp450;
    result_value_ptr[445] = -_tmp185 - _tmp235 - _tmp267*_tmp411 - _tmp449*_tmp451 - 3*_tmp81;
    result_value_ptr[446] = _tmp417*_tmp449;
    result_value_ptr[447] = _tmp452*_tmp61*(_tmp72 + _tmp81);
    result_value_ptr[448] = -_tmp27*_tmp453;
    result_value_ptr[449] = _tmp146*_tmp415*_tmp42;
    result_value_ptr[450] = -_tmp451*_tmp454;
    result_value_ptr[451] = _tmp168*_tmp453 - _tmp297*_tmp433 + _tmp417*_tmp454;
    result_value_ptr[452] = -_tmp169*_tmp453;
    result_value_ptr[453] = _tmp12*_tmp433*_tmp59;
    result_value_ptr[454] = _tmp113*_tmp433;
    result_value_ptr[455] = _tmp333*_tmp419;
    result_value_ptr[456] = _tmp333*_tmp422;
    result_value_ptr[457] = -_tmp333*_tmp424 - _tmp455*_tmp456;
    result_value_ptr[458] = -_tmp455*_tmp458;
    result_value_ptr[459] = -_tmp455*_tmp459;
    result_value_ptr[460] = -_tmp150*_tmp460;
    result_value_ptr[461] = _tmp91 + 16;
    result_value_ptr[462] = _tmp21*_tmp91 + _tmp44;
    result_value_ptr[463] = -_tmp152*_tmp460 + _tmp302*_tmp461 - 16*_tmp6;
    result_value_ptr[464] = _tmp460*_tmp57;
    result_value_ptr[465] = -_tmp461*_tmp463;
    result_value_ptr[466] = _tmp461*_tmp465;
    result_value_ptr[467] = -_tmp10*_tmp232*_tmp466*_tmp6;
    result_value_ptr[468] = _tmp432*_tmp467;
    result_value_ptr[469] = _tmp37*_tmp470 - _tmp433*_tmp467 - _tmp468*_tmp54;
    result_value_ptr[470] = -_tmp154*_tmp468*x1;
    result_value_ptr[471] = -_tmp330*_tmp37;
    result_value_ptr[472] = -_tmp37*_tmp471;
    result_value_ptr[473] = -_tmp148*_tmp472*x3;
    result_value_ptr[474] = _tmp156*_tmp473;
    result_value_ptr[475] = -_tmp208*_tmp472;
    result_value_ptr[476] = _tmp108*_tmp160*_tmp31 + _tmp149*_tmp472;
    result_value_ptr[477] = -_tmp164*_tmp473;
    result_value_ptr[478] = -_tmp165*_tmp473;
    result_value_ptr[479] = -_tmp108*_tmp474;
    result_value_ptr[480] = _tmp150*_tmp475;
    result_value_ptr[481] = _tmp37*_tmp476;
    result_value_ptr[482] = _tmp152*_tmp475;
    result_value_ptr[483] = _tmp174*_tmp476 - _tmp475*_tmp57;
    result_value_ptr[484] = -_tmp476*_tmp477;
    result_value_ptr[485] = _tmp476*_tmp478;
    result_value_ptr[486] = _tmp476*_tmp479;
    result_value_ptr[487] = -_tmp27*_tmp480;
    result_value_ptr[488] = _tmp168*_tmp480;
    result_value_ptr[489] = -_tmp234*_tmp481;
    result_value_ptr[490] = -_tmp154*_tmp481*_tmp52 - _tmp169*_tmp480;
    result_value_ptr[491] = _tmp156*_tmp482;
    result_value_ptr[492] = _tmp37*_tmp483;
    result_value_ptr[493] = _tmp456*_tmp484;
    result_value_ptr[494] = _tmp482*_tmp485;
    result_value_ptr[495] = _tmp174*_tmp483;
    result_value_ptr[496] = -_tmp134*std::pow(_tmp181, Scalar(2))*_tmp373 - _tmp164*_tmp482 + Scalar(1.0)*_tmp457*_tmp484;
    result_value_ptr[497] = -_tmp165*_tmp482 + _tmp478*_tmp483;
    result_value_ptr[498] = -_tmp166*_tmp482 + _tmp479*_tmp483;
    result_value_ptr[499] = _tmp459*_tmp484;
    result_value_ptr[500] = -_tmp156*_tmp486;
    result_value_ptr[501] = -_tmp37*_tmp52;
    result_value_ptr[502] = _tmp302*_tmp487;
    result_value_ptr[503] = -_tmp485*_tmp486;
    result_value_ptr[504] = -_tmp174*_tmp52;
    result_value_ptr[505] = _tmp164*_tmp486 + _tmp181*_tmp58*x1;
    result_value_ptr[506] = _tmp165*_tmp486 - _tmp463*_tmp487 - _tmp478*_tmp52;
    result_value_ptr[507] = _tmp166*_tmp486 - _tmp479*_tmp52;
    result_value_ptr[508] = _tmp465*_tmp487;
    result_value_ptr[509] = -_tmp156*_tmp489;
    result_value_ptr[510] = -_tmp490;
    result_value_ptr[511] = -_tmp195*_tmp470;
    result_value_ptr[512] = -_tmp161*_tmp488;
    result_value_ptr[513] = -_tmp174*_tmp21;
    result_value_ptr[514] = _tmp164*_tmp489 + _tmp21*_tmp477;
    result_value_ptr[515] = _tmp165*_tmp488*x3 - _tmp21*_tmp478;
    result_value_ptr[516] = _tmp166*_tmp489 + _tmp195*_tmp330 - _tmp21*_tmp479;
    result_value_ptr[517] = _tmp195*_tmp471;
    result_value_ptr[518] = -_tmp235*_tmp491;
    result_value_ptr[519] = -_tmp297*x4;
    result_value_ptr[520] = _tmp1*_tmp452*_tmp491 + _tmp210*_tmp59 - _tmp381*_tmp54;
    result_value_ptr[521] = _tmp492;
    result_value_ptr[522] = _tmp0*_tmp493;
    result_value_ptr[523] = _tmp494*_tmp496;
    result_value_ptr[524] = -_tmp297*_tmp469;
    result_value_ptr[525] = _tmp423*_tmp87;
    result_value_ptr[526] = _tmp113*_tmp469 + _tmp495*_tmp497 - _tmp498*_tmp499;
    result_value_ptr[527] = -_tmp496*_tmp500;
    result_value_ptr[528] = _tmp498*_tmp501;
    result_value_ptr[529] = 9*x1 + 9*x4;
    result_value_ptr[530] = _tmp171*_tmp502;
    result_value_ptr[531] = -_tmp456*_tmp503;
    result_value_ptr[532] = -_tmp458*_tmp503;
    result_value_ptr[533] = _tmp13*_tmp502 - _tmp459*_tmp503 + _tmp497;
    result_value_ptr[534] = -_tmp173*_tmp502;
    result_value_ptr[535] = _tmp504;
    result_value_ptr[536] = _tmp175*_tmp505;
    result_value_ptr[537] = _tmp179*_tmp506;
    result_value_ptr[538] = -8*_tmp462*x3;
    result_value_ptr[539] = -_tmp0*_tmp507 - _tmp142*_tmp508 + _tmp464*_tmp91*x3;
    result_value_ptr[540] = _tmp177*_tmp508;
    result_value_ptr[541] = 20*x2;
    result_value_ptr[542] = _tmp0*_tmp509;
    result_value_ptr[543] = -_tmp178*_tmp510;
    result_value_ptr[544] = _tmp181*_tmp510 + _tmp511*_tmp512;
    result_value_ptr[545] = _tmp183*_tmp510;
    result_value_ptr[546] = _tmp42*_tmp511;
    result_value_ptr[547] = -_tmp511*_tmp513;
    result_value_ptr[548] = -_tmp171*_tmp514;
    result_value_ptr[549] = -_tmp117*_tmp72;
    result_value_ptr[550] = -_tmp13*_tmp514;
    result_value_ptr[551] = _tmp117*_tmp186 + _tmp173*_tmp514;
    result_value_ptr[552] = _tmp117*_tmp188;
    result_value_ptr[553] = _tmp117*_tmp189;
    result_value_ptr[554] = -_tmp117*_tmp190;
    result_value_ptr[555] = -_tmp174*_tmp251*_tmp286;
    result_value_ptr[556] = -_tmp515*_tmp516;
    result_value_ptr[557] = _tmp142*_tmp251;
    result_value_ptr[558] = _tmp127*_tmp515 - _tmp177*_tmp251;
    result_value_ptr[559] = _tmp515*x3;
    result_value_ptr[560] = -_tmp192*_tmp515;
    result_value_ptr[561] = -_tmp194*_tmp515;
    result_value_ptr[562] = -_tmp178*_tmp517;
    result_value_ptr[563] = -_tmp494*_tmp518;
    result_value_ptr[564] = -_tmp108*_tmp518;
    result_value_ptr[565] = _tmp181*_tmp517;
    result_value_ptr[566] = _tmp183*_tmp517 + _tmp500*_tmp518;
    result_value_ptr[567] = -_tmp482*_tmp72;
    result_value_ptr[568] = _tmp516*_tmp519;
    result_value_ptr[569] = x2*(_tmp104 + _tmp120 + _tmp46);
    result_value_ptr[570] = _tmp186*_tmp482;
    result_value_ptr[571] = -_tmp127*_tmp519;
    result_value_ptr[572] = _tmp188*_tmp482 + _tmp223 + _tmp242 - _tmp519*x3 + _tmp61 + 4;
    result_value_ptr[573] = _tmp189*_tmp482 + _tmp192*_tmp519;
    result_value_ptr[574] = -_tmp190*_tmp482 + _tmp194*_tmp519;
    result_value_ptr[575] = -_tmp520*_tmp72;
    result_value_ptr[576] = _tmp516*_tmp521;
    result_value_ptr[577] = -_tmp507*_tmp522;
    result_value_ptr[578] = _tmp186*_tmp520;
    result_value_ptr[579] = -_tmp127*_tmp521;
    result_value_ptr[580] = _tmp188*_tmp520 - _tmp521*x3;
    result_value_ptr[581] = _tmp189*_tmp520 + _tmp192*_tmp521 + 20*x0 + Scalar(20.0);
    result_value_ptr[582] = -_tmp190*_tmp520 + _tmp194*_tmp521;
    result_value_ptr[583] = _tmp509*_tmp522;
    result_value_ptr[584] = _tmp523*_tmp72;
    result_value_ptr[585] = _tmp516*_tmp524;
    result_value_ptr[586] = -_tmp512*_tmp527;
    result_value_ptr[587] = -_tmp186*_tmp523;
    result_value_ptr[588] = -_tmp127*_tmp524;
    result_value_ptr[589] = -_tmp188*_tmp523 - _tmp524*x3;
    result_value_ptr[590] = -_tmp189*_tmp523 + _tmp192*_tmp524;
    result_value_ptr[591] = _tmp190*_tmp523 + _tmp194*_tmp524 - _tmp271*_tmp526;
    result_value_ptr[592] = _tmp513*_tmp527;
    result_value_ptr[593] = -_tmp30*_tmp381;
    result_value_ptr[594] = _tmp232*_tmp499;
    result_value_ptr[595] = _tmp10*_tmp493 - _tmp232*_tmp501 - _tmp528*(_tmp134 + 2);
    result_value_ptr[596] = -9*_tmp232;
    result_value_ptr[597] = _tmp528*(_tmp120 + x1 + Scalar(2.0));
    result_value_ptr[598] = _tmp235 + 9;
    result_value_ptr[599] = -_tmp499*_tmp529;
    result_value_ptr[600] = _tmp501*_tmp529;
    result_value_ptr[601] = -_tmp222*_tmp482 + 18*x0 + 36*x2 - 18;
    result_value_ptr[602] = -_tmp482;
    result_value_ptr[603] = -_tmp198*_tmp530;
    result_value_ptr[604] = x2*(_tmp21 + 2);
    result_value_ptr[605] = _tmp208 + 4;
    result_value_ptr[606] = _tmp199*_tmp530 - 8*_tmp492;
    result_value_ptr[607] = -_tmp200*_tmp530;
    result_value_ptr[608] = 8*_tmp361;
    result_value_ptr[609] = 8*_tmp531*x4;
    result_value_ptr[610] = _tmp134*_tmp201;
    result_value_ptr[611] = _tmp507*_tmp532;
    result_value_ptr[612] = 20 - 40*x0;
    result_value_ptr[613] = _tmp134*_tmp203 - _tmp509*_tmp532 - _tmp533*_tmp534;
    result_value_ptr[614] = _tmp134*_tmp204;
    result_value_ptr[615] = -_tmp534*_tmp536;
    result_value_ptr[616] = -_tmp35*_tmp534;
    result_value_ptr[617] = -_tmp205*_tmp538;
    result_value_ptr[618] = _tmp512*x1;
    result_value_ptr[619] = _tmp134*_tmp15;
    result_value_ptr[620] = _tmp206*_tmp538 - _tmp513*x1 + _tmp539*_tmp540;
    result_value_ptr[621] = -_tmp207*_tmp538;
    result_value_ptr[622] = -_tmp160*_tmp539;
    result_value_ptr[623] = -_tmp539*_tmp541;
    result_value_ptr[624] = -_tmp198*_tmp542;
    result_value_ptr[625] = _tmp209*_tmp543;
    result_value_ptr[626] = _tmp199*_tmp542;
    result_value_ptr[627] = -_tmp200*_tmp542 + _tmp543*_tmp544;
    result_value_ptr[628] = _tmp22*_tmp543;
    result_value_ptr[629] = _tmp543;
    result_value_ptr[630] = _tmp543*_tmp545;
    result_value_ptr[631] = -_tmp201*_tmp546;
    result_value_ptr[632] = _tmp215*_tmp547;
    result_value_ptr[633] = -_tmp203*_tmp546;
    result_value_ptr[634] = -_tmp204*_tmp546 - _tmp26*_tmp358;
    result_value_ptr[635] = _tmp547;
    result_value_ptr[636] = _tmp288*_tmp548;
    result_value_ptr[637] = _tmp219*_tmp26*_tmp6*_tmp76;
    result_value_ptr[638] = -_tmp205*_tmp549;
    result_value_ptr[639] = _tmp185 - _tmp235 - _tmp314 + 6;
    result_value_ptr[640] = _tmp222*(_tmp181 + _tmp19);
    result_value_ptr[641] = _tmp206*_tmp549;
    result_value_ptr[642] = -_tmp207*_tmp549 - _tmp255 - _tmp68;
    result_value_ptr[643] = Scalar(4.0)*_tmp21 - _tmp388;
    result_value_ptr[644] = _tmp215*_tmp550;
    result_value_ptr[645] = -_tmp113*_tmp551;
    result_value_ptr[646] = -Scalar(2.0)*_tmp544;
    result_value_ptr[647] = -_tmp550*_tmp71;
    result_value_ptr[648] = -Scalar(2.0)*_tmp22 + _tmp36*_tmp551*x2 + _tmp550;
    result_value_ptr[649] = _tmp102*_tmp440*_tmp7 + Scalar(-2.0);
    result_value_ptr[650] = -_tmp182*_tmp387 + _tmp218*_tmp219*_tmp440;
    result_value_ptr[651] = _tmp531*_tmp551;
    result_value_ptr[652] = _tmp209*_tmp552;
    result_value_ptr[653] = _tmp215*_tmp553;
    result_value_ptr[654] = -_tmp533*_tmp554;
    result_value_ptr[655] = _tmp212*_tmp440*_tmp555;
    result_value_ptr[656] = -_tmp553*_tmp71;
    result_value_ptr[657] = _tmp55*_tmp556 + _tmp553;
    result_value_ptr[658] = _tmp217*_tmp553 - _tmp536*_tmp554 + _tmp552;
    result_value_ptr[659] = _tmp182*_tmp217*_tmp555 + _tmp220*_tmp553;
    result_value_ptr[660] = -_tmp35*_tmp554;
    result_value_ptr[661] = -_tmp209*_tmp535;
    result_value_ptr[662] = _tmp170*_tmp215;
    result_value_ptr[663] = -_tmp404*_tmp540;
    result_value_ptr[664] = -_tmp535*_tmp544;
    result_value_ptr[665] = -_tmp170*_tmp71;
    result_value_ptr[666] = -_tmp22*_tmp535 - _tmp435;
    result_value_ptr[667] = _tmp0 + _tmp170*_tmp217 + _tmp223;
    result_value_ptr[668] = _tmp160*_tmp404 + _tmp170*_tmp220 - _tmp535*_tmp545;
    result_value_ptr[669] = _tmp404*_tmp541;
    result_value_ptr[670] = _tmp117*_tmp16;
    result_value_ptr[671] = -_tmp16*_tmp558 + _tmp557*_tmp98;
    result_value_ptr[672] = -_tmp10*_tmp16;
    result_value_ptr[673] = _tmp557*_tmp559;
    result_value_ptr[674] = _tmp210;
    result_value_ptr[675] = -_tmp117*_tmp560;
    result_value_ptr[676] = _tmp558*_tmp560;
    result_value_ptr[677] = _tmp10*_tmp560 + _tmp251 + _tmp561*_tmp563;
    result_value_ptr[678] = _tmp252;
    result_value_ptr[679] = _tmp504*_tmp562*_tmp90;
    result_value_ptr[680] = -_tmp563*_tmp564;
    result_value_ptr[681] = _tmp226*_tmp420;
    result_value_ptr[682] = _tmp114*_tmp565;
    result_value_ptr[683] = -_tmp36*_tmp565;
    result_value_ptr[684] = -_tmp227*_tmp420 - _tmp531*_tmp565*_tmp59 + _tmp566*_tmp6;
    result_value_ptr[685] = _tmp228*_tmp420;
    result_value_ptr[686] = -_tmp520*_tmp566;
    result_value_ptr[687] = _tmp132*_tmp566;
    result_value_ptr[688] = _tmp163*_tmp330;
    result_value_ptr[689] = _tmp533;
    result_value_ptr[690] = _tmp536;
    result_value_ptr[691] = -_tmp134*_tmp567 + _tmp35 + 8*x1 - 12;
    result_value_ptr[692] = -_tmp231*_tmp330;
    result_value_ptr[693] = _tmp134*_tmp159;
    result_value_ptr[694] = _tmp376*_tmp568;
    result_value_ptr[695] = _tmp569*_tmp98;
    result_value_ptr[696] = -_tmp540*_tmp570;
    result_value_ptr[697] = _tmp160*_tmp570;
    result_value_ptr[698] = _tmp117*_tmp187 - _tmp233*_tmp98 + _tmp541*_tmp570;
    result_value_ptr[699] = _tmp157*_tmp98;
    result_value_ptr[700] = -_tmp117*_tmp571;
    result_value_ptr[701] = -_tmp475;
    result_value_ptr[702] = _tmp226*x1;
    result_value_ptr[703] = _tmp178*_tmp236;
    result_value_ptr[704] = -_tmp227*x1;
    result_value_ptr[705] = -_tmp178*_tmp240 + _tmp228*x1;
    result_value_ptr[706] = -_tmp178*_tmp193;
    result_value_ptr[707] = -_tmp178*_tmp241;
    result_value_ptr[708] = _tmp178*_tmp243;
    result_value_ptr[709] = -_tmp163*_tmp364;
    result_value_ptr[710] = (Scalar(1)/Scalar(8))*_tmp245;
    result_value_ptr[711] = -_tmp36*_tmp397;
    result_value_ptr[712] = _tmp231*_tmp364 - Scalar(1)/Scalar(8)*_tmp247;
    result_value_ptr[713] = (Scalar(1)/Scalar(2))*_tmp31*x3;
    result_value_ptr[714] = (Scalar(1)/Scalar(8))*_tmp249;
    result_value_ptr[715] = (Scalar(1)/Scalar(4))*x4;
    result_value_ptr[716] = _tmp569*_tmp572;
    result_value_ptr[717] = -_tmp506*_tmp87;
    result_value_ptr[718] = -_tmp251*_tmp346;
    result_value_ptr[719] = -_tmp233*_tmp572;
    result_value_ptr[720] = -_tmp100*_tmp353 + _tmp157*_tmp572;
    result_value_ptr[721] = -_tmp236*_tmp37;
    result_value_ptr[722] = -_tmp244*_tmp573;
    result_value_ptr[723] = _tmp574*_tmp6;
    result_value_ptr[724] = _tmp240*_tmp37;
    result_value_ptr[725] = _tmp246*_tmp573;
    result_value_ptr[726] = -_tmp506*_tmp573 - _tmp520*_tmp574 + _tmp575*x2;
    result_value_ptr[727] = _tmp241*_tmp37 - _tmp248*_tmp573;
    result_value_ptr[728] = -_tmp102*_tmp24 - _tmp15 - _tmp243*_tmp37;
    result_value_ptr[729] = _tmp132*_tmp574;
    result_value_ptr[730] = _tmp236*_tmp576;
    result_value_ptr[731] = -_tmp244*_tmp385;
    result_value_ptr[732] = -_tmp145*_tmp567;
    result_value_ptr[733] = -_tmp240*_tmp576;
    result_value_ptr[734] = _tmp246*_tmp385;
    result_value_ptr[735] = -_tmp193*_tmp576 - _tmp385*_tmp506;
    result_value_ptr[736] = _tmp158*_tmp577 - _tmp248*_tmp385 - _tmp576*(_tmp23 - x0/_tmp139);
    result_value_ptr[737] = -_tmp102 + _tmp243*_tmp576 - _tmp42;
    result_value_ptr[738] = _tmp568*_tmp577;
    result_value_ptr[739] = _tmp236*_tmp579;
    result_value_ptr[740] = _tmp233*_tmp244;
    result_value_ptr[741] = _tmp181*_tmp187;
    result_value_ptr[742] = -_tmp240*_tmp579;
    result_value_ptr[743] = -_tmp233*_tmp246;
    result_value_ptr[744] = -_tmp193*_tmp579 + _tmp233*_tmp506;
    result_value_ptr[745] = _tmp233*_tmp248 - _tmp241*_tmp579;
    result_value_ptr[746] = _tmp12 - _tmp181*_tmp571 + _tmp243*_tmp579 + _tmp580;
    result_value_ptr[747] = -_tmp301;
    result_value_ptr[748] = _tmp581*_tmp98;
    result_value_ptr[749] = _tmp561*_tmp582;
    result_value_ptr[750] = _tmp195*_tmp583 + _tmp559*_tmp581 + _tmp582*_tmp584;
    result_value_ptr[751] = -_tmp564*_tmp582;
    result_value_ptr[752] = _tmp583*_tmp585;
    result_value_ptr[753] = _tmp174*_tmp268;
    result_value_ptr[754] = _tmp561*_tmp586;
    result_value_ptr[755] = _tmp584*_tmp586;
    result_value_ptr[756] = _tmp108*_tmp587 - _tmp174*_tmp237 - _tmp564*_tmp586;
    result_value_ptr[757] = -_tmp108*_tmp589;
    result_value_ptr[758] = -_tmp232*_tmp497;
    result_value_ptr[759] = -_tmp253*_tmp590;
    result_value_ptr[760] = _tmp591*_tmp6;
    result_value_ptr[761] = -_tmp520*_tmp591;
    result_value_ptr[762] = _tmp132*_tmp591 + _tmp590*_tmp594 + _tmp593;
    result_value_ptr[763] = -_tmp206*_tmp590;
    result_value_ptr[764] = _tmp255*_tmp593;
    result_value_ptr[765] = _tmp592;
    result_value_ptr[766] = -_tmp257*_tmp85;
    result_value_ptr[767] = _tmp100*_tmp567;
    result_value_ptr[768] = -_tmp158*_tmp266;
    result_value_ptr[769] = -_tmp266*_tmp568 + 2*_tmp415*_tmp85*x4 - _tmp85*x2;
    result_value_ptr[770] = -_tmp259*_tmp85;
    result_value_ptr[771] = _tmp157*_tmp85;
    result_value_ptr[772] = _tmp206*_tmp85;
    result_value_ptr[773] = _tmp260*_tmp595;
    result_value_ptr[774] = _tmp596*_tmp60;
    result_value_ptr[775] = -_tmp32*_tmp36*_tmp48;
    result_value_ptr[776] = -_tmp111*_tmp595 - _tmp471*_tmp580 - _tmp596;
    result_value_ptr[777] = _tmp262*_tmp595;
    result_value_ptr[778] = _tmp580*_tmp90;
    result_value_ptr[779] = _tmp253*_tmp597;
    result_value_ptr[780] = -_tmp263*_tmp598;
    result_value_ptr[781] = -_tmp594*_tmp597;
    result_value_ptr[782] = _tmp206*_tmp597 - _tmp264*_tmp598;
    result_value_ptr[783] = _tmp31*_tmp598;
    result_value_ptr[784] = -_tmp265*_tmp598;
    result_value_ptr[785] = -_tmp257*x1;
    result_value_ptr[786] = -_tmp599*_tmp600;
    result_value_ptr[787] = _tmp578;
    result_value_ptr[788] = -_tmp181*_tmp87*x0 - _tmp375*_tmp600;
    result_value_ptr[789] = -Scalar(0.14285714285714285)*_tmp600;
    result_value_ptr[790] = _tmp600*_tmp601;
    result_value_ptr[791] = -_tmp600*_tmp602;
    result_value_ptr[792] = -_tmp260*x3;
    result_value_ptr[793] = -_tmp268*_tmp603;
    result_value_ptr[794] = _tmp237*_tmp603;
    result_value_ptr[795] = _tmp111*x3;
    result_value_ptr[796] = -_tmp262*x3;
    result_value_ptr[797] = _tmp263*_tmp604;
    result_value_ptr[798] = _tmp599*_tmp605;
    result_value_ptr[799] = -_tmp607;
    result_value_ptr[800] = _tmp264*_tmp604;
    result_value_ptr[801] = _tmp375*_tmp605;
    result_value_ptr[802] = Scalar(0.14285714285714285)*_tmp166*x4 - _tmp255*_tmp607 - _tmp31*_tmp604 + Scalar(-0.14285714285714285);
    result_value_ptr[803] = _tmp265*_tmp604 - _tmp601*_tmp605;
    result_value_ptr[804] = _tmp602*_tmp605;
    result_value_ptr[805] = -_tmp606;
    result_value_ptr[806] = _tmp263*_tmp608;
    result_value_ptr[807] = -_tmp51*_tmp599;
    result_value_ptr[808] = -_tmp609*_tmp610;
    result_value_ptr[809] = _tmp264*_tmp608;
    result_value_ptr[810] = -_tmp283*_tmp421;
    result_value_ptr[811] = -_tmp31*_tmp608 - Scalar(0.2857142857142857)*_tmp36;
    result_value_ptr[812] = _tmp265*_tmp608 - _tmp390*_tmp6 + _tmp51*_tmp601;
    result_value_ptr[813] = -_tmp51*_tmp602;
    result_value_ptr[814] = -_tmp206*_tmp609;
    result_value_ptr[815] = _tmp263*_tmp611;
    result_value_ptr[816] = _tmp599*_tmp612;
    result_value_ptr[817] = -_tmp471*_tmp613;
    result_value_ptr[818] = _tmp15*_tmp525*_tmp548;
    result_value_ptr[819] = _tmp375*_tmp612;
    result_value_ptr[820] = -_tmp214*_tmp525 + Scalar(0.2857142857142857)*x1 + Scalar(0.2857142857142857)*x2;
    result_value_ptr[821] = _tmp265*_tmp611 - _tmp601*_tmp612;
    result_value_ptr[822] = _tmp602*_tmp612 + _tmp613*_tmp90;
    result_value_ptr[823] = -_tmp195*_tmp614;
    result_value_ptr[824] = _tmp37*_tmp587*x3;
    result_value_ptr[825] = 2*_tmp31*_tmp316 - _tmp490*_tmp588 - _tmp585*_tmp614;
    result_value_ptr[826] = -_tmp232*_tmp37*_tmp46;
    result_value_ptr[827] = _tmp615;
    result_value_ptr[828] = _tmp292*_tmp616;
    result_value_ptr[829] = -_tmp587*_tmp617;
    result_value_ptr[830] = _tmp589*_tmp617;
    result_value_ptr[831] = _tmp556*_tmp617 - _tmp616*_tmp94;
    result_value_ptr[832] = -_tmp294*_tmp616;
    result_value_ptr[833] = -_tmp270*_tmp618;
    result_value_ptr[834] = -_tmp619;
    result_value_ptr[835] = -_tmp255*_tmp619;
    result_value_ptr[836] = -_tmp157*_tmp24 - _tmp16*_tmp618*x0;
    result_value_ptr[837] = -_tmp272*_tmp618;
    result_value_ptr[838] = -_tmp15*_tmp274;
    result_value_ptr[839] = _tmp610*_tmp620;
    result_value_ptr[840] = _tmp157*_tmp620;
    result_value_ptr[841] = -_tmp106*_tmp15 + _tmp206*_tmp620;
    result_value_ptr[842] = -_tmp208*_tmp43;
    result_value_ptr[843] = _tmp214*_tmp37;
    result_value_ptr[844] = _tmp278*_tmp37;
    result_value_ptr[845] = _tmp91 - 4;
    result_value_ptr[846] = _tmp270*x4;
    result_value_ptr[847] = -_tmp621*_tmp622;
    result_value_ptr[848] = _tmp16*_tmp6;
    result_value_ptr[849] = _tmp272*x4 - _tmp281*_tmp621;
    result_value_ptr[850] = _tmp282*_tmp621;
    result_value_ptr[851] = _tmp364*_tmp621;
    result_value_ptr[852] = _tmp621*_tmp623;
    result_value_ptr[853] = -_tmp274*_tmp624;
    result_value_ptr[854] = -_tmp106*_tmp624;
    result_value_ptr[855] = -_tmp275*_tmp624;
    result_value_ptr[856] = -_tmp214*_tmp76;
    result_value_ptr[857] = _tmp292*_tmp625;
    result_value_ptr[858] = -_tmp625*_tmp94;
    result_value_ptr[859] = -_tmp278*_tmp76;
    result_value_ptr[860] = -_tmp294*_tmp625 - _tmp397;
    result_value_ptr[861] = _tmp153*_tmp81;
    result_value_ptr[862] = _tmp61*_tmp626;
    result_value_ptr[863] = _tmp295*_tmp627;
    result_value_ptr[864] = _tmp37*_tmp80;
    result_value_ptr[865] = _tmp134*_tmp280*_tmp628;
    result_value_ptr[866] = 2*_tmp121*_tmp296*x2 - _tmp282*_tmp69*_tmp81*_tmp90 - _tmp287*_tmp626 + 6;
    result_value_ptr[867] = -_tmp21*_tmp556*_tmp69 - _tmp289*_tmp626 - _tmp297*_tmp627 - _tmp47 + 12;
    result_value_ptr[868] = 2*_tmp121*_tmp48 - _tmp285*_tmp628*_tmp76 - _tmp291*_tmp626 - _tmp339 + 24;
    result_value_ptr[869] = _tmp622*_tmp629;
    result_value_ptr[870] = _tmp61*_tmp630;
    result_value_ptr[871] = _tmp295;
    result_value_ptr[872] = _tmp575*x1;
    result_value_ptr[873] = _tmp281*_tmp629;
    result_value_ptr[874] = -_tmp120 - _tmp18 - _tmp282*_tmp629 - _tmp287*_tmp630 - 5;
    result_value_ptr[875] = -_tmp289*_tmp630 - _tmp297 - _tmp300*_tmp37 - _tmp364*_tmp629;
    result_value_ptr[876] = -_tmp291*_tmp630 - _tmp301*_tmp37 - _tmp623*_tmp629 - _tmp68;
    result_value_ptr[877] = -_tmp622*_tmp631;
    result_value_ptr[878] = -_tmp136;
    result_value_ptr[879] = _tmp143*_tmp295;
    result_value_ptr[880] = _tmp299*_tmp498;
    result_value_ptr[881] = -_tmp303*_tmp632;
    result_value_ptr[882] = -_tmp281*_tmp631;
    result_value_ptr[883] = _tmp143*_tmp296 + _tmp239 + _tmp282*_tmp631 + _tmp402 + x1;
    result_value_ptr[884] = _tmp100 - _tmp143*_tmp297 - _tmp300*_tmp498 + _tmp364*_tmp631 + 8;
    result_value_ptr[885] = _tmp102 + _tmp143*x2 - _tmp301*_tmp498 + _tmp305*_tmp632 + _tmp516 + _tmp623*_tmp631;
    result_value_ptr[886] = _tmp102*_tmp59 + _tmp44;
    result_value_ptr[887] = _tmp303*_tmp76;
    result_value_ptr[888] = -_tmp316*_tmp633;
    result_value_ptr[889] = -_tmp304*_tmp393;
    result_value_ptr[890] = -_tmp54 + _tmp633*x3;

    return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
