// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once


#include <Eigen/Dense>
#include <Eigen/Sparse>



namespace sym {


/**
* This function was autogenerated. Do not modify by hand.
*
* Args:
*     x0: Scalar
*     x1: Scalar
*     x2: Scalar
*     x3: Scalar
*     x4: Scalar
*
* Outputs:
*     result: Matrix100_100
*/
template <typename Scalar>
Eigen::SparseMatrix<Scalar> ComputeBRotor1(const Scalar x0, const Scalar x1, const Scalar x2, const Scalar x3, const Scalar x4) {

    // Total ops: 1043

    // Input arrays

    // Intermediate terms (213)
    const Scalar _tmp0 = 4*x3;
    const Scalar _tmp1 = std::pow(x0, Scalar(2));
    const Scalar _tmp2 = _tmp1*x4;
    const Scalar _tmp3 = x0 - 4;
    const Scalar _tmp4 = x2 + 2;
    const Scalar _tmp5 = _tmp4*x4;
    const Scalar _tmp6 = 2*x1;
    const Scalar _tmp7 = _tmp6 + 2;
    const Scalar _tmp8 = x3 + 2;
    const Scalar _tmp9 = x3 - 2;
    const Scalar _tmp10 = _tmp9 + x4;
    const Scalar _tmp11 = x1*x2;
    const Scalar _tmp12 = Scalar(1.0) / (x2);
    const Scalar _tmp13 = x4 + 4;
    const Scalar _tmp14 = x2 - 3;
    const Scalar _tmp15 = -_tmp14;
    const Scalar _tmp16 = x1 - 2;
    const Scalar _tmp17 = -x2;
    const Scalar _tmp18 = _tmp17 + x1;
    const Scalar _tmp19 = _tmp18 + 2;
    const Scalar _tmp20 = std::pow(x4, Scalar(2));
    const Scalar _tmp21 = Scalar(1.0) / (x1);
    const Scalar _tmp22 = (Scalar(1)/Scalar(2))*_tmp21;
    const Scalar _tmp23 = 2*x0;
    const Scalar _tmp24 = _tmp23 + x1;
    const Scalar _tmp25 = (Scalar(1)/Scalar(2))*x4;
    const Scalar _tmp26 = -_tmp25;
    const Scalar _tmp27 = x3 - 3;
    const Scalar _tmp28 = Scalar(1.0) / (x3);
    const Scalar _tmp29 = 2*_tmp28;
    const Scalar _tmp30 = -x3;
    const Scalar _tmp31 = x3 + x4;
    const Scalar _tmp32 = x4 - 1;
    const Scalar _tmp33 = -_tmp32;
    const Scalar _tmp34 = x0 + x3;
    const Scalar _tmp35 = x1 + x3;
    const Scalar _tmp36 = x1 + 1;
    const Scalar _tmp37 = 2*x3;
    const Scalar _tmp38 = _tmp37 - 1;
    const Scalar _tmp39 = x0 - 1;
    const Scalar _tmp40 = -_tmp39;
    const Scalar _tmp41 = std::pow(x2, Scalar(2));
    const Scalar _tmp42 = 2*x4;
    const Scalar _tmp43 = _tmp8 + x4;
    const Scalar _tmp44 = _tmp6*x4;
    const Scalar _tmp45 = -x4;
    const Scalar _tmp46 = x2 + 1;
    const Scalar _tmp47 = _tmp46*x4;
    const Scalar _tmp48 = x0 + 1;
    const Scalar _tmp49 = _tmp45 + x0;
    const Scalar _tmp50 = (Scalar(1)/Scalar(2))*x1;
    const Scalar _tmp51 = _tmp50 + 2;
    const Scalar _tmp52 = x2 + x4;
    const Scalar _tmp53 = x0 + 2;
    const Scalar _tmp54 = _tmp53 + x1;
    const Scalar _tmp55 = x2 - 2;
    const Scalar _tmp56 = Scalar(1.0) / (x0);
    const Scalar _tmp57 = 4*x2;
    const Scalar _tmp58 = _tmp46 + x0;
    const Scalar _tmp59 = 8*_tmp20;
    const Scalar _tmp60 = -_tmp23;
    const Scalar _tmp61 = x1 + x4;
    const Scalar _tmp62 = _tmp45 + x2;
    const Scalar _tmp63 = _tmp6 - 2;
    const Scalar _tmp64 = 2*_tmp20;
    const Scalar _tmp65 = (Scalar(1)/Scalar(2))*_tmp28;
    const Scalar _tmp66 = 4*x0;
    const Scalar _tmp67 = -x0;
    const Scalar _tmp68 = x3*x4;
    const Scalar _tmp69 = _tmp68 + x3;
    const Scalar _tmp70 = x0 + x4;
    const Scalar _tmp71 = x4 + 2;
    const Scalar _tmp72 = _tmp71*x1;
    const Scalar _tmp73 = x2 + 3;
    const Scalar _tmp74 = _tmp11*x0;
    const Scalar _tmp75 = -x1;
    const Scalar _tmp76 = _tmp30 + x1;
    const Scalar _tmp77 = 2*x2;
    const Scalar _tmp78 = _tmp77 + 1;
    const Scalar _tmp79 = _tmp6*x3;
    const Scalar _tmp80 = x2*x3;
    const Scalar _tmp81 = std::pow(x1, Scalar(2));
    const Scalar _tmp82 = x0*x4;
    const Scalar _tmp83 = _tmp36 + x0;
    const Scalar _tmp84 = x1 - 1;
    const Scalar _tmp85 = x1 + 2;
    const Scalar _tmp86 = _tmp85*x2;
    const Scalar _tmp87 = -_tmp42;
    const Scalar _tmp88 = _tmp37 + _tmp87;
    const Scalar _tmp89 = x1*x4;
    const Scalar _tmp90 = Scalar(1.0) / (x4);
    const Scalar _tmp91 = -_tmp6;
    const Scalar _tmp92 = std::pow(x3, Scalar(2));
    const Scalar _tmp93 = _tmp92*x2;
    const Scalar _tmp94 = x0 - 2;
    const Scalar _tmp95 = x3 - 1;
    const Scalar _tmp96 = _tmp30 + x2;
    const Scalar _tmp97 = x0 - 3;
    const Scalar _tmp98 = _tmp37*x2;
    const Scalar _tmp99 = -_tmp98;
    const Scalar _tmp100 = x0*x3;
    const Scalar _tmp101 = x2*x4;
    const Scalar _tmp102 = _tmp8 + x1;
    const Scalar _tmp103 = _tmp34 - 2;
    const Scalar _tmp104 = x0*x1;
    const Scalar _tmp105 = -_tmp104;
    const Scalar _tmp106 = _tmp30 + x0;
    const Scalar _tmp107 = _tmp68*x0;
    const Scalar _tmp108 = _tmp68 + 1;
    const Scalar _tmp109 = 2*_tmp56;
    const Scalar _tmp110 = _tmp37 + _tmp42;
    const Scalar _tmp111 = -_tmp46;
    const Scalar _tmp112 = _tmp17 + _tmp70;
    const Scalar _tmp113 = x1 + x2;
    const Scalar _tmp114 = _tmp42 + _tmp66;
    const Scalar _tmp115 = _tmp95*x3;
    const Scalar _tmp116 = _tmp90*x0;
    const Scalar _tmp117 = x2 - 1;
    const Scalar _tmp118 = (Scalar(1)/Scalar(2))*x3;
    const Scalar _tmp119 = -_tmp28;
    const Scalar _tmp120 = 3*x4;
    const Scalar _tmp121 = _tmp6*x2;
    const Scalar _tmp122 = _tmp4 + _tmp67;
    const Scalar _tmp123 = _tmp42 + x2;
    const Scalar _tmp124 = -_tmp109;
    const Scalar _tmp125 = x4 + 1;
    const Scalar _tmp126 = _tmp125*x1;
    const Scalar _tmp127 = _tmp48 + x4;
    const Scalar _tmp128 = _tmp56*x3;
    const Scalar _tmp129 = -_tmp128;
    const Scalar _tmp130 = _tmp41*_tmp90;
    const Scalar _tmp131 = _tmp6 + 1;
    const Scalar _tmp132 = -_tmp131;
    const Scalar _tmp133 = x3/_tmp32;
    const Scalar _tmp134 = _tmp106*x2;
    const Scalar _tmp135 = -_tmp81;
    const Scalar _tmp136 = _tmp81*x3;
    const Scalar _tmp137 = _tmp37 + 2;
    const Scalar _tmp138 = _tmp41*x4;
    const Scalar _tmp139 = -_tmp138;
    const Scalar _tmp140 = 4*x1;
    const Scalar _tmp141 = -_tmp84;
    const Scalar _tmp142 = _tmp95*x2;
    const Scalar _tmp143 = 2*_tmp92;
    const Scalar _tmp144 = (Scalar(1)/Scalar(2))*x2;
    const Scalar _tmp145 = -_tmp144;
    const Scalar _tmp146 = -_tmp57;
    const Scalar _tmp147 = -_tmp77;
    const Scalar _tmp148 = _tmp77 + 4;
    const Scalar _tmp149 = x3 + 1;
    const Scalar _tmp150 = _tmp23*x3;
    const Scalar _tmp151 = -_tmp150;
    const Scalar _tmp152 = x1 + 3;
    const Scalar _tmp153 = _tmp30 + _tmp46;
    const Scalar _tmp154 = _tmp17 + _tmp71;
    const Scalar _tmp155 = _tmp17 + x0;
    const Scalar _tmp156 = -_tmp37;
    const Scalar _tmp157 = x2 + x3;
    const Scalar _tmp158 = _tmp42 + 2;
    const Scalar _tmp159 = _tmp6*x0;
    const Scalar _tmp160 = _tmp85*x1;
    const Scalar _tmp161 = _tmp52 + _tmp75;
    const Scalar _tmp162 = _tmp116*_tmp80;
    const Scalar _tmp163 = x4 - 2;
    const Scalar _tmp164 = _tmp163*x1;
    const Scalar _tmp165 = 6*x1;
    const Scalar _tmp166 = x0*x2;
    const Scalar _tmp167 = -_tmp154;
    const Scalar _tmp168 = _tmp34 + _tmp75;
    const Scalar _tmp169 = _tmp77 - 1;
    const Scalar _tmp170 = 4*x4;
    const Scalar _tmp171 = x1*x3;
    const Scalar _tmp172 = _tmp117*x2;
    const Scalar _tmp173 = -_tmp8;
    const Scalar _tmp174 = _tmp30 + _tmp4;
    const Scalar _tmp175 = (Scalar(1)/Scalar(2))*x0;
    const Scalar _tmp176 = _tmp16 + x4;
    const Scalar _tmp177 = _tmp45 + x1;
    const Scalar _tmp178 = x0 + 3;
    const Scalar _tmp179 = -_tmp178 - _tmp75;
    const Scalar _tmp180 = _tmp23*x4;
    const Scalar _tmp181 = _tmp38*x0;
    const Scalar _tmp182 = _tmp32 + x1;
    const Scalar _tmp183 = -_tmp80;
    const Scalar _tmp184 = _tmp23 - 2;
    const Scalar _tmp185 = x4 - 4;
    const Scalar _tmp186 = _tmp4 + x4;
    const Scalar _tmp187 = _tmp20*x1;
    const Scalar _tmp188 = _tmp16*x0;
    const Scalar _tmp189 = _tmp23 + _tmp42;
    const Scalar _tmp190 = _tmp52*x4;
    const Scalar _tmp191 = x0 + x2;
    const Scalar _tmp192 = 3*x3;
    const Scalar _tmp193 = -_tmp45 - _tmp92;
    const Scalar _tmp194 = 2*_tmp21;
    const Scalar _tmp195 = _tmp46*x3;
    const Scalar _tmp196 = -_tmp37 - _tmp6;
    const Scalar _tmp197 = _tmp17 + _tmp34;
    const Scalar _tmp198 = _tmp46 + _tmp75;
    const Scalar _tmp199 = 2*_tmp90;
    const Scalar _tmp200 = -_tmp9;
    const Scalar _tmp201 = _tmp75 + _tmp8;
    const Scalar _tmp202 = x3 + 4;
    const Scalar _tmp203 = _tmp120 + 2;
    const Scalar _tmp204 = -_tmp192;
    const Scalar _tmp205 = _tmp21*x4;
    const Scalar _tmp206 = _tmp23*x2;
    const Scalar _tmp207 = _tmp149 + _tmp75;
    const Scalar _tmp208 = _tmp37 + 1;
    const Scalar _tmp209 = 3*x0;
    const Scalar _tmp210 = -_tmp50 + x0;
    const Scalar _tmp211 = Scalar(1.0)*x0;
    const Scalar _tmp212 = _tmp37*x4;

    // Output terms (1)
    static constexpr int kRows_result = 100;
    static constexpr int kCols_result = 100;
    static constexpr int kNumNonZero_result = 698;
    static constexpr int kColPtrs_result[] = {0, 2, 4, 6, 16, 26, 36, 45, 53, 62, 98, 134, 171, 178, 184, 191, 203, 216, 229, 233, 237, 241, 243, 245, 247, 254, 261, 268, 281, 293, 306, 310, 314, 318, 320, 322, 324, 331, 338, 345, 358, 371, 383, 387, 391, 395, 397, 399, 401, 408, 415, 422, 434, 447, 460, 464, 468, 472, 474, 476, 478, 479, 480, 481, 482, 483, 484, 486, 488, 490, 496, 501, 507, 511, 515, 519, 527, 535, 543, 555, 559, 563, 567, 575, 583, 591, 603, 607, 611, 615, 623, 631, 639, 651, 654, 658, 662, 670, 678, 686, 698};
    static constexpr int kRowIndices_result[] = {60, 66, 61, 67, 62, 68, 3, 4, 5, 9, 10, 11, 63, 69, 70, 71, 3, 4, 5, 9, 10, 11, 64, 69, 70, 71, 3, 4, 5, 9, 10, 11, 65, 69, 70, 71, 66, 72, 75, 79, 82, 86, 89, 93, 96, 67, 73, 76, 80, 87, 90, 94, 97, 68, 74, 77, 81, 84, 88, 91, 95, 98, 3, 4, 5, 9, 10, 11, 21, 22, 23, 33, 34, 35, 45, 46, 47, 57, 58, 59, 69, 70, 71, 73, 74, 76, 77, 80, 81, 84, 87, 88, 90, 91, 94, 95, 97, 98, 3, 4, 5, 9, 10, 11, 21, 22, 23, 34, 35, 45, 46, 47, 57, 58, 59, 69, 70, 71, 72, 74, 75, 77, 79, 81, 82, 84, 86, 88, 89, 91, 93, 95, 96, 98, 3, 4, 5, 9, 10, 11, 21, 22, 23, 33, 34, 35, 45, 46, 47, 57, 58, 59, 69, 70, 71, 72, 73, 75, 76, 79, 80, 82, 83, 86, 87, 89, 90, 93, 94, 96, 97, 12, 16, 17, 22, 23, 72, 75, 13, 17, 21, 23, 73, 76, 14, 15, 16, 21, 22, 74, 77, 9, 11, 13, 14, 15, 16, 17, 21, 22, 23, 76, 77, 9, 10, 11, 12, 14, 15, 16, 17, 21, 22, 23, 75, 77, 9, 10, 11, 12, 13, 15, 16, 17, 21, 22, 23, 75, 76, 12, 18, 22, 23, 13, 19, 21, 23, 14, 20, 21, 22, 15, 21, 16, 22, 17, 23, 24, 28, 29, 34, 35, 79, 82, 25, 27, 29, 33, 35, 80, 83, 26, 27, 28, 33, 34, 81, 84, 9, 10, 11, 25, 26, 27, 28, 29, 33, 34, 35, 83, 84, 9, 10, 11, 26, 27, 28, 29, 33, 34, 35, 82, 84, 9, 10, 11, 24, 25, 27, 28, 29, 33, 34, 35, 82, 83, 24, 30, 34, 35, 25, 31, 33, 35, 26, 32, 33, 34, 27, 33, 28, 34, 29, 35, 36, 40, 41, 46, 47, 86, 89, 37, 39, 41, 45, 47, 87, 90, 38, 39, 40, 45, 46, 88, 91, 9, 10, 11, 37, 38, 39, 40, 41, 45, 46, 47, 90, 91, 9, 10, 11, 36, 38, 39, 40, 41, 45, 46, 47, 89, 91, 9, 10, 11, 36, 37, 39, 41, 45, 46, 47, 89, 90, 36, 42, 46, 47, 37, 43, 45, 47, 38, 44, 45, 46, 39, 45, 40, 46, 41, 47, 48, 52, 53, 58, 59, 93, 96, 49, 51, 53, 57, 59, 94, 97, 50, 51, 52, 57, 58, 95, 98, 9, 10, 11, 49, 50, 51, 53, 57, 58, 59, 97, 98, 9, 10, 11, 48, 50, 51, 52, 53, 57, 58, 59, 96, 98, 9, 10, 11, 48, 49, 51, 52, 53, 57, 58, 59, 96, 97, 48, 54, 58, 59, 49, 55, 57, 59, 50, 56, 57, 58, 51, 57, 52, 58, 53, 59, 0, 1, 2, 3, 4, 5, 0, 6, 1, 7, 2, 8, 3, 4, 5, 9, 10, 11, 3, 4, 5, 9, 10, 3, 4, 5, 9, 10, 11, 6, 10, 11, 18, 7, 9, 11, 19, 8, 9, 10, 20, 6, 10, 11, 18, 22, 23, 75, 78, 7, 9, 11, 19, 21, 23, 76, 78, 8, 9, 10, 20, 21, 22, 77, 78, 6, 7, 8, 9, 10, 11, 18, 19, 20, 21, 22, 23, 6, 10, 11, 30, 7, 9, 11, 31, 8, 9, 10, 32, 6, 10, 11, 30, 34, 35, 82, 85, 7, 9, 11, 31, 33, 35, 83, 85, 8, 9, 10, 32, 33, 34, 84, 85, 6, 7, 8, 9, 10, 11, 30, 31, 32, 33, 34, 35, 6, 10, 11, 42, 7, 9, 11, 43, 8, 9, 10, 44, 6, 10, 11, 42, 46, 47, 89, 92, 7, 9, 11, 43, 45, 47, 90, 92, 8, 9, 10, 44, 45, 46, 91, 92, 6, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 47, 6, 10, 11, 7, 9, 11, 55, 8, 9, 10, 56, 6, 10, 11, 54, 58, 59, 96, 99, 7, 9, 11, 55, 57, 59, 97, 99, 8, 9, 10, 56, 57, 58, 98, 99, 6, 7, 8, 9, 10, 11, 54, 55, 56, 57, 58, 59};
    Scalar result_empty_value_ptr[698];
    Eigen::SparseMatrix<Scalar> result = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
        kRows_result,
        kCols_result,
        kNumNonZero_result,
        kColPtrs_result,
        kRowIndices_result,
        result_empty_value_ptr
    );
    Scalar* result_value_ptr = result.valuePtr();


    result_value_ptr[0] = _tmp0 + x2;
    result_value_ptr[1] = _tmp2*x3;
    result_value_ptr[2] = _tmp3;
    result_value_ptr[3] = _tmp5;
    result_value_ptr[4] = -_tmp7;
    result_value_ptr[5] = -x2/_tmp8;
    result_value_ptr[6] = -_tmp10*_tmp11;
    result_value_ptr[7] = -_tmp12 + x0;
    result_value_ptr[8] = _tmp13;
    result_value_ptr[9] = _tmp15;
    result_value_ptr[10] = -x2/_tmp16;
    result_value_ptr[11] = _tmp19;
    result_value_ptr[12] = _tmp20 - 5;
    result_value_ptr[13] = -_tmp11*x3 - _tmp4;
    result_value_ptr[14] = _tmp16 + _tmp22;
    result_value_ptr[15] = -_tmp24;
    result_value_ptr[16] = _tmp23 + _tmp6;
    result_value_ptr[17] = _tmp12*(_tmp26 + x1);
    result_value_ptr[18] = _tmp27;
    result_value_ptr[19] = _tmp29 - 1;
    result_value_ptr[20] = _tmp30;
    result_value_ptr[21] = x3;
    result_value_ptr[22] = x4;
    result_value_ptr[23] = _tmp31 - 4;
    result_value_ptr[24] = _tmp33;
    result_value_ptr[25] = -_tmp34;
    result_value_ptr[26] = _tmp35*x3;
    result_value_ptr[27] = _tmp36/_tmp38;
    result_value_ptr[28] = _tmp40;
    result_value_ptr[29] = -_tmp30 - _tmp41;
    result_value_ptr[30] = x4;
    result_value_ptr[31] = _tmp21*_tmp42 - x0;
    result_value_ptr[32] = -_tmp42 - _tmp6 - 3;
    result_value_ptr[33] = _tmp9;
    result_value_ptr[34] = x0*(_tmp17 + _tmp43);
    result_value_ptr[35] = -1/(_tmp17 + _tmp44);
    result_value_ptr[36] = -x3*(_tmp45 + _tmp46) + 1;
    result_value_ptr[37] = _tmp34 + x4;
    result_value_ptr[38] = -_tmp35;
    result_value_ptr[39] = -_tmp47;
    result_value_ptr[40] = _tmp48*_tmp49;
    result_value_ptr[41] = _tmp12*_tmp6;
    result_value_ptr[42] = _tmp51;
    result_value_ptr[43] = _tmp52*_tmp54*x2;
    result_value_ptr[44] = _tmp23;
    result_value_ptr[45] = Scalar(0.5);
    result_value_ptr[46] = _tmp55;
    result_value_ptr[47] = _tmp56*(_tmp57 + 2);
    result_value_ptr[48] = x1;
    result_value_ptr[49] = -_tmp2;
    result_value_ptr[50] = -_tmp52 - x0;
    result_value_ptr[51] = _tmp37*_tmp58;
    result_value_ptr[52] = _tmp59*x0;
    result_value_ptr[53] = _tmp60;
    result_value_ptr[54] = _tmp12*_tmp27*_tmp61;
    result_value_ptr[55] = _tmp11 - 2;
    result_value_ptr[56] = -_tmp62;
    result_value_ptr[57] = -1;
    result_value_ptr[58] = 8*x4;
    result_value_ptr[59] = 1 - _tmp0;
    result_value_ptr[60] = -_tmp49 - _tmp63;
    result_value_ptr[61] = -_tmp30 - _tmp44;
    result_value_ptr[62] = _tmp0 + 8*x2;
    result_value_ptr[63] = 2;
    result_value_ptr[64] = _tmp64;
    result_value_ptr[65] = _tmp65;
    result_value_ptr[66] = -_tmp66 - 4;
    result_value_ptr[67] = _tmp63;
    result_value_ptr[68] = 1;
    result_value_ptr[69] = _tmp67 + _tmp69;
    result_value_ptr[70] = -Scalar(1.0)*_tmp21 + x3;
    result_value_ptr[71] = Scalar(-0.5);
    result_value_ptr[72] = -_tmp12*x0/_tmp70;
    result_value_ptr[73] = -_tmp19;
    result_value_ptr[74] = _tmp61 + 3;
    result_value_ptr[75] = -_tmp72;
    result_value_ptr[76] = 1 - _tmp42;
    result_value_ptr[77] = _tmp53;
    result_value_ptr[78] = _tmp73;
    result_value_ptr[79] = -_tmp67 - _tmp8;
    result_value_ptr[80] = Scalar(2.0)*_tmp28*_tmp52;
    result_value_ptr[81] = -_tmp18*_tmp74;
    result_value_ptr[82] = _tmp75;
    result_value_ptr[83] = x1 + Scalar(-2.0);
    result_value_ptr[84] = (Scalar(2)/Scalar(3))*x2 + (Scalar(2)/Scalar(3))*x4;
    result_value_ptr[85] = -_tmp76*x4;
    result_value_ptr[86] = _tmp78;
    result_value_ptr[87] = _tmp79;
    result_value_ptr[88] = x3;
    result_value_ptr[89] = -x4*(_tmp80 + 2);
    result_value_ptr[90] = _tmp17;
    result_value_ptr[91] = -_tmp81*_tmp82 + 2;
    result_value_ptr[92] = _tmp42 + _tmp77;
    result_value_ptr[93] = _tmp83;
    result_value_ptr[94] = _tmp84*_tmp86 + x2;
    result_value_ptr[95] = _tmp88;
    result_value_ptr[96] = -_tmp36 - _tmp89;
    result_value_ptr[97] = -_tmp90 - 1;
    result_value_ptr[98] = _tmp23 + _tmp91;
    result_value_ptr[99] = 1 - x0/_tmp31;
    result_value_ptr[100] = x3*(_tmp93 + x0);
    result_value_ptr[101] = -_tmp4*_tmp94*x1;
    result_value_ptr[102] = _tmp60;
    result_value_ptr[103] = -_tmp95;
    result_value_ptr[104] = -_tmp96*x2 - x4;
    result_value_ptr[105] = _tmp97;
    result_value_ptr[106] = _tmp42 + _tmp54;
    result_value_ptr[107] = -_tmp70;
    result_value_ptr[108] = _tmp99;
    result_value_ptr[109] = _tmp39 + _tmp62;
    result_value_ptr[110] = _tmp100*x1;
    result_value_ptr[111] = -4;
    result_value_ptr[112] = -_tmp76 - _tmp97;
    result_value_ptr[113] = -x4*(_tmp101 - 2) + 1;
    result_value_ptr[114] = -_tmp13 - _tmp17;
    result_value_ptr[115] = _tmp16;
    result_value_ptr[116] = -_tmp21*_tmp41*_tmp8;
    result_value_ptr[117] = 2 - _tmp52;
    result_value_ptr[118] = _tmp33;
    result_value_ptr[119] = _tmp102*_tmp55;
    result_value_ptr[120] = -_tmp103*x1;
    result_value_ptr[121] = -_tmp100 - _tmp101;
    result_value_ptr[122] = x4*(_tmp68 + x0);
    result_value_ptr[123] = Scalar(-0.33333333333333331);
    result_value_ptr[124] = 1;
    result_value_ptr[125] = -_tmp41 + _tmp71;
    result_value_ptr[126] = -_tmp6*_tmp95;
    result_value_ptr[127] = _tmp105;
    result_value_ptr[128] = -_tmp106;
    result_value_ptr[129] = -_tmp107;
    result_value_ptr[130] = _tmp94;
    result_value_ptr[131] = _tmp45 + _tmp50;
    result_value_ptr[132] = -_tmp108 - _tmp35;
    result_value_ptr[133] = _tmp109*_tmp16;
    result_value_ptr[134] = x3*(_tmp21*_tmp32*x2 + x2);
    result_value_ptr[135] = -_tmp110 - _tmp23;
    result_value_ptr[136] = _tmp111;
    result_value_ptr[137] = -_tmp46*_tmp81;
    result_value_ptr[138] = x2*(_tmp112 + _tmp30);
    result_value_ptr[139] = _tmp113;
    result_value_ptr[140] = _tmp6;
    result_value_ptr[141] = _tmp67;
    result_value_ptr[142] = -_tmp114 - _tmp91;
    result_value_ptr[143] = _tmp95;
    result_value_ptr[144] = x3*(_tmp115 + 1);
    result_value_ptr[145] = _tmp23;
    result_value_ptr[146] = _tmp34*x1 - 1;
    result_value_ptr[147] = -_tmp116;
    result_value_ptr[148] = -_tmp117*_tmp71 + x1;
    result_value_ptr[149] = -_tmp49 - x2;
    result_value_ptr[150] = _tmp118 + _tmp119;
    result_value_ptr[151] = _tmp120;
    result_value_ptr[152] = _tmp35;
    result_value_ptr[153] = x4;
    result_value_ptr[154] = _tmp121;
    result_value_ptr[155] = -_tmp122;
    result_value_ptr[156] = _tmp123;
    result_value_ptr[157] = _tmp124 + _tmp46 + x3;
    result_value_ptr[158] = _tmp30 + _tmp81;
    result_value_ptr[159] = _tmp126;
    result_value_ptr[160] = _tmp127 - _tmp89;
    result_value_ptr[161] = -_tmp3 - _tmp42;
    result_value_ptr[162] = _tmp48*_tmp71*x2;
    result_value_ptr[163] = _tmp129;
    result_value_ptr[164] = _tmp130*x3;
    result_value_ptr[165] = x0;
    result_value_ptr[166] = -_tmp97 - x1;
    result_value_ptr[167] = _tmp132;
    result_value_ptr[168] = _tmp84*(_tmp8 + x0);
    result_value_ptr[169] = _tmp133 - 2;
    result_value_ptr[170] = _tmp91;
    result_value_ptr[171] = -2;
    result_value_ptr[172] = _tmp39;
    result_value_ptr[173] = _tmp73;
    result_value_ptr[174] = -_tmp134;
    result_value_ptr[175] = _tmp135;
    result_value_ptr[176] = x4/_tmp48;
    result_value_ptr[177] = -_tmp136;
    result_value_ptr[178] = _tmp86;
    result_value_ptr[179] = -_tmp37*_tmp55 + x2;
    result_value_ptr[180] = -_tmp26 - x3;
    result_value_ptr[181] = -4;
    result_value_ptr[182] = -_tmp37*_tmp81;
    result_value_ptr[183] = _tmp137*x0;
    result_value_ptr[184] = _tmp23 + 2;
    result_value_ptr[185] = Scalar(1.0) / (_tmp36);
    result_value_ptr[186] = -_tmp101*_tmp22*_tmp56;
    result_value_ptr[187] = _tmp1 + _tmp125*x4;
    result_value_ptr[188] = -_tmp49 - 3;
    result_value_ptr[189] = -3;
    result_value_ptr[190] = -_tmp34 + _tmp82;
    result_value_ptr[191] = -_tmp122*(x4 + Scalar(0.5));
    result_value_ptr[192] = -_tmp6*_tmp68;
    result_value_ptr[193] = _tmp139;
    result_value_ptr[194] = _tmp75;
    result_value_ptr[195] = _tmp140*_tmp8;
    result_value_ptr[196] = _tmp23*_tmp96;
    result_value_ptr[197] = -1;
    result_value_ptr[198] = _tmp77 + _tmp82;
    result_value_ptr[199] = _tmp37*_tmp43;
    result_value_ptr[200] = _tmp30 + _tmp6;
    result_value_ptr[201] = _tmp141;
    result_value_ptr[202] = -_tmp39 - _tmp96;
    result_value_ptr[203] = _tmp142;
    result_value_ptr[204] = -_tmp9*x3;
    result_value_ptr[205] = _tmp82;
    result_value_ptr[206] = _tmp84;
    result_value_ptr[207] = _tmp143 + _tmp90;
    result_value_ptr[208] = _tmp0*x2 + x4;
    result_value_ptr[209] = _tmp53*x2 + _tmp70;
    result_value_ptr[210] = _tmp3 + _tmp75 + x3;
    result_value_ptr[211] = _tmp145;
    result_value_ptr[212] = _tmp146;
    result_value_ptr[213] = _tmp67 + _tmp80*_tmp84 + x1;
    result_value_ptr[214] = _tmp13*x3;
    result_value_ptr[215] = _tmp147;
    result_value_ptr[216] = _tmp55*x4;
    result_value_ptr[217] = -_tmp144 - _tmp50*_tmp53;
    result_value_ptr[218] = -_tmp28*_tmp9;
    result_value_ptr[219] = 1 - _tmp144;
    result_value_ptr[220] = _tmp148;
    result_value_ptr[221] = _tmp68 - 2;
    result_value_ptr[222] = _tmp148;
    result_value_ptr[223] = _tmp36;
    result_value_ptr[224] = -_tmp149*_tmp20*x3;
    result_value_ptr[225] = -x2/(_tmp53 + _tmp75);
    result_value_ptr[226] = -_tmp56*_tmp77 + 1;
    result_value_ptr[227] = -_tmp151 - _tmp8;
    result_value_ptr[228] = -_tmp152*_tmp85;
    result_value_ptr[229] = _tmp66;
    result_value_ptr[230] = x1;
    result_value_ptr[231] = -_tmp153*x3;
    result_value_ptr[232] = x1*(_tmp42 + Scalar(2.0));
    result_value_ptr[233] = -_tmp154*x4;
    result_value_ptr[234] = _tmp101 + _tmp155;
    result_value_ptr[235] = _tmp15;
    result_value_ptr[236] = _tmp47*x2;
    result_value_ptr[237] = _tmp156 + _tmp66;
    result_value_ptr[238] = _tmp77*(_tmp45 + _tmp90*x1 + 2);
    result_value_ptr[239] = _tmp13*_tmp144;
    result_value_ptr[240] = -_tmp157 - _tmp16;
    result_value_ptr[241] = 2*_tmp149*_tmp53;
    result_value_ptr[242] = _tmp90*(_tmp45 + _tmp8);
    result_value_ptr[243] = -_tmp158*_tmp46;
    result_value_ptr[244] = _tmp85;
    result_value_ptr[245] = -_tmp159 - _tmp23;
    result_value_ptr[246] = -4*_tmp90 + x1;
    result_value_ptr[247] = -_tmp160 - _tmp45;
    result_value_ptr[248] = -_tmp45 - x3;
    result_value_ptr[249] = _tmp140 + _tmp156;
    result_value_ptr[250] = _tmp161;
    result_value_ptr[251] = _tmp42;
    result_value_ptr[252] = -_tmp162;
    result_value_ptr[253] = 2 - _tmp144;
    result_value_ptr[254] = _tmp140*_tmp39;
    result_value_ptr[255] = _tmp164;
    result_value_ptr[256] = -_tmp37 - _tmp77;
    result_value_ptr[257] = _tmp165 + 6;
    result_value_ptr[258] = -_tmp61*x2 + 2;
    result_value_ptr[259] = _tmp9;
    result_value_ptr[260] = -_tmp125 - _tmp30;
    result_value_ptr[261] = _tmp157*(_tmp166 + 2);
    result_value_ptr[262] = _tmp133*_tmp90;
    result_value_ptr[263] = _tmp167;
    result_value_ptr[264] = _tmp83;
    result_value_ptr[265] = -_tmp168*x0 + 2;
    result_value_ptr[266] = _tmp46 + _tmp70;
    result_value_ptr[267] = _tmp149 + _tmp89;
    result_value_ptr[268] = _tmp169*_tmp37;
    result_value_ptr[269] = _tmp17 + _tmp48 + _tmp75;
    result_value_ptr[270] = _tmp116 + 1;
    result_value_ptr[271] = _tmp0 + _tmp146 + _tmp170;
    result_value_ptr[272] = _tmp34*_tmp89;
    result_value_ptr[273] = _tmp135;
    result_value_ptr[274] = -x2*(x1 + 8);
    result_value_ptr[275] = _tmp0;
    result_value_ptr[276] = -_tmp41*_tmp70 - x2;
    result_value_ptr[277] = -_tmp94;
    result_value_ptr[278] = _tmp171 + _tmp75;
    result_value_ptr[279] = _tmp52;
    result_value_ptr[280] = _tmp98;
    result_value_ptr[281] = _tmp136;
    result_value_ptr[282] = -_tmp137 - _tmp23;
    result_value_ptr[283] = _tmp77 + 2;
    result_value_ptr[284] = -_tmp117*_tmp56;
    result_value_ptr[285] = -x1*(_tmp17 + _tmp172);
    result_value_ptr[286] = -_tmp48 - _tmp6;
    result_value_ptr[287] = _tmp35 + (Scalar(3)/Scalar(2))*x4;
    result_value_ptr[288] = -_tmp125*(_tmp70 + 2);
    result_value_ptr[289] = _tmp134 + x0;
    result_value_ptr[290] = _tmp166 - _tmp68*x2;
    result_value_ptr[291] = -x0*(_tmp6 + x3);
    result_value_ptr[292] = _tmp52;
    result_value_ptr[293] = _tmp171;
    result_value_ptr[294] = (Scalar(2)/Scalar(3))*_tmp21*x0;
    result_value_ptr[295] = _tmp23 + 6;
    result_value_ptr[296] = _tmp99;
    result_value_ptr[297] = -_tmp125 - _tmp64;
    result_value_ptr[298] = -_tmp113;
    result_value_ptr[299] = -_tmp46 - x4;
    result_value_ptr[300] = x3;
    result_value_ptr[301] = _tmp173;
    result_value_ptr[302] = 2*_tmp12;
    result_value_ptr[303] = x2*(_tmp23 + x4);
    result_value_ptr[304] = -_tmp142;
    result_value_ptr[305] = -_tmp121 - x1;
    result_value_ptr[306] = _tmp35 + 3;
    result_value_ptr[307] = x3;
    result_value_ptr[308] = -_tmp37/_tmp84;
    result_value_ptr[309] = _tmp157;
    result_value_ptr[310] = _tmp87;
    result_value_ptr[311] = Scalar(0.5)*_tmp171;
    result_value_ptr[312] = 2;
    result_value_ptr[313] = _tmp50 + x3;
    result_value_ptr[314] = -_tmp168;
    result_value_ptr[315] = -_tmp174*x0;
    result_value_ptr[316] = _tmp175 + 1;
    result_value_ptr[317] = _tmp149*x0 - 1;
    result_value_ptr[318] = -3;
    result_value_ptr[319] = _tmp176;
    result_value_ptr[320] = _tmp86 - x0;
    result_value_ptr[321] = -x2*(_tmp155 + _tmp166);
    result_value_ptr[322] = _tmp11 - _tmp36;
    result_value_ptr[323] = 2 - _tmp5;
    result_value_ptr[324] = x0 - Scalar(1.0)*x4;
    result_value_ptr[325] = _tmp71;
    result_value_ptr[326] = x0*(_tmp23 + x3 - 4);
    result_value_ptr[327] = -_tmp177 - _tmp29 - _tmp8;
    result_value_ptr[328] = -4;
    result_value_ptr[329] = -_tmp67 - _tmp82;
    result_value_ptr[330] = _tmp61;
    result_value_ptr[331] = 2 - _tmp110;
    result_value_ptr[332] = -4*_tmp12 - 2;
    result_value_ptr[333] = -Scalar(1)/Scalar(2)*_tmp130;
    result_value_ptr[334] = -_tmp90*x2;
    result_value_ptr[335] = x1;
    result_value_ptr[336] = _tmp179;
    result_value_ptr[337] = -_tmp6 - _tmp87;
    result_value_ptr[338] = _tmp180 + _tmp75;
    result_value_ptr[339] = _tmp119 + x2;
    result_value_ptr[340] = _tmp37;
    result_value_ptr[341] = _tmp79;
    result_value_ptr[342] = -_tmp37 - x4 - 3;
    result_value_ptr[343] = _tmp181;
    result_value_ptr[344] = _tmp166 + 1;
    result_value_ptr[345] = 2 - _tmp59;
    result_value_ptr[346] = _tmp182;
    result_value_ptr[347] = _tmp36;
    result_value_ptr[348] = -5;
    result_value_ptr[349] = _tmp166 + (Scalar(3)/Scalar(2))*x3;
    result_value_ptr[350] = _tmp182;
    result_value_ptr[351] = -_tmp58*x1;
    result_value_ptr[352] = _tmp81 + _tmp9;
    result_value_ptr[353] = _tmp115;
    result_value_ptr[354] = -_tmp169;
    result_value_ptr[355] = -x0*(_tmp35 - 1) - x2;
    result_value_ptr[356] = -1;
    result_value_ptr[357] = _tmp36*x2;
    result_value_ptr[358] = _tmp158 + _tmp60;
    result_value_ptr[359] = _tmp1*_tmp77;
    result_value_ptr[360] = _tmp66;
    result_value_ptr[361] = -2;
    result_value_ptr[362] = -_tmp36 - _tmp77;
    result_value_ptr[363] = _tmp23;
    result_value_ptr[364] = -_tmp149*_tmp22*x2 + x0;
    result_value_ptr[365] = x1*(_tmp17 + _tmp36);
    result_value_ptr[366] = -_tmp101 - _tmp178;
    result_value_ptr[367] = -x4*(_tmp183 + x0);
    result_value_ptr[368] = _tmp44*_tmp92;
    result_value_ptr[369] = _tmp184;
    result_value_ptr[370] = -_tmp185;
    result_value_ptr[371] = _tmp166/_tmp3;
    result_value_ptr[372] = _tmp114*x2;
    result_value_ptr[373] = _tmp186 + _tmp89;
    result_value_ptr[374] = _tmp32 + x0;
    result_value_ptr[375] = _tmp151;
    result_value_ptr[376] = _tmp187;
    result_value_ptr[377] = -_tmp187;
    result_value_ptr[378] = _tmp156;
    result_value_ptr[379] = _tmp167;
    result_value_ptr[380] = _tmp63;
    result_value_ptr[381] = x1 + Scalar(1.0);
    result_value_ptr[382] = _tmp82;
    result_value_ptr[383] = -_tmp21 + x4;
    result_value_ptr[384] = -_tmp90*(_tmp6 + x4) + x0;
    result_value_ptr[385] = -_tmp188;
    result_value_ptr[386] = -_tmp152*x4 + x2;
    result_value_ptr[387] = _tmp111;
    result_value_ptr[388] = -_tmp103;
    result_value_ptr[389] = _tmp62*x0;
    result_value_ptr[390] = _tmp141;
    result_value_ptr[391] = Scalar(-1.0);
    result_value_ptr[392] = -_tmp112*x4 - x4;
    result_value_ptr[393] = -Scalar(1.5)*x0 + Scalar(3.0)*x2;
    result_value_ptr[394] = -_tmp143 - _tmp189;
    result_value_ptr[395] = 4;
    result_value_ptr[396] = _tmp18 - _tmp62*x2 + x0;
    result_value_ptr[397] = -_tmp190/(_tmp77 - 2);
    result_value_ptr[398] = -_tmp191 - _tmp36;
    result_value_ptr[399] = -x2*(_tmp17 + _tmp35);
    result_value_ptr[400] = -_tmp121;
    result_value_ptr[401] = -_tmp172;
    result_value_ptr[402] = _tmp129;
    result_value_ptr[403] = 2;
    result_value_ptr[404] = _tmp14*x1;
    result_value_ptr[405] = _tmp34 + 3;
    result_value_ptr[406] = _tmp109*_tmp12*_tmp21*_tmp90;
    result_value_ptr[407] = _tmp147 + _tmp7;
    result_value_ptr[408] = _tmp192 - 6;
    result_value_ptr[409] = 1;
    result_value_ptr[410] = _tmp152 + _tmp45;
    result_value_ptr[411] = _tmp183 + _tmp36;
    result_value_ptr[412] = -_tmp118*(_tmp166 - 1);
    result_value_ptr[413] = _tmp9;
    result_value_ptr[414] = _tmp193;
    result_value_ptr[415] = -_tmp171 - _tmp92*x1;
    result_value_ptr[416] = _tmp119 + x0;
    result_value_ptr[417] = _tmp1*_tmp194;
    result_value_ptr[418] = x3;
    result_value_ptr[419] = _tmp77 + Scalar(1.0) / (_tmp95);
    result_value_ptr[420] = -_tmp96 - 4;
    result_value_ptr[421] = x2;
    result_value_ptr[422] = -2*_tmp81;
    result_value_ptr[423] = -_tmp98 - x2;
    result_value_ptr[424] = _tmp195 - 1;
    result_value_ptr[425] = _tmp126 + _tmp62;
    result_value_ptr[426] = -_tmp96 - x0;
    result_value_ptr[427] = Scalar(4.0);
    result_value_ptr[428] = _tmp196;
    result_value_ptr[429] = _tmp150;
    result_value_ptr[430] = _tmp163 + _tmp34;
    result_value_ptr[431] = _tmp37 - 6;
    result_value_ptr[432] = _tmp51;
    result_value_ptr[433] = _tmp170;
    result_value_ptr[434] = x0*(_tmp16 + x2);
    result_value_ptr[435] = 3;
    result_value_ptr[436] = _tmp197*_tmp81;
    result_value_ptr[437] = -_tmp118 - 2;
    result_value_ptr[438] = -_tmp198*x0;
    result_value_ptr[439] = -_tmp46 - _tmp87;
    result_value_ptr[440] = -_tmp12*_tmp71;
    result_value_ptr[441] = _tmp186*x3;
    result_value_ptr[442] = _tmp56*_tmp6;
    result_value_ptr[443] = _tmp170 + 8;
    result_value_ptr[444] = -x1*(_tmp79 + 1);
    result_value_ptr[445] = _tmp95*x0;
    result_value_ptr[446] = -x0*(_tmp17 + _tmp180);
    result_value_ptr[447] = -_tmp37 - _tmp45;
    result_value_ptr[448] = -_tmp138 - 2;
    result_value_ptr[449] = -Scalar(1)/Scalar(2)*_tmp116 - _tmp75;
    result_value_ptr[450] = _tmp176*x1;
    result_value_ptr[451] = _tmp108*_tmp11*_tmp28;
    result_value_ptr[452] = -_tmp35*x0;
    result_value_ptr[453] = -1/_tmp35;
    result_value_ptr[454] = _tmp3*x3;
    result_value_ptr[455] = -_tmp163 - Scalar(1)/Scalar(2)*_tmp80;
    result_value_ptr[456] = -x2*(_tmp17 + _tmp175);
    result_value_ptr[457] = _tmp121;
    result_value_ptr[458] = -_tmp76 - 4;
    result_value_ptr[459] = _tmp98 + x0;
    result_value_ptr[460] = _tmp199 - _tmp46;
    result_value_ptr[461] = _tmp166;
    result_value_ptr[462] = -4;
    result_value_ptr[463] = _tmp200;
    result_value_ptr[464] = -_tmp70*(_tmp20 + x3);
    result_value_ptr[465] = _tmp40;
    result_value_ptr[466] = _tmp12*_tmp181;
    result_value_ptr[467] = -x0/_tmp201;
    result_value_ptr[468] = Scalar(1.0) / (_tmp39);
    result_value_ptr[469] = _tmp151;
    result_value_ptr[470] = 4;
    result_value_ptr[471] = -_tmp45 - _tmp77;
    result_value_ptr[472] = _tmp160 + 1;
    result_value_ptr[473] = _tmp31*_tmp82 - 2;
    result_value_ptr[474] = -_tmp97;
    result_value_ptr[475] = x2;
    result_value_ptr[476] = -_tmp32*x0 - _tmp85;
    result_value_ptr[477] = x3*(-_tmp12*x4 + 2);
    result_value_ptr[478] = _tmp52;
    result_value_ptr[479] = -_tmp202 - _tmp67;
    result_value_ptr[480] = _tmp105 + _tmp149;
    result_value_ptr[481] = _tmp100 + _tmp17 + 2;
    result_value_ptr[482] = _tmp74;
    result_value_ptr[483] = _tmp159 - 4;
    result_value_ptr[484] = 2/_tmp163;
    result_value_ptr[485] = _tmp166*_tmp8 - 1;
    result_value_ptr[486] = _tmp179;
    result_value_ptr[487] = -x0/_tmp125;
    result_value_ptr[488] = 4;
    result_value_ptr[489] = -_tmp71;
    result_value_ptr[490] = _tmp42 + x0;
    result_value_ptr[491] = -2/(_tmp191 + _tmp32);
    result_value_ptr[492] = _tmp200;
    result_value_ptr[493] = _tmp196;
    result_value_ptr[494] = _tmp198;
    result_value_ptr[495] = _tmp34;
    result_value_ptr[496] = -x2*(_tmp0 - 2);
    result_value_ptr[497] = -_tmp174;
    result_value_ptr[498] = _tmp38 + _tmp68;
    result_value_ptr[499] = -_tmp110;
    result_value_ptr[500] = _tmp45 + _tmp89;
    result_value_ptr[501] = _tmp121*_tmp125;
    result_value_ptr[502] = -Scalar(2.5)*_tmp90;
    result_value_ptr[503] = -x2 + Scalar(1.0) / (_tmp4);
    result_value_ptr[504] = 2/_tmp9;
    result_value_ptr[505] = -1;
    result_value_ptr[506] = _tmp91;
    result_value_ptr[507] = Scalar(1.0)*x3 - 2;
    result_value_ptr[508] = _tmp11;
    result_value_ptr[509] = 3 - _tmp66;
    result_value_ptr[510] = 1 - _tmp197;
    result_value_ptr[511] = -_tmp203;
    result_value_ptr[512] = _tmp4 + x0;
    result_value_ptr[513] = 3;
    result_value_ptr[514] = _tmp72*_tmp82 + x2;
    result_value_ptr[515] = _tmp204;
    result_value_ptr[516] = _tmp28*x2/_tmp76 - 2;
    result_value_ptr[517] = -_tmp11*_tmp190;
    result_value_ptr[518] = x1/(_tmp20 - 2);
    result_value_ptr[519] = -_tmp201*x4;
    result_value_ptr[520] = -_tmp149;
    result_value_ptr[521] = _tmp205 + 1;
    result_value_ptr[522] = -_tmp10;
    result_value_ptr[523] = _tmp145;
    result_value_ptr[524] = _tmp125*(_tmp206 - 4);
    result_value_ptr[525] = -_tmp46*_tmp94 - x4;
    result_value_ptr[526] = x4;
    result_value_ptr[527] = _tmp79 + x4;
    result_value_ptr[528] = _tmp77 - 4;
    result_value_ptr[529] = _tmp52*x0 - _tmp53;
    result_value_ptr[530] = _tmp177*_tmp37;
    result_value_ptr[531] = x2*(x0 + 4);
    result_value_ptr[532] = -_tmp207*_tmp23;
    result_value_ptr[533] = _tmp165 + 6*x0;
    result_value_ptr[534] = x3 - 4/_tmp81;
    result_value_ptr[535] = _tmp101*_tmp28 + 1;
    result_value_ptr[536] = -_tmp9*x0;
    result_value_ptr[537] = -_tmp208*_tmp56;
    result_value_ptr[538] = -x2*(_tmp82 - 2);
    result_value_ptr[539] = _tmp149 + _tmp45;
    result_value_ptr[540] = -_tmp71*x0 - x4;
    result_value_ptr[541] = -_tmp175*_tmp81 + 1;
    result_value_ptr[542] = _tmp117 + _tmp171;
    result_value_ptr[543] = -_tmp56*_tmp57 - 4;
    result_value_ptr[544] = _tmp48;
    result_value_ptr[545] = 4;
    result_value_ptr[546] = _tmp173;
    result_value_ptr[547] = -_tmp57*x4;
    result_value_ptr[548] = -4;
    result_value_ptr[549] = -_tmp209 - x2;
    result_value_ptr[550] = _tmp209;
    result_value_ptr[551] = 1;
    result_value_ptr[552] = _tmp208;
    result_value_ptr[553] = _tmp60;
    result_value_ptr[554] = _tmp108*x3;
    result_value_ptr[555] = _tmp204;
    result_value_ptr[556] = _tmp162;
    result_value_ptr[557] = _tmp142;
    result_value_ptr[558] = 2*[&]() { const Scalar base = x1; return base * base * base; }();
    result_value_ptr[559] = _tmp159;
    result_value_ptr[560] = -_tmp70*x1;
    result_value_ptr[561] = _tmp91;
    result_value_ptr[562] = -_tmp88*x2;
    result_value_ptr[563] = _tmp203;
    result_value_ptr[564] = -_tmp180;
    result_value_ptr[565] = 2 - _tmp80;
    result_value_ptr[566] = -7*x0;
    result_value_ptr[567] = -x2*(_tmp39 + _tmp75 + _tmp77);
    result_value_ptr[568] = -_tmp67 - _tmp78;
    result_value_ptr[569] = _tmp149 + _tmp67;
    result_value_ptr[570] = _tmp107;
    result_value_ptr[571] = _tmp185*_tmp80;
    result_value_ptr[572] = -_tmp70 - _tmp75 + 2;
    result_value_ptr[573] = -2;
    result_value_ptr[574] = _tmp32;
    result_value_ptr[575] = _tmp0*x0;
    result_value_ptr[576] = _tmp104;
    result_value_ptr[577] = 4;
    result_value_ptr[578] = _tmp17 + _tmp42 + 4;
    result_value_ptr[579] = -x1/_tmp210;
    result_value_ptr[580] = -_tmp20*x0 + _tmp68;
    result_value_ptr[581] = -Scalar(0.5)*x3;
    result_value_ptr[582] = -x1/(_tmp211 + x2);
    result_value_ptr[583] = -_tmp124 - 1;
    result_value_ptr[584] = _tmp93*x4;
    result_value_ptr[585] = _tmp24 + 1;
    result_value_ptr[586] = _tmp4 + _tmp88;
    result_value_ptr[587] = (Scalar(1)/Scalar(4))*_tmp11;
    result_value_ptr[588] = -_tmp159;
    result_value_ptr[589] = -_tmp80 - 1;
    result_value_ptr[590] = -_tmp21*_tmp35 - x3;
    result_value_ptr[591] = _tmp164;
    result_value_ptr[592] = _tmp199 + _tmp23 + _tmp30;
    result_value_ptr[593] = -_tmp48*x4;
    result_value_ptr[594] = -_tmp12/_tmp1;
    result_value_ptr[595] = _tmp66;
    result_value_ptr[596] = 1;
    result_value_ptr[597] = -x1*(_tmp61 + 2) + 2;
    result_value_ptr[598] = _tmp39 + Scalar(4.0)*x2;
    result_value_ptr[599] = 3;
    result_value_ptr[600] = _tmp118*_tmp84;
    result_value_ptr[601] = -x3*(_tmp66*x4 - 4);
    result_value_ptr[602] = _tmp209;
    result_value_ptr[603] = _tmp189 + 4;
    result_value_ptr[604] = _tmp205*_tmp71;
    result_value_ptr[605] = _tmp184*_tmp56;
    result_value_ptr[606] = _tmp16 + x0;
    result_value_ptr[607] = _tmp0;
    result_value_ptr[608] = -_tmp69*x1;
    result_value_ptr[609] = _tmp101*x0 + _tmp67;
    result_value_ptr[610] = -_tmp12 - _tmp48;
    result_value_ptr[611] = -x3/(_tmp192 + x2);
    result_value_ptr[612] = _tmp23*_tmp41;
    result_value_ptr[613] = _tmp75 + _tmp81 + 2;
    result_value_ptr[614] = -x3*(_tmp104 + _tmp45);
    result_value_ptr[615] = _tmp37*(_tmp34 - 1);
    result_value_ptr[616] = -_tmp32*x1;
    result_value_ptr[617] = -_tmp207;
    result_value_ptr[618] = 1 - _tmp24;
    result_value_ptr[619] = _tmp211 + Scalar(-2.0);
    result_value_ptr[620] = 4*_tmp28 - 2;
    result_value_ptr[621] = _tmp139;
    result_value_ptr[622] = _tmp23 - 3;
    result_value_ptr[623] = 5 - x2;
    result_value_ptr[624] = _tmp156 + x0;
    result_value_ptr[625] = -_tmp28*_tmp46;
    result_value_ptr[626] = _tmp80;
    result_value_ptr[627] = Scalar(2.0);
    result_value_ptr[628] = _tmp31 + 3;
    result_value_ptr[629] = _tmp177*x2 - _tmp23;
    result_value_ptr[630] = -_tmp161;
    result_value_ptr[631] = _tmp8;
    result_value_ptr[632] = -_tmp50*_tmp97;
    result_value_ptr[633] = x4*(_tmp104 + _tmp75);
    result_value_ptr[634] = -_tmp191;
    result_value_ptr[635] = -x0/_tmp123;
    result_value_ptr[636] = -_tmp202;
    result_value_ptr[637] = Scalar(-1.0);
    result_value_ptr[638] = -_tmp12*_tmp155;
    result_value_ptr[639] = _tmp23 + _tmp9;
    result_value_ptr[640] = -_tmp113 - x0;
    result_value_ptr[641] = x0;
    result_value_ptr[642] = 2 - _tmp41;
    result_value_ptr[643] = _tmp28*x4/_tmp137;
    result_value_ptr[644] = Scalar(-8.0);
    result_value_ptr[645] = _tmp67;
    result_value_ptr[646] = _tmp25*_tmp56*x1;
    result_value_ptr[647] = -2*_tmp41;
    result_value_ptr[648] = _tmp212;
    result_value_ptr[649] = _tmp188 + 2;
    result_value_ptr[650] = -_tmp13;
    result_value_ptr[651] = 4;
    result_value_ptr[652] = -x0*(_tmp206 + _tmp67);
    result_value_ptr[653] = Scalar(1.0);
    result_value_ptr[654] = _tmp23 + _tmp73;
    result_value_ptr[655] = x3/(_tmp128 + 1);
    result_value_ptr[656] = _tmp132;
    result_value_ptr[657] = -_tmp65*x0 - 1;
    result_value_ptr[658] = _tmp32*x4;
    result_value_ptr[659] = -_tmp96*x3;
    result_value_ptr[660] = -_tmp195;
    result_value_ptr[661] = _tmp32 + x2;
    result_value_ptr[662] = -_tmp171;
    result_value_ptr[663] = Scalar(2.0);
    result_value_ptr[664] = _tmp106 + _tmp140;
    result_value_ptr[665] = -_tmp37 - _tmp62;
    result_value_ptr[666] = _tmp153 + _tmp42;
    result_value_ptr[667] = -_tmp4 - _tmp56;
    result_value_ptr[668] = Scalar(-0.5);
    result_value_ptr[669] = -_tmp53*_tmp71;
    result_value_ptr[670] = _tmp41;
    result_value_ptr[671] = _tmp102;
    result_value_ptr[672] = _tmp150/_tmp41;
    result_value_ptr[673] = -_tmp140 - _tmp87 - 4;
    result_value_ptr[674] = -_tmp63 - _tmp77;
    result_value_ptr[675] = _tmp194 - _tmp46;
    result_value_ptr[676] = -_tmp166*_tmp9;
    result_value_ptr[677] = x2*(x0 + x1) - 2;
    result_value_ptr[678] = _tmp37 + 8*x0;
    result_value_ptr[679] = -_tmp131*x2;
    result_value_ptr[680] = -_tmp41*_tmp56;
    result_value_ptr[681] = -_tmp212;
    result_value_ptr[682] = -x2*(_tmp48*x3 + 2);
    result_value_ptr[683] = _tmp193;
    result_value_ptr[684] = _tmp157 + _tmp166;
    result_value_ptr[685] = _tmp0 - x2;
    result_value_ptr[686] = _tmp94*x3;
    result_value_ptr[687] = -_tmp36 - _tmp37;
    result_value_ptr[688] = Scalar(4.0);
    result_value_ptr[689] = _tmp30 + _tmp71;
    result_value_ptr[690] = _tmp82 + x3;
    result_value_ptr[691] = -_tmp79*_tmp85;
    result_value_ptr[692] = -1/(_tmp36 + _tmp67);
    result_value_ptr[693] = _tmp95;
    result_value_ptr[694] = -Scalar(1.0)*x1;
    result_value_ptr[695] = _tmp127;
    result_value_ptr[696] = -_tmp118 - _tmp210 - _tmp26;
    result_value_ptr[697] = -_tmp30 - _tmp89;

    return result;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
