// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     matrix_multiplication_benchmark.cc.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

///
/// Experiment to show timing for the matrix multiplication example in the SymForce paper.
///
/// Run with:
///
///     build/bin/benchmarks/matrix_multiplication_benchmark_rotor1
///
/// See run_matmul_benchmarks.py for more information
///

#include <chrono>
#include <thread>

#include <Eigen/Dense>
#include <Eigen/Sparse>
#include <catch2/catch_template_test_macros.hpp>
#include <catch2/catch_test_macros.hpp>
#include <spdlog/spdlog.h>

#include <symforce/opt/tic_toc.h>
#include <symforce/opt/util.h>

using namespace sym;

#include "./compute_a_dense_dynamic_rotor1.h"
#include "./compute_a_dense_rotor1.h"
#include "./compute_a_rotor1.h"
#include "./compute_at_b_rotor1.h"
#include "./compute_b_dense_dynamic_rotor1.h"
#include "./compute_b_dense_rotor1.h"
#include "./compute_b_rotor1.h"

template <typename Scalar>
__attribute__((noinline)) Eigen::Matrix<Scalar, 100, 100> ComputeDenseFixedRotor1(
    const Scalar x0, const Scalar x1, const Scalar x2, const Scalar x3, const Scalar x4) {
  Eigen::Matrix<Scalar, 100, 100> A = ComputeADenseRotor1<Scalar>(x0, x1, x2, x3, x4);
  Eigen::Matrix<Scalar, 100, 100> B = ComputeBDenseRotor1<Scalar>(x0, x1, x2, x3, x4);
  return A.transpose() * B;
}

template <typename Scalar>
__attribute__((noinline)) Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic>
ComputeDenseDynamicRotor1(const Scalar x0, const Scalar x1, const Scalar x2, const Scalar x3,
                          const Scalar x4) {
  const auto A = ComputeADenseDynamicRotor1<Scalar>(x0, x1, x2, x3, x4);
  const auto B = ComputeBDenseDynamicRotor1<Scalar>(x0, x1, x2, x3, x4);
  return A.transpose() * B;
}

template <typename Scalar>
__attribute__((noinline)) Eigen::SparseMatrix<Scalar> ComputeSparseRotor1(
    const Scalar x0, const Scalar x1, const Scalar x2, const Scalar x3, const Scalar x4) {
  Eigen::SparseMatrix<Scalar> A = ComputeARotor1<Scalar>(x0, x1, x2, x3, x4);
  Eigen::SparseMatrix<Scalar> B = ComputeBRotor1<Scalar>(x0, x1, x2, x3, x4);
  return A.transpose() * B;
}

// ----------------------------------------------------------------------------
// Test Cases
// ----------------------------------------------------------------------------

TEMPLATE_TEST_CASE("sparse_rotor1", "", double, float) {
  using Scalar = TestType;

  fmt::print("n_runs_multiplier: {};\n", 10.0);

  const Scalar x2 = 1.0;
  const Scalar x3 = 2.0;
  const Scalar x4 = 3.0;

  std::chrono::milliseconds timespan(100);
  std::this_thread::sleep_for(timespan);

  Scalar sum = 0.0;
  {
    SYM_TIME_SCOPE("sparse_rotor1_{}", typeid(Scalar).name());

    for (Scalar x0 = 0.1; x0 < 10.0; x0 += 0.1) {
      for (Scalar x1 = 0.1; x1 < 10.0; x1 += 0.1) {
        auto mat = ComputeSparseRotor1(x0, x1, x2, x3, x4);
        sum += mat.valuePtr()[0];
      }
    }
  }
}

TEMPLATE_TEST_CASE("dense_dynamic_rotor1", "", double, float) {
  using Scalar = TestType;

  fmt::print("n_runs_multiplier: {};\n", 10.0);

  const Scalar x2 = 1.0;
  const Scalar x3 = 2.0;
  const Scalar x4 = 3.0;

  std::chrono::milliseconds timespan(100);
  std::this_thread::sleep_for(timespan);

  Scalar sum = 0.0;
  {
    SYM_TIME_SCOPE("dense_dynamic_rotor1_{}", typeid(Scalar).name());
    for (Scalar x0 = 0.1; x0 < 10.0; x0 += 0.1) {
      for (Scalar x1 = 0.1; x1 < 10.0; x1 += 0.1) {
        auto mat = ComputeDenseDynamicRotor1<Scalar>(x0, x1, x2, x3, x4);
        sum += mat(0, 0);
      }
    }
  }
}

TEMPLATE_TEST_CASE("dense_fixed_rotor1", "", double, float) {
  using Scalar = TestType;

  fmt::print("n_runs_multiplier: {};\n", 10.0);

  const Scalar x2 = 1.0;
  const Scalar x3 = 2.0;
  const Scalar x4 = 3.0;

  std::chrono::milliseconds timespan(100);
  std::this_thread::sleep_for(timespan);

  Scalar sum = 0.0;
  {
    SYM_TIME_SCOPE("dense_fixed_rotor1_{}", typeid(Scalar).name());
    for (Scalar x0 = 0.1; x0 < 10.0; x0 += 0.1) {
      for (Scalar x1 = 0.1; x1 < 10.0; x1 += 0.1) {
        auto mat = ComputeDenseFixedRotor1<Scalar>(x0, x1, x2, x3, x4);
        sum += mat(0, 0);
      }
    }
  }
}

TEMPLATE_TEST_CASE("flattened_rotor1", "", double, float) {
  using Scalar = TestType;

  fmt::print("n_runs_multiplier: {};\n", 10.0);

  const Scalar x2 = 1.0;
  const Scalar x3 = 2.0;
  const Scalar x4 = 3.0;

  std::chrono::milliseconds timespan(100);
  std::this_thread::sleep_for(timespan);

  Scalar sum = 0.0;
  {
    SYM_TIME_SCOPE("flattened_rotor1_{}", typeid(Scalar).name());
    for (Scalar x0 = 0.1; x0 < 10.0; x0 += 0.1) {
      for (Scalar x1 = 0.1; x1 < 10.0; x1 += 0.1) {
        auto mat = ComputeAtBRotor1(x0, x1, x2, x3, x4);
        sum += mat.valuePtr()[0];
      }
    }
  }
}
