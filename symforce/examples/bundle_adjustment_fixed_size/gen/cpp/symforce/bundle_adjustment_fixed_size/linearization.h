// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <Eigen/Sparse>

#include <sym/pose3.h>

namespace bundle_adjustment_fixed_size {

/**
 * This function was autogenerated. Do not modify by hand.
 *
 * Computes the linearization of the residual around the given state,
 * and returns the relevant information about the resulting linear system.
 *
 * Input args: The state to linearize around
 *
 * Output args:
 *     residual (Eigen::Matrix*): The residual vector
 *     jacobian: (72x26) jacobian of residual wrt args views_1_pose (6), landmarks_0_ (1),
 *               landmarks_1_ (1), landmarks_2_ (1), landmarks_3_ (1), landmarks_4_ (1),
 *               landmarks_5_ (1), landmarks_6_ (1), landmarks_7_ (1), landmarks_8_ (1),
 *               landmarks_9_ (1), landmarks_10_ (1), landmarks_11_ (1), landmarks_12_ (1),
 *               landmarks_13_ (1), landmarks_14_ (1), landmarks_15_ (1), landmarks_16_ (1),
 *               landmarks_17_ (1), landmarks_18_ (1), landmarks_19_ (1)
 *     hessian: (26x26) Gauss-Newton hessian for args views_1_pose (6), landmarks_0_ (1),
 *              landmarks_1_ (1), landmarks_2_ (1), landmarks_3_ (1), landmarks_4_ (1), landmarks_5_
 *              (1), landmarks_6_ (1), landmarks_7_ (1), landmarks_8_ (1), landmarks_9_ (1),
 *              landmarks_10_ (1), landmarks_11_ (1), landmarks_12_ (1), landmarks_13_ (1),
 *              landmarks_14_ (1), landmarks_15_ (1), landmarks_16_ (1), landmarks_17_ (1),
 *              landmarks_18_ (1), landmarks_19_ (1)
 *     rhs: (26x1) Gauss-Newton rhs for args views_1_pose (6), landmarks_0_ (1), landmarks_1_ (1),
 *          landmarks_2_ (1), landmarks_3_ (1), landmarks_4_ (1), landmarks_5_ (1), landmarks_6_
 *          (1), landmarks_7_ (1), landmarks_8_ (1), landmarks_9_ (1), landmarks_10_ (1),
 *          landmarks_11_ (1), landmarks_12_ (1), landmarks_13_ (1), landmarks_14_ (1),
 *          landmarks_15_ (1), landmarks_16_ (1), landmarks_17_ (1), landmarks_18_ (1),
 *          landmarks_19_ (1)
 */
template <typename Scalar>
void Linearization(
    const Eigen::Matrix<Scalar, 4, 1>& views_0_calibration, const sym::Pose3<Scalar>& views_0_pose,
    const Eigen::Matrix<Scalar, 4, 1>& views_1_calibration, const sym::Pose3<Scalar>& views_1_pose,
    const sym::Pose3<Scalar>& priors_0_0_target_T_src,
    const Eigen::Matrix<Scalar, 6, 6>& priors_0_0_sqrt_info,
    const sym::Pose3<Scalar>& priors_0_1_target_T_src,
    const Eigen::Matrix<Scalar, 6, 6>& priors_0_1_sqrt_info,
    const sym::Pose3<Scalar>& priors_1_0_target_T_src,
    const Eigen::Matrix<Scalar, 6, 6>& priors_1_0_sqrt_info,
    const sym::Pose3<Scalar>& priors_1_1_target_T_src,
    const Eigen::Matrix<Scalar, 6, 6>& priors_1_1_sqrt_info,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_0_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_0_target_coords, const Scalar matches_0_0_weight,
    const Scalar matches_0_0_inverse_range_prior,
    const Scalar matches_0_0_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_1_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_1_target_coords, const Scalar matches_0_1_weight,
    const Scalar matches_0_1_inverse_range_prior,
    const Scalar matches_0_1_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_2_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_2_target_coords, const Scalar matches_0_2_weight,
    const Scalar matches_0_2_inverse_range_prior,
    const Scalar matches_0_2_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_3_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_3_target_coords, const Scalar matches_0_3_weight,
    const Scalar matches_0_3_inverse_range_prior,
    const Scalar matches_0_3_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_4_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_4_target_coords, const Scalar matches_0_4_weight,
    const Scalar matches_0_4_inverse_range_prior,
    const Scalar matches_0_4_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_5_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_5_target_coords, const Scalar matches_0_5_weight,
    const Scalar matches_0_5_inverse_range_prior,
    const Scalar matches_0_5_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_6_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_6_target_coords, const Scalar matches_0_6_weight,
    const Scalar matches_0_6_inverse_range_prior,
    const Scalar matches_0_6_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_7_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_7_target_coords, const Scalar matches_0_7_weight,
    const Scalar matches_0_7_inverse_range_prior,
    const Scalar matches_0_7_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_8_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_8_target_coords, const Scalar matches_0_8_weight,
    const Scalar matches_0_8_inverse_range_prior,
    const Scalar matches_0_8_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_9_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_9_target_coords, const Scalar matches_0_9_weight,
    const Scalar matches_0_9_inverse_range_prior,
    const Scalar matches_0_9_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_10_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_10_target_coords, const Scalar matches_0_10_weight,
    const Scalar matches_0_10_inverse_range_prior,
    const Scalar matches_0_10_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_11_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_11_target_coords, const Scalar matches_0_11_weight,
    const Scalar matches_0_11_inverse_range_prior,
    const Scalar matches_0_11_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_12_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_12_target_coords, const Scalar matches_0_12_weight,
    const Scalar matches_0_12_inverse_range_prior,
    const Scalar matches_0_12_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_13_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_13_target_coords, const Scalar matches_0_13_weight,
    const Scalar matches_0_13_inverse_range_prior,
    const Scalar matches_0_13_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_14_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_14_target_coords, const Scalar matches_0_14_weight,
    const Scalar matches_0_14_inverse_range_prior,
    const Scalar matches_0_14_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_15_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_15_target_coords, const Scalar matches_0_15_weight,
    const Scalar matches_0_15_inverse_range_prior,
    const Scalar matches_0_15_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_16_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_16_target_coords, const Scalar matches_0_16_weight,
    const Scalar matches_0_16_inverse_range_prior,
    const Scalar matches_0_16_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_17_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_17_target_coords, const Scalar matches_0_17_weight,
    const Scalar matches_0_17_inverse_range_prior,
    const Scalar matches_0_17_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_18_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_18_target_coords, const Scalar matches_0_18_weight,
    const Scalar matches_0_18_inverse_range_prior,
    const Scalar matches_0_18_inverse_range_prior_sigma,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_19_source_coords,
    const Eigen::Matrix<Scalar, 2, 1>& matches_0_19_target_coords, const Scalar matches_0_19_weight,
    const Scalar matches_0_19_inverse_range_prior,
    const Scalar matches_0_19_inverse_range_prior_sigma, const Scalar landmarks_0_,
    const Scalar landmarks_1_, const Scalar landmarks_2_, const Scalar landmarks_3_,
    const Scalar landmarks_4_, const Scalar landmarks_5_, const Scalar landmarks_6_,
    const Scalar landmarks_7_, const Scalar landmarks_8_, const Scalar landmarks_9_,
    const Scalar landmarks_10_, const Scalar landmarks_11_, const Scalar landmarks_12_,
    const Scalar landmarks_13_, const Scalar landmarks_14_, const Scalar landmarks_15_,
    const Scalar landmarks_16_, const Scalar landmarks_17_, const Scalar landmarks_18_,
    const Scalar landmarks_19_, const Scalar costs_reprojection_error_gnc_scale,
    const Scalar costs_reprojection_error_gnc_mu, const Scalar epsilon,
    Eigen::Matrix<Scalar, 72, 1>* const residual = nullptr,
    Eigen::SparseMatrix<Scalar>* const jacobian = nullptr,
    Eigen::SparseMatrix<Scalar>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 26, 1>* const rhs = nullptr) {
  // Total ops: 9678

  // Unused inputs
  (void)priors_0_0_target_T_src;
  (void)priors_0_0_sqrt_info;
  (void)priors_1_1_target_T_src;
  (void)priors_1_1_sqrt_info;

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _views_0_pose = views_0_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _views_1_pose = views_1_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _priors_0_1_target_T_src = priors_0_1_target_T_src.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _priors_1_0_target_T_src = priors_1_0_target_T_src.Data();

  // Intermediate terms (2240)
  const Scalar _tmp0 = 2 * _views_0_pose[2];
  const Scalar _tmp1 = _tmp0 * _views_0_pose[3];
  const Scalar _tmp2 = 2 * _views_0_pose[0] * _views_0_pose[1];
  const Scalar _tmp3 = -_tmp1 + _tmp2;
  const Scalar _tmp4 = -2 * std::pow(_views_0_pose[0], Scalar(2));
  const Scalar _tmp5 = 1 - 2 * std::pow(_views_0_pose[2], Scalar(2));
  const Scalar _tmp6 = _tmp4 + _tmp5;
  const Scalar _tmp7 = _tmp0 * _views_0_pose[1];
  const Scalar _tmp8 = 2 * _views_0_pose[3];
  const Scalar _tmp9 = _tmp8 * _views_0_pose[0];
  const Scalar _tmp10 = _tmp7 + _tmp9;
  const Scalar _tmp11 = -_priors_0_1_target_T_src[5] - _tmp10 * _views_0_pose[6] +
                        _tmp10 * _views_1_pose[6] - _tmp3 * _views_0_pose[4] +
                        _tmp3 * _views_1_pose[4] - _tmp6 * _views_0_pose[5] +
                        _tmp6 * _views_1_pose[5];
  const Scalar _tmp12 = _views_0_pose[0] * _views_1_pose[0];
  const Scalar _tmp13 = _views_0_pose[2] * _views_1_pose[2];
  const Scalar _tmp14 = _views_0_pose[1] * _views_1_pose[1];
  const Scalar _tmp15 = _views_0_pose[3] * _views_1_pose[3];
  const Scalar _tmp16 = _tmp12 + _tmp13 + _tmp14 + _tmp15;
  const Scalar _tmp17 = _priors_0_1_target_T_src[3] * _tmp16;
  const Scalar _tmp18 = _views_0_pose[0] * _views_1_pose[3];
  const Scalar _tmp19 = _views_0_pose[3] * _views_1_pose[0];
  const Scalar _tmp20 = _views_0_pose[1] * _views_1_pose[2];
  const Scalar _tmp21 = _views_0_pose[2] * _views_1_pose[1];
  const Scalar _tmp22 = -_tmp18 + _tmp19 - _tmp20 + _tmp21;
  const Scalar _tmp23 = _priors_0_1_target_T_src[0] * _tmp22;
  const Scalar _tmp24 = _views_0_pose[1] * _views_1_pose[3];
  const Scalar _tmp25 = _views_0_pose[2] * _views_1_pose[0];
  const Scalar _tmp26 = _views_0_pose[0] * _views_1_pose[2];
  const Scalar _tmp27 = _views_0_pose[3] * _views_1_pose[1];
  const Scalar _tmp28 = -_tmp24 - _tmp25 + _tmp26 + _tmp27;
  const Scalar _tmp29 = _priors_0_1_target_T_src[1] * _tmp28;
  const Scalar _tmp30 = _views_0_pose[2] * _views_1_pose[3];
  const Scalar _tmp31 = _views_0_pose[1] * _views_1_pose[0];
  const Scalar _tmp32 = _views_0_pose[3] * _views_1_pose[2];
  const Scalar _tmp33 = _views_0_pose[0] * _views_1_pose[1];
  const Scalar _tmp34 = -_tmp30 + _tmp31 + _tmp32 - _tmp33;
  const Scalar _tmp35 = _priors_0_1_target_T_src[2] * _tmp34;
  const Scalar _tmp36 = -_tmp23 - _tmp29 - _tmp35;
  const Scalar _tmp37 = _tmp17 - _tmp36;
  const Scalar _tmp38 = 2 * std::min<Scalar>(0, (((_tmp37) > 0) - ((_tmp37) < 0))) + 1;
  const Scalar _tmp39 = 2 * _tmp38;
  const Scalar _tmp40 = _tmp39 * priors_0_1_sqrt_info(0, 1);
  const Scalar _tmp41 = _priors_0_1_target_T_src[0] * _tmp34 -
                        _priors_0_1_target_T_src[1] * _tmp16 -
                        _priors_0_1_target_T_src[2] * _tmp22 + _priors_0_1_target_T_src[3] * _tmp28;
  const Scalar _tmp42 = -epsilon;
  const Scalar _tmp43 = _tmp42 + 1;
  const Scalar _tmp44 = std::min<Scalar>(_tmp43, std::fabs(_tmp37));
  const Scalar _tmp45 = std::acos(_tmp44) / std::sqrt(Scalar(1 - std::pow(_tmp44, Scalar(2))));
  const Scalar _tmp46 = _tmp41 * _tmp45;
  const Scalar _tmp47 = -2 * std::pow(_views_0_pose[1], Scalar(2));
  const Scalar _tmp48 = _tmp4 + _tmp47 + 1;
  const Scalar _tmp49 = _tmp0 * _views_0_pose[0];
  const Scalar _tmp50 = _tmp8 * _views_0_pose[1];
  const Scalar _tmp51 = _tmp49 + _tmp50;
  const Scalar _tmp52 = _tmp7 - _tmp9;
  const Scalar _tmp53 = -_priors_0_1_target_T_src[6] - _tmp48 * _views_0_pose[6] +
                        _tmp48 * _views_1_pose[6] - _tmp51 * _views_0_pose[4] +
                        _tmp51 * _views_1_pose[4] - _tmp52 * _views_0_pose[5] +
                        _tmp52 * _views_1_pose[5];
  const Scalar _tmp54 = -_priors_0_1_target_T_src[0] * _tmp16 -
                        _priors_0_1_target_T_src[1] * _tmp34 +
                        _priors_0_1_target_T_src[2] * _tmp28 + _priors_0_1_target_T_src[3] * _tmp22;
  const Scalar _tmp55 = _tmp39 * priors_0_1_sqrt_info(0, 0);
  const Scalar _tmp56 = -_priors_0_1_target_T_src[0] * _tmp28 +
                        _priors_0_1_target_T_src[1] * _tmp22 -
                        _priors_0_1_target_T_src[2] * _tmp16 + _priors_0_1_target_T_src[3] * _tmp34;
  const Scalar _tmp57 = _tmp45 * _tmp56;
  const Scalar _tmp58 = _tmp39 * _tmp57;
  const Scalar _tmp59 = _tmp1 + _tmp2;
  const Scalar _tmp60 = _tmp47 + _tmp5;
  const Scalar _tmp61 = _tmp49 - _tmp50;
  const Scalar _tmp62 = -_priors_0_1_target_T_src[4] - _tmp59 * _views_0_pose[5] +
                        _tmp59 * _views_1_pose[5] - _tmp60 * _views_0_pose[4] +
                        _tmp60 * _views_1_pose[4] - _tmp61 * _views_0_pose[6] +
                        _tmp61 * _views_1_pose[6];
  const Scalar _tmp63 = _tmp11 * priors_0_1_sqrt_info(0, 4) + _tmp40 * _tmp46 +
                        _tmp45 * _tmp54 * _tmp55 + _tmp53 * priors_0_1_sqrt_info(0, 5) +
                        _tmp58 * priors_0_1_sqrt_info(0, 2) + _tmp62 * priors_0_1_sqrt_info(0, 3);
  const Scalar _tmp64 = _tmp39 * priors_0_1_sqrt_info(1, 1);
  const Scalar _tmp65 = _tmp11 * priors_0_1_sqrt_info(1, 4) + _tmp46 * _tmp64 +
                        _tmp53 * priors_0_1_sqrt_info(1, 5) + _tmp58 * priors_0_1_sqrt_info(1, 2) +
                        _tmp62 * priors_0_1_sqrt_info(1, 3);
  const Scalar _tmp66 = _tmp39 * priors_0_1_sqrt_info(2, 2);
  const Scalar _tmp67 = _tmp11 * priors_0_1_sqrt_info(2, 4) + _tmp53 * priors_0_1_sqrt_info(2, 5) +
                        _tmp57 * _tmp66 + _tmp62 * priors_0_1_sqrt_info(2, 3);
  const Scalar _tmp68 = _tmp11 * priors_0_1_sqrt_info(3, 4) + _tmp53 * priors_0_1_sqrt_info(3, 5) +
                        _tmp62 * priors_0_1_sqrt_info(3, 3);
  const Scalar _tmp69 = _tmp11 * priors_0_1_sqrt_info(4, 4) + _tmp53 * priors_0_1_sqrt_info(4, 5);
  const Scalar _tmp70 = std::pow(_views_1_pose[2], Scalar(2));
  const Scalar _tmp71 = 2 * _tmp70;
  const Scalar _tmp72 = -_tmp71;
  const Scalar _tmp73 = std::pow(_views_1_pose[1], Scalar(2));
  const Scalar _tmp74 = 2 * _tmp73;
  const Scalar _tmp75 = -_tmp74;
  const Scalar _tmp76 = _tmp72 + _tmp75 + 1;
  const Scalar _tmp77 = 2 * _views_1_pose[2];
  const Scalar _tmp78 = _tmp77 * _views_1_pose[0];
  const Scalar _tmp79 = 2 * _views_1_pose[1] * _views_1_pose[3];
  const Scalar _tmp80 = -_tmp79;
  const Scalar _tmp81 = _tmp78 + _tmp80;
  const Scalar _tmp82 = _tmp81 * _views_1_pose[6];
  const Scalar _tmp83 = 2 * _views_1_pose[0];
  const Scalar _tmp84 = _tmp83 * _views_1_pose[1];
  const Scalar _tmp85 = _tmp77 * _views_1_pose[3];
  const Scalar _tmp86 = _tmp84 + _tmp85;
  const Scalar _tmp87 = _tmp86 * _views_1_pose[5];
  const Scalar _tmp88 = _tmp81 * _views_0_pose[6] + _tmp86 * _views_0_pose[5];
  const Scalar _tmp89 = -_priors_1_0_target_T_src[4] + _tmp76 * _views_0_pose[4] -
                        _tmp76 * _views_1_pose[4] - _tmp82 - _tmp87 + _tmp88;
  const Scalar _tmp90 = std::pow(_views_1_pose[0], Scalar(2));
  const Scalar _tmp91 = 2 * _tmp90;
  const Scalar _tmp92 = 1 - _tmp91;
  const Scalar _tmp93 = _tmp72 + _tmp92;
  const Scalar _tmp94 = _tmp83 * _views_1_pose[3];
  const Scalar _tmp95 = _tmp77 * _views_1_pose[1];
  const Scalar _tmp96 = _tmp94 + _tmp95;
  const Scalar _tmp97 = _tmp96 * _views_1_pose[6];
  const Scalar _tmp98 = -_tmp85;
  const Scalar _tmp99 = _tmp84 + _tmp98;
  const Scalar _tmp100 = _tmp99 * _views_1_pose[4];
  const Scalar _tmp101 = _tmp96 * _views_0_pose[6] + _tmp99 * _views_0_pose[4];
  const Scalar _tmp102 = -_priors_1_0_target_T_src[5] - _tmp100 + _tmp101 +
                         _tmp93 * _views_0_pose[5] - _tmp93 * _views_1_pose[5] - _tmp97;
  const Scalar _tmp103 = _tmp75 + _tmp92;
  const Scalar _tmp104 = -_tmp94;
  const Scalar _tmp105 = _tmp104 + _tmp95;
  const Scalar _tmp106 = _tmp105 * _views_1_pose[5];
  const Scalar _tmp107 = _tmp78 + _tmp79;
  const Scalar _tmp108 = _tmp107 * _views_1_pose[4];
  const Scalar _tmp109 = _tmp105 * _views_0_pose[5] + _tmp107 * _views_0_pose[4];
  const Scalar _tmp110 = -_priors_1_0_target_T_src[6] + _tmp103 * _views_0_pose[6] -
                         _tmp103 * _views_1_pose[6] - _tmp106 - _tmp108 + _tmp109;
  const Scalar _tmp111 = _priors_1_0_target_T_src[3] * _tmp16;
  const Scalar _tmp112 = _tmp30 - _tmp31 - _tmp32 + _tmp33;
  const Scalar _tmp113 = _priors_1_0_target_T_src[2] * _tmp112;
  const Scalar _tmp114 = _tmp24 + _tmp25 - _tmp26 - _tmp27;
  const Scalar _tmp115 = _priors_1_0_target_T_src[1] * _tmp114;
  const Scalar _tmp116 = _tmp18 - _tmp19 + _tmp20 - _tmp21;
  const Scalar _tmp117 = _priors_1_0_target_T_src[0] * _tmp116;
  const Scalar _tmp118 = -_tmp113 - _tmp115 - _tmp117;
  const Scalar _tmp119 = _tmp111 - _tmp118;
  const Scalar _tmp120 = 2 * std::min<Scalar>(0, (((_tmp119) > 0) - ((_tmp119) < 0))) + 1;
  const Scalar _tmp121 = 2 * _tmp120;
  const Scalar _tmp122 =
      -_priors_1_0_target_T_src[0] * _tmp114 + _priors_1_0_target_T_src[1] * _tmp116 -
      _priors_1_0_target_T_src[2] * _tmp16 + _priors_1_0_target_T_src[3] * _tmp112;
  const Scalar _tmp123 = std::min<Scalar>(_tmp43, std::fabs(_tmp119));
  const Scalar _tmp124 = std::acos(_tmp123) / std::sqrt(Scalar(1 - std::pow(_tmp123, Scalar(2))));
  const Scalar _tmp125 = _tmp122 * _tmp124;
  const Scalar _tmp126 = _tmp121 * _tmp125;
  const Scalar _tmp127 = _tmp121 * _tmp124;
  const Scalar _tmp128 =
      _priors_1_0_target_T_src[0] * _tmp112 - _priors_1_0_target_T_src[1] * _tmp16 -
      _priors_1_0_target_T_src[2] * _tmp116 + _priors_1_0_target_T_src[3] * _tmp114;
  const Scalar _tmp129 = _tmp128 * priors_1_0_sqrt_info(0, 1);
  const Scalar _tmp130 =
      priors_1_0_sqrt_info(0, 0) *
      (-_priors_1_0_target_T_src[0] * _tmp16 - _priors_1_0_target_T_src[1] * _tmp112 +
       _priors_1_0_target_T_src[2] * _tmp114 + _priors_1_0_target_T_src[3] * _tmp116);
  const Scalar _tmp131 = _tmp102 * priors_1_0_sqrt_info(0, 4) +
                         _tmp110 * priors_1_0_sqrt_info(0, 5) +
                         _tmp126 * priors_1_0_sqrt_info(0, 2) + _tmp127 * _tmp129 +
                         _tmp127 * _tmp130 + _tmp89 * priors_1_0_sqrt_info(0, 3);
  const Scalar _tmp132 = _tmp128 * priors_1_0_sqrt_info(1, 1);
  const Scalar _tmp133 = _tmp121 * priors_1_0_sqrt_info(1, 2);
  const Scalar _tmp134 = _tmp102 * priors_1_0_sqrt_info(1, 4) +
                         _tmp110 * priors_1_0_sqrt_info(1, 5) + _tmp125 * _tmp133 +
                         _tmp127 * _tmp132 + _tmp89 * priors_1_0_sqrt_info(1, 3);
  const Scalar _tmp135 = _tmp102 * priors_1_0_sqrt_info(2, 4) +
                         _tmp110 * priors_1_0_sqrt_info(2, 5) +
                         _tmp126 * priors_1_0_sqrt_info(2, 2) + _tmp89 * priors_1_0_sqrt_info(2, 3);
  const Scalar _tmp136 = _tmp102 * priors_1_0_sqrt_info(3, 4) +
                         _tmp110 * priors_1_0_sqrt_info(3, 5) + _tmp89 * priors_1_0_sqrt_info(3, 3);
  const Scalar _tmp137 =
      _tmp102 * priors_1_0_sqrt_info(4, 4) + _tmp110 * priors_1_0_sqrt_info(4, 5);
  const Scalar _tmp138 = Scalar(1.0) / (views_0_calibration(1, 0));
  const Scalar _tmp139 = _tmp138 * _tmp3;
  const Scalar _tmp140 = -views_0_calibration(2, 0);
  const Scalar _tmp141 = _tmp140 + matches_0_0_source_coords(0, 0);
  const Scalar _tmp142 = std::pow(views_0_calibration(0, 0), Scalar(-2));
  const Scalar _tmp143 = -views_0_calibration(3, 0);
  const Scalar _tmp144 = _tmp143 + matches_0_0_source_coords(1, 0);
  const Scalar _tmp145 = std::pow(views_0_calibration(1, 0), Scalar(-2));
  const Scalar _tmp146 = epsilon + 1;
  const Scalar _tmp147 = std::pow(Scalar(std::pow(_tmp141, Scalar(2)) * _tmp142 +
                                         std::pow(_tmp144, Scalar(2)) * _tmp145 + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp148 = _tmp144 * _tmp147;
  const Scalar _tmp149 = _views_0_pose[4] - _views_1_pose[4];
  const Scalar _tmp150 = Scalar(1.0) / (views_0_calibration(0, 0));
  const Scalar _tmp151 = _tmp150 * _tmp60;
  const Scalar _tmp152 = _tmp141 * _tmp147;
  const Scalar _tmp153 =
      _tmp139 * _tmp148 + _tmp147 * _tmp51 + _tmp149 * landmarks_0_ + _tmp151 * _tmp152;
  const Scalar _tmp154 = _tmp150 * _tmp59;
  const Scalar _tmp155 = _tmp138 * _tmp6;
  const Scalar _tmp156 = _views_0_pose[5] - _views_1_pose[5];
  const Scalar _tmp157 =
      _tmp147 * _tmp52 + _tmp148 * _tmp155 + _tmp152 * _tmp154 + _tmp156 * landmarks_0_;
  const Scalar _tmp158 = _tmp150 * _tmp61;
  const Scalar _tmp159 = _tmp10 * _tmp138;
  const Scalar _tmp160 = _views_0_pose[6] - _views_1_pose[6];
  const Scalar _tmp161 =
      _tmp147 * _tmp48 + _tmp148 * _tmp159 + _tmp152 * _tmp158 + _tmp160 * landmarks_0_;
  const Scalar _tmp162 = _tmp157 * _tmp86 + _tmp161 * _tmp81;
  const Scalar _tmp163 = _tmp153 * _tmp76 + _tmp162;
  const Scalar _tmp164 = _tmp105 * _tmp157 + _tmp107 * _tmp153;
  const Scalar _tmp165 = _tmp103 * _tmp161 + _tmp164;
  const Scalar _tmp166 = std::max<Scalar>(_tmp165, epsilon);
  const Scalar _tmp167 = Scalar(1.0) / (_tmp166);
  const Scalar _tmp168 = _tmp167 * views_1_calibration(0, 0);
  const Scalar _tmp169 =
      _tmp163 * _tmp168 - matches_0_0_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp170 = _tmp153 * _tmp99 + _tmp161 * _tmp96;
  const Scalar _tmp171 = _tmp157 * _tmp93 + _tmp170;
  const Scalar _tmp172 = _tmp167 * views_1_calibration(1, 0);
  const Scalar _tmp173 =
      _tmp171 * _tmp172 - matches_0_0_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp174 = std::pow(_tmp169, Scalar(2)) + std::pow(_tmp173, Scalar(2)) + epsilon;
  const Scalar _tmp175 = std::pow(_tmp174, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp176 = std::sqrt(matches_0_0_weight);
  const Scalar _tmp177 = std::pow(costs_reprojection_error_gnc_scale, Scalar(-2));
  const Scalar _tmp178 = Scalar(1.0) / (_tmp146 - costs_reprojection_error_gnc_mu);
  const Scalar _tmp179 = epsilon + std::fabs(_tmp178);
  const Scalar _tmp180 = _tmp177 / _tmp179;
  const Scalar _tmp181 = _tmp174 * _tmp180 + 1;
  const Scalar _tmp182 = 2 - _tmp178;
  const Scalar _tmp183 =
      _tmp182 + epsilon * (2 * std::min<Scalar>(0, (((_tmp182) > 0) - ((_tmp182) < 0))) + 1);
  const Scalar _tmp184 = (Scalar(1) / Scalar(2)) * _tmp183;
  const Scalar _tmp185 = 2 * _tmp179 / _tmp183;
  const Scalar _tmp186 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp181, _tmp184) - 1)));
  const Scalar _tmp187 = std::max<Scalar>(0, (((_tmp165) > 0) - ((_tmp165) < 0)));
  const Scalar _tmp188 = _tmp176 * _tmp186 * _tmp187;
  const Scalar _tmp189 = _tmp175 * _tmp188;
  const Scalar _tmp190 = _tmp169 * _tmp189;
  const Scalar _tmp191 = _tmp173 * _tmp189;
  const Scalar _tmp192 = _tmp140 + matches_0_1_source_coords(0, 0);
  const Scalar _tmp193 = _tmp143 + matches_0_1_source_coords(1, 0);
  const Scalar _tmp194 = std::pow(Scalar(_tmp142 * std::pow(_tmp192, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp193, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp195 = _tmp193 * _tmp194;
  const Scalar _tmp196 = _tmp192 * _tmp194;
  const Scalar _tmp197 =
      _tmp139 * _tmp195 + _tmp149 * landmarks_1_ + _tmp151 * _tmp196 + _tmp194 * _tmp51;
  const Scalar _tmp198 =
      _tmp154 * _tmp196 + _tmp155 * _tmp195 + _tmp156 * landmarks_1_ + _tmp194 * _tmp52;
  const Scalar _tmp199 =
      _tmp158 * _tmp196 + _tmp159 * _tmp195 + _tmp160 * landmarks_1_ + _tmp194 * _tmp48;
  const Scalar _tmp200 = _tmp198 * _tmp86 + _tmp199 * _tmp81;
  const Scalar _tmp201 = _tmp197 * _tmp76 + _tmp200;
  const Scalar _tmp202 = _tmp105 * _tmp198 + _tmp107 * _tmp197;
  const Scalar _tmp203 = _tmp103 * _tmp199 + _tmp202;
  const Scalar _tmp204 = std::max<Scalar>(_tmp203, epsilon);
  const Scalar _tmp205 = Scalar(1.0) / (_tmp204);
  const Scalar _tmp206 = _tmp205 * views_1_calibration(0, 0);
  const Scalar _tmp207 =
      _tmp201 * _tmp206 - matches_0_1_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp208 = _tmp197 * _tmp99 + _tmp199 * _tmp96;
  const Scalar _tmp209 = _tmp198 * _tmp93 + _tmp208;
  const Scalar _tmp210 = _tmp205 * views_1_calibration(1, 0);
  const Scalar _tmp211 =
      _tmp209 * _tmp210 - matches_0_1_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp212 = std::pow(_tmp207, Scalar(2)) + std::pow(_tmp211, Scalar(2)) + epsilon;
  const Scalar _tmp213 = std::pow(_tmp212, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp214 = _tmp180 * _tmp212 + 1;
  const Scalar _tmp215 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp214, _tmp184) - 1)));
  const Scalar _tmp216 = std::sqrt(matches_0_1_weight);
  const Scalar _tmp217 = std::max<Scalar>(0, (((_tmp203) > 0) - ((_tmp203) < 0)));
  const Scalar _tmp218 = _tmp215 * _tmp216 * _tmp217;
  const Scalar _tmp219 = _tmp213 * _tmp218;
  const Scalar _tmp220 = _tmp207 * _tmp219;
  const Scalar _tmp221 = _tmp211 * _tmp219;
  const Scalar _tmp222 = _tmp143 + matches_0_2_source_coords(1, 0);
  const Scalar _tmp223 = _tmp140 + matches_0_2_source_coords(0, 0);
  const Scalar _tmp224 = std::pow(Scalar(_tmp142 * std::pow(_tmp223, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp222, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp225 = _tmp222 * _tmp224;
  const Scalar _tmp226 = _tmp223 * _tmp224;
  const Scalar _tmp227 =
      _tmp139 * _tmp225 + _tmp149 * landmarks_2_ + _tmp151 * _tmp226 + _tmp224 * _tmp51;
  const Scalar _tmp228 =
      _tmp158 * _tmp226 + _tmp159 * _tmp225 + _tmp160 * landmarks_2_ + _tmp224 * _tmp48;
  const Scalar _tmp229 =
      _tmp154 * _tmp226 + _tmp155 * _tmp225 + _tmp156 * landmarks_2_ + _tmp224 * _tmp52;
  const Scalar _tmp230 = _tmp228 * _tmp81 + _tmp229 * _tmp86;
  const Scalar _tmp231 = _tmp227 * _tmp76 + _tmp230;
  const Scalar _tmp232 = _tmp105 * _tmp229 + _tmp107 * _tmp227;
  const Scalar _tmp233 = _tmp103 * _tmp228 + _tmp232;
  const Scalar _tmp234 = std::max<Scalar>(_tmp233, epsilon);
  const Scalar _tmp235 = Scalar(1.0) / (_tmp234);
  const Scalar _tmp236 = _tmp235 * views_1_calibration(0, 0);
  const Scalar _tmp237 =
      _tmp231 * _tmp236 - matches_0_2_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp238 = _tmp227 * _tmp99 + _tmp228 * _tmp96;
  const Scalar _tmp239 = _tmp229 * _tmp93 + _tmp238;
  const Scalar _tmp240 = _tmp235 * views_1_calibration(1, 0);
  const Scalar _tmp241 =
      _tmp239 * _tmp240 - matches_0_2_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp242 = std::pow(_tmp237, Scalar(2)) + std::pow(_tmp241, Scalar(2)) + epsilon;
  const Scalar _tmp243 = std::pow(_tmp242, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp244 = std::max<Scalar>(0, (((_tmp233) > 0) - ((_tmp233) < 0)));
  const Scalar _tmp245 = std::sqrt(matches_0_2_weight);
  const Scalar _tmp246 = _tmp180 * _tmp242 + 1;
  const Scalar _tmp247 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp246, _tmp184) - 1)));
  const Scalar _tmp248 = _tmp244 * _tmp245 * _tmp247;
  const Scalar _tmp249 = _tmp243 * _tmp248;
  const Scalar _tmp250 = _tmp237 * _tmp249;
  const Scalar _tmp251 = _tmp241 * _tmp249;
  const Scalar _tmp252 = _tmp140 + matches_0_3_source_coords(0, 0);
  const Scalar _tmp253 = _tmp143 + matches_0_3_source_coords(1, 0);
  const Scalar _tmp254 = std::pow(Scalar(_tmp142 * std::pow(_tmp252, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp253, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp255 = _tmp253 * _tmp254;
  const Scalar _tmp256 = _tmp252 * _tmp254;
  const Scalar _tmp257 =
      _tmp139 * _tmp255 + _tmp149 * landmarks_3_ + _tmp151 * _tmp256 + _tmp254 * _tmp51;
  const Scalar _tmp258 =
      _tmp154 * _tmp256 + _tmp155 * _tmp255 + _tmp156 * landmarks_3_ + _tmp254 * _tmp52;
  const Scalar _tmp259 =
      _tmp158 * _tmp256 + _tmp159 * _tmp255 + _tmp160 * landmarks_3_ + _tmp254 * _tmp48;
  const Scalar _tmp260 = _tmp258 * _tmp86 + _tmp259 * _tmp81;
  const Scalar _tmp261 = _tmp257 * _tmp76 + _tmp260;
  const Scalar _tmp262 = _tmp105 * _tmp258 + _tmp107 * _tmp257;
  const Scalar _tmp263 = _tmp103 * _tmp259 + _tmp262;
  const Scalar _tmp264 = std::max<Scalar>(_tmp263, epsilon);
  const Scalar _tmp265 = Scalar(1.0) / (_tmp264);
  const Scalar _tmp266 = _tmp265 * views_1_calibration(0, 0);
  const Scalar _tmp267 =
      _tmp261 * _tmp266 - matches_0_3_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp268 = _tmp257 * _tmp99 + _tmp259 * _tmp96;
  const Scalar _tmp269 = _tmp258 * _tmp93 + _tmp268;
  const Scalar _tmp270 = _tmp265 * views_1_calibration(1, 0);
  const Scalar _tmp271 =
      _tmp269 * _tmp270 - matches_0_3_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp272 = std::pow(_tmp267, Scalar(2)) + std::pow(_tmp271, Scalar(2)) + epsilon;
  const Scalar _tmp273 = std::pow(_tmp272, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp274 = std::sqrt(matches_0_3_weight);
  const Scalar _tmp275 = _tmp180 * _tmp272 + 1;
  const Scalar _tmp276 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp275, _tmp184) - 1)));
  const Scalar _tmp277 = std::max<Scalar>(0, (((_tmp263) > 0) - ((_tmp263) < 0)));
  const Scalar _tmp278 = _tmp274 * _tmp276 * _tmp277;
  const Scalar _tmp279 = _tmp273 * _tmp278;
  const Scalar _tmp280 = _tmp267 * _tmp279;
  const Scalar _tmp281 = _tmp271 * _tmp279;
  const Scalar _tmp282 = _tmp143 + matches_0_4_source_coords(1, 0);
  const Scalar _tmp283 = _tmp140 + matches_0_4_source_coords(0, 0);
  const Scalar _tmp284 = std::pow(Scalar(_tmp142 * std::pow(_tmp283, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp282, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp285 = _tmp282 * _tmp284;
  const Scalar _tmp286 = _tmp283 * _tmp284;
  const Scalar _tmp287 =
      _tmp139 * _tmp285 + _tmp149 * landmarks_4_ + _tmp151 * _tmp286 + _tmp284 * _tmp51;
  const Scalar _tmp288 =
      _tmp158 * _tmp286 + _tmp159 * _tmp285 + _tmp160 * landmarks_4_ + _tmp284 * _tmp48;
  const Scalar _tmp289 =
      _tmp154 * _tmp286 + _tmp155 * _tmp285 + _tmp156 * landmarks_4_ + _tmp284 * _tmp52;
  const Scalar _tmp290 = _tmp288 * _tmp81 + _tmp289 * _tmp86;
  const Scalar _tmp291 = _tmp287 * _tmp76 + _tmp290;
  const Scalar _tmp292 = _tmp105 * _tmp289 + _tmp107 * _tmp287;
  const Scalar _tmp293 = _tmp103 * _tmp288 + _tmp292;
  const Scalar _tmp294 = std::max<Scalar>(_tmp293, epsilon);
  const Scalar _tmp295 = Scalar(1.0) / (_tmp294);
  const Scalar _tmp296 = _tmp295 * views_1_calibration(0, 0);
  const Scalar _tmp297 =
      _tmp291 * _tmp296 - matches_0_4_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp298 = _tmp287 * _tmp99 + _tmp288 * _tmp96;
  const Scalar _tmp299 = _tmp289 * _tmp93 + _tmp298;
  const Scalar _tmp300 = _tmp295 * views_1_calibration(1, 0);
  const Scalar _tmp301 =
      _tmp299 * _tmp300 - matches_0_4_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp302 = std::pow(_tmp297, Scalar(2)) + std::pow(_tmp301, Scalar(2)) + epsilon;
  const Scalar _tmp303 = std::pow(_tmp302, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp304 = std::sqrt(matches_0_4_weight);
  const Scalar _tmp305 = std::max<Scalar>(0, (((_tmp293) > 0) - ((_tmp293) < 0)));
  const Scalar _tmp306 = _tmp180 * _tmp302 + 1;
  const Scalar _tmp307 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp306, _tmp184) - 1)));
  const Scalar _tmp308 = _tmp304 * _tmp305 * _tmp307;
  const Scalar _tmp309 = _tmp303 * _tmp308;
  const Scalar _tmp310 = _tmp297 * _tmp309;
  const Scalar _tmp311 = _tmp301 * _tmp309;
  const Scalar _tmp312 = _tmp143 + matches_0_5_source_coords(1, 0);
  const Scalar _tmp313 = _tmp140 + matches_0_5_source_coords(0, 0);
  const Scalar _tmp314 = std::pow(Scalar(_tmp142 * std::pow(_tmp313, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp312, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp315 = _tmp312 * _tmp314;
  const Scalar _tmp316 = _tmp313 * _tmp314;
  const Scalar _tmp317 =
      _tmp139 * _tmp315 + _tmp149 * landmarks_5_ + _tmp151 * _tmp316 + _tmp314 * _tmp51;
  const Scalar _tmp318 =
      _tmp154 * _tmp316 + _tmp155 * _tmp315 + _tmp156 * landmarks_5_ + _tmp314 * _tmp52;
  const Scalar _tmp319 =
      _tmp158 * _tmp316 + _tmp159 * _tmp315 + _tmp160 * landmarks_5_ + _tmp314 * _tmp48;
  const Scalar _tmp320 = _tmp318 * _tmp86 + _tmp319 * _tmp81;
  const Scalar _tmp321 = _tmp317 * _tmp76 + _tmp320;
  const Scalar _tmp322 = _tmp105 * _tmp318 + _tmp107 * _tmp317;
  const Scalar _tmp323 = _tmp103 * _tmp319 + _tmp322;
  const Scalar _tmp324 = std::max<Scalar>(_tmp323, epsilon);
  const Scalar _tmp325 = Scalar(1.0) / (_tmp324);
  const Scalar _tmp326 = _tmp325 * views_1_calibration(0, 0);
  const Scalar _tmp327 =
      _tmp321 * _tmp326 - matches_0_5_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp328 = _tmp317 * _tmp99 + _tmp319 * _tmp96;
  const Scalar _tmp329 = _tmp318 * _tmp93 + _tmp328;
  const Scalar _tmp330 = _tmp325 * views_1_calibration(1, 0);
  const Scalar _tmp331 =
      _tmp329 * _tmp330 - matches_0_5_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp332 = std::pow(_tmp327, Scalar(2)) + std::pow(_tmp331, Scalar(2)) + epsilon;
  const Scalar _tmp333 = std::pow(_tmp332, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp334 = std::sqrt(matches_0_5_weight);
  const Scalar _tmp335 = std::max<Scalar>(0, (((_tmp323) > 0) - ((_tmp323) < 0)));
  const Scalar _tmp336 = _tmp180 * _tmp332 + 1;
  const Scalar _tmp337 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp336, _tmp184) - 1)));
  const Scalar _tmp338 = _tmp334 * _tmp335 * _tmp337;
  const Scalar _tmp339 = _tmp333 * _tmp338;
  const Scalar _tmp340 = _tmp327 * _tmp339;
  const Scalar _tmp341 = _tmp331 * _tmp339;
  const Scalar _tmp342 = _tmp140 + matches_0_6_source_coords(0, 0);
  const Scalar _tmp343 = _tmp143 + matches_0_6_source_coords(1, 0);
  const Scalar _tmp344 = std::pow(Scalar(_tmp142 * std::pow(_tmp342, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp343, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp345 = _tmp343 * _tmp344;
  const Scalar _tmp346 = _tmp342 * _tmp344;
  const Scalar _tmp347 =
      _tmp139 * _tmp345 + _tmp149 * landmarks_6_ + _tmp151 * _tmp346 + _tmp344 * _tmp51;
  const Scalar _tmp348 =
      _tmp154 * _tmp346 + _tmp155 * _tmp345 + _tmp156 * landmarks_6_ + _tmp344 * _tmp52;
  const Scalar _tmp349 =
      _tmp158 * _tmp346 + _tmp159 * _tmp345 + _tmp160 * landmarks_6_ + _tmp344 * _tmp48;
  const Scalar _tmp350 = _tmp348 * _tmp86 + _tmp349 * _tmp81;
  const Scalar _tmp351 = _tmp347 * _tmp76 + _tmp350;
  const Scalar _tmp352 = _tmp105 * _tmp348 + _tmp107 * _tmp347;
  const Scalar _tmp353 = _tmp103 * _tmp349 + _tmp352;
  const Scalar _tmp354 = std::max<Scalar>(_tmp353, epsilon);
  const Scalar _tmp355 = Scalar(1.0) / (_tmp354);
  const Scalar _tmp356 = _tmp355 * views_1_calibration(0, 0);
  const Scalar _tmp357 =
      _tmp351 * _tmp356 - matches_0_6_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp358 = _tmp347 * _tmp99 + _tmp349 * _tmp96;
  const Scalar _tmp359 = _tmp348 * _tmp93 + _tmp358;
  const Scalar _tmp360 = _tmp355 * views_1_calibration(1, 0);
  const Scalar _tmp361 =
      _tmp359 * _tmp360 - matches_0_6_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp362 = std::pow(_tmp357, Scalar(2)) + std::pow(_tmp361, Scalar(2)) + epsilon;
  const Scalar _tmp363 = std::pow(_tmp362, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp364 = std::sqrt(matches_0_6_weight);
  const Scalar _tmp365 = std::max<Scalar>(0, (((_tmp353) > 0) - ((_tmp353) < 0)));
  const Scalar _tmp366 = _tmp180 * _tmp362 + 1;
  const Scalar _tmp367 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp366, _tmp184) - 1)));
  const Scalar _tmp368 = _tmp364 * _tmp365 * _tmp367;
  const Scalar _tmp369 = _tmp363 * _tmp368;
  const Scalar _tmp370 = _tmp357 * _tmp369;
  const Scalar _tmp371 = _tmp361 * _tmp369;
  const Scalar _tmp372 = _tmp143 + matches_0_7_source_coords(1, 0);
  const Scalar _tmp373 = _tmp140 + matches_0_7_source_coords(0, 0);
  const Scalar _tmp374 = std::pow(Scalar(_tmp142 * std::pow(_tmp373, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp372, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp375 = _tmp372 * _tmp374;
  const Scalar _tmp376 = _tmp373 * _tmp374;
  const Scalar _tmp377 =
      _tmp139 * _tmp375 + _tmp149 * landmarks_7_ + _tmp151 * _tmp376 + _tmp374 * _tmp51;
  const Scalar _tmp378 =
      _tmp154 * _tmp376 + _tmp155 * _tmp375 + _tmp156 * landmarks_7_ + _tmp374 * _tmp52;
  const Scalar _tmp379 =
      _tmp158 * _tmp376 + _tmp159 * _tmp375 + _tmp160 * landmarks_7_ + _tmp374 * _tmp48;
  const Scalar _tmp380 = _tmp378 * _tmp86 + _tmp379 * _tmp81;
  const Scalar _tmp381 = _tmp377 * _tmp76 + _tmp380;
  const Scalar _tmp382 = _tmp105 * _tmp378 + _tmp107 * _tmp377;
  const Scalar _tmp383 = _tmp103 * _tmp379 + _tmp382;
  const Scalar _tmp384 = std::max<Scalar>(_tmp383, epsilon);
  const Scalar _tmp385 = Scalar(1.0) / (_tmp384);
  const Scalar _tmp386 = _tmp385 * views_1_calibration(0, 0);
  const Scalar _tmp387 =
      _tmp381 * _tmp386 - matches_0_7_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp388 = _tmp377 * _tmp99 + _tmp379 * _tmp96;
  const Scalar _tmp389 = _tmp378 * _tmp93 + _tmp388;
  const Scalar _tmp390 = _tmp385 * views_1_calibration(1, 0);
  const Scalar _tmp391 =
      _tmp389 * _tmp390 - matches_0_7_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp392 = std::pow(_tmp387, Scalar(2)) + std::pow(_tmp391, Scalar(2)) + epsilon;
  const Scalar _tmp393 = std::pow(_tmp392, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp394 = std::sqrt(matches_0_7_weight);
  const Scalar _tmp395 = std::max<Scalar>(0, (((_tmp383) > 0) - ((_tmp383) < 0)));
  const Scalar _tmp396 = _tmp180 * _tmp392 + 1;
  const Scalar _tmp397 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp396, _tmp184) - 1)));
  const Scalar _tmp398 = _tmp394 * _tmp395 * _tmp397;
  const Scalar _tmp399 = _tmp393 * _tmp398;
  const Scalar _tmp400 = _tmp387 * _tmp399;
  const Scalar _tmp401 = _tmp391 * _tmp399;
  const Scalar _tmp402 = _tmp143 + matches_0_8_source_coords(1, 0);
  const Scalar _tmp403 = _tmp140 + matches_0_8_source_coords(0, 0);
  const Scalar _tmp404 = std::pow(Scalar(_tmp142 * std::pow(_tmp403, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp402, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp405 = _tmp402 * _tmp404;
  const Scalar _tmp406 = _tmp403 * _tmp404;
  const Scalar _tmp407 =
      _tmp139 * _tmp405 + _tmp149 * landmarks_8_ + _tmp151 * _tmp406 + _tmp404 * _tmp51;
  const Scalar _tmp408 =
      _tmp154 * _tmp406 + _tmp155 * _tmp405 + _tmp156 * landmarks_8_ + _tmp404 * _tmp52;
  const Scalar _tmp409 =
      _tmp158 * _tmp406 + _tmp159 * _tmp405 + _tmp160 * landmarks_8_ + _tmp404 * _tmp48;
  const Scalar _tmp410 = _tmp408 * _tmp86 + _tmp409 * _tmp81;
  const Scalar _tmp411 = _tmp407 * _tmp76 + _tmp410;
  const Scalar _tmp412 = _tmp105 * _tmp408 + _tmp107 * _tmp407;
  const Scalar _tmp413 = _tmp103 * _tmp409 + _tmp412;
  const Scalar _tmp414 = std::max<Scalar>(_tmp413, epsilon);
  const Scalar _tmp415 = Scalar(1.0) / (_tmp414);
  const Scalar _tmp416 = _tmp415 * views_1_calibration(0, 0);
  const Scalar _tmp417 =
      _tmp411 * _tmp416 - matches_0_8_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp418 = _tmp407 * _tmp99 + _tmp409 * _tmp96;
  const Scalar _tmp419 = _tmp408 * _tmp93 + _tmp418;
  const Scalar _tmp420 = _tmp415 * views_1_calibration(1, 0);
  const Scalar _tmp421 =
      _tmp419 * _tmp420 - matches_0_8_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp422 = std::pow(_tmp417, Scalar(2)) + std::pow(_tmp421, Scalar(2)) + epsilon;
  const Scalar _tmp423 = std::pow(_tmp422, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp424 = std::sqrt(matches_0_8_weight);
  const Scalar _tmp425 = _tmp180 * _tmp422 + 1;
  const Scalar _tmp426 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp425, _tmp184) - 1)));
  const Scalar _tmp427 = std::max<Scalar>(0, (((_tmp413) > 0) - ((_tmp413) < 0)));
  const Scalar _tmp428 = _tmp424 * _tmp426 * _tmp427;
  const Scalar _tmp429 = _tmp423 * _tmp428;
  const Scalar _tmp430 = _tmp417 * _tmp429;
  const Scalar _tmp431 = _tmp421 * _tmp429;
  const Scalar _tmp432 = _tmp143 + matches_0_9_source_coords(1, 0);
  const Scalar _tmp433 = _tmp140 + matches_0_9_source_coords(0, 0);
  const Scalar _tmp434 = std::pow(Scalar(_tmp142 * std::pow(_tmp433, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp432, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp435 = _tmp432 * _tmp434;
  const Scalar _tmp436 = _tmp433 * _tmp434;
  const Scalar _tmp437 =
      _tmp139 * _tmp435 + _tmp149 * landmarks_9_ + _tmp151 * _tmp436 + _tmp434 * _tmp51;
  const Scalar _tmp438 =
      _tmp154 * _tmp436 + _tmp155 * _tmp435 + _tmp156 * landmarks_9_ + _tmp434 * _tmp52;
  const Scalar _tmp439 =
      _tmp158 * _tmp436 + _tmp159 * _tmp435 + _tmp160 * landmarks_9_ + _tmp434 * _tmp48;
  const Scalar _tmp440 = _tmp438 * _tmp86 + _tmp439 * _tmp81;
  const Scalar _tmp441 = _tmp437 * _tmp76 + _tmp440;
  const Scalar _tmp442 = _tmp105 * _tmp438 + _tmp107 * _tmp437;
  const Scalar _tmp443 = _tmp103 * _tmp439 + _tmp442;
  const Scalar _tmp444 = std::max<Scalar>(_tmp443, epsilon);
  const Scalar _tmp445 = Scalar(1.0) / (_tmp444);
  const Scalar _tmp446 = _tmp445 * views_1_calibration(0, 0);
  const Scalar _tmp447 =
      _tmp441 * _tmp446 - matches_0_9_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp448 = _tmp437 * _tmp99 + _tmp439 * _tmp96;
  const Scalar _tmp449 = _tmp438 * _tmp93 + _tmp448;
  const Scalar _tmp450 = _tmp445 * views_1_calibration(1, 0);
  const Scalar _tmp451 =
      _tmp449 * _tmp450 - matches_0_9_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp452 = std::pow(_tmp447, Scalar(2)) + std::pow(_tmp451, Scalar(2)) + epsilon;
  const Scalar _tmp453 = std::pow(_tmp452, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp454 = std::sqrt(matches_0_9_weight);
  const Scalar _tmp455 = std::max<Scalar>(0, (((_tmp443) > 0) - ((_tmp443) < 0)));
  const Scalar _tmp456 = _tmp180 * _tmp452 + 1;
  const Scalar _tmp457 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp456, _tmp184) - 1)));
  const Scalar _tmp458 = _tmp454 * _tmp455 * _tmp457;
  const Scalar _tmp459 = _tmp453 * _tmp458;
  const Scalar _tmp460 = _tmp447 * _tmp459;
  const Scalar _tmp461 = _tmp451 * _tmp459;
  const Scalar _tmp462 = _tmp143 + matches_0_10_source_coords(1, 0);
  const Scalar _tmp463 = _tmp140 + matches_0_10_source_coords(0, 0);
  const Scalar _tmp464 = std::pow(Scalar(_tmp142 * std::pow(_tmp463, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp462, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp465 = _tmp462 * _tmp464;
  const Scalar _tmp466 = _tmp463 * _tmp464;
  const Scalar _tmp467 =
      _tmp139 * _tmp465 + _tmp149 * landmarks_10_ + _tmp151 * _tmp466 + _tmp464 * _tmp51;
  const Scalar _tmp468 =
      _tmp158 * _tmp466 + _tmp159 * _tmp465 + _tmp160 * landmarks_10_ + _tmp464 * _tmp48;
  const Scalar _tmp469 =
      _tmp154 * _tmp466 + _tmp155 * _tmp465 + _tmp156 * landmarks_10_ + _tmp464 * _tmp52;
  const Scalar _tmp470 = _tmp468 * _tmp81 + _tmp469 * _tmp86;
  const Scalar _tmp471 = _tmp467 * _tmp76 + _tmp470;
  const Scalar _tmp472 = _tmp105 * _tmp469 + _tmp107 * _tmp467;
  const Scalar _tmp473 = _tmp103 * _tmp468 + _tmp472;
  const Scalar _tmp474 = std::max<Scalar>(_tmp473, epsilon);
  const Scalar _tmp475 = Scalar(1.0) / (_tmp474);
  const Scalar _tmp476 = _tmp475 * views_1_calibration(0, 0);
  const Scalar _tmp477 =
      _tmp471 * _tmp476 - matches_0_10_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp478 = _tmp467 * _tmp99 + _tmp468 * _tmp96;
  const Scalar _tmp479 = _tmp469 * _tmp93 + _tmp478;
  const Scalar _tmp480 = _tmp475 * views_1_calibration(1, 0);
  const Scalar _tmp481 =
      _tmp479 * _tmp480 - matches_0_10_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp482 = std::pow(_tmp477, Scalar(2)) + std::pow(_tmp481, Scalar(2)) + epsilon;
  const Scalar _tmp483 = std::pow(_tmp482, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp484 = std::sqrt(matches_0_10_weight);
  const Scalar _tmp485 = _tmp180 * _tmp482 + 1;
  const Scalar _tmp486 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp485, _tmp184) - 1)));
  const Scalar _tmp487 = std::max<Scalar>(0, (((_tmp473) > 0) - ((_tmp473) < 0)));
  const Scalar _tmp488 = _tmp484 * _tmp486 * _tmp487;
  const Scalar _tmp489 = _tmp483 * _tmp488;
  const Scalar _tmp490 = _tmp477 * _tmp489;
  const Scalar _tmp491 = _tmp481 * _tmp489;
  const Scalar _tmp492 = _tmp143 + matches_0_11_source_coords(1, 0);
  const Scalar _tmp493 = _tmp140 + matches_0_11_source_coords(0, 0);
  const Scalar _tmp494 = std::pow(Scalar(_tmp142 * std::pow(_tmp493, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp492, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp495 = _tmp492 * _tmp494;
  const Scalar _tmp496 = _tmp493 * _tmp494;
  const Scalar _tmp497 =
      _tmp139 * _tmp495 + _tmp149 * landmarks_11_ + _tmp151 * _tmp496 + _tmp494 * _tmp51;
  const Scalar _tmp498 =
      _tmp154 * _tmp496 + _tmp155 * _tmp495 + _tmp156 * landmarks_11_ + _tmp494 * _tmp52;
  const Scalar _tmp499 =
      _tmp158 * _tmp496 + _tmp159 * _tmp495 + _tmp160 * landmarks_11_ + _tmp48 * _tmp494;
  const Scalar _tmp500 = _tmp498 * _tmp86 + _tmp499 * _tmp81;
  const Scalar _tmp501 = _tmp497 * _tmp76 + _tmp500;
  const Scalar _tmp502 = _tmp105 * _tmp498 + _tmp107 * _tmp497;
  const Scalar _tmp503 = _tmp103 * _tmp499 + _tmp502;
  const Scalar _tmp504 = std::max<Scalar>(_tmp503, epsilon);
  const Scalar _tmp505 = Scalar(1.0) / (_tmp504);
  const Scalar _tmp506 = _tmp505 * views_1_calibration(0, 0);
  const Scalar _tmp507 =
      _tmp501 * _tmp506 - matches_0_11_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp508 = _tmp497 * _tmp99 + _tmp499 * _tmp96;
  const Scalar _tmp509 = _tmp498 * _tmp93 + _tmp508;
  const Scalar _tmp510 = _tmp505 * views_1_calibration(1, 0);
  const Scalar _tmp511 =
      _tmp509 * _tmp510 - matches_0_11_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp512 = std::pow(_tmp507, Scalar(2)) + std::pow(_tmp511, Scalar(2)) + epsilon;
  const Scalar _tmp513 = std::pow(_tmp512, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp514 = _tmp180 * _tmp512 + 1;
  const Scalar _tmp515 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp514, _tmp184) - 1)));
  const Scalar _tmp516 = std::sqrt(matches_0_11_weight);
  const Scalar _tmp517 = std::max<Scalar>(0, (((_tmp503) > 0) - ((_tmp503) < 0)));
  const Scalar _tmp518 = _tmp515 * _tmp516 * _tmp517;
  const Scalar _tmp519 = _tmp513 * _tmp518;
  const Scalar _tmp520 = _tmp507 * _tmp519;
  const Scalar _tmp521 = _tmp511 * _tmp519;
  const Scalar _tmp522 = _tmp143 + matches_0_12_source_coords(1, 0);
  const Scalar _tmp523 = _tmp140 + matches_0_12_source_coords(0, 0);
  const Scalar _tmp524 = std::pow(Scalar(_tmp142 * std::pow(_tmp523, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp522, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp525 = _tmp522 * _tmp524;
  const Scalar _tmp526 = _tmp523 * _tmp524;
  const Scalar _tmp527 =
      _tmp139 * _tmp525 + _tmp149 * landmarks_12_ + _tmp151 * _tmp526 + _tmp51 * _tmp524;
  const Scalar _tmp528 =
      _tmp158 * _tmp526 + _tmp159 * _tmp525 + _tmp160 * landmarks_12_ + _tmp48 * _tmp524;
  const Scalar _tmp529 =
      _tmp154 * _tmp526 + _tmp155 * _tmp525 + _tmp156 * landmarks_12_ + _tmp52 * _tmp524;
  const Scalar _tmp530 = _tmp528 * _tmp81 + _tmp529 * _tmp86;
  const Scalar _tmp531 = _tmp527 * _tmp76 + _tmp530;
  const Scalar _tmp532 = _tmp105 * _tmp529 + _tmp107 * _tmp527;
  const Scalar _tmp533 = _tmp103 * _tmp528 + _tmp532;
  const Scalar _tmp534 = std::max<Scalar>(_tmp533, epsilon);
  const Scalar _tmp535 = Scalar(1.0) / (_tmp534);
  const Scalar _tmp536 = _tmp535 * views_1_calibration(0, 0);
  const Scalar _tmp537 =
      _tmp531 * _tmp536 - matches_0_12_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp538 = _tmp527 * _tmp99 + _tmp528 * _tmp96;
  const Scalar _tmp539 = _tmp529 * _tmp93 + _tmp538;
  const Scalar _tmp540 = _tmp535 * views_1_calibration(1, 0);
  const Scalar _tmp541 =
      _tmp539 * _tmp540 - matches_0_12_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp542 = std::pow(_tmp537, Scalar(2)) + std::pow(_tmp541, Scalar(2)) + epsilon;
  const Scalar _tmp543 = std::pow(_tmp542, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp544 = _tmp180 * _tmp542 + 1;
  const Scalar _tmp545 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp544, _tmp184) - 1)));
  const Scalar _tmp546 = std::sqrt(matches_0_12_weight);
  const Scalar _tmp547 = std::max<Scalar>(0, (((_tmp533) > 0) - ((_tmp533) < 0)));
  const Scalar _tmp548 = _tmp545 * _tmp546 * _tmp547;
  const Scalar _tmp549 = _tmp543 * _tmp548;
  const Scalar _tmp550 = _tmp537 * _tmp549;
  const Scalar _tmp551 = _tmp541 * _tmp549;
  const Scalar _tmp552 = _tmp143 + matches_0_13_source_coords(1, 0);
  const Scalar _tmp553 = _tmp140 + matches_0_13_source_coords(0, 0);
  const Scalar _tmp554 = std::pow(Scalar(_tmp142 * std::pow(_tmp553, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp552, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp555 = _tmp552 * _tmp554;
  const Scalar _tmp556 = _tmp553 * _tmp554;
  const Scalar _tmp557 =
      _tmp139 * _tmp555 + _tmp149 * landmarks_13_ + _tmp151 * _tmp556 + _tmp51 * _tmp554;
  const Scalar _tmp558 =
      _tmp154 * _tmp556 + _tmp155 * _tmp555 + _tmp156 * landmarks_13_ + _tmp52 * _tmp554;
  const Scalar _tmp559 =
      _tmp158 * _tmp556 + _tmp159 * _tmp555 + _tmp160 * landmarks_13_ + _tmp48 * _tmp554;
  const Scalar _tmp560 = _tmp558 * _tmp86 + _tmp559 * _tmp81;
  const Scalar _tmp561 = _tmp557 * _tmp76 + _tmp560;
  const Scalar _tmp562 = _tmp105 * _tmp558 + _tmp107 * _tmp557;
  const Scalar _tmp563 = _tmp103 * _tmp559 + _tmp562;
  const Scalar _tmp564 = std::max<Scalar>(_tmp563, epsilon);
  const Scalar _tmp565 = Scalar(1.0) / (_tmp564);
  const Scalar _tmp566 = _tmp565 * views_1_calibration(0, 0);
  const Scalar _tmp567 =
      _tmp561 * _tmp566 - matches_0_13_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp568 = _tmp557 * _tmp99 + _tmp559 * _tmp96;
  const Scalar _tmp569 = _tmp558 * _tmp93 + _tmp568;
  const Scalar _tmp570 = _tmp565 * views_1_calibration(1, 0);
  const Scalar _tmp571 =
      _tmp569 * _tmp570 - matches_0_13_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp572 = std::pow(_tmp567, Scalar(2)) + std::pow(_tmp571, Scalar(2)) + epsilon;
  const Scalar _tmp573 = std::pow(_tmp572, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp574 = _tmp180 * _tmp572 + 1;
  const Scalar _tmp575 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp574, _tmp184) - 1)));
  const Scalar _tmp576 = std::sqrt(matches_0_13_weight);
  const Scalar _tmp577 = std::max<Scalar>(0, (((_tmp563) > 0) - ((_tmp563) < 0)));
  const Scalar _tmp578 = _tmp575 * _tmp576 * _tmp577;
  const Scalar _tmp579 = _tmp573 * _tmp578;
  const Scalar _tmp580 = _tmp567 * _tmp579;
  const Scalar _tmp581 = _tmp571 * _tmp579;
  const Scalar _tmp582 = _tmp143 + matches_0_14_source_coords(1, 0);
  const Scalar _tmp583 = _tmp140 + matches_0_14_source_coords(0, 0);
  const Scalar _tmp584 = std::pow(Scalar(_tmp142 * std::pow(_tmp583, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp582, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp585 = _tmp582 * _tmp584;
  const Scalar _tmp586 = _tmp583 * _tmp584;
  const Scalar _tmp587 =
      _tmp139 * _tmp585 + _tmp149 * landmarks_14_ + _tmp151 * _tmp586 + _tmp51 * _tmp584;
  const Scalar _tmp588 =
      _tmp154 * _tmp586 + _tmp155 * _tmp585 + _tmp156 * landmarks_14_ + _tmp52 * _tmp584;
  const Scalar _tmp589 =
      _tmp158 * _tmp586 + _tmp159 * _tmp585 + _tmp160 * landmarks_14_ + _tmp48 * _tmp584;
  const Scalar _tmp590 = _tmp588 * _tmp86 + _tmp589 * _tmp81;
  const Scalar _tmp591 = _tmp587 * _tmp76 + _tmp590;
  const Scalar _tmp592 = _tmp105 * _tmp588 + _tmp107 * _tmp587;
  const Scalar _tmp593 = _tmp103 * _tmp589 + _tmp592;
  const Scalar _tmp594 = std::max<Scalar>(_tmp593, epsilon);
  const Scalar _tmp595 = Scalar(1.0) / (_tmp594);
  const Scalar _tmp596 = _tmp595 * views_1_calibration(0, 0);
  const Scalar _tmp597 =
      _tmp591 * _tmp596 - matches_0_14_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp598 = _tmp587 * _tmp99 + _tmp589 * _tmp96;
  const Scalar _tmp599 = _tmp588 * _tmp93 + _tmp598;
  const Scalar _tmp600 = _tmp595 * views_1_calibration(1, 0);
  const Scalar _tmp601 =
      _tmp599 * _tmp600 - matches_0_14_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp602 = std::pow(_tmp597, Scalar(2)) + std::pow(_tmp601, Scalar(2)) + epsilon;
  const Scalar _tmp603 = std::pow(_tmp602, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp604 = std::sqrt(matches_0_14_weight);
  const Scalar _tmp605 = _tmp180 * _tmp602 + 1;
  const Scalar _tmp606 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp605, _tmp184) - 1)));
  const Scalar _tmp607 = std::max<Scalar>(0, (((_tmp593) > 0) - ((_tmp593) < 0)));
  const Scalar _tmp608 = _tmp604 * _tmp606 * _tmp607;
  const Scalar _tmp609 = _tmp603 * _tmp608;
  const Scalar _tmp610 = _tmp597 * _tmp609;
  const Scalar _tmp611 = _tmp601 * _tmp609;
  const Scalar _tmp612 = _tmp143 + matches_0_15_source_coords(1, 0);
  const Scalar _tmp613 = _tmp140 + matches_0_15_source_coords(0, 0);
  const Scalar _tmp614 = std::pow(Scalar(_tmp142 * std::pow(_tmp613, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp612, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp615 = _tmp612 * _tmp614;
  const Scalar _tmp616 = _tmp613 * _tmp614;
  const Scalar _tmp617 =
      _tmp139 * _tmp615 + _tmp149 * landmarks_15_ + _tmp151 * _tmp616 + _tmp51 * _tmp614;
  const Scalar _tmp618 =
      _tmp158 * _tmp616 + _tmp159 * _tmp615 + _tmp160 * landmarks_15_ + _tmp48 * _tmp614;
  const Scalar _tmp619 =
      _tmp154 * _tmp616 + _tmp155 * _tmp615 + _tmp156 * landmarks_15_ + _tmp52 * _tmp614;
  const Scalar _tmp620 = _tmp618 * _tmp81 + _tmp619 * _tmp86;
  const Scalar _tmp621 = _tmp617 * _tmp76 + _tmp620;
  const Scalar _tmp622 = _tmp105 * _tmp619 + _tmp107 * _tmp617;
  const Scalar _tmp623 = _tmp103 * _tmp618 + _tmp622;
  const Scalar _tmp624 = std::max<Scalar>(_tmp623, epsilon);
  const Scalar _tmp625 = Scalar(1.0) / (_tmp624);
  const Scalar _tmp626 = _tmp625 * views_1_calibration(0, 0);
  const Scalar _tmp627 =
      _tmp621 * _tmp626 - matches_0_15_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp628 = _tmp617 * _tmp99 + _tmp618 * _tmp96;
  const Scalar _tmp629 = _tmp619 * _tmp93 + _tmp628;
  const Scalar _tmp630 = _tmp625 * views_1_calibration(1, 0);
  const Scalar _tmp631 =
      _tmp629 * _tmp630 - matches_0_15_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp632 = std::pow(_tmp627, Scalar(2)) + std::pow(_tmp631, Scalar(2)) + epsilon;
  const Scalar _tmp633 = std::pow(_tmp632, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp634 = _tmp180 * _tmp632 + 1;
  const Scalar _tmp635 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp634, _tmp184) - 1)));
  const Scalar _tmp636 = std::sqrt(matches_0_15_weight);
  const Scalar _tmp637 = std::max<Scalar>(0, (((_tmp623) > 0) - ((_tmp623) < 0)));
  const Scalar _tmp638 = _tmp635 * _tmp636 * _tmp637;
  const Scalar _tmp639 = _tmp633 * _tmp638;
  const Scalar _tmp640 = _tmp627 * _tmp639;
  const Scalar _tmp641 = _tmp631 * _tmp639;
  const Scalar _tmp642 = _tmp143 + matches_0_16_source_coords(1, 0);
  const Scalar _tmp643 = _tmp140 + matches_0_16_source_coords(0, 0);
  const Scalar _tmp644 = std::pow(Scalar(_tmp142 * std::pow(_tmp643, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp642, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp645 = _tmp642 * _tmp644;
  const Scalar _tmp646 = _tmp643 * _tmp644;
  const Scalar _tmp647 =
      _tmp139 * _tmp645 + _tmp149 * landmarks_16_ + _tmp151 * _tmp646 + _tmp51 * _tmp644;
  const Scalar _tmp648 =
      _tmp154 * _tmp646 + _tmp155 * _tmp645 + _tmp156 * landmarks_16_ + _tmp52 * _tmp644;
  const Scalar _tmp649 =
      _tmp158 * _tmp646 + _tmp159 * _tmp645 + _tmp160 * landmarks_16_ + _tmp48 * _tmp644;
  const Scalar _tmp650 = _tmp648 * _tmp86 + _tmp649 * _tmp81;
  const Scalar _tmp651 = _tmp647 * _tmp76 + _tmp650;
  const Scalar _tmp652 = _tmp105 * _tmp648 + _tmp107 * _tmp647;
  const Scalar _tmp653 = _tmp103 * _tmp649 + _tmp652;
  const Scalar _tmp654 = std::max<Scalar>(_tmp653, epsilon);
  const Scalar _tmp655 = Scalar(1.0) / (_tmp654);
  const Scalar _tmp656 = _tmp655 * views_1_calibration(0, 0);
  const Scalar _tmp657 =
      _tmp651 * _tmp656 - matches_0_16_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp658 = _tmp647 * _tmp99 + _tmp649 * _tmp96;
  const Scalar _tmp659 = _tmp648 * _tmp93 + _tmp658;
  const Scalar _tmp660 = _tmp655 * views_1_calibration(1, 0);
  const Scalar _tmp661 =
      _tmp659 * _tmp660 - matches_0_16_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp662 = std::pow(_tmp657, Scalar(2)) + std::pow(_tmp661, Scalar(2)) + epsilon;
  const Scalar _tmp663 = std::pow(_tmp662, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp664 = std::sqrt(matches_0_16_weight);
  const Scalar _tmp665 = std::max<Scalar>(0, (((_tmp653) > 0) - ((_tmp653) < 0)));
  const Scalar _tmp666 = _tmp180 * _tmp662 + 1;
  const Scalar _tmp667 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp666, _tmp184) - 1)));
  const Scalar _tmp668 = _tmp664 * _tmp665 * _tmp667;
  const Scalar _tmp669 = _tmp663 * _tmp668;
  const Scalar _tmp670 = _tmp657 * _tmp669;
  const Scalar _tmp671 = _tmp661 * _tmp669;
  const Scalar _tmp672 = _tmp143 + matches_0_17_source_coords(1, 0);
  const Scalar _tmp673 = _tmp140 + matches_0_17_source_coords(0, 0);
  const Scalar _tmp674 = std::pow(Scalar(_tmp142 * std::pow(_tmp673, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp672, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp675 = _tmp672 * _tmp674;
  const Scalar _tmp676 = _tmp673 * _tmp674;
  const Scalar _tmp677 =
      _tmp139 * _tmp675 + _tmp149 * landmarks_17_ + _tmp151 * _tmp676 + _tmp51 * _tmp674;
  const Scalar _tmp678 =
      _tmp154 * _tmp676 + _tmp155 * _tmp675 + _tmp156 * landmarks_17_ + _tmp52 * _tmp674;
  const Scalar _tmp679 =
      _tmp158 * _tmp676 + _tmp159 * _tmp675 + _tmp160 * landmarks_17_ + _tmp48 * _tmp674;
  const Scalar _tmp680 = _tmp678 * _tmp86 + _tmp679 * _tmp81;
  const Scalar _tmp681 = _tmp677 * _tmp76 + _tmp680;
  const Scalar _tmp682 = _tmp105 * _tmp678 + _tmp107 * _tmp677;
  const Scalar _tmp683 = _tmp103 * _tmp679 + _tmp682;
  const Scalar _tmp684 = std::max<Scalar>(_tmp683, epsilon);
  const Scalar _tmp685 = Scalar(1.0) / (_tmp684);
  const Scalar _tmp686 = _tmp685 * views_1_calibration(0, 0);
  const Scalar _tmp687 =
      _tmp681 * _tmp686 - matches_0_17_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp688 = _tmp677 * _tmp99 + _tmp679 * _tmp96;
  const Scalar _tmp689 = _tmp678 * _tmp93 + _tmp688;
  const Scalar _tmp690 = _tmp685 * views_1_calibration(1, 0);
  const Scalar _tmp691 =
      _tmp689 * _tmp690 - matches_0_17_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp692 = std::pow(_tmp687, Scalar(2)) + std::pow(_tmp691, Scalar(2)) + epsilon;
  const Scalar _tmp693 = std::pow(_tmp692, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp694 = std::sqrt(matches_0_17_weight);
  const Scalar _tmp695 = std::max<Scalar>(0, (((_tmp683) > 0) - ((_tmp683) < 0)));
  const Scalar _tmp696 = _tmp180 * _tmp692 + 1;
  const Scalar _tmp697 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp696, _tmp184) - 1)));
  const Scalar _tmp698 = _tmp694 * _tmp695 * _tmp697;
  const Scalar _tmp699 = _tmp693 * _tmp698;
  const Scalar _tmp700 = _tmp687 * _tmp699;
  const Scalar _tmp701 = _tmp691 * _tmp699;
  const Scalar _tmp702 = _tmp143 + matches_0_18_source_coords(1, 0);
  const Scalar _tmp703 = _tmp140 + matches_0_18_source_coords(0, 0);
  const Scalar _tmp704 = std::pow(Scalar(_tmp142 * std::pow(_tmp703, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp702, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp705 = _tmp702 * _tmp704;
  const Scalar _tmp706 = _tmp703 * _tmp704;
  const Scalar _tmp707 =
      _tmp139 * _tmp705 + _tmp149 * landmarks_18_ + _tmp151 * _tmp706 + _tmp51 * _tmp704;
  const Scalar _tmp708 =
      _tmp158 * _tmp706 + _tmp159 * _tmp705 + _tmp160 * landmarks_18_ + _tmp48 * _tmp704;
  const Scalar _tmp709 =
      _tmp154 * _tmp706 + _tmp155 * _tmp705 + _tmp156 * landmarks_18_ + _tmp52 * _tmp704;
  const Scalar _tmp710 = _tmp708 * _tmp81 + _tmp709 * _tmp86;
  const Scalar _tmp711 = _tmp707 * _tmp76 + _tmp710;
  const Scalar _tmp712 = _tmp105 * _tmp709 + _tmp107 * _tmp707;
  const Scalar _tmp713 = _tmp103 * _tmp708 + _tmp712;
  const Scalar _tmp714 = std::max<Scalar>(_tmp713, epsilon);
  const Scalar _tmp715 = Scalar(1.0) / (_tmp714);
  const Scalar _tmp716 = _tmp715 * views_1_calibration(0, 0);
  const Scalar _tmp717 =
      _tmp711 * _tmp716 - matches_0_18_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp718 = _tmp707 * _tmp99 + _tmp708 * _tmp96;
  const Scalar _tmp719 = _tmp709 * _tmp93 + _tmp718;
  const Scalar _tmp720 = _tmp715 * views_1_calibration(1, 0);
  const Scalar _tmp721 =
      _tmp719 * _tmp720 - matches_0_18_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp722 = std::pow(_tmp717, Scalar(2)) + std::pow(_tmp721, Scalar(2)) + epsilon;
  const Scalar _tmp723 = std::pow(_tmp722, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp724 = std::max<Scalar>(0, (((_tmp713) > 0) - ((_tmp713) < 0)));
  const Scalar _tmp725 = std::sqrt(matches_0_18_weight);
  const Scalar _tmp726 = _tmp180 * _tmp722 + 1;
  const Scalar _tmp727 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp726, _tmp184) - 1)));
  const Scalar _tmp728 = _tmp724 * _tmp725 * _tmp727;
  const Scalar _tmp729 = _tmp723 * _tmp728;
  const Scalar _tmp730 = _tmp717 * _tmp729;
  const Scalar _tmp731 = _tmp721 * _tmp729;
  const Scalar _tmp732 = _tmp143 + matches_0_19_source_coords(1, 0);
  const Scalar _tmp733 = _tmp140 + matches_0_19_source_coords(0, 0);
  const Scalar _tmp734 = std::pow(Scalar(_tmp142 * std::pow(_tmp733, Scalar(2)) +
                                         _tmp145 * std::pow(_tmp732, Scalar(2)) + _tmp146),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp735 = _tmp732 * _tmp734;
  const Scalar _tmp736 = _tmp733 * _tmp734;
  const Scalar _tmp737 =
      _tmp139 * _tmp735 + _tmp149 * landmarks_19_ + _tmp151 * _tmp736 + _tmp51 * _tmp734;
  const Scalar _tmp738 =
      _tmp158 * _tmp736 + _tmp159 * _tmp735 + _tmp160 * landmarks_19_ + _tmp48 * _tmp734;
  const Scalar _tmp739 =
      _tmp154 * _tmp736 + _tmp155 * _tmp735 + _tmp156 * landmarks_19_ + _tmp52 * _tmp734;
  const Scalar _tmp740 = _tmp738 * _tmp81 + _tmp739 * _tmp86;
  const Scalar _tmp741 = _tmp737 * _tmp76 + _tmp740;
  const Scalar _tmp742 = _tmp105 * _tmp739 + _tmp107 * _tmp737;
  const Scalar _tmp743 = _tmp103 * _tmp738 + _tmp742;
  const Scalar _tmp744 = std::max<Scalar>(_tmp743, epsilon);
  const Scalar _tmp745 = Scalar(1.0) / (_tmp744);
  const Scalar _tmp746 = _tmp745 * views_1_calibration(0, 0);
  const Scalar _tmp747 =
      _tmp741 * _tmp746 - matches_0_19_target_coords(0, 0) + views_1_calibration(2, 0);
  const Scalar _tmp748 = _tmp737 * _tmp99 + _tmp738 * _tmp96;
  const Scalar _tmp749 = _tmp739 * _tmp93 + _tmp748;
  const Scalar _tmp750 = _tmp745 * views_1_calibration(1, 0);
  const Scalar _tmp751 =
      _tmp749 * _tmp750 - matches_0_19_target_coords(1, 0) + views_1_calibration(3, 0);
  const Scalar _tmp752 = std::pow(_tmp747, Scalar(2)) + std::pow(_tmp751, Scalar(2)) + epsilon;
  const Scalar _tmp753 = std::pow(_tmp752, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp754 = std::sqrt(matches_0_19_weight);
  const Scalar _tmp755 = std::max<Scalar>(0, (((_tmp743) > 0) - ((_tmp743) < 0)));
  const Scalar _tmp756 = _tmp180 * _tmp752 + 1;
  const Scalar _tmp757 = std::sqrt(Scalar(_tmp185 * (std::pow(_tmp756, _tmp184) - 1)));
  const Scalar _tmp758 = _tmp754 * _tmp755 * _tmp757;
  const Scalar _tmp759 = _tmp753 * _tmp758;
  const Scalar _tmp760 = _tmp747 * _tmp759;
  const Scalar _tmp761 = _tmp751 * _tmp759;
  const Scalar _tmp762 = landmarks_0_ - matches_0_0_inverse_range_prior;
  const Scalar _tmp763 = epsilon + matches_0_0_inverse_range_prior_sigma;
  const Scalar _tmp764 = matches_0_0_weight / _tmp763;
  const Scalar _tmp765 = landmarks_1_ - matches_0_1_inverse_range_prior;
  const Scalar _tmp766 = epsilon + matches_0_1_inverse_range_prior_sigma;
  const Scalar _tmp767 = matches_0_1_weight / _tmp766;
  const Scalar _tmp768 = landmarks_2_ - matches_0_2_inverse_range_prior;
  const Scalar _tmp769 = epsilon + matches_0_2_inverse_range_prior_sigma;
  const Scalar _tmp770 = matches_0_2_weight / _tmp769;
  const Scalar _tmp771 = landmarks_3_ - matches_0_3_inverse_range_prior;
  const Scalar _tmp772 = epsilon + matches_0_3_inverse_range_prior_sigma;
  const Scalar _tmp773 = matches_0_3_weight / _tmp772;
  const Scalar _tmp774 = landmarks_4_ - matches_0_4_inverse_range_prior;
  const Scalar _tmp775 = epsilon + matches_0_4_inverse_range_prior_sigma;
  const Scalar _tmp776 = matches_0_4_weight / _tmp775;
  const Scalar _tmp777 = landmarks_5_ - matches_0_5_inverse_range_prior;
  const Scalar _tmp778 = epsilon + matches_0_5_inverse_range_prior_sigma;
  const Scalar _tmp779 = matches_0_5_weight / _tmp778;
  const Scalar _tmp780 = landmarks_6_ - matches_0_6_inverse_range_prior;
  const Scalar _tmp781 = epsilon + matches_0_6_inverse_range_prior_sigma;
  const Scalar _tmp782 = matches_0_6_weight / _tmp781;
  const Scalar _tmp783 = landmarks_7_ - matches_0_7_inverse_range_prior;
  const Scalar _tmp784 = epsilon + matches_0_7_inverse_range_prior_sigma;
  const Scalar _tmp785 = matches_0_7_weight / _tmp784;
  const Scalar _tmp786 = landmarks_8_ - matches_0_8_inverse_range_prior;
  const Scalar _tmp787 = epsilon + matches_0_8_inverse_range_prior_sigma;
  const Scalar _tmp788 = matches_0_8_weight / _tmp787;
  const Scalar _tmp789 = landmarks_9_ - matches_0_9_inverse_range_prior;
  const Scalar _tmp790 = epsilon + matches_0_9_inverse_range_prior_sigma;
  const Scalar _tmp791 = matches_0_9_weight / _tmp790;
  const Scalar _tmp792 = landmarks_10_ - matches_0_10_inverse_range_prior;
  const Scalar _tmp793 = epsilon + matches_0_10_inverse_range_prior_sigma;
  const Scalar _tmp794 = matches_0_10_weight / _tmp793;
  const Scalar _tmp795 = landmarks_11_ - matches_0_11_inverse_range_prior;
  const Scalar _tmp796 = epsilon + matches_0_11_inverse_range_prior_sigma;
  const Scalar _tmp797 = matches_0_11_weight / _tmp796;
  const Scalar _tmp798 = landmarks_12_ - matches_0_12_inverse_range_prior;
  const Scalar _tmp799 = epsilon + matches_0_12_inverse_range_prior_sigma;
  const Scalar _tmp800 = matches_0_12_weight / _tmp799;
  const Scalar _tmp801 = landmarks_13_ - matches_0_13_inverse_range_prior;
  const Scalar _tmp802 = epsilon + matches_0_13_inverse_range_prior_sigma;
  const Scalar _tmp803 = matches_0_13_weight / _tmp802;
  const Scalar _tmp804 = landmarks_14_ - matches_0_14_inverse_range_prior;
  const Scalar _tmp805 = epsilon + matches_0_14_inverse_range_prior_sigma;
  const Scalar _tmp806 = matches_0_14_weight / _tmp805;
  const Scalar _tmp807 = landmarks_15_ - matches_0_15_inverse_range_prior;
  const Scalar _tmp808 = epsilon + matches_0_15_inverse_range_prior_sigma;
  const Scalar _tmp809 = matches_0_15_weight / _tmp808;
  const Scalar _tmp810 = landmarks_16_ - matches_0_16_inverse_range_prior;
  const Scalar _tmp811 = epsilon + matches_0_16_inverse_range_prior_sigma;
  const Scalar _tmp812 = matches_0_16_weight / _tmp811;
  const Scalar _tmp813 = landmarks_17_ - matches_0_17_inverse_range_prior;
  const Scalar _tmp814 = epsilon + matches_0_17_inverse_range_prior_sigma;
  const Scalar _tmp815 = matches_0_17_weight / _tmp814;
  const Scalar _tmp816 = landmarks_18_ - matches_0_18_inverse_range_prior;
  const Scalar _tmp817 = epsilon + matches_0_18_inverse_range_prior_sigma;
  const Scalar _tmp818 = matches_0_18_weight / _tmp817;
  const Scalar _tmp819 = landmarks_19_ - matches_0_19_inverse_range_prior;
  const Scalar _tmp820 = epsilon + matches_0_19_inverse_range_prior_sigma;
  const Scalar _tmp821 = matches_0_19_weight / _tmp820;
  const Scalar _tmp822 = -_tmp73;
  const Scalar _tmp823 = _tmp70 + _tmp822;
  const Scalar _tmp824 = -_tmp90;
  const Scalar _tmp825 = std::pow(_views_1_pose[3], Scalar(2));
  const Scalar _tmp826 = _tmp824 + _tmp825;
  const Scalar _tmp827 = _tmp823 + _tmp826;
  const Scalar _tmp828 = -_tmp84;
  const Scalar _tmp829 = _tmp828 + _tmp85;
  const Scalar _tmp830 = -_tmp825;
  const Scalar _tmp831 = _tmp830 + _tmp90;
  const Scalar _tmp832 = _tmp823 + _tmp831;
  const Scalar _tmp833 = -_tmp95;
  const Scalar _tmp834 = _tmp104 + _tmp833;
  const Scalar _tmp835 = _tmp587 * _tmp829 + _tmp588 * _tmp832 + _tmp589 * _tmp834;
  const Scalar _tmp836 = (Scalar(1) / Scalar(2)) * views_1_calibration(1, 0);
  const Scalar _tmp837 =
      ((((_tmp42 + _tmp593) > 0) - ((_tmp42 + _tmp593) < 0)) + 1) / std::pow(_tmp594, Scalar(2));
  const Scalar _tmp838 = _tmp599 * _tmp837;
  const Scalar _tmp839 = _tmp836 * _tmp838;
  const Scalar _tmp840 = _tmp600 * (_tmp589 * _tmp827 + _tmp592) - _tmp835 * _tmp839;
  const Scalar _tmp841 = _tmp591 * _tmp837;
  const Scalar _tmp842 = 2 * _tmp601;
  const Scalar _tmp843 =
      -_tmp597 * _tmp835 * _tmp841 * views_1_calibration(0, 0) + _tmp840 * _tmp842;
  const Scalar _tmp844 = _tmp608 / (_tmp602 * std::sqrt(_tmp602));
  const Scalar _tmp845 = (Scalar(1) / Scalar(2)) * _tmp844;
  const Scalar _tmp846 = _tmp601 * _tmp845;
  const Scalar _tmp847 = (Scalar(1) / Scalar(2)) * _tmp177;
  const Scalar _tmp848 = _tmp184 - 1;
  const Scalar _tmp849 = _tmp603 * _tmp604 * std::pow(_tmp605, _tmp848) * _tmp607 / _tmp606;
  const Scalar _tmp850 = _tmp847 * _tmp849;
  const Scalar _tmp851 = _tmp601 * _tmp850;
  const Scalar _tmp852 = _tmp609 * _tmp840 - _tmp843 * _tmp846 + _tmp843 * _tmp851;
  const Scalar _tmp853 = _tmp497 * _tmp829 + _tmp498 * _tmp832 + _tmp499 * _tmp834;
  const Scalar _tmp854 =
      ((((_tmp42 + _tmp503) > 0) - ((_tmp42 + _tmp503) < 0)) + 1) / std::pow(_tmp504, Scalar(2));
  const Scalar _tmp855 = _tmp501 * _tmp854;
  const Scalar _tmp856 = _tmp509 * _tmp854;
  const Scalar _tmp857 = _tmp836 * _tmp856;
  const Scalar _tmp858 = _tmp510 * (_tmp499 * _tmp827 + _tmp502) - _tmp853 * _tmp857;
  const Scalar _tmp859 = 2 * _tmp511;
  const Scalar _tmp860 =
      -_tmp507 * _tmp853 * _tmp855 * views_1_calibration(0, 0) + _tmp858 * _tmp859;
  const Scalar _tmp861 = (Scalar(1) / Scalar(2)) * _tmp507;
  const Scalar _tmp862 = _tmp518 / (_tmp512 * std::sqrt(_tmp512));
  const Scalar _tmp863 = _tmp861 * _tmp862;
  const Scalar _tmp864 =
      _tmp177 * _tmp513 * std::pow(_tmp514, _tmp848) * _tmp516 * _tmp517 / _tmp515;
  const Scalar _tmp865 = _tmp861 * _tmp864;
  const Scalar _tmp866 = (Scalar(1) / Scalar(2)) * views_1_calibration(0, 0);
  const Scalar _tmp867 = _tmp855 * _tmp866;
  const Scalar _tmp868 = -_tmp519 * _tmp853 * _tmp867 - _tmp860 * _tmp863 + _tmp860 * _tmp865;
  const Scalar _tmp869 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp870 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp871 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp872 = (Scalar(1) / Scalar(2)) * _tmp14;
  const Scalar _tmp873 = -_tmp869 - _tmp870 - _tmp871 - _tmp872;
  const Scalar _tmp874 = _priors_1_0_target_T_src[2] * _tmp873;
  const Scalar _tmp875 = -_tmp874;
  const Scalar _tmp876 = (Scalar(1) / Scalar(2)) * _tmp24;
  const Scalar _tmp877 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp878 = (Scalar(1) / Scalar(2)) * _tmp26;
  const Scalar _tmp879 = (Scalar(1) / Scalar(2)) * _tmp27;
  const Scalar _tmp880 = -_tmp876 - _tmp877 + _tmp878 + _tmp879;
  const Scalar _tmp881 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp882 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp883 = (Scalar(1) / Scalar(2)) * _tmp20;
  const Scalar _tmp884 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp885 = _tmp881 - _tmp882 + _tmp883 - _tmp884;
  const Scalar _tmp886 = -_priors_1_0_target_T_src[1] * _tmp885;
  const Scalar _tmp887 = (Scalar(1) / Scalar(2)) * _tmp30;
  const Scalar _tmp888 = (Scalar(1) / Scalar(2)) * _tmp31;
  const Scalar _tmp889 = (Scalar(1) / Scalar(2)) * _tmp32;
  const Scalar _tmp890 = (Scalar(1) / Scalar(2)) * _tmp33;
  const Scalar _tmp891 = _tmp887 - _tmp888 - _tmp889 + _tmp890;
  const Scalar _tmp892 = _priors_1_0_target_T_src[3] * _tmp891;
  const Scalar _tmp893 = std::fabs(_tmp111 + _tmp113 + _tmp115 + _tmp117);
  const Scalar _tmp894 = std::min<Scalar>(_tmp43, _tmp893);
  const Scalar _tmp895 = std::acos(_tmp894);
  const Scalar _tmp896 = 1 - std::pow(_tmp894, Scalar(2));
  const Scalar _tmp897 = _tmp895 / std::sqrt(_tmp896);
  const Scalar _tmp898 = _tmp121 * _tmp897;
  const Scalar _tmp899 =
      _tmp898 * (_priors_1_0_target_T_src[0] * _tmp880 + _tmp875 + _tmp886 + _tmp892);
  const Scalar _tmp900 = _priors_1_0_target_T_src[1] * _tmp873;
  const Scalar _tmp901 = -_priors_1_0_target_T_src[2] * _tmp885;
  const Scalar _tmp902 = -_priors_1_0_target_T_src[0] * _tmp891;
  const Scalar _tmp903 = _priors_1_0_target_T_src[3] * _tmp880 + _tmp900 + _tmp901 + _tmp902;
  const Scalar _tmp904 = _tmp133 * _tmp897;
  const Scalar _tmp905 =
      -_tmp106 - _tmp108 + _tmp109 + _tmp827 * _views_0_pose[6] - _tmp827 * _views_1_pose[6];
  const Scalar _tmp906 = _tmp829 * _views_0_pose[4] - _tmp829 * _views_1_pose[4] +
                         _tmp832 * _views_0_pose[5] - _tmp832 * _views_1_pose[5] +
                         _tmp834 * _views_0_pose[6] - _tmp834 * _views_1_pose[6];
  const Scalar _tmp907 = _priors_1_0_target_T_src[0] * _tmp873;
  const Scalar _tmp908 = -_tmp907;
  const Scalar _tmp909 = _priors_1_0_target_T_src[3] * _tmp885;
  const Scalar _tmp910 = -_priors_1_0_target_T_src[1] * _tmp891;
  const Scalar _tmp911 = -_priors_1_0_target_T_src[2] * _tmp880 + _tmp908 - _tmp909 + _tmp910;
  const Scalar _tmp912 = _tmp120 * ((((_tmp43 - _tmp893) > 0) - ((_tmp43 - _tmp893) < 0)) + 1) *
                         (((-_tmp111 + _tmp118) > 0) - ((-_tmp111 + _tmp118) < 0));
  const Scalar _tmp913 = _tmp894 * _tmp895 * _tmp912 / (_tmp896 * std::sqrt(_tmp896));
  const Scalar _tmp914 = _tmp911 * _tmp913;
  const Scalar _tmp915 = _tmp122 * priors_1_0_sqrt_info(1, 2);
  const Scalar _tmp916 = _tmp912 / _tmp896;
  const Scalar _tmp917 = _tmp911 * _tmp916;
  const Scalar _tmp918 =
      _tmp132 * _tmp914 - _tmp132 * _tmp917 + _tmp899 * priors_1_0_sqrt_info(1, 1) +
      _tmp903 * _tmp904 + _tmp905 * priors_1_0_sqrt_info(1, 4) +
      _tmp906 * priors_1_0_sqrt_info(1, 5) + _tmp914 * _tmp915 - _tmp915 * _tmp917;
  const Scalar _tmp919 = (Scalar(1) / Scalar(2)) * _tmp511;
  const Scalar _tmp920 = _tmp862 * _tmp919;
  const Scalar _tmp921 = _tmp864 * _tmp919;
  const Scalar _tmp922 = _tmp519 * _tmp858 - _tmp860 * _tmp920 + _tmp860 * _tmp921;
  const Scalar _tmp923 = _tmp557 * _tmp829 + _tmp558 * _tmp832 + _tmp559 * _tmp834;
  const Scalar _tmp924 =
      ((((_tmp42 + _tmp563) > 0) - ((_tmp42 + _tmp563) < 0)) + 1) / std::pow(_tmp564, Scalar(2));
  const Scalar _tmp925 = _tmp561 * _tmp924;
  const Scalar _tmp926 = _tmp569 * _tmp924;
  const Scalar _tmp927 = _tmp836 * _tmp926;
  const Scalar _tmp928 = _tmp570 * (_tmp559 * _tmp827 + _tmp562) - _tmp923 * _tmp927;
  const Scalar _tmp929 = 2 * _tmp571;
  const Scalar _tmp930 =
      -_tmp567 * _tmp923 * _tmp925 * views_1_calibration(0, 0) + _tmp928 * _tmp929;
  const Scalar _tmp931 = _tmp578 / (_tmp572 * std::sqrt(_tmp572));
  const Scalar _tmp932 = (Scalar(1) / Scalar(2)) * _tmp931;
  const Scalar _tmp933 = _tmp930 * _tmp932;
  const Scalar _tmp934 = _tmp573 * std::pow(_tmp574, _tmp848) * _tmp576 * _tmp577 / _tmp575;
  const Scalar _tmp935 = _tmp847 * _tmp934;
  const Scalar _tmp936 = _tmp571 * _tmp935;
  const Scalar _tmp937 = -_tmp571 * _tmp933 + _tmp579 * _tmp928 + _tmp930 * _tmp936;
  const Scalar _tmp938 = _tmp197 * _tmp829 + _tmp198 * _tmp832 + _tmp199 * _tmp834;
  const Scalar _tmp939 =
      ((((_tmp203 + _tmp42) > 0) - ((_tmp203 + _tmp42) < 0)) + 1) / std::pow(_tmp204, Scalar(2));
  const Scalar _tmp940 = _tmp201 * _tmp939;
  const Scalar _tmp941 = _tmp209 * _tmp939;
  const Scalar _tmp942 = _tmp836 * _tmp941;
  const Scalar _tmp943 = _tmp210 * (_tmp199 * _tmp827 + _tmp202) - _tmp938 * _tmp942;
  const Scalar _tmp944 = 2 * _tmp211;
  const Scalar _tmp945 =
      -_tmp207 * _tmp938 * _tmp940 * views_1_calibration(0, 0) + _tmp943 * _tmp944;
  const Scalar _tmp946 = _tmp218 / (_tmp212 * std::sqrt(_tmp212));
  const Scalar _tmp947 = (Scalar(1) / Scalar(2)) * _tmp211;
  const Scalar _tmp948 = _tmp946 * _tmp947;
  const Scalar _tmp949 =
      _tmp177 * _tmp213 * std::pow(_tmp214, _tmp848) * _tmp216 * _tmp217 / _tmp215;
  const Scalar _tmp950 = _tmp947 * _tmp949;
  const Scalar _tmp951 = _tmp219 * _tmp943 - _tmp945 * _tmp948 + _tmp945 * _tmp950;
  const Scalar _tmp952 = _tmp467 * _tmp829 + _tmp468 * _tmp834 + _tmp469 * _tmp832;
  const Scalar _tmp953 =
      ((((_tmp42 + _tmp473) > 0) - ((_tmp42 + _tmp473) < 0)) + 1) / std::pow(_tmp474, Scalar(2));
  const Scalar _tmp954 = _tmp471 * _tmp953;
  const Scalar _tmp955 = _tmp952 * _tmp954;
  const Scalar _tmp956 = _tmp479 * _tmp953;
  const Scalar _tmp957 = _tmp836 * _tmp956;
  const Scalar _tmp958 = _tmp480 * (_tmp468 * _tmp827 + _tmp472) - _tmp952 * _tmp957;
  const Scalar _tmp959 = 2 * _tmp481;
  const Scalar _tmp960 = -_tmp477 * _tmp955 * views_1_calibration(0, 0) + _tmp958 * _tmp959;
  const Scalar _tmp961 = (Scalar(1) / Scalar(2)) * _tmp481;
  const Scalar _tmp962 =
      _tmp177 * _tmp483 * _tmp484 * std::pow(_tmp485, _tmp848) * _tmp487 / _tmp486;
  const Scalar _tmp963 = _tmp961 * _tmp962;
  const Scalar _tmp964 = _tmp488 / (_tmp482 * std::sqrt(_tmp482));
  const Scalar _tmp965 = _tmp961 * _tmp964;
  const Scalar _tmp966 = _tmp489 * _tmp958 + _tmp960 * _tmp963 - _tmp960 * _tmp965;
  const Scalar _tmp967 =
      _tmp905 * priors_1_0_sqrt_info(4, 4) + _tmp906 * priors_1_0_sqrt_info(4, 5);
  const Scalar _tmp968 =
      ((((_tmp353 + _tmp42) > 0) - ((_tmp353 + _tmp42) < 0)) + 1) / std::pow(_tmp354, Scalar(2));
  const Scalar _tmp969 = _tmp968 * (_tmp347 * _tmp829 + _tmp348 * _tmp832 + _tmp349 * _tmp834);
  const Scalar _tmp970 = _tmp359 * _tmp836;
  const Scalar _tmp971 = _tmp360 * (_tmp349 * _tmp827 + _tmp352) - _tmp969 * _tmp970;
  const Scalar _tmp972 = 2 * _tmp361;
  const Scalar _tmp973 = _tmp351 * _tmp969;
  const Scalar _tmp974 = -_tmp357 * _tmp973 * views_1_calibration(0, 0) + _tmp971 * _tmp972;
  const Scalar _tmp975 = _tmp368 / (_tmp362 * std::sqrt(_tmp362));
  const Scalar _tmp976 = _tmp974 * _tmp975;
  const Scalar _tmp977 = (Scalar(1) / Scalar(2)) * _tmp357;
  const Scalar _tmp978 =
      _tmp177 * _tmp363 * _tmp364 * _tmp365 * std::pow(_tmp366, _tmp848) / _tmp367;
  const Scalar _tmp979 = _tmp977 * _tmp978;
  const Scalar _tmp980 = -_tmp369 * _tmp866 * _tmp973 + _tmp974 * _tmp979 - _tmp976 * _tmp977;
  const Scalar _tmp981 = _tmp527 * _tmp829 + _tmp528 * _tmp834 + _tmp529 * _tmp832;
  const Scalar _tmp982 =
      ((((_tmp42 + _tmp533) > 0) - ((_tmp42 + _tmp533) < 0)) + 1) / std::pow(_tmp534, Scalar(2));
  const Scalar _tmp983 = _tmp531 * _tmp982;
  const Scalar _tmp984 = _tmp539 * _tmp982;
  const Scalar _tmp985 = _tmp836 * _tmp984;
  const Scalar _tmp986 = _tmp540 * (_tmp528 * _tmp827 + _tmp532) - _tmp981 * _tmp985;
  const Scalar _tmp987 = 2 * _tmp541;
  const Scalar _tmp988 =
      -_tmp537 * _tmp981 * _tmp983 * views_1_calibration(0, 0) + _tmp986 * _tmp987;
  const Scalar _tmp989 = (Scalar(1) / Scalar(2)) * _tmp537;
  const Scalar _tmp990 = _tmp548 / (_tmp542 * std::sqrt(_tmp542));
  const Scalar _tmp991 = _tmp989 * _tmp990;
  const Scalar _tmp992 = _tmp866 * _tmp983;
  const Scalar _tmp993 =
      _tmp177 * _tmp543 * std::pow(_tmp544, _tmp848) * _tmp546 * _tmp547 / _tmp545;
  const Scalar _tmp994 = _tmp989 * _tmp993;
  const Scalar _tmp995 = -_tmp549 * _tmp981 * _tmp992 - _tmp988 * _tmp991 + _tmp988 * _tmp994;
  const Scalar _tmp996 = _priors_0_1_target_T_src[3] * _tmp885;
  const Scalar _tmp997 = -_tmp887 + _tmp888 + _tmp889 - _tmp890;
  const Scalar _tmp998 = _tmp869 + _tmp870 + _tmp871 + _tmp872;
  const Scalar _tmp999 = _priors_0_1_target_T_src[0] * _tmp998;
  const Scalar _tmp1000 = _tmp876 + _tmp877 - _tmp878 - _tmp879;
  const Scalar _tmp1001 = -_priors_0_1_target_T_src[2] * _tmp1000 - _tmp999;
  const Scalar _tmp1002 = -_priors_0_1_target_T_src[1] * _tmp997 + _tmp1001 - _tmp996;
  const Scalar _tmp1003 = std::fabs(_tmp17 + _tmp23 + _tmp29 + _tmp35);
  const Scalar _tmp1004 = std::min<Scalar>(_tmp1003, _tmp43);
  const Scalar _tmp1005 = std::acos(_tmp1004);
  const Scalar _tmp1006 = 1 - std::pow(_tmp1004, Scalar(2));
  const Scalar _tmp1007 = _tmp38 * ((((-_tmp1003 + _tmp43) > 0) - ((-_tmp1003 + _tmp43) < 0)) + 1) *
                          (((-_tmp17 + _tmp36) > 0) - ((-_tmp17 + _tmp36) < 0));
  const Scalar _tmp1008 = _tmp1004 * _tmp1005 * _tmp1007 / (_tmp1006 * std::sqrt(_tmp1006));
  const Scalar _tmp1009 = _tmp1002 * _tmp1008;
  const Scalar _tmp1010 = _tmp1009 * _tmp56;
  const Scalar _tmp1011 = _priors_0_1_target_T_src[0] * _tmp1000;
  const Scalar _tmp1012 = _priors_0_1_target_T_src[2] * _tmp998;
  const Scalar _tmp1013 = -_priors_0_1_target_T_src[1] * _tmp885 - _tmp1012;
  const Scalar _tmp1014 = _tmp1005 / std::sqrt(_tmp1006);
  const Scalar _tmp1015 = _tmp1014 * (_priors_0_1_target_T_src[3] * _tmp997 + _tmp1011 + _tmp1013);
  const Scalar _tmp1016 = _tmp1007 / _tmp1006;
  const Scalar _tmp1017 = _tmp1002 * _tmp1016;
  const Scalar _tmp1018 = _tmp1017 * _tmp56;
  const Scalar _tmp1019 = _tmp1009 * _tmp41;
  const Scalar _tmp1020 = _priors_0_1_target_T_src[1] * _tmp998;
  const Scalar _tmp1021 = _priors_0_1_target_T_src[3] * _tmp1000;
  const Scalar _tmp1022 = _priors_0_1_target_T_src[2] * _tmp885;
  const Scalar _tmp1023 =
      _tmp1014 * (-_priors_0_1_target_T_src[0] * _tmp997 + _tmp1020 + _tmp1021 - _tmp1022);
  const Scalar _tmp1024 = _tmp1023 * _tmp39;
  const Scalar _tmp1025 = _tmp1016 * _tmp41;
  const Scalar _tmp1026 = _tmp1002 * _tmp1025;
  const Scalar _tmp1027 =
      _tmp1010 * priors_0_1_sqrt_info(1, 2) + _tmp1015 * _tmp64 -
      _tmp1018 * priors_0_1_sqrt_info(1, 2) + _tmp1019 * priors_0_1_sqrt_info(1, 1) +
      _tmp1024 * priors_0_1_sqrt_info(1, 2) - _tmp1026 * priors_0_1_sqrt_info(1, 1);
  const Scalar _tmp1028 = _tmp257 * _tmp829 + _tmp258 * _tmp832 + _tmp259 * _tmp834;
  const Scalar _tmp1029 =
      ((((_tmp263 + _tmp42) > 0) - ((_tmp263 + _tmp42) < 0)) + 1) / std::pow(_tmp264, Scalar(2));
  const Scalar _tmp1030 = _tmp1029 * _tmp261;
  const Scalar _tmp1031 = _tmp1029 * _tmp269;
  const Scalar _tmp1032 = _tmp1031 * _tmp836;
  const Scalar _tmp1033 = -_tmp1028 * _tmp1032 + _tmp270 * (_tmp259 * _tmp827 + _tmp262);
  const Scalar _tmp1034 = 2 * _tmp271;
  const Scalar _tmp1035 =
      -_tmp1028 * _tmp1030 * _tmp267 * views_1_calibration(0, 0) + _tmp1033 * _tmp1034;
  const Scalar _tmp1036 = (Scalar(1) / Scalar(2)) * _tmp267;
  const Scalar _tmp1037 =
      _tmp177 * _tmp273 * _tmp274 * std::pow(_tmp275, _tmp848) * _tmp277 / _tmp276;
  const Scalar _tmp1038 = _tmp1036 * _tmp1037;
  const Scalar _tmp1039 = _tmp1030 * _tmp866;
  const Scalar _tmp1040 = _tmp278 / (_tmp272 * std::sqrt(_tmp272));
  const Scalar _tmp1041 = _tmp1036 * _tmp1040;
  const Scalar _tmp1042 =
      -_tmp1028 * _tmp1039 * _tmp279 + _tmp1035 * _tmp1038 - _tmp1035 * _tmp1041;
  const Scalar _tmp1043 = _tmp317 * _tmp829 + _tmp318 * _tmp832 + _tmp319 * _tmp834;
  const Scalar _tmp1044 =
      ((((_tmp323 + _tmp42) > 0) - ((_tmp323 + _tmp42) < 0)) + 1) / std::pow(_tmp324, Scalar(2));
  const Scalar _tmp1045 = _tmp1044 * _tmp329;
  const Scalar _tmp1046 = _tmp1045 * _tmp836;
  const Scalar _tmp1047 = -_tmp1043 * _tmp1046 + _tmp330 * (_tmp319 * _tmp827 + _tmp322);
  const Scalar _tmp1048 = 2 * _tmp331;
  const Scalar _tmp1049 = _tmp1044 * _tmp321;
  const Scalar _tmp1050 = _tmp1049 * views_1_calibration(0, 0);
  const Scalar _tmp1051 = _tmp1043 * _tmp1050;
  const Scalar _tmp1052 = _tmp1047 * _tmp1048 - _tmp1051 * _tmp327;
  const Scalar _tmp1053 = (Scalar(1) / Scalar(2)) * _tmp327;
  const Scalar _tmp1054 = _tmp338 / (_tmp332 * std::sqrt(_tmp332));
  const Scalar _tmp1055 = _tmp1053 * _tmp1054;
  const Scalar _tmp1056 =
      _tmp177 * _tmp333 * _tmp334 * _tmp335 * std::pow(_tmp336, _tmp848) / _tmp337;
  const Scalar _tmp1057 = _tmp1053 * _tmp1056;
  const Scalar _tmp1058 =
      -Scalar(1) / Scalar(2) * _tmp1051 * _tmp339 - _tmp1052 * _tmp1055 + _tmp1052 * _tmp1057;
  const Scalar _tmp1059 =
      ((((_tmp42 + _tmp683) > 0) - ((_tmp42 + _tmp683) < 0)) + 1) / std::pow(_tmp684, Scalar(2));
  const Scalar _tmp1060 = _tmp1059 * (_tmp677 * _tmp829 + _tmp678 * _tmp832 + _tmp679 * _tmp834);
  const Scalar _tmp1061 = -_tmp1060 * _tmp689 * _tmp836 + _tmp690 * (_tmp679 * _tmp827 + _tmp682);
  const Scalar _tmp1062 = 2 * _tmp691;
  const Scalar _tmp1063 = _tmp681 * views_1_calibration(0, 0);
  const Scalar _tmp1064 = _tmp1060 * _tmp1063;
  const Scalar _tmp1065 = _tmp1061 * _tmp1062 - _tmp1064 * _tmp687;
  const Scalar _tmp1066 = (Scalar(1) / Scalar(2)) * _tmp687;
  const Scalar _tmp1067 =
      _tmp177 * _tmp693 * _tmp694 * _tmp695 * std::pow(_tmp696, _tmp848) / _tmp697;
  const Scalar _tmp1068 = _tmp1066 * _tmp1067;
  const Scalar _tmp1069 = _tmp698 / (_tmp692 * std::sqrt(_tmp692));
  const Scalar _tmp1070 = _tmp1066 * _tmp1069;
  const Scalar _tmp1071 =
      -Scalar(1) / Scalar(2) * _tmp1064 * _tmp699 + _tmp1065 * _tmp1068 - _tmp1065 * _tmp1070;
  const Scalar _tmp1072 =
      ((((_tmp42 + _tmp743) > 0) - ((_tmp42 + _tmp743) < 0)) + 1) / std::pow(_tmp744, Scalar(2));
  const Scalar _tmp1073 = _tmp1072 * (_tmp737 * _tmp829 + _tmp738 * _tmp834 + _tmp739 * _tmp832);
  const Scalar _tmp1074 = _tmp749 * _tmp836;
  const Scalar _tmp1075 = -_tmp1073 * _tmp1074 + _tmp750 * (_tmp738 * _tmp827 + _tmp742);
  const Scalar _tmp1076 = 2 * _tmp751;
  const Scalar _tmp1077 = _tmp1073 * _tmp741;
  const Scalar _tmp1078 = _tmp1075 * _tmp1076 - _tmp1077 * _tmp747 * views_1_calibration(0, 0);
  const Scalar _tmp1079 = (Scalar(1) / Scalar(2)) * _tmp751;
  const Scalar _tmp1080 = _tmp758 / (_tmp752 * std::sqrt(_tmp752));
  const Scalar _tmp1081 = _tmp1079 * _tmp1080;
  const Scalar _tmp1082 =
      _tmp177 * _tmp753 * _tmp754 * _tmp755 * std::pow(_tmp756, _tmp848) / _tmp757;
  const Scalar _tmp1083 = _tmp1078 * _tmp1082;
  const Scalar _tmp1084 = _tmp1075 * _tmp759 - _tmp1078 * _tmp1081 + _tmp1079 * _tmp1083;
  const Scalar _tmp1085 = _tmp153 * _tmp829 + _tmp157 * _tmp832 + _tmp161 * _tmp834;
  const Scalar _tmp1086 =
      ((((_tmp165 + _tmp42) > 0) - ((_tmp165 + _tmp42) < 0)) + 1) / std::pow(_tmp166, Scalar(2));
  const Scalar _tmp1087 = _tmp1086 * _tmp171;
  const Scalar _tmp1088 = _tmp1087 * _tmp836;
  const Scalar _tmp1089 = -_tmp1085 * _tmp1088 + _tmp172 * (_tmp161 * _tmp827 + _tmp164);
  const Scalar _tmp1090 = _tmp1086 * _tmp163;
  const Scalar _tmp1091 = 2 * _tmp173;
  const Scalar _tmp1092 =
      -_tmp1085 * _tmp1090 * _tmp169 * views_1_calibration(0, 0) + _tmp1089 * _tmp1091;
  const Scalar _tmp1093 = (Scalar(1) / Scalar(2)) * _tmp173;
  const Scalar _tmp1094 =
      _tmp175 * _tmp176 * _tmp177 * std::pow(_tmp181, _tmp848) * _tmp187 / _tmp186;
  const Scalar _tmp1095 = _tmp1093 * _tmp1094;
  const Scalar _tmp1096 = _tmp188 / (_tmp174 * std::sqrt(_tmp174));
  const Scalar _tmp1097 = _tmp1093 * _tmp1096;
  const Scalar _tmp1098 = _tmp1089 * _tmp189 + _tmp1092 * _tmp1095 - _tmp1092 * _tmp1097;
  const Scalar _tmp1099 = _tmp377 * _tmp829 + _tmp378 * _tmp832 + _tmp379 * _tmp834;
  const Scalar _tmp1100 =
      ((((_tmp383 + _tmp42) > 0) - ((_tmp383 + _tmp42) < 0)) + 1) / std::pow(_tmp384, Scalar(2));
  const Scalar _tmp1101 = _tmp1100 * _tmp389;
  const Scalar _tmp1102 = _tmp1101 * _tmp836;
  const Scalar _tmp1103 = -_tmp1099 * _tmp1102 + _tmp390 * (_tmp379 * _tmp827 + _tmp382);
  const Scalar _tmp1104 = 2 * _tmp391;
  const Scalar _tmp1105 = _tmp1100 * _tmp381;
  const Scalar _tmp1106 = _tmp1099 * _tmp1105;
  const Scalar _tmp1107 = _tmp1103 * _tmp1104 - _tmp1106 * _tmp387 * views_1_calibration(0, 0);
  const Scalar _tmp1108 = (Scalar(1) / Scalar(2)) * _tmp391;
  const Scalar _tmp1109 =
      _tmp177 * _tmp393 * _tmp394 * _tmp395 * std::pow(_tmp396, _tmp848) / _tmp397;
  const Scalar _tmp1110 = _tmp1108 * _tmp1109;
  const Scalar _tmp1111 = _tmp398 / (_tmp392 * std::sqrt(_tmp392));
  const Scalar _tmp1112 = _tmp1108 * _tmp1111;
  const Scalar _tmp1113 = _tmp1103 * _tmp399 + _tmp1107 * _tmp1110 - _tmp1107 * _tmp1112;
  const Scalar _tmp1114 =
      _tmp905 * priors_1_0_sqrt_info(3, 4) + _tmp906 * priors_1_0_sqrt_info(3, 5);
  const Scalar _tmp1115 = _tmp707 * _tmp829 + _tmp708 * _tmp834 + _tmp709 * _tmp832;
  const Scalar _tmp1116 =
      ((((_tmp42 + _tmp713) > 0) - ((_tmp42 + _tmp713) < 0)) + 1) / std::pow(_tmp714, Scalar(2));
  const Scalar _tmp1117 = _tmp1116 * _tmp719;
  const Scalar _tmp1118 = _tmp1117 * _tmp836;
  const Scalar _tmp1119 = -_tmp1115 * _tmp1118 + _tmp720 * (_tmp708 * _tmp827 + _tmp712);
  const Scalar _tmp1120 = 2 * _tmp721;
  const Scalar _tmp1121 = _tmp1116 * _tmp711;
  const Scalar _tmp1122 = _tmp1115 * _tmp1121;
  const Scalar _tmp1123 = _tmp1119 * _tmp1120 - _tmp1122 * _tmp717 * views_1_calibration(0, 0);
  const Scalar _tmp1124 = _tmp728 / (_tmp722 * std::sqrt(_tmp722));
  const Scalar _tmp1125 = (Scalar(1) / Scalar(2)) * _tmp721;
  const Scalar _tmp1126 = _tmp1124 * _tmp1125;
  const Scalar _tmp1127 =
      _tmp177 * _tmp723 * _tmp724 * _tmp725 * std::pow(_tmp726, _tmp848) / _tmp727;
  const Scalar _tmp1128 = _tmp1125 * _tmp1127;
  const Scalar _tmp1129 = _tmp1119 * _tmp729 - _tmp1123 * _tmp1126 + _tmp1123 * _tmp1128;
  const Scalar _tmp1130 = _tmp227 * _tmp829 + _tmp228 * _tmp834 + _tmp229 * _tmp832;
  const Scalar _tmp1131 =
      ((((_tmp233 + _tmp42) > 0) - ((_tmp233 + _tmp42) < 0)) + 1) / std::pow(_tmp234, Scalar(2));
  const Scalar _tmp1132 = _tmp1131 * _tmp231;
  const Scalar _tmp1133 = _tmp1132 * _tmp866;
  const Scalar _tmp1134 = _tmp1131 * _tmp239;
  const Scalar _tmp1135 = _tmp1134 * _tmp836;
  const Scalar _tmp1136 = -_tmp1130 * _tmp1135 + _tmp240 * (_tmp228 * _tmp827 + _tmp232);
  const Scalar _tmp1137 = 2 * _tmp241;
  const Scalar _tmp1138 =
      -_tmp1130 * _tmp1132 * _tmp237 * views_1_calibration(0, 0) + _tmp1136 * _tmp1137;
  const Scalar _tmp1139 = (Scalar(1) / Scalar(2)) * _tmp237;
  const Scalar _tmp1140 =
      _tmp177 * _tmp243 * _tmp244 * _tmp245 * std::pow(_tmp246, _tmp848) / _tmp247;
  const Scalar _tmp1141 = _tmp1139 * _tmp1140;
  const Scalar _tmp1142 = _tmp248 / (_tmp242 * std::sqrt(_tmp242));
  const Scalar _tmp1143 = _tmp1139 * _tmp1142;
  const Scalar _tmp1144 =
      -_tmp1130 * _tmp1133 * _tmp249 + _tmp1138 * _tmp1141 - _tmp1138 * _tmp1143;
  const Scalar _tmp1145 = _tmp122 * priors_1_0_sqrt_info(0, 2);
  const Scalar _tmp1146 = _tmp898 * _tmp903;
  const Scalar _tmp1147 = _priors_1_0_target_T_src[3] * _tmp873;
  const Scalar _tmp1148 = _priors_1_0_target_T_src[0] * _tmp885;
  const Scalar _tmp1149 = _priors_1_0_target_T_src[2] * _tmp891;
  const Scalar _tmp1150 = _tmp898 * priors_1_0_sqrt_info(0, 0);
  const Scalar _tmp1151 =
      _tmp1145 * _tmp914 - _tmp1145 * _tmp917 + _tmp1146 * priors_1_0_sqrt_info(0, 2) +
      _tmp1150 * (-_priors_1_0_target_T_src[1] * _tmp880 + _tmp1147 - _tmp1148 + _tmp1149) +
      _tmp129 * _tmp914 - _tmp129 * _tmp917 + _tmp130 * _tmp914 - _tmp130 * _tmp917 +
      _tmp899 * priors_1_0_sqrt_info(0, 1) + _tmp905 * priors_1_0_sqrt_info(0, 4) +
      _tmp906 * priors_1_0_sqrt_info(0, 5);
  const Scalar _tmp1152 = _tmp122 * priors_1_0_sqrt_info(2, 2);
  const Scalar _tmp1153 = _tmp1152 * _tmp913;
  const Scalar _tmp1154 = _tmp1146 * priors_1_0_sqrt_info(2, 2) - _tmp1152 * _tmp917 +
                          _tmp1153 * _tmp911 + _tmp905 * priors_1_0_sqrt_info(2, 4) +
                          _tmp906 * priors_1_0_sqrt_info(2, 5);
  const Scalar _tmp1155 = (Scalar(1) / Scalar(2)) * _tmp717;
  const Scalar _tmp1156 = _tmp1127 * _tmp1155;
  const Scalar _tmp1157 = _tmp1124 * _tmp1155;
  const Scalar _tmp1158 = -_tmp1122 * _tmp729 * _tmp866 + _tmp1123 * _tmp1156 - _tmp1123 * _tmp1157;
  const Scalar _tmp1159 = (Scalar(1) / Scalar(2)) * _tmp747;
  const Scalar _tmp1160 = _tmp1080 * _tmp1159;
  const Scalar _tmp1161 = -_tmp1077 * _tmp759 * _tmp866 - _tmp1078 * _tmp1160 + _tmp1083 * _tmp1159;
  const Scalar _tmp1162 = _tmp287 * _tmp829 + _tmp288 * _tmp834 + _tmp289 * _tmp832;
  const Scalar _tmp1163 =
      ((((_tmp293 + _tmp42) > 0) - ((_tmp293 + _tmp42) < 0)) + 1) / std::pow(_tmp294, Scalar(2));
  const Scalar _tmp1164 = _tmp1163 * _tmp299;
  const Scalar _tmp1165 = _tmp1164 * _tmp836;
  const Scalar _tmp1166 = -_tmp1162 * _tmp1165 + _tmp300 * (_tmp288 * _tmp827 + _tmp292);
  const Scalar _tmp1167 = 2 * _tmp301;
  const Scalar _tmp1168 = _tmp1163 * _tmp291;
  const Scalar _tmp1169 =
      -_tmp1162 * _tmp1168 * _tmp297 * views_1_calibration(0, 0) + _tmp1166 * _tmp1167;
  const Scalar _tmp1170 = (Scalar(1) / Scalar(2)) * _tmp301;
  const Scalar _tmp1171 = _tmp308 / (_tmp302 * std::sqrt(_tmp302));
  const Scalar _tmp1172 = _tmp1170 * _tmp1171;
  const Scalar _tmp1173 =
      _tmp177 * _tmp303 * _tmp304 * _tmp305 * std::pow(_tmp306, _tmp848) / _tmp307;
  const Scalar _tmp1174 = _tmp1170 * _tmp1173;
  const Scalar _tmp1175 = _tmp1166 * _tmp309 - _tmp1169 * _tmp1172 + _tmp1169 * _tmp1174;
  const Scalar _tmp1176 = _tmp617 * _tmp829 + _tmp618 * _tmp834 + _tmp619 * _tmp832;
  const Scalar _tmp1177 =
      ((((_tmp42 + _tmp623) > 0) - ((_tmp42 + _tmp623) < 0)) + 1) / std::pow(_tmp624, Scalar(2));
  const Scalar _tmp1178 = _tmp1177 * _tmp621;
  const Scalar _tmp1179 = _tmp1177 * _tmp629;
  const Scalar _tmp1180 = _tmp1179 * _tmp836;
  const Scalar _tmp1181 = -_tmp1176 * _tmp1180 + _tmp630 * (_tmp618 * _tmp827 + _tmp622);
  const Scalar _tmp1182 = 2 * _tmp631;
  const Scalar _tmp1183 =
      -_tmp1176 * _tmp1178 * _tmp627 * views_1_calibration(0, 0) + _tmp1181 * _tmp1182;
  const Scalar _tmp1184 = _tmp638 / (_tmp632 * std::sqrt(_tmp632));
  const Scalar _tmp1185 = (Scalar(1) / Scalar(2)) * _tmp627;
  const Scalar _tmp1186 = _tmp1184 * _tmp1185;
  const Scalar _tmp1187 = _tmp1178 * _tmp866;
  const Scalar _tmp1188 =
      _tmp177 * _tmp633 * std::pow(_tmp634, _tmp848) * _tmp636 * _tmp637 / _tmp635;
  const Scalar _tmp1189 = _tmp1185 * _tmp1188;
  const Scalar _tmp1190 =
      -_tmp1176 * _tmp1187 * _tmp639 - _tmp1183 * _tmp1186 + _tmp1183 * _tmp1189;
  const Scalar _tmp1191 = (Scalar(1) / Scalar(2)) * _tmp387;
  const Scalar _tmp1192 = _tmp1109 * _tmp1191;
  const Scalar _tmp1193 = _tmp1111 * _tmp1191;
  const Scalar _tmp1194 = -_tmp1106 * _tmp399 * _tmp866 + _tmp1107 * _tmp1192 - _tmp1107 * _tmp1193;
  const Scalar _tmp1195 =
      ((((_tmp413 + _tmp42) > 0) - ((_tmp413 + _tmp42) < 0)) + 1) / std::pow(_tmp414, Scalar(2));
  const Scalar _tmp1196 = _tmp1195 * (_tmp407 * _tmp829 + _tmp408 * _tmp832 + _tmp409 * _tmp834);
  const Scalar _tmp1197 = _tmp411 * views_1_calibration(0, 0);
  const Scalar _tmp1198 = _tmp1196 * _tmp1197;
  const Scalar _tmp1199 = -_tmp1196 * _tmp419 * _tmp836 + _tmp420 * (_tmp409 * _tmp827 + _tmp412);
  const Scalar _tmp1200 = 2 * _tmp421;
  const Scalar _tmp1201 = -_tmp1198 * _tmp417 + _tmp1199 * _tmp1200;
  const Scalar _tmp1202 = (Scalar(1) / Scalar(2)) * _tmp421;
  const Scalar _tmp1203 =
      _tmp177 * _tmp423 * _tmp424 * std::pow(_tmp425, _tmp848) * _tmp427 / _tmp426;
  const Scalar _tmp1204 = _tmp1202 * _tmp1203;
  const Scalar _tmp1205 = _tmp428 / (_tmp422 * std::sqrt(_tmp422));
  const Scalar _tmp1206 = _tmp1202 * _tmp1205;
  const Scalar _tmp1207 = _tmp1199 * _tmp429 + _tmp1201 * _tmp1204 - _tmp1201 * _tmp1206;
  const Scalar _tmp1208 = _tmp1090 * _tmp866;
  const Scalar _tmp1209 = (Scalar(1) / Scalar(2)) * _tmp169;
  const Scalar _tmp1210 = _tmp1096 * _tmp1209;
  const Scalar _tmp1211 = _tmp1094 * _tmp1209;
  const Scalar _tmp1212 =
      -_tmp1085 * _tmp1208 * _tmp189 - _tmp1092 * _tmp1210 + _tmp1092 * _tmp1211;
  const Scalar _tmp1213 = (Scalar(1) / Scalar(2)) * _tmp691;
  const Scalar _tmp1214 = _tmp1069 * _tmp1213;
  const Scalar _tmp1215 = _tmp1067 * _tmp1213;
  const Scalar _tmp1216 = _tmp1061 * _tmp699 - _tmp1065 * _tmp1214 + _tmp1065 * _tmp1215;
  const Scalar _tmp1217 = std::pow(priors_1_0_sqrt_info(5, 5), Scalar(2));
  const Scalar _tmp1218 = _tmp1217 * _tmp906;
  const Scalar _tmp1219 = _tmp866 * _tmp925;
  const Scalar _tmp1220 = _tmp567 * _tmp935;
  const Scalar _tmp1221 = -_tmp1219 * _tmp579 * _tmp923 + _tmp1220 * _tmp930 - _tmp567 * _tmp933;
  const Scalar _tmp1222 = _tmp841 * _tmp866;
  const Scalar _tmp1223 = _tmp597 * _tmp850;
  const Scalar _tmp1224 = _tmp597 * _tmp845;
  const Scalar _tmp1225 = -_tmp1222 * _tmp609 * _tmp835 + _tmp1223 * _tmp843 - _tmp1224 * _tmp843;
  const Scalar _tmp1226 = (Scalar(1) / Scalar(2)) * _tmp361;
  const Scalar _tmp1227 = _tmp1226 * _tmp978;
  const Scalar _tmp1228 = -_tmp1226 * _tmp976 + _tmp1227 * _tmp974 + _tmp369 * _tmp971;
  const Scalar _tmp1229 = (Scalar(1) / Scalar(2)) * _tmp541;
  const Scalar _tmp1230 = _tmp1229 * _tmp990;
  const Scalar _tmp1231 = _tmp1229 * _tmp993;
  const Scalar _tmp1232 = -_tmp1230 * _tmp988 + _tmp1231 * _tmp988 + _tmp549 * _tmp986;
  const Scalar _tmp1233 = -_priors_0_1_target_T_src[1] * _tmp1000;
  const Scalar _tmp1234 = _priors_0_1_target_T_src[3] * _tmp998;
  const Scalar _tmp1235 = -_priors_0_1_target_T_src[0] * _tmp885 + _tmp1234;
  const Scalar _tmp1236 = _tmp1014 * _tmp55;
  const Scalar _tmp1237 = _tmp54 * priors_0_1_sqrt_info(0, 0);
  const Scalar _tmp1238 =
      _tmp1009 * _tmp1237 + _tmp1010 * priors_0_1_sqrt_info(0, 2) + _tmp1015 * _tmp40 -
      _tmp1017 * _tmp1237 - _tmp1018 * priors_0_1_sqrt_info(0, 2) +
      _tmp1019 * priors_0_1_sqrt_info(0, 1) + _tmp1024 * priors_0_1_sqrt_info(0, 2) -
      _tmp1026 * priors_0_1_sqrt_info(0, 1) +
      _tmp1236 * (_priors_0_1_target_T_src[2] * _tmp997 + _tmp1233 + _tmp1235);
  const Scalar _tmp1239 = (Scalar(1) / Scalar(2)) * _tmp417;
  const Scalar _tmp1240 = _tmp1205 * _tmp1239;
  const Scalar _tmp1241 = _tmp1203 * _tmp1239;
  const Scalar _tmp1242 =
      -Scalar(1) / Scalar(2) * _tmp1198 * _tmp429 - _tmp1201 * _tmp1240 + _tmp1201 * _tmp1241;
  const Scalar _tmp1243 = (Scalar(1) / Scalar(2)) * _tmp271;
  const Scalar _tmp1244 = _tmp1040 * _tmp1243;
  const Scalar _tmp1245 = _tmp1037 * _tmp1243;
  const Scalar _tmp1246 = _tmp1033 * _tmp279 - _tmp1035 * _tmp1244 + _tmp1035 * _tmp1245;
  const Scalar _tmp1247 = (Scalar(1) / Scalar(2)) * _tmp241;
  const Scalar _tmp1248 = _tmp1140 * _tmp1247;
  const Scalar _tmp1249 = _tmp1142 * _tmp1247;
  const Scalar _tmp1250 = _tmp1136 * _tmp249 + _tmp1138 * _tmp1248 - _tmp1138 * _tmp1249;
  const Scalar _tmp1251 = (Scalar(1) / Scalar(2)) * _tmp331;
  const Scalar _tmp1252 = _tmp1056 * _tmp1251;
  const Scalar _tmp1253 = _tmp1054 * _tmp1251;
  const Scalar _tmp1254 = _tmp1047 * _tmp339 + _tmp1052 * _tmp1252 - _tmp1052 * _tmp1253;
  const Scalar _tmp1255 = _tmp291 * _tmp866;
  const Scalar _tmp1256 = _tmp1163 * _tmp1255;
  const Scalar _tmp1257 = (Scalar(1) / Scalar(2)) * _tmp297;
  const Scalar _tmp1258 = _tmp1173 * _tmp1257;
  const Scalar _tmp1259 = _tmp1171 * _tmp1257;
  const Scalar _tmp1260 =
      -_tmp1162 * _tmp1256 * _tmp309 + _tmp1169 * _tmp1258 - _tmp1169 * _tmp1259;
  const Scalar _tmp1261 = _tmp437 * _tmp829 + _tmp438 * _tmp832 + _tmp439 * _tmp834;
  const Scalar _tmp1262 =
      ((((_tmp42 + _tmp443) > 0) - ((_tmp42 + _tmp443) < 0)) + 1) / std::pow(_tmp444, Scalar(2));
  const Scalar _tmp1263 = _tmp1262 * _tmp441;
  const Scalar _tmp1264 = _tmp1262 * _tmp449;
  const Scalar _tmp1265 = _tmp1264 * _tmp836;
  const Scalar _tmp1266 = -_tmp1261 * _tmp1265 + _tmp450 * (_tmp439 * _tmp827 + _tmp442);
  const Scalar _tmp1267 = 2 * _tmp451;
  const Scalar _tmp1268 =
      -_tmp1261 * _tmp1263 * _tmp447 * views_1_calibration(0, 0) + _tmp1266 * _tmp1267;
  const Scalar _tmp1269 = (Scalar(1) / Scalar(2)) * _tmp451;
  const Scalar _tmp1270 =
      _tmp177 * _tmp453 * _tmp454 * _tmp455 * std::pow(_tmp456, _tmp848) / _tmp457;
  const Scalar _tmp1271 = _tmp1269 * _tmp1270;
  const Scalar _tmp1272 = _tmp458 / (_tmp452 * std::sqrt(_tmp452));
  const Scalar _tmp1273 = _tmp1269 * _tmp1272;
  const Scalar _tmp1274 = _tmp1266 * _tmp459 + _tmp1268 * _tmp1271 - _tmp1268 * _tmp1273;
  const Scalar _tmp1275 = (Scalar(1) / Scalar(2)) * _tmp631;
  const Scalar _tmp1276 = _tmp1188 * _tmp1275;
  const Scalar _tmp1277 = _tmp1184 * _tmp1275;
  const Scalar _tmp1278 = _tmp1181 * _tmp639 + _tmp1183 * _tmp1276 - _tmp1183 * _tmp1277;
  const Scalar _tmp1279 = _tmp647 * _tmp829 + _tmp648 * _tmp832 + _tmp649 * _tmp834;
  const Scalar _tmp1280 =
      ((((_tmp42 + _tmp653) > 0) - ((_tmp42 + _tmp653) < 0)) + 1) / std::pow(_tmp654, Scalar(2));
  const Scalar _tmp1281 = _tmp1280 * _tmp659;
  const Scalar _tmp1282 = _tmp1281 * _tmp836;
  const Scalar _tmp1283 = -_tmp1279 * _tmp1282 + _tmp660 * (_tmp649 * _tmp827 + _tmp652);
  const Scalar _tmp1284 = 2 * _tmp661;
  const Scalar _tmp1285 = _tmp1280 * _tmp651;
  const Scalar _tmp1286 =
      -_tmp1279 * _tmp1285 * _tmp657 * views_1_calibration(0, 0) + _tmp1283 * _tmp1284;
  const Scalar _tmp1287 = (Scalar(1) / Scalar(2)) * _tmp661;
  const Scalar _tmp1288 =
      _tmp177 * _tmp663 * _tmp664 * _tmp665 * std::pow(_tmp666, _tmp848) / _tmp667;
  const Scalar _tmp1289 = _tmp1287 * _tmp1288;
  const Scalar _tmp1290 = _tmp668 / (_tmp662 * std::sqrt(_tmp662));
  const Scalar _tmp1291 = _tmp1287 * _tmp1290;
  const Scalar _tmp1292 = _tmp1283 * _tmp669 + _tmp1286 * _tmp1289 - _tmp1286 * _tmp1291;
  const Scalar _tmp1293 = _tmp1263 * _tmp866;
  const Scalar _tmp1294 = (Scalar(1) / Scalar(2)) * _tmp447;
  const Scalar _tmp1295 = _tmp1270 * _tmp1294;
  const Scalar _tmp1296 = _tmp1272 * _tmp1294;
  const Scalar _tmp1297 =
      -_tmp1261 * _tmp1293 * _tmp459 + _tmp1268 * _tmp1295 - _tmp1268 * _tmp1296;
  const Scalar _tmp1298 = (Scalar(1) / Scalar(2)) * _tmp207;
  const Scalar _tmp1299 = _tmp1298 * _tmp949;
  const Scalar _tmp1300 = _tmp866 * _tmp940;
  const Scalar _tmp1301 = _tmp1298 * _tmp946;
  const Scalar _tmp1302 = _tmp1299 * _tmp945 - _tmp1300 * _tmp219 * _tmp938 - _tmp1301 * _tmp945;
  const Scalar _tmp1303 = _tmp56 * priors_0_1_sqrt_info(2, 2);
  const Scalar _tmp1304 = _tmp1008 * _tmp1303;
  const Scalar _tmp1305 = _tmp1002 * _tmp1304 - _tmp1017 * _tmp1303 + _tmp1023 * _tmp66;
  const Scalar _tmp1306 = _tmp651 * _tmp866;
  const Scalar _tmp1307 = _tmp1280 * _tmp1306;
  const Scalar _tmp1308 = (Scalar(1) / Scalar(2)) * _tmp657;
  const Scalar _tmp1309 = _tmp1288 * _tmp1308;
  const Scalar _tmp1310 = _tmp1290 * _tmp1308;
  const Scalar _tmp1311 =
      -_tmp1279 * _tmp1307 * _tmp669 + _tmp1286 * _tmp1309 - _tmp1286 * _tmp1310;
  const Scalar _tmp1312 = (Scalar(1) / Scalar(2)) * _tmp477;
  const Scalar _tmp1313 = _tmp1312 * _tmp964;
  const Scalar _tmp1314 = _tmp1312 * _tmp962;
  const Scalar _tmp1315 = -_tmp1313 * _tmp960 + _tmp1314 * _tmp960 - _tmp489 * _tmp866 * _tmp955;
  const Scalar _tmp1316 = -_tmp70;
  const Scalar _tmp1317 = _tmp1316 + _tmp822 + _tmp825 + _tmp90;
  const Scalar _tmp1318 = _tmp1317 * _tmp677 + _tmp680;
  const Scalar _tmp1319 = _tmp1059 * _tmp689;
  const Scalar _tmp1320 = _tmp1318 * _tmp1319;
  const Scalar _tmp1321 = _tmp833 + _tmp94;
  const Scalar _tmp1322 = _tmp1316 + _tmp73;
  const Scalar _tmp1323 = _tmp1322 + _tmp831;
  const Scalar _tmp1324 = -_tmp78;
  const Scalar _tmp1325 = _tmp1324 + _tmp80;
  const Scalar _tmp1326 = (Scalar(1) / Scalar(2)) * _tmp1059 * _tmp1063;
  const Scalar _tmp1327 = -_tmp1318 * _tmp1326 +
                          _tmp686 * (_tmp1321 * _tmp678 + _tmp1323 * _tmp679 + _tmp1325 * _tmp677);
  const Scalar _tmp1328 = 2 * _tmp687;
  const Scalar _tmp1329 = -_tmp1320 * _tmp691 * views_1_calibration(1, 0) + _tmp1327 * _tmp1328;
  const Scalar _tmp1330 = _tmp1069 * _tmp1329;
  const Scalar _tmp1331 = -_tmp1066 * _tmp1330 + _tmp1068 * _tmp1329 + _tmp1327 * _tmp699;
  const Scalar _tmp1332 = _tmp1317 * _tmp497 + _tmp500;
  const Scalar _tmp1333 = -_tmp1332 * _tmp867 +
                          _tmp506 * (_tmp1321 * _tmp498 + _tmp1323 * _tmp499 + _tmp1325 * _tmp497);
  const Scalar _tmp1334 = 2 * _tmp507;
  const Scalar _tmp1335 = _tmp1332 * _tmp856;
  const Scalar _tmp1336 = _tmp1333 * _tmp1334 - _tmp1335 * _tmp511 * views_1_calibration(1, 0);
  const Scalar _tmp1337 = _tmp1336 * _tmp861;
  const Scalar _tmp1338 = _tmp1333 * _tmp519 - _tmp1337 * _tmp862 + _tmp1337 * _tmp864;
  const Scalar _tmp1339 = _tmp1317 * _tmp407 + _tmp410;
  const Scalar _tmp1340 = _tmp1195 * _tmp419;
  const Scalar _tmp1341 = _tmp1339 * _tmp1340;
  const Scalar _tmp1342 = _tmp1195 * _tmp1197;
  const Scalar _tmp1343 = (Scalar(1) / Scalar(2)) * _tmp1342;
  const Scalar _tmp1344 = -_tmp1339 * _tmp1343 +
                          _tmp416 * (_tmp1321 * _tmp408 + _tmp1323 * _tmp409 + _tmp1325 * _tmp407);
  const Scalar _tmp1345 = 2 * _tmp417;
  const Scalar _tmp1346 = -_tmp1341 * _tmp421 * views_1_calibration(1, 0) + _tmp1344 * _tmp1345;
  const Scalar _tmp1347 = -_tmp1240 * _tmp1346 + _tmp1241 * _tmp1346 + _tmp1344 * _tmp429;
  const Scalar _tmp1348 = _tmp1204 * _tmp1346 - _tmp1206 * _tmp1346 - _tmp1341 * _tmp429 * _tmp836;
  const Scalar _tmp1349 = -_tmp1335 * _tmp519 * _tmp836 - _tmp1336 * _tmp920 + _tmp1336 * _tmp921;
  const Scalar _tmp1350 =
      _tmp1317 * _views_0_pose[4] - _tmp1317 * _views_1_pose[4] - _tmp82 - _tmp87 + _tmp88;
  const Scalar _tmp1351 = _tmp110 * _tmp1217;
  const Scalar _tmp1352 = _tmp1317 * _tmp197 + _tmp200;
  const Scalar _tmp1353 = -_tmp1300 * _tmp1352 +
                          _tmp206 * (_tmp1321 * _tmp198 + _tmp1323 * _tmp199 + _tmp1325 * _tmp197);
  const Scalar _tmp1354 = 2 * _tmp207;
  const Scalar _tmp1355 =
      -_tmp1352 * _tmp211 * _tmp941 * views_1_calibration(1, 0) + _tmp1353 * _tmp1354;
  const Scalar _tmp1356 = -_tmp1352 * _tmp219 * _tmp942 - _tmp1355 * _tmp948 + _tmp1355 * _tmp950;
  const Scalar _tmp1357 = _tmp1317 * _tmp437 + _tmp440;
  const Scalar _tmp1358 = -_tmp1293 * _tmp1357 +
                          _tmp446 * (_tmp1321 * _tmp438 + _tmp1323 * _tmp439 + _tmp1325 * _tmp437);
  const Scalar _tmp1359 = 2 * _tmp447;
  const Scalar _tmp1360 =
      -_tmp1264 * _tmp1357 * _tmp451 * views_1_calibration(1, 0) + _tmp1358 * _tmp1359;
  const Scalar _tmp1361 = _tmp1295 * _tmp1360 - _tmp1296 * _tmp1360 + _tmp1358 * _tmp459;
  const Scalar _tmp1362 = _tmp1317 * _tmp257 + _tmp260;
  const Scalar _tmp1363 = -_tmp1039 * _tmp1362 +
                          _tmp266 * (_tmp1321 * _tmp258 + _tmp1323 * _tmp259 + _tmp1325 * _tmp257);
  const Scalar _tmp1364 = 2 * _tmp267;
  const Scalar _tmp1365 =
      -_tmp1031 * _tmp1362 * _tmp271 * views_1_calibration(1, 0) + _tmp1363 * _tmp1364;
  const Scalar _tmp1366 =
      -_tmp1032 * _tmp1362 * _tmp279 - _tmp1244 * _tmp1365 + _tmp1245 * _tmp1365;
  const Scalar _tmp1367 = _tmp1163 * (_tmp1317 * _tmp287 + _tmp290);
  const Scalar _tmp1368 = -_tmp1255 * _tmp1367 +
                          _tmp296 * (_tmp1321 * _tmp289 + _tmp1323 * _tmp288 + _tmp1325 * _tmp287);
  const Scalar _tmp1369 = 2 * _tmp297;
  const Scalar _tmp1370 = _tmp1367 * _tmp299;
  const Scalar _tmp1371 = _tmp1368 * _tmp1369 - _tmp1370 * _tmp301 * views_1_calibration(1, 0);
  const Scalar _tmp1372 = _tmp1170 * _tmp1371;
  const Scalar _tmp1373 = -_tmp1171 * _tmp1372 + _tmp1173 * _tmp1372 - _tmp1370 * _tmp309 * _tmp836;
  const Scalar _tmp1374 =
      -_tmp1265 * _tmp1357 * _tmp459 + _tmp1271 * _tmp1360 - _tmp1273 * _tmp1360;
  const Scalar _tmp1375 = _tmp1350 * priors_1_0_sqrt_info(4, 5);
  const Scalar _tmp1376 = _tmp1280 * (_tmp1317 * _tmp647 + _tmp650);
  const Scalar _tmp1377 = _tmp1376 * _tmp659;
  const Scalar _tmp1378 = -_tmp1306 * _tmp1376 +
                          _tmp656 * (_tmp1321 * _tmp648 + _tmp1323 * _tmp649 + _tmp1325 * _tmp647);
  const Scalar _tmp1379 = 2 * _tmp657;
  const Scalar _tmp1380 = -_tmp1377 * _tmp661 * views_1_calibration(1, 0) + _tmp1378 * _tmp1379;
  const Scalar _tmp1381 = _tmp1289 * _tmp1380 - _tmp1291 * _tmp1380 - _tmp1377 * _tmp669 * _tmp836;
  const Scalar _tmp1382 = _tmp1317 * _tmp377 + _tmp380;
  const Scalar _tmp1383 = _tmp1101 * _tmp1382;
  const Scalar _tmp1384 = _tmp1105 * _tmp866;
  const Scalar _tmp1385 = -_tmp1382 * _tmp1384 +
                          _tmp386 * (_tmp1321 * _tmp378 + _tmp1323 * _tmp379 + _tmp1325 * _tmp377);
  const Scalar _tmp1386 = 2 * _tmp387;
  const Scalar _tmp1387 = -_tmp1383 * _tmp391 * views_1_calibration(1, 0) + _tmp1385 * _tmp1386;
  const Scalar _tmp1388 = _tmp1108 * _tmp1387;
  const Scalar _tmp1389 = _tmp1109 * _tmp1388 - _tmp1111 * _tmp1388 - _tmp1383 * _tmp399 * _tmp836;
  const Scalar _tmp1390 = _tmp1317 * _tmp467 + _tmp470;
  const Scalar _tmp1391 = _tmp866 * _tmp954;
  const Scalar _tmp1392 = -_tmp1390 * _tmp1391 +
                          _tmp476 * (_tmp1321 * _tmp469 + _tmp1323 * _tmp468 + _tmp1325 * _tmp467);
  const Scalar _tmp1393 = 2 * _tmp477;
  const Scalar _tmp1394 = _tmp1390 * _tmp956;
  const Scalar _tmp1395 = _tmp1392 * _tmp1393 - _tmp1394 * _tmp481 * views_1_calibration(1, 0);
  const Scalar _tmp1396 = -_tmp1313 * _tmp1395 + _tmp1314 * _tmp1395 + _tmp1392 * _tmp489;
  const Scalar _tmp1397 = -_tmp900;
  const Scalar _tmp1398 = _priors_1_0_target_T_src[3] * _tmp1000;
  const Scalar _tmp1399 = -_priors_1_0_target_T_src[0] * _tmp997 + _tmp1397 - _tmp1398 + _tmp901;
  const Scalar _tmp1400 = -_priors_1_0_target_T_src[2] * _tmp1000;
  const Scalar _tmp1401 = _priors_1_0_target_T_src[1] * _tmp997 + _tmp1400 + _tmp908 + _tmp909;
  const Scalar _tmp1402 = _tmp1401 * _tmp898;
  const Scalar _tmp1403 = _tmp1399 * _tmp916;
  const Scalar _tmp1404 = _tmp1321 * _views_0_pose[5] - _tmp1321 * _views_1_pose[5] +
                          _tmp1323 * _views_0_pose[6] - _tmp1323 * _views_1_pose[6] +
                          _tmp1325 * _views_0_pose[4] - _tmp1325 * _views_1_pose[4];
  const Scalar _tmp1405 =
      -_tmp1152 * _tmp1403 + _tmp1153 * _tmp1399 + _tmp1350 * priors_1_0_sqrt_info(2, 5) +
      _tmp1402 * priors_1_0_sqrt_info(2, 2) + _tmp1404 * priors_1_0_sqrt_info(2, 3);
  const Scalar _tmp1406 = _tmp1317 * _tmp153 + _tmp162;
  const Scalar _tmp1407 = -_tmp1208 * _tmp1406 +
                          _tmp168 * (_tmp1321 * _tmp157 + _tmp1323 * _tmp161 + _tmp1325 * _tmp153);
  const Scalar _tmp1408 = 2 * _tmp169;
  const Scalar _tmp1409 =
      -_tmp1087 * _tmp1406 * _tmp173 * views_1_calibration(1, 0) + _tmp1407 * _tmp1408;
  const Scalar _tmp1410 = -_tmp1210 * _tmp1409 + _tmp1211 * _tmp1409 + _tmp1407 * _tmp189;
  const Scalar _tmp1411 = _tmp1317 * _tmp587 + _tmp590;
  const Scalar _tmp1412 = -_tmp1222 * _tmp1411 +
                          _tmp596 * (_tmp1321 * _tmp588 + _tmp1323 * _tmp589 + _tmp1325 * _tmp587);
  const Scalar _tmp1413 = 2 * _tmp597;
  const Scalar _tmp1414 =
      -_tmp1411 * _tmp601 * _tmp838 * views_1_calibration(1, 0) + _tmp1412 * _tmp1413;
  const Scalar _tmp1415 = _tmp1223 * _tmp1414 - _tmp1224 * _tmp1414 + _tmp1412 * _tmp609;
  const Scalar _tmp1416 = _tmp1317 * _tmp317 + _tmp320;
  const Scalar _tmp1417 = _tmp1045 * _tmp1416;
  const Scalar _tmp1418 = (Scalar(1) / Scalar(2)) * _tmp1050;
  const Scalar _tmp1419 = -_tmp1416 * _tmp1418 +
                          _tmp326 * (_tmp1321 * _tmp318 + _tmp1323 * _tmp319 + _tmp1325 * _tmp317);
  const Scalar _tmp1420 = 2 * _tmp327;
  const Scalar _tmp1421 = -_tmp1417 * _tmp331 * views_1_calibration(1, 0) + _tmp1419 * _tmp1420;
  const Scalar _tmp1422 = -_tmp1055 * _tmp1421 + _tmp1057 * _tmp1421 + _tmp1419 * _tmp339;
  const Scalar _tmp1423 =
      _tmp1350 * priors_1_0_sqrt_info(3, 5) + _tmp1404 * priors_1_0_sqrt_info(3, 3);
  const Scalar _tmp1424 = -_tmp1411 * _tmp609 * _tmp839 - _tmp1414 * _tmp846 + _tmp1414 * _tmp851;
  const Scalar _tmp1425 = _tmp1317 * _tmp347 + _tmp350;
  const Scalar _tmp1426 = _tmp351 * _tmp968;
  const Scalar _tmp1427 = _tmp1426 * _tmp866;
  const Scalar _tmp1428 = -_tmp1425 * _tmp1427 +
                          _tmp356 * (_tmp1321 * _tmp348 + _tmp1323 * _tmp349 + _tmp1325 * _tmp347);
  const Scalar _tmp1429 = 2 * _tmp357;
  const Scalar _tmp1430 = _tmp359 * _tmp968;
  const Scalar _tmp1431 =
      -_tmp1425 * _tmp1430 * _tmp361 * views_1_calibration(1, 0) + _tmp1428 * _tmp1429;
  const Scalar _tmp1432 = _tmp1226 * _tmp975;
  const Scalar _tmp1433 = _tmp968 * _tmp970;
  const Scalar _tmp1434 = _tmp1227 * _tmp1431 - _tmp1425 * _tmp1433 * _tmp369 - _tmp1431 * _tmp1432;
  const Scalar _tmp1435 = _tmp1317 * _tmp737 + _tmp740;
  const Scalar _tmp1436 = _tmp1072 * _tmp741;
  const Scalar _tmp1437 = _tmp1436 * _tmp866;
  const Scalar _tmp1438 = -_tmp1435 * _tmp1437 +
                          _tmp746 * (_tmp1321 * _tmp739 + _tmp1323 * _tmp738 + _tmp1325 * _tmp737);
  const Scalar _tmp1439 = 2 * _tmp747;
  const Scalar _tmp1440 = _tmp1072 * _tmp749;
  const Scalar _tmp1441 =
      -_tmp1435 * _tmp1440 * _tmp751 * views_1_calibration(1, 0) + _tmp1438 * _tmp1439;
  const Scalar _tmp1442 = _tmp1082 * _tmp1441;
  const Scalar _tmp1443 = _tmp1159 * _tmp1442 - _tmp1160 * _tmp1441 + _tmp1438 * _tmp759;
  const Scalar _tmp1444 = _tmp1258 * _tmp1371 - _tmp1259 * _tmp1371 + _tmp1368 * _tmp309;
  const Scalar _tmp1445 = _tmp1072 * _tmp1074;
  const Scalar _tmp1446 = _tmp1079 * _tmp1442 - _tmp1081 * _tmp1441 - _tmp1435 * _tmp1445 * _tmp759;
  const Scalar _tmp1447 = -_tmp881 + _tmp882 - _tmp883 + _tmp884;
  const Scalar _tmp1448 = -_priors_0_1_target_T_src[0] * _tmp891 - _tmp1020;
  const Scalar _tmp1449 = -_priors_0_1_target_T_src[2] * _tmp1447 - _tmp1021 + _tmp1448;
  const Scalar _tmp1450 = _tmp1008 * _tmp1449;
  const Scalar _tmp1451 = _tmp41 * priors_0_1_sqrt_info(0, 1);
  const Scalar _tmp1452 = _priors_0_1_target_T_src[1] * _tmp891;
  const Scalar _tmp1453 = _tmp1014 * (_priors_0_1_target_T_src[3] * _tmp1447 + _tmp1001 + _tmp1452);
  const Scalar _tmp1454 = _tmp1453 * _tmp39;
  const Scalar _tmp1455 = _tmp1016 * _tmp1449;
  const Scalar _tmp1456 = _tmp1455 * _tmp56;
  const Scalar _tmp1457 = _tmp1025 * _tmp1449;
  const Scalar _tmp1458 = _tmp1450 * _tmp56;
  const Scalar _tmp1459 = -_priors_0_1_target_T_src[2] * _tmp891;
  const Scalar _tmp1460 =
      _tmp1014 * (_priors_0_1_target_T_src[0] * _tmp1447 + _tmp1233 + _tmp1234 + _tmp1459);
  const Scalar _tmp1461 = _priors_0_1_target_T_src[3] * _tmp891;
  const Scalar _tmp1462 =
      _tmp1236 * (-_priors_0_1_target_T_src[1] * _tmp1447 - _tmp1011 + _tmp1012 + _tmp1461) +
      _tmp1237 * _tmp1450 - _tmp1237 * _tmp1455 + _tmp1450 * _tmp1451 +
      _tmp1454 * priors_0_1_sqrt_info(0, 2) - _tmp1456 * priors_0_1_sqrt_info(0, 2) -
      _tmp1457 * priors_0_1_sqrt_info(0, 1) + _tmp1458 * priors_0_1_sqrt_info(0, 2) +
      _tmp1460 * _tmp40;
  const Scalar _tmp1463 = _tmp1399 * _tmp913;
  const Scalar _tmp1464 = _priors_1_0_target_T_src[1] * _tmp1000;
  const Scalar _tmp1465 =
      _tmp898 * (-_priors_1_0_target_T_src[2] * _tmp997 + _tmp1147 + _tmp1148 - _tmp1464);
  const Scalar _tmp1466 = -_tmp132 * _tmp1403 + _tmp132 * _tmp1463 +
                          _tmp1350 * priors_1_0_sqrt_info(1, 5) + _tmp1401 * _tmp904 -
                          _tmp1403 * _tmp915 + _tmp1404 * priors_1_0_sqrt_info(1, 3) +
                          _tmp1463 * _tmp915 + _tmp1465 * priors_1_0_sqrt_info(1, 1);
  const Scalar _tmp1467 = _tmp1298 * _tmp1355;
  const Scalar _tmp1468 = _tmp1353 * _tmp219 - _tmp1467 * _tmp946 + _tmp1467 * _tmp949;
  const Scalar _tmp1469 = -_tmp1213 * _tmp1330 + _tmp1215 * _tmp1329 - _tmp1320 * _tmp699 * _tmp836;
  const Scalar _tmp1470 = _tmp1317 * _tmp707 + _tmp710;
  const Scalar _tmp1471 = _tmp1121 * _tmp866;
  const Scalar _tmp1472 = -_tmp1470 * _tmp1471 +
                          _tmp716 * (_tmp1321 * _tmp709 + _tmp1323 * _tmp708 + _tmp1325 * _tmp707);
  const Scalar _tmp1473 = 2 * _tmp717;
  const Scalar _tmp1474 =
      -_tmp1117 * _tmp1470 * _tmp721 * views_1_calibration(1, 0) + _tmp1472 * _tmp1473;
  const Scalar _tmp1475 =
      -_tmp1118 * _tmp1470 * _tmp729 - _tmp1126 * _tmp1474 + _tmp1128 * _tmp1474;
  const Scalar _tmp1476 = -_tmp1303 * _tmp1455 + _tmp1304 * _tmp1449 + _tmp1453 * _tmp66;
  const Scalar _tmp1477 = _tmp975 * _tmp977;
  const Scalar _tmp1478 = _tmp1428 * _tmp369 - _tmp1431 * _tmp1477 + _tmp1431 * _tmp979;
  const Scalar _tmp1479 = _tmp1038 * _tmp1365 - _tmp1041 * _tmp1365 + _tmp1363 * _tmp279;
  const Scalar _tmp1480 = _tmp1317 * _tmp557 + _tmp560;
  const Scalar _tmp1481 = _tmp1480 * _tmp926;
  const Scalar _tmp1482 = -_tmp1219 * _tmp1480 +
                          _tmp566 * (_tmp1321 * _tmp558 + _tmp1323 * _tmp559 + _tmp1325 * _tmp557);
  const Scalar _tmp1483 = 2 * _tmp567;
  const Scalar _tmp1484 = -_tmp1481 * _tmp571 * views_1_calibration(1, 0) + _tmp1482 * _tmp1483;
  const Scalar _tmp1485 = _tmp571 * _tmp932;
  const Scalar _tmp1486 = -_tmp1481 * _tmp579 * _tmp836 - _tmp1484 * _tmp1485 + _tmp1484 * _tmp936;
  const Scalar _tmp1487 = _tmp1317 * _tmp227 + _tmp230;
  const Scalar _tmp1488 = -_tmp1133 * _tmp1487 +
                          _tmp236 * (_tmp1321 * _tmp229 + _tmp1323 * _tmp228 + _tmp1325 * _tmp227);
  const Scalar _tmp1489 = 2 * _tmp237;
  const Scalar _tmp1490 =
      -_tmp1134 * _tmp1487 * _tmp241 * views_1_calibration(1, 0) + _tmp1488 * _tmp1489;
  const Scalar _tmp1491 = _tmp1139 * _tmp1490;
  const Scalar _tmp1492 = _tmp1140 * _tmp1491 - _tmp1142 * _tmp1491 + _tmp1488 * _tmp249;
  const Scalar _tmp1493 =
      -_tmp1135 * _tmp1487 * _tmp249 + _tmp1248 * _tmp1490 - _tmp1249 * _tmp1490;
  const Scalar _tmp1494 = _tmp1192 * _tmp1387 - _tmp1193 * _tmp1387 + _tmp1385 * _tmp399;
  const Scalar _tmp1495 = _tmp1317 * _tmp527 + _tmp530;
  const Scalar _tmp1496 = -_tmp1495 * _tmp992 +
                          _tmp536 * (_tmp1321 * _tmp529 + _tmp1323 * _tmp528 + _tmp1325 * _tmp527);
  const Scalar _tmp1497 = 2 * _tmp537;
  const Scalar _tmp1498 =
      -_tmp1495 * _tmp541 * _tmp984 * views_1_calibration(1, 0) + _tmp1496 * _tmp1497;
  const Scalar _tmp1499 = _tmp1498 * _tmp989;
  const Scalar _tmp1500 = _tmp1496 * _tmp549 - _tmp1499 * _tmp990 + _tmp1499 * _tmp993;
  const Scalar _tmp1501 = _tmp1317 * _tmp617 + _tmp620;
  const Scalar _tmp1502 = -_tmp1187 * _tmp1501 +
                          _tmp626 * (_tmp1321 * _tmp619 + _tmp1323 * _tmp618 + _tmp1325 * _tmp617);
  const Scalar _tmp1503 = 2 * _tmp627;
  const Scalar _tmp1504 =
      -_tmp1179 * _tmp1501 * _tmp631 * views_1_calibration(1, 0) + _tmp1502 * _tmp1503;
  const Scalar _tmp1505 =
      -_tmp1180 * _tmp1501 * _tmp639 + _tmp1276 * _tmp1504 - _tmp1277 * _tmp1504;
  const Scalar _tmp1506 = -_tmp1394 * _tmp489 * _tmp836 + _tmp1395 * _tmp963 - _tmp1395 * _tmp965;
  const Scalar _tmp1507 = _tmp1309 * _tmp1380 - _tmp1310 * _tmp1380 + _tmp1378 * _tmp669;
  const Scalar _tmp1508 = _tmp567 * _tmp932;
  const Scalar _tmp1509 = _tmp1220 * _tmp1484 + _tmp1482 * _tmp579 - _tmp1484 * _tmp1508;
  const Scalar _tmp1510 = _tmp41 * priors_0_1_sqrt_info(1, 1);
  const Scalar _tmp1511 = _tmp1450 * _tmp1510 + _tmp1454 * priors_0_1_sqrt_info(1, 2) -
                          _tmp1456 * priors_0_1_sqrt_info(1, 2) -
                          _tmp1457 * priors_0_1_sqrt_info(1, 1) +
                          _tmp1458 * priors_0_1_sqrt_info(1, 2) + _tmp1460 * _tmp64;
  const Scalar _tmp1512 = _tmp1252 * _tmp1421 - _tmp1253 * _tmp1421 - _tmp1417 * _tmp339 * _tmp836;
  const Scalar _tmp1513 =
      -_tmp1088 * _tmp1406 * _tmp189 + _tmp1095 * _tmp1409 - _tmp1097 * _tmp1409;
  const Scalar _tmp1514 = -_priors_1_0_target_T_src[0] * _tmp1000;
  const Scalar _tmp1515 =
      -_tmp1145 * _tmp1403 + _tmp1145 * _tmp1463 +
      _tmp1150 * (_priors_1_0_target_T_src[3] * _tmp997 + _tmp1514 + _tmp874 + _tmp886) -
      _tmp129 * _tmp1403 + _tmp129 * _tmp1463 - _tmp130 * _tmp1403 + _tmp130 * _tmp1463 +
      _tmp1350 * priors_1_0_sqrt_info(0, 5) + _tmp1402 * priors_1_0_sqrt_info(0, 2) +
      _tmp1404 * priors_1_0_sqrt_info(0, 3) + _tmp1465 * priors_1_0_sqrt_info(0, 1);
  const Scalar _tmp1516 = -_tmp1186 * _tmp1504 + _tmp1189 * _tmp1504 + _tmp1502 * _tmp639;
  const Scalar _tmp1517 = -_tmp1230 * _tmp1498 + _tmp1231 * _tmp1498 - _tmp1495 * _tmp549 * _tmp985;
  const Scalar _tmp1518 = _tmp1156 * _tmp1474 - _tmp1157 * _tmp1474 + _tmp1472 * _tmp729;
  const Scalar _tmp1519 = _tmp1322 + _tmp826;
  const Scalar _tmp1520 = _tmp596 * (_tmp1519 * _tmp588 + _tmp598);
  const Scalar _tmp1521 = _tmp70 + _tmp73 + _tmp824 + _tmp830;
  const Scalar _tmp1522 = _tmp828 + _tmp98;
  const Scalar _tmp1523 = _tmp1324 + _tmp79;
  const Scalar _tmp1524 = _tmp600 * (_tmp1521 * _tmp587 + _tmp1522 * _tmp588 + _tmp1523 * _tmp589);
  const Scalar _tmp1525 = _tmp1413 * _tmp1520 + _tmp1524 * _tmp842;
  const Scalar _tmp1526 = _tmp1524 * _tmp609 - _tmp1525 * _tmp846 + _tmp1525 * _tmp851;
  const Scalar _tmp1527 = _tmp420 * (_tmp1521 * _tmp407 + _tmp1522 * _tmp408 + _tmp1523 * _tmp409);
  const Scalar _tmp1528 = _tmp416 * (_tmp1519 * _tmp408 + _tmp418);
  const Scalar _tmp1529 = _tmp1200 * _tmp1527 + _tmp1345 * _tmp1528;
  const Scalar _tmp1530 = _tmp1204 * _tmp1529 - _tmp1206 * _tmp1529 + _tmp1527 * _tmp429;
  const Scalar _tmp1531 = _tmp750 * (_tmp1521 * _tmp737 + _tmp1522 * _tmp739 + _tmp1523 * _tmp738);
  const Scalar _tmp1532 = _tmp746 * (_tmp1519 * _tmp739 + _tmp748);
  const Scalar _tmp1533 = _tmp1076 * _tmp1531 + _tmp1439 * _tmp1532;
  const Scalar _tmp1534 = _tmp1082 * _tmp1533;
  const Scalar _tmp1535 = _tmp1159 * _tmp1534 - _tmp1160 * _tmp1533 + _tmp1532 * _tmp759;
  const Scalar _tmp1536 = -_priors_0_1_target_T_src[0] * _tmp880 + _tmp1013 - _tmp1461;
  const Scalar _tmp1537 = _tmp1014 * (_priors_0_1_target_T_src[1] * _tmp880 + _tmp1235 + _tmp1459);
  const Scalar _tmp1538 = _tmp1016 * _tmp1536;
  const Scalar _tmp1539 = -_tmp1303 * _tmp1538 + _tmp1304 * _tmp1536 + _tmp1537 * _tmp66;
  const Scalar _tmp1540 = _tmp716 * (_tmp1519 * _tmp709 + _tmp718);
  const Scalar _tmp1541 = _tmp720 * (_tmp1521 * _tmp707 + _tmp1522 * _tmp709 + _tmp1523 * _tmp708);
  const Scalar _tmp1542 = _tmp1120 * _tmp1541 + _tmp1473 * _tmp1540;
  const Scalar _tmp1543 = -_tmp1126 * _tmp1542 + _tmp1128 * _tmp1542 + _tmp1541 * _tmp729;
  const Scalar _tmp1544 = -_priors_1_0_target_T_src[1] * _tmp1447 + _tmp1514 + _tmp875 - _tmp892;
  const Scalar _tmp1545 = _tmp1544 * _tmp913;
  const Scalar _tmp1546 = _tmp1544 * _tmp916;
  const Scalar _tmp1547 =
      _tmp897 * (-_priors_1_0_target_T_src[0] * _tmp1447 + _tmp1147 - _tmp1149 + _tmp1464);
  const Scalar _tmp1548 = _tmp121 * _tmp1547;
  const Scalar _tmp1549 =
      -_tmp100 + _tmp101 + _tmp1519 * _views_0_pose[5] - _tmp1519 * _views_1_pose[5] - _tmp97;
  const Scalar _tmp1550 = _tmp1521 * _views_0_pose[4] - _tmp1521 * _views_1_pose[4] +
                          _tmp1522 * _views_0_pose[5] - _tmp1522 * _views_1_pose[5] +
                          _tmp1523 * _views_0_pose[6] - _tmp1523 * _views_1_pose[6];
  const Scalar _tmp1551 =
      _tmp898 * (_priors_1_0_target_T_src[3] * _tmp1447 + _tmp1400 + _tmp907 + _tmp910);
  const Scalar _tmp1552 =
      _tmp1145 * _tmp1545 - _tmp1145 * _tmp1546 +
      _tmp1150 * (_priors_1_0_target_T_src[2] * _tmp1447 + _tmp1397 + _tmp1398 + _tmp902) +
      _tmp129 * _tmp1545 - _tmp129 * _tmp1546 + _tmp130 * _tmp1545 - _tmp130 * _tmp1546 +
      _tmp1548 * priors_1_0_sqrt_info(0, 2) + _tmp1549 * priors_1_0_sqrt_info(0, 3) +
      _tmp1550 * priors_1_0_sqrt_info(0, 4) + _tmp1551 * priors_1_0_sqrt_info(0, 1);
  const Scalar _tmp1553 = _tmp480 * (_tmp1521 * _tmp467 + _tmp1522 * _tmp469 + _tmp1523 * _tmp468);
  const Scalar _tmp1554 = _tmp476 * (_tmp1519 * _tmp469 + _tmp478);
  const Scalar _tmp1555 = _tmp1393 * _tmp1554 + _tmp1553 * _tmp959;
  const Scalar _tmp1556 = _tmp1553 * _tmp489 + _tmp1555 * _tmp963 - _tmp1555 * _tmp965;
  const Scalar _tmp1557 = _tmp172 * (_tmp1521 * _tmp153 + _tmp1522 * _tmp157 + _tmp1523 * _tmp161);
  const Scalar _tmp1558 = _tmp168 * (_tmp1519 * _tmp157 + _tmp170);
  const Scalar _tmp1559 = _tmp1091 * _tmp1557 + _tmp1408 * _tmp1558;
  const Scalar _tmp1560 = _tmp1095 * _tmp1559 - _tmp1097 * _tmp1559 + _tmp1557 * _tmp189;
  const Scalar _tmp1561 = _tmp660 * (_tmp1521 * _tmp647 + _tmp1522 * _tmp648 + _tmp1523 * _tmp649);
  const Scalar _tmp1562 = _tmp656 * (_tmp1519 * _tmp648 + _tmp658);
  const Scalar _tmp1563 = _tmp1284 * _tmp1561 + _tmp1379 * _tmp1562;
  const Scalar _tmp1564 = _tmp1309 * _tmp1563 - _tmp1310 * _tmp1563 + _tmp1562 * _tmp669;
  const Scalar _tmp1565 = _tmp1550 * priors_1_0_sqrt_info(4, 4);
  const Scalar _tmp1566 = -_tmp1210 * _tmp1559 + _tmp1211 * _tmp1559 + _tmp1558 * _tmp189;
  const Scalar _tmp1567 = _tmp240 * (_tmp1521 * _tmp227 + _tmp1522 * _tmp229 + _tmp1523 * _tmp228);
  const Scalar _tmp1568 = _tmp236 * (_tmp1519 * _tmp229 + _tmp238);
  const Scalar _tmp1569 = _tmp1137 * _tmp1567 + _tmp1489 * _tmp1568;
  const Scalar _tmp1570 = _tmp1248 * _tmp1569 - _tmp1249 * _tmp1569 + _tmp1567 * _tmp249;
  const Scalar _tmp1571 = _tmp360 * (_tmp1521 * _tmp347 + _tmp1522 * _tmp348 + _tmp1523 * _tmp349);
  const Scalar _tmp1572 = _tmp356 * (_tmp1519 * _tmp348 + _tmp358);
  const Scalar _tmp1573 = _tmp1429 * _tmp1572 + _tmp1571 * _tmp972;
  const Scalar _tmp1574 = -_tmp1477 * _tmp1573 + _tmp1572 * _tmp369 + _tmp1573 * _tmp979;
  const Scalar _tmp1575 = _tmp686 * (_tmp1519 * _tmp678 + _tmp688);
  const Scalar _tmp1576 = _tmp690 * (_tmp1521 * _tmp677 + _tmp1522 * _tmp678 + _tmp1523 * _tmp679);
  const Scalar _tmp1577 = _tmp1062 * _tmp1576 + _tmp1328 * _tmp1575;
  const Scalar _tmp1578 = -_tmp1214 * _tmp1577 + _tmp1215 * _tmp1577 + _tmp1576 * _tmp699;
  const Scalar _tmp1579 = _tmp326 * (_tmp1519 * _tmp318 + _tmp328);
  const Scalar _tmp1580 = _tmp330 * (_tmp1521 * _tmp317 + _tmp1522 * _tmp318 + _tmp1523 * _tmp319);
  const Scalar _tmp1581 = _tmp1048 * _tmp1580 + _tmp1420 * _tmp1579;
  const Scalar _tmp1582 = -_tmp1055 * _tmp1581 + _tmp1057 * _tmp1581 + _tmp1579 * _tmp339;
  const Scalar _tmp1583 =
      _tmp132 * _tmp1545 - _tmp132 * _tmp1546 + _tmp133 * _tmp1547 + _tmp1545 * _tmp915 -
      _tmp1546 * _tmp915 + _tmp1549 * priors_1_0_sqrt_info(1, 3) +
      _tmp1550 * priors_1_0_sqrt_info(1, 4) + _tmp1551 * priors_1_0_sqrt_info(1, 1);
  const Scalar _tmp1584 = _tmp1141 * _tmp1569 - _tmp1143 * _tmp1569 + _tmp1568 * _tmp249;
  const Scalar _tmp1585 = _tmp1008 * _tmp1536;
  const Scalar _tmp1586 = _tmp1585 * _tmp56;
  const Scalar _tmp1587 = _tmp1537 * _tmp39;
  const Scalar _tmp1588 = _tmp1025 * _tmp1536;
  const Scalar _tmp1589 =
      _tmp1014 * (-_priors_0_1_target_T_src[2] * _tmp880 - _tmp1452 + _tmp996 + _tmp999);
  const Scalar _tmp1590 = _tmp1538 * _tmp56;
  const Scalar _tmp1591 = _tmp1236 * (_priors_0_1_target_T_src[3] * _tmp880 + _tmp1022 + _tmp1448) -
                          _tmp1237 * _tmp1538 + _tmp1237 * _tmp1585 + _tmp1451 * _tmp1585 +
                          _tmp1586 * priors_0_1_sqrt_info(0, 2) +
                          _tmp1587 * priors_0_1_sqrt_info(0, 2) -
                          _tmp1588 * priors_0_1_sqrt_info(0, 1) + _tmp1589 * _tmp40 -
                          _tmp1590 * priors_0_1_sqrt_info(0, 2);
  const Scalar _tmp1592 = _tmp626 * (_tmp1519 * _tmp619 + _tmp628);
  const Scalar _tmp1593 = _tmp630 * (_tmp1521 * _tmp617 + _tmp1522 * _tmp619 + _tmp1523 * _tmp618);
  const Scalar _tmp1594 = _tmp1182 * _tmp1593 + _tmp1503 * _tmp1592;
  const Scalar _tmp1595 = _tmp1275 * _tmp1594;
  const Scalar _tmp1596 = -_tmp1184 * _tmp1595 + _tmp1188 * _tmp1595 + _tmp1593 * _tmp639;
  const Scalar _tmp1597 = _tmp1239 * _tmp1529;
  const Scalar _tmp1598 = _tmp1203 * _tmp1597 - _tmp1205 * _tmp1597 + _tmp1528 * _tmp429;
  const Scalar _tmp1599 =
      -_tmp1152 * _tmp1546 + _tmp1153 * _tmp1544 + _tmp1548 * priors_1_0_sqrt_info(2, 2) +
      _tmp1549 * priors_1_0_sqrt_info(2, 3) + _tmp1550 * priors_1_0_sqrt_info(2, 4);
  const Scalar _tmp1600 = _tmp540 * (_tmp1521 * _tmp527 + _tmp1522 * _tmp529 + _tmp1523 * _tmp528);
  const Scalar _tmp1601 = _tmp536 * (_tmp1519 * _tmp529 + _tmp538);
  const Scalar _tmp1602 = _tmp1497 * _tmp1601 + _tmp1600 * _tmp987;
  const Scalar _tmp1603 = -_tmp1230 * _tmp1602 + _tmp1231 * _tmp1602 + _tmp1600 * _tmp549;
  const Scalar _tmp1604 = _tmp570 * (_tmp1521 * _tmp557 + _tmp1522 * _tmp558 + _tmp1523 * _tmp559);
  const Scalar _tmp1605 = _tmp566 * (_tmp1519 * _tmp558 + _tmp568);
  const Scalar _tmp1606 =
      (Scalar(1) / Scalar(2)) * _tmp1483 * _tmp1605 + (Scalar(1) / Scalar(2)) * _tmp1604 * _tmp929;
  const Scalar _tmp1607 = _tmp1606 * _tmp571;
  const Scalar _tmp1608 = _tmp177 * _tmp934;
  const Scalar _tmp1609 = _tmp1604 * _tmp579 + _tmp1607 * _tmp1608 - _tmp1607 * _tmp931;
  const Scalar _tmp1610 = _tmp506 * (_tmp1519 * _tmp498 + _tmp508);
  const Scalar _tmp1611 = _tmp510 * (_tmp1521 * _tmp497 + _tmp1522 * _tmp498 + _tmp1523 * _tmp499);
  const Scalar _tmp1612 = _tmp1334 * _tmp1610 + _tmp1611 * _tmp859;
  const Scalar _tmp1613 = _tmp1610 * _tmp519 - _tmp1612 * _tmp863 + _tmp1612 * _tmp865;
  const Scalar _tmp1614 = _tmp1312 * _tmp1555;
  const Scalar _tmp1615 = _tmp1554 * _tmp489 + _tmp1614 * _tmp962 - _tmp1614 * _tmp964;
  const Scalar _tmp1616 = _tmp1252 * _tmp1581 - _tmp1253 * _tmp1581 + _tmp1580 * _tmp339;
  const Scalar _tmp1617 = _tmp390 * (_tmp1521 * _tmp377 + _tmp1522 * _tmp378 + _tmp1523 * _tmp379);
  const Scalar _tmp1618 = _tmp386 * (_tmp1519 * _tmp378 + _tmp388);
  const Scalar _tmp1619 = _tmp1104 * _tmp1617 + _tmp1386 * _tmp1618;
  const Scalar _tmp1620 = _tmp1109 * _tmp1619;
  const Scalar _tmp1621 = _tmp1108 * _tmp1620 - _tmp1112 * _tmp1619 + _tmp1617 * _tmp399;
  const Scalar _tmp1622 = _tmp296 * (_tmp1519 * _tmp289 + _tmp298);
  const Scalar _tmp1623 = _tmp300 * (_tmp1521 * _tmp287 + _tmp1522 * _tmp289 + _tmp1523 * _tmp288);
  const Scalar _tmp1624 = _tmp1167 * _tmp1623 + _tmp1369 * _tmp1622;
  const Scalar _tmp1625 = _tmp1258 * _tmp1624 - _tmp1259 * _tmp1624 + _tmp1622 * _tmp309;
  const Scalar _tmp1626 = _tmp1611 * _tmp519 - _tmp1612 * _tmp920 + _tmp1612 * _tmp921;
  const Scalar _tmp1627 = _tmp1068 * _tmp1577 - _tmp1070 * _tmp1577 + _tmp1575 * _tmp699;
  const Scalar _tmp1628 = _tmp270 * (_tmp1521 * _tmp257 + _tmp1522 * _tmp258 + _tmp1523 * _tmp259);
  const Scalar _tmp1629 = _tmp266 * (_tmp1519 * _tmp258 + _tmp268);
  const Scalar _tmp1630 = _tmp1034 * _tmp1628 + _tmp1364 * _tmp1629;
  const Scalar _tmp1631 = -_tmp1244 * _tmp1630 + _tmp1245 * _tmp1630 + _tmp1628 * _tmp279;
  const Scalar _tmp1632 = _tmp1223 * _tmp1525 - _tmp1224 * _tmp1525 + _tmp1520 * _tmp609;
  const Scalar _tmp1633 = _tmp206 * (_tmp1519 * _tmp198 + _tmp208);
  const Scalar _tmp1634 = _tmp210 * (_tmp1521 * _tmp197 + _tmp1522 * _tmp198 + _tmp1523 * _tmp199);
  const Scalar _tmp1635 = _tmp1354 * _tmp1633 + _tmp1634 * _tmp944;
  const Scalar _tmp1636 = _tmp1634 * _tmp219 - _tmp1635 * _tmp948 + _tmp1635 * _tmp950;
  const Scalar _tmp1637 = _tmp1606 * _tmp567;
  const Scalar _tmp1638 = _tmp1605 * _tmp579 + _tmp1608 * _tmp1637 - _tmp1637 * _tmp931;
  const Scalar _tmp1639 = _tmp1156 * _tmp1542 - _tmp1157 * _tmp1542 + _tmp1540 * _tmp729;
  const Scalar _tmp1640 = _tmp1038 * _tmp1630 - _tmp1041 * _tmp1630 + _tmp1629 * _tmp279;
  const Scalar _tmp1641 = _tmp1299 * _tmp1635 - _tmp1301 * _tmp1635 + _tmp1633 * _tmp219;
  const Scalar _tmp1642 =
      _tmp1549 * priors_1_0_sqrt_info(3, 3) + _tmp1550 * priors_1_0_sqrt_info(3, 4);
  const Scalar _tmp1643 = -_tmp1172 * _tmp1624 + _tmp1174 * _tmp1624 + _tmp1623 * _tmp309;
  const Scalar _tmp1644 = _tmp1601 * _tmp549 - _tmp1602 * _tmp991 + _tmp1602 * _tmp994;
  const Scalar _tmp1645 = _tmp1079 * _tmp1534 - _tmp1081 * _tmp1533 + _tmp1531 * _tmp759;
  const Scalar _tmp1646 = -_tmp1186 * _tmp1594 + _tmp1189 * _tmp1594 + _tmp1592 * _tmp639;
  const Scalar _tmp1647 = _tmp1226 * _tmp1573;
  const Scalar _tmp1648 = _tmp1571 * _tmp369 - _tmp1647 * _tmp975 + _tmp1647 * _tmp978;
  const Scalar _tmp1649 = _tmp1191 * _tmp1620 - _tmp1193 * _tmp1619 + _tmp1618 * _tmp399;
  const Scalar _tmp1650 = _tmp450 * (_tmp1521 * _tmp437 + _tmp1522 * _tmp438 + _tmp1523 * _tmp439);
  const Scalar _tmp1651 = _tmp446 * (_tmp1519 * _tmp438 + _tmp448);
  const Scalar _tmp1652 = _tmp1267 * _tmp1650 + _tmp1359 * _tmp1651;
  const Scalar _tmp1653 = _tmp1269 * _tmp1652;
  const Scalar _tmp1654 = _tmp1270 * _tmp1653 - _tmp1272 * _tmp1653 + _tmp1650 * _tmp459;
  const Scalar _tmp1655 = _tmp1289 * _tmp1563 - _tmp1291 * _tmp1563 + _tmp1561 * _tmp669;
  const Scalar _tmp1656 = _tmp1295 * _tmp1652 - _tmp1296 * _tmp1652 + _tmp1651 * _tmp459;
  const Scalar _tmp1657 = _tmp1510 * _tmp1585 + _tmp1586 * priors_0_1_sqrt_info(1, 2) +
                          _tmp1587 * priors_0_1_sqrt_info(1, 2) -
                          _tmp1588 * priors_0_1_sqrt_info(1, 1) + _tmp1589 * _tmp64 -
                          _tmp1590 * priors_0_1_sqrt_info(1, 2);
  const Scalar _tmp1658 = _tmp240 * landmarks_2_;
  const Scalar _tmp1659 = _tmp1135 * landmarks_2_;
  const Scalar _tmp1660 = _tmp107 * _tmp1659 - _tmp1658 * _tmp99;
  const Scalar _tmp1661 = _tmp236 * landmarks_2_;
  const Scalar _tmp1662 = _tmp1133 * landmarks_2_;
  const Scalar _tmp1663 = _tmp107 * _tmp1662 - _tmp1661 * _tmp76;
  const Scalar _tmp1664 = _tmp1137 * _tmp1660 + _tmp1489 * _tmp1663;
  const Scalar _tmp1665 = _tmp1142 * _tmp1664;
  const Scalar _tmp1666 = -_tmp1247 * _tmp1665 + _tmp1248 * _tmp1664 + _tmp1660 * _tmp249;
  const Scalar _tmp1667 = _tmp746 * landmarks_19_;
  const Scalar _tmp1668 = _tmp107 * landmarks_19_;
  const Scalar _tmp1669 = _tmp1437 * _tmp1668 - _tmp1667 * _tmp76;
  const Scalar _tmp1670 = _tmp750 * landmarks_19_;
  const Scalar _tmp1671 = _tmp1445 * _tmp1668 - _tmp1670 * _tmp99;
  const Scalar _tmp1672 = _tmp1076 * _tmp1671 + _tmp1439 * _tmp1669;
  const Scalar _tmp1673 = _tmp1082 * _tmp1672;
  const Scalar _tmp1674 = _tmp1159 * _tmp1673 - _tmp1160 * _tmp1672 + _tmp1669 * _tmp759;
  const Scalar _tmp1675 = _tmp927 * landmarks_13_;
  const Scalar _tmp1676 = _tmp570 * landmarks_13_;
  const Scalar _tmp1677 = _tmp107 * _tmp1675 - _tmp1676 * _tmp99;
  const Scalar _tmp1678 = _tmp566 * landmarks_13_;
  const Scalar _tmp1679 = _tmp1219 * landmarks_13_;
  const Scalar _tmp1680 = _tmp107 * _tmp1679 - _tmp1678 * _tmp76;
  const Scalar _tmp1681 = _tmp1483 * _tmp1680 + _tmp1677 * _tmp929;
  const Scalar _tmp1682 = -_tmp1485 * _tmp1681 + _tmp1677 * _tmp579 + _tmp1681 * _tmp936;
  const Scalar _tmp1683 = _tmp716 * landmarks_18_;
  const Scalar _tmp1684 = _tmp1471 * landmarks_18_;
  const Scalar _tmp1685 = _tmp107 * _tmp1684 - _tmp1683 * _tmp76;
  const Scalar _tmp1686 = _tmp720 * landmarks_18_;
  const Scalar _tmp1687 = _tmp1118 * landmarks_18_;
  const Scalar _tmp1688 = _tmp107 * _tmp1687 - _tmp1686 * _tmp99;
  const Scalar _tmp1689 = _tmp1120 * _tmp1688 + _tmp1473 * _tmp1685;
  const Scalar _tmp1690 = _tmp1156 * _tmp1689 - _tmp1157 * _tmp1689 + _tmp1685 * _tmp729;
  const Scalar _tmp1691 = _tmp1079 * _tmp1673 - _tmp1081 * _tmp1672 + _tmp1671 * _tmp759;
  const Scalar _tmp1692 = _tmp992 * landmarks_12_;
  const Scalar _tmp1693 = _tmp536 * landmarks_12_;
  const Scalar _tmp1694 = _tmp107 * _tmp1692 - _tmp1693 * _tmp76;
  const Scalar _tmp1695 = _tmp540 * landmarks_12_;
  const Scalar _tmp1696 = _tmp985 * landmarks_12_;
  const Scalar _tmp1697 = _tmp107 * _tmp1696 - _tmp1695 * _tmp99;
  const Scalar _tmp1698 = _tmp1497 * _tmp1694 + _tmp1697 * _tmp987;
  const Scalar _tmp1699 = -_tmp1230 * _tmp1698 + _tmp1231 * _tmp1698 + _tmp1697 * _tmp549;
  const Scalar _tmp1700 = _tmp506 * landmarks_11_;
  const Scalar _tmp1701 = _tmp107 * landmarks_11_;
  const Scalar _tmp1702 = -_tmp1700 * _tmp76 + _tmp1701 * _tmp867;
  const Scalar _tmp1703 = _tmp510 * landmarks_11_;
  const Scalar _tmp1704 = _tmp1701 * _tmp857 - _tmp1703 * _tmp99;
  const Scalar _tmp1705 = _tmp1334 * _tmp1702 + _tmp1704 * _tmp859;
  const Scalar _tmp1706 = _tmp1704 * _tmp519 - _tmp1705 * _tmp920 + _tmp1705 * _tmp921;
  const Scalar _tmp1707 = _tmp1694 * _tmp549 - _tmp1698 * _tmp991 + _tmp1698 * _tmp994;
  const Scalar _tmp1708 = _tmp1433 * landmarks_6_;
  const Scalar _tmp1709 = _tmp360 * landmarks_6_;
  const Scalar _tmp1710 = _tmp107 * _tmp1708 - _tmp1709 * _tmp99;
  const Scalar _tmp1711 = _tmp356 * landmarks_6_;
  const Scalar _tmp1712 = _tmp1427 * landmarks_6_;
  const Scalar _tmp1713 = _tmp107 * _tmp1712 - _tmp1711 * _tmp76;
  const Scalar _tmp1714 = _tmp1429 * _tmp1713 + _tmp1710 * _tmp972;
  const Scalar _tmp1715 = _tmp1227 * _tmp1714 - _tmp1432 * _tmp1714 + _tmp1710 * _tmp369;
  const Scalar _tmp1716 = -_tmp1477 * _tmp1714 + _tmp1713 * _tmp369 + _tmp1714 * _tmp979;
  const Scalar _tmp1717 = _tmp1418 * landmarks_5_;
  const Scalar _tmp1718 = _tmp326 * landmarks_5_;
  const Scalar _tmp1719 = _tmp107 * _tmp1717 - _tmp1718 * _tmp76;
  const Scalar _tmp1720 = _tmp330 * landmarks_5_;
  const Scalar _tmp1721 = _tmp1046 * landmarks_5_;
  const Scalar _tmp1722 = _tmp107 * _tmp1721 - _tmp1720 * _tmp99;
  const Scalar _tmp1723 = _tmp1048 * _tmp1722 + _tmp1420 * _tmp1719;
  const Scalar _tmp1724 = _tmp1053 * _tmp1723;
  const Scalar _tmp1725 = -_tmp1054 * _tmp1724 + _tmp1056 * _tmp1724 + _tmp1719 * _tmp339;
  const Scalar _tmp1726 = _tmp1208 * landmarks_0_;
  const Scalar _tmp1727 = _tmp168 * landmarks_0_;
  const Scalar _tmp1728 = _tmp107 * _tmp1726 - _tmp1727 * _tmp76;
  const Scalar _tmp1729 = _tmp1088 * landmarks_0_;
  const Scalar _tmp1730 = _tmp172 * landmarks_0_;
  const Scalar _tmp1731 = _tmp107 * _tmp1729 - _tmp1730 * _tmp99;
  const Scalar _tmp1732 = _tmp1091 * _tmp1731 + _tmp1408 * _tmp1728;
  const Scalar _tmp1733 = _tmp1096 * _tmp1732;
  const Scalar _tmp1734 = -_tmp1209 * _tmp1733 + _tmp1211 * _tmp1732 + _tmp1728 * _tmp189;
  const Scalar _tmp1735 = _tmp296 * landmarks_4_;
  const Scalar _tmp1736 = _tmp1256 * landmarks_4_;
  const Scalar _tmp1737 = _tmp107 * _tmp1736 - _tmp1735 * _tmp76;
  const Scalar _tmp1738 = _tmp1165 * landmarks_4_;
  const Scalar _tmp1739 = _tmp300 * landmarks_4_;
  const Scalar _tmp1740 = _tmp107 * _tmp1738 - _tmp1739 * _tmp99;
  const Scalar _tmp1741 = _tmp1167 * _tmp1740 + _tmp1369 * _tmp1737;
  const Scalar _tmp1742 = -_tmp1172 * _tmp1741 + _tmp1174 * _tmp1741 + _tmp1740 * _tmp309;
  const Scalar _tmp1743 = _tmp107 * landmarks_15_;
  const Scalar _tmp1744 = _tmp630 * landmarks_15_;
  const Scalar _tmp1745 = _tmp1180 * _tmp1743 - _tmp1744 * _tmp99;
  const Scalar _tmp1746 = _tmp626 * landmarks_15_;
  const Scalar _tmp1747 = _tmp1187 * _tmp1743 - _tmp1746 * _tmp76;
  const Scalar _tmp1748 = _tmp1182 * _tmp1745 + _tmp1503 * _tmp1747;
  const Scalar _tmp1749 = _tmp1276 * _tmp1748 - _tmp1277 * _tmp1748 + _tmp1745 * _tmp639;
  const Scalar _tmp1750 = _tmp3 * priors_0_1_sqrt_info(2, 4) + _tmp51 * priors_0_1_sqrt_info(2, 5) +
                          _tmp60 * priors_0_1_sqrt_info(2, 3);
  const Scalar _tmp1751 = _tmp386 * landmarks_7_;
  const Scalar _tmp1752 = _tmp1384 * landmarks_7_;
  const Scalar _tmp1753 = _tmp107 * _tmp1752 - _tmp1751 * _tmp76;
  const Scalar _tmp1754 = _tmp1102 * landmarks_7_;
  const Scalar _tmp1755 = _tmp390 * landmarks_7_;
  const Scalar _tmp1756 = _tmp107 * _tmp1754 - _tmp1755 * _tmp99;
  const Scalar _tmp1757 = _tmp1104 * _tmp1756 + _tmp1386 * _tmp1753;
  const Scalar _tmp1758 = _tmp1192 * _tmp1757 - _tmp1193 * _tmp1757 + _tmp1753 * _tmp399;
  const Scalar _tmp1759 = _tmp71 + _tmp74 - 1;
  const Scalar _tmp1760 = _tmp1325 * priors_1_0_sqrt_info(3, 5) +
                          _tmp1759 * priors_1_0_sqrt_info(3, 3) +
                          _tmp829 * priors_1_0_sqrt_info(3, 4);
  const Scalar _tmp1761 = _tmp1252 * _tmp1723 - _tmp1253 * _tmp1723 + _tmp1722 * _tmp339;
  const Scalar _tmp1762 = _tmp1325 * priors_1_0_sqrt_info(0, 5) +
                          _tmp1759 * priors_1_0_sqrt_info(0, 3) +
                          _tmp829 * priors_1_0_sqrt_info(0, 4);
  const Scalar _tmp1763 = -_tmp1139 * _tmp1665 + _tmp1141 * _tmp1664 + _tmp1663 * _tmp249;
  const Scalar _tmp1764 = -_tmp1093 * _tmp1733 + _tmp1095 * _tmp1732 + _tmp1731 * _tmp189;
  const Scalar _tmp1765 = _tmp1340 * landmarks_8_;
  const Scalar _tmp1766 = _tmp107 * _tmp836;
  const Scalar _tmp1767 = _tmp420 * landmarks_8_;
  const Scalar _tmp1768 = _tmp1765 * _tmp1766 - _tmp1767 * _tmp99;
  const Scalar _tmp1769 = _tmp1343 * landmarks_8_;
  const Scalar _tmp1770 = _tmp416 * landmarks_8_;
  const Scalar _tmp1771 = _tmp107 * _tmp1769 - _tmp1770 * _tmp76;
  const Scalar _tmp1772 = _tmp1200 * _tmp1768 + _tmp1345 * _tmp1771;
  const Scalar _tmp1773 = -_tmp1240 * _tmp1772 + _tmp1241 * _tmp1772 + _tmp1771 * _tmp429;
  const Scalar _tmp1774 = _tmp3 * priors_0_1_sqrt_info(1, 4) + _tmp51 * priors_0_1_sqrt_info(1, 5) +
                          _tmp60 * priors_0_1_sqrt_info(1, 3);
  const Scalar _tmp1775 = _tmp1222 * landmarks_14_;
  const Scalar _tmp1776 = _tmp596 * landmarks_14_;
  const Scalar _tmp1777 = _tmp107 * _tmp1775 - _tmp1776 * _tmp76;
  const Scalar _tmp1778 = _tmp839 * landmarks_14_;
  const Scalar _tmp1779 = _tmp600 * landmarks_14_;
  const Scalar _tmp1780 = _tmp107 * _tmp1778 - _tmp1779 * _tmp99;
  const Scalar _tmp1781 =
      (Scalar(1) / Scalar(2)) * _tmp1413 * _tmp1777 + (Scalar(1) / Scalar(2)) * _tmp1780 * _tmp842;
  const Scalar _tmp1782 = _tmp1781 * _tmp597;
  const Scalar _tmp1783 = _tmp177 * _tmp849;
  const Scalar _tmp1784 = _tmp1777 * _tmp609 + _tmp1782 * _tmp1783 - _tmp1782 * _tmp844;
  const Scalar _tmp1785 = _tmp210 * landmarks_1_;
  const Scalar _tmp1786 = _tmp942 * landmarks_1_;
  const Scalar _tmp1787 = _tmp107 * _tmp1786 - _tmp1785 * _tmp99;
  const Scalar _tmp1788 = _tmp1300 * landmarks_1_;
  const Scalar _tmp1789 = _tmp206 * landmarks_1_;
  const Scalar _tmp1790 = _tmp107 * _tmp1788 - _tmp1789 * _tmp76;
  const Scalar _tmp1791 = _tmp1354 * _tmp1790 + _tmp1787 * _tmp944;
  const Scalar _tmp1792 = _tmp1787 * _tmp219 - _tmp1791 * _tmp948 + _tmp1791 * _tmp950;
  const Scalar _tmp1793 = _tmp1204 * _tmp1772 - _tmp1206 * _tmp1772 + _tmp1768 * _tmp429;
  const Scalar _tmp1794 = _tmp1325 * priors_1_0_sqrt_info(1, 5) +
                          _tmp1759 * priors_1_0_sqrt_info(1, 3) +
                          _tmp829 * priors_1_0_sqrt_info(1, 4);
  const Scalar _tmp1795 = _tmp1702 * _tmp519 - _tmp1705 * _tmp863 + _tmp1705 * _tmp865;
  const Scalar _tmp1796 = _tmp3 * priors_0_1_sqrt_info(0, 4) + _tmp51 * priors_0_1_sqrt_info(0, 5) +
                          _tmp60 * priors_0_1_sqrt_info(0, 3);
  const Scalar _tmp1797 = _tmp3 * priors_0_1_sqrt_info(4, 4) + _tmp51 * priors_0_1_sqrt_info(4, 5);
  const Scalar _tmp1798 = _tmp1299 * _tmp1791 - _tmp1301 * _tmp1791 + _tmp1790 * _tmp219;
  const Scalar _tmp1799 = _tmp1258 * _tmp1741 - _tmp1259 * _tmp1741 + _tmp1737 * _tmp309;
  const Scalar _tmp1800 = _tmp1110 * _tmp1757 - _tmp1112 * _tmp1757 + _tmp1756 * _tmp399;
  const Scalar _tmp1801 = _tmp476 * landmarks_10_;
  const Scalar _tmp1802 = _tmp107 * landmarks_10_;
  const Scalar _tmp1803 = _tmp1391 * _tmp1802 - _tmp1801 * _tmp76;
  const Scalar _tmp1804 = _tmp480 * landmarks_10_;
  const Scalar _tmp1805 = _tmp1802 * _tmp957 - _tmp1804 * _tmp99;
  const Scalar _tmp1806 = _tmp1393 * _tmp1803 + _tmp1805 * _tmp959;
  const Scalar _tmp1807 = _tmp1806 * _tmp962;
  const Scalar _tmp1808 = _tmp1312 * _tmp1807 - _tmp1313 * _tmp1806 + _tmp1803 * _tmp489;
  const Scalar _tmp1809 = _tmp3 * priors_0_1_sqrt_info(3, 4) + _tmp51 * priors_0_1_sqrt_info(3, 5) +
                          _tmp60 * priors_0_1_sqrt_info(3, 3);
  const Scalar _tmp1810 = _tmp1282 * landmarks_16_;
  const Scalar _tmp1811 = _tmp660 * landmarks_16_;
  const Scalar _tmp1812 = _tmp107 * _tmp1810 - _tmp1811 * _tmp99;
  const Scalar _tmp1813 = _tmp656 * landmarks_16_;
  const Scalar _tmp1814 = _tmp1307 * landmarks_16_;
  const Scalar _tmp1815 = _tmp107 * _tmp1814 - _tmp1813 * _tmp76;
  const Scalar _tmp1816 = _tmp1284 * _tmp1812 + _tmp1379 * _tmp1815;
  const Scalar _tmp1817 = _tmp1289 * _tmp1816 - _tmp1291 * _tmp1816 + _tmp1812 * _tmp669;
  const Scalar _tmp1818 = _tmp1805 * _tmp489 - _tmp1806 * _tmp965 + _tmp1807 * _tmp961;
  const Scalar _tmp1819 = _tmp690 * landmarks_17_;
  const Scalar _tmp1820 = _tmp1319 * landmarks_17_;
  const Scalar _tmp1821 = _tmp1766 * _tmp1820 - _tmp1819 * _tmp99;
  const Scalar _tmp1822 = _tmp1326 * landmarks_17_;
  const Scalar _tmp1823 = _tmp686 * landmarks_17_;
  const Scalar _tmp1824 = _tmp107 * _tmp1822 - _tmp1823 * _tmp76;
  const Scalar _tmp1825 = _tmp1062 * _tmp1821 + _tmp1328 * _tmp1824;
  const Scalar _tmp1826 = -_tmp1214 * _tmp1825 + _tmp1215 * _tmp1825 + _tmp1821 * _tmp699;
  const Scalar _tmp1827 = std::pow(priors_0_1_sqrt_info(5, 5), Scalar(2));
  const Scalar _tmp1828 = _tmp1827 * _tmp53;
  const Scalar _tmp1829 = -_tmp1126 * _tmp1689 + _tmp1128 * _tmp1689 + _tmp1688 * _tmp729;
  const Scalar _tmp1830 = _tmp266 * landmarks_3_;
  const Scalar _tmp1831 = _tmp1039 * landmarks_3_;
  const Scalar _tmp1832 = _tmp107 * _tmp1831 - _tmp1830 * _tmp76;
  const Scalar _tmp1833 = _tmp1032 * landmarks_3_;
  const Scalar _tmp1834 = _tmp270 * landmarks_3_;
  const Scalar _tmp1835 = _tmp107 * _tmp1833 - _tmp1834 * _tmp99;
  const Scalar _tmp1836 = _tmp1034 * _tmp1835 + _tmp1364 * _tmp1832;
  const Scalar _tmp1837 = _tmp1038 * _tmp1836 - _tmp1041 * _tmp1836 + _tmp1832 * _tmp279;
  const Scalar _tmp1838 = _tmp1781 * _tmp601;
  const Scalar _tmp1839 = _tmp1780 * _tmp609 + _tmp1783 * _tmp1838 - _tmp1838 * _tmp844;
  const Scalar _tmp1840 =
      _tmp1325 * priors_1_0_sqrt_info(4, 5) + _tmp829 * priors_1_0_sqrt_info(4, 4);
  const Scalar _tmp1841 = -_tmp1186 * _tmp1748 + _tmp1189 * _tmp1748 + _tmp1747 * _tmp639;
  const Scalar _tmp1842 = _tmp450 * landmarks_9_;
  const Scalar _tmp1843 = _tmp1265 * landmarks_9_;
  const Scalar _tmp1844 = _tmp107 * _tmp1843 - _tmp1842 * _tmp99;
  const Scalar _tmp1845 = _tmp1293 * landmarks_9_;
  const Scalar _tmp1846 = _tmp446 * landmarks_9_;
  const Scalar _tmp1847 = _tmp107 * _tmp1845 - _tmp1846 * _tmp76;
  const Scalar _tmp1848 = _tmp1267 * _tmp1844 + _tmp1359 * _tmp1847;
  const Scalar _tmp1849 = _tmp1271 * _tmp1848 - _tmp1273 * _tmp1848 + _tmp1844 * _tmp459;
  const Scalar _tmp1850 = _tmp1295 * _tmp1848 - _tmp1296 * _tmp1848 + _tmp1847 * _tmp459;
  const Scalar _tmp1851 = _tmp1220 * _tmp1681 - _tmp1508 * _tmp1681 + _tmp1680 * _tmp579;
  const Scalar _tmp1852 = _tmp1308 * _tmp1816;
  const Scalar _tmp1853 = _tmp1288 * _tmp1852 - _tmp1290 * _tmp1852 + _tmp1815 * _tmp669;
  const Scalar _tmp1854 = _tmp1068 * _tmp1825 - _tmp1070 * _tmp1825 + _tmp1824 * _tmp699;
  const Scalar _tmp1855 = -_tmp1244 * _tmp1836 + _tmp1245 * _tmp1836 + _tmp1835 * _tmp279;
  const Scalar _tmp1856 = _tmp1325 * priors_1_0_sqrt_info(2, 5) +
                          _tmp1759 * priors_1_0_sqrt_info(2, 3) +
                          _tmp829 * priors_1_0_sqrt_info(2, 4);
  const Scalar _tmp1857 = _tmp105 * _tmp1769 - _tmp1770 * _tmp86;
  const Scalar _tmp1858 = _tmp105 * _tmp836;
  const Scalar _tmp1859 = _tmp1765 * _tmp1858 - _tmp1767 * _tmp93;
  const Scalar _tmp1860 = _tmp1200 * _tmp1859 + _tmp1345 * _tmp1857;
  const Scalar _tmp1861 = -_tmp1240 * _tmp1860 + _tmp1241 * _tmp1860 + _tmp1857 * _tmp429;
  const Scalar _tmp1862 = _tmp105 * landmarks_11_;
  const Scalar _tmp1863 = -_tmp1700 * _tmp86 + _tmp1862 * _tmp867;
  const Scalar _tmp1864 = -_tmp1703 * _tmp93 + _tmp1862 * _tmp857;
  const Scalar _tmp1865 = _tmp1334 * _tmp1863 + _tmp1864 * _tmp859;
  const Scalar _tmp1866 = _tmp1865 * _tmp862;
  const Scalar _tmp1867 = _tmp1863 * _tmp519 + _tmp1865 * _tmp865 - _tmp1866 * _tmp861;
  const Scalar _tmp1868 = -_tmp1819 * _tmp93 + _tmp1820 * _tmp1858;
  const Scalar _tmp1869 = _tmp105 * _tmp1822 - _tmp1823 * _tmp86;
  const Scalar _tmp1870 = _tmp1062 * _tmp1868 + _tmp1328 * _tmp1869;
  const Scalar _tmp1871 = -_tmp1214 * _tmp1870 + _tmp1215 * _tmp1870 + _tmp1868 * _tmp699;
  const Scalar _tmp1872 = _tmp105 * _tmp1675 - _tmp1676 * _tmp93;
  const Scalar _tmp1873 = _tmp105 * _tmp1679 - _tmp1678 * _tmp86;
  const Scalar _tmp1874 = _tmp1483 * _tmp1873 + _tmp1872 * _tmp929;
  const Scalar _tmp1875 = -_tmp1485 * _tmp1874 + _tmp1872 * _tmp579 + _tmp1874 * _tmp936;
  const Scalar _tmp1876 = _tmp1220 * _tmp1874 - _tmp1508 * _tmp1874 + _tmp1873 * _tmp579;
  const Scalar _tmp1877 = _tmp105 * landmarks_10_;
  const Scalar _tmp1878 = _tmp1391 * _tmp1877 - _tmp1801 * _tmp86;
  const Scalar _tmp1879 = -_tmp1804 * _tmp93 + _tmp1877 * _tmp957;
  const Scalar _tmp1880 = _tmp1393 * _tmp1878 + _tmp1879 * _tmp959;
  const Scalar _tmp1881 = _tmp1880 * _tmp962;
  const Scalar _tmp1882 = _tmp1879 * _tmp489 - _tmp1880 * _tmp965 + _tmp1881 * _tmp961;
  const Scalar _tmp1883 = _tmp105 * _tmp1831 - _tmp1830 * _tmp86;
  const Scalar _tmp1884 = _tmp105 * _tmp1833 - _tmp1834 * _tmp93;
  const Scalar _tmp1885 = _tmp1034 * _tmp1884 + _tmp1364 * _tmp1883;
  const Scalar _tmp1886 = -_tmp1244 * _tmp1885 + _tmp1245 * _tmp1885 + _tmp1884 * _tmp279;
  const Scalar _tmp1887 = _tmp105 * _tmp1717 - _tmp1718 * _tmp86;
  const Scalar _tmp1888 = _tmp105 * _tmp1721 - _tmp1720 * _tmp93;
  const Scalar _tmp1889 = _tmp1048 * _tmp1888 + _tmp1420 * _tmp1887;
  const Scalar _tmp1890 = _tmp1054 * _tmp1889;
  const Scalar _tmp1891 = -_tmp1053 * _tmp1890 + _tmp1057 * _tmp1889 + _tmp1887 * _tmp339;
  const Scalar _tmp1892 = _tmp105 * _tmp1775 - _tmp1776 * _tmp86;
  const Scalar _tmp1893 = _tmp105 * _tmp1778 - _tmp1779 * _tmp93;
  const Scalar _tmp1894 = _tmp1413 * _tmp1892 + _tmp1893 * _tmp842;
  const Scalar _tmp1895 = _tmp1893 * _tmp609 - _tmp1894 * _tmp846 + _tmp1894 * _tmp851;
  const Scalar _tmp1896 = _tmp105 * _tmp1687 - _tmp1686 * _tmp93;
  const Scalar _tmp1897 = _tmp105 * _tmp1684 - _tmp1683 * _tmp86;
  const Scalar _tmp1898 = _tmp1120 * _tmp1896 + _tmp1473 * _tmp1897;
  const Scalar _tmp1899 = -_tmp1126 * _tmp1898 + _tmp1128 * _tmp1898 + _tmp1896 * _tmp729;
  const Scalar _tmp1900 = _tmp91 - 1;
  const Scalar _tmp1901 = _tmp1900 + _tmp71;
  const Scalar _tmp1902 =
      _tmp1321 * priors_1_0_sqrt_info(4, 5) + _tmp1901 * priors_1_0_sqrt_info(4, 4);
  const Scalar _tmp1903 = _tmp105 * _tmp1708 - _tmp1709 * _tmp93;
  const Scalar _tmp1904 = _tmp105 * _tmp1712 - _tmp1711 * _tmp86;
  const Scalar _tmp1905 = _tmp1429 * _tmp1904 + _tmp1903 * _tmp972;
  const Scalar _tmp1906 = _tmp1227 * _tmp1905 - _tmp1432 * _tmp1905 + _tmp1903 * _tmp369;
  const Scalar _tmp1907 = _tmp105 * _tmp1692 - _tmp1693 * _tmp86;
  const Scalar _tmp1908 = _tmp105 * _tmp1696 - _tmp1695 * _tmp93;
  const Scalar _tmp1909 = _tmp1497 * _tmp1907 + _tmp1908 * _tmp987;
  const Scalar _tmp1910 = _tmp1907 * _tmp549 - _tmp1909 * _tmp991 + _tmp1909 * _tmp994;
  const Scalar _tmp1911 = _tmp105 * _tmp1659 - _tmp1658 * _tmp93;
  const Scalar _tmp1912 = _tmp105 * _tmp1662 - _tmp1661 * _tmp86;
  const Scalar _tmp1913 = _tmp1137 * _tmp1911 + _tmp1489 * _tmp1912;
  const Scalar _tmp1914 = _tmp1248 * _tmp1913 - _tmp1249 * _tmp1913 + _tmp1911 * _tmp249;
  const Scalar _tmp1915 = _tmp52 * priors_0_1_sqrt_info(1, 5) +
                          _tmp59 * priors_0_1_sqrt_info(1, 3) + _tmp6 * priors_0_1_sqrt_info(1, 4);
  const Scalar _tmp1916 = _tmp105 * _tmp1788 - _tmp1789 * _tmp86;
  const Scalar _tmp1917 = _tmp105 * _tmp1786 - _tmp1785 * _tmp93;
  const Scalar _tmp1918 = _tmp1354 * _tmp1916 + _tmp1917 * _tmp944;
  const Scalar _tmp1919 = _tmp1299 * _tmp1918 - _tmp1301 * _tmp1918 + _tmp1916 * _tmp219;
  const Scalar _tmp1920 = -_tmp1477 * _tmp1905 + _tmp1904 * _tmp369 + _tmp1905 * _tmp979;
  const Scalar _tmp1921 = _tmp1864 * _tmp519 + _tmp1865 * _tmp921 - _tmp1866 * _tmp919;
  const Scalar _tmp1922 = _tmp1068 * _tmp1870 - _tmp1070 * _tmp1870 + _tmp1869 * _tmp699;
  const Scalar _tmp1923 = _tmp52 * priors_0_1_sqrt_info(3, 5) +
                          _tmp59 * priors_0_1_sqrt_info(3, 3) + _tmp6 * priors_0_1_sqrt_info(3, 4);
  const Scalar _tmp1924 = _tmp1156 * _tmp1898 - _tmp1157 * _tmp1898 + _tmp1897 * _tmp729;
  const Scalar _tmp1925 = _tmp1217 * _tmp1321;
  const Scalar _tmp1926 = _tmp105 * landmarks_15_;
  const Scalar _tmp1927 = _tmp1180 * _tmp1926 - _tmp1744 * _tmp93;
  const Scalar _tmp1928 = _tmp1187 * _tmp1926 - _tmp1746 * _tmp86;
  const Scalar _tmp1929 = _tmp1182 * _tmp1927 + _tmp1503 * _tmp1928;
  const Scalar _tmp1930 = _tmp1276 * _tmp1929 - _tmp1277 * _tmp1929 + _tmp1927 * _tmp639;
  const Scalar _tmp1931 = _tmp1321 * priors_1_0_sqrt_info(0, 5) +
                          _tmp1522 * priors_1_0_sqrt_info(0, 3) +
                          _tmp1901 * priors_1_0_sqrt_info(0, 4);
  const Scalar _tmp1932 = _tmp1321 * priors_1_0_sqrt_info(3, 5) +
                          _tmp1522 * priors_1_0_sqrt_info(3, 3) +
                          _tmp1901 * priors_1_0_sqrt_info(3, 4);
  const Scalar _tmp1933 = _tmp1204 * _tmp1860 - _tmp1206 * _tmp1860 + _tmp1859 * _tmp429;
  const Scalar _tmp1934 = _tmp105 * _tmp1754 - _tmp1755 * _tmp93;
  const Scalar _tmp1935 = _tmp105 * _tmp1752 - _tmp1751 * _tmp86;
  const Scalar _tmp1936 = _tmp1104 * _tmp1934 + _tmp1386 * _tmp1935;
  const Scalar _tmp1937 = _tmp1110 * _tmp1936 - _tmp1112 * _tmp1936 + _tmp1934 * _tmp399;
  const Scalar _tmp1938 = _tmp105 * _tmp1845 - _tmp1846 * _tmp86;
  const Scalar _tmp1939 = _tmp105 * _tmp1843 - _tmp1842 * _tmp93;
  const Scalar _tmp1940 = _tmp1267 * _tmp1939 + _tmp1359 * _tmp1938;
  const Scalar _tmp1941 = _tmp1295 * _tmp1940 - _tmp1296 * _tmp1940 + _tmp1938 * _tmp459;
  const Scalar _tmp1942 = -_tmp1186 * _tmp1929 + _tmp1189 * _tmp1929 + _tmp1928 * _tmp639;
  const Scalar _tmp1943 = _tmp1321 * priors_1_0_sqrt_info(1, 5) +
                          _tmp1522 * priors_1_0_sqrt_info(1, 3) +
                          _tmp1901 * priors_1_0_sqrt_info(1, 4);
  const Scalar _tmp1944 = _tmp1312 * _tmp1881 - _tmp1313 * _tmp1880 + _tmp1878 * _tmp489;
  const Scalar _tmp1945 = _tmp105 * _tmp1729 - _tmp1730 * _tmp93;
  const Scalar _tmp1946 = _tmp105 * _tmp1726 - _tmp1727 * _tmp86;
  const Scalar _tmp1947 = _tmp1091 * _tmp1945 + _tmp1408 * _tmp1946;
  const Scalar _tmp1948 = _tmp1094 * _tmp1947;
  const Scalar _tmp1949 = _tmp1093 * _tmp1948 - _tmp1097 * _tmp1947 + _tmp189 * _tmp1945;
  const Scalar _tmp1950 = _tmp52 * priors_0_1_sqrt_info(0, 5) +
                          _tmp59 * priors_0_1_sqrt_info(0, 3) + _tmp6 * priors_0_1_sqrt_info(0, 4);
  const Scalar _tmp1951 = _tmp105 * _tmp1736 - _tmp1735 * _tmp86;
  const Scalar _tmp1952 = _tmp105 * _tmp1738 - _tmp1739 * _tmp93;
  const Scalar _tmp1953 = _tmp1167 * _tmp1952 + _tmp1369 * _tmp1951;
  const Scalar _tmp1954 = _tmp1258 * _tmp1953 - _tmp1259 * _tmp1953 + _tmp1951 * _tmp309;
  const Scalar _tmp1955 = -_tmp1172 * _tmp1953 + _tmp1174 * _tmp1953 + _tmp1952 * _tmp309;
  const Scalar _tmp1956 = _tmp52 * priors_0_1_sqrt_info(4, 5) + _tmp6 * priors_0_1_sqrt_info(4, 4);
  const Scalar _tmp1957 = _tmp105 * _tmp1814 - _tmp1813 * _tmp86;
  const Scalar _tmp1958 = _tmp105 * _tmp1810 - _tmp1811 * _tmp93;
  const Scalar _tmp1959 = _tmp1284 * _tmp1958 + _tmp1379 * _tmp1957;
  const Scalar _tmp1960 = _tmp1290 * _tmp1959;
  const Scalar _tmp1961 = -_tmp1308 * _tmp1960 + _tmp1309 * _tmp1959 + _tmp1957 * _tmp669;
  const Scalar _tmp1962 = _tmp1917 * _tmp219 - _tmp1918 * _tmp948 + _tmp1918 * _tmp950;
  const Scalar _tmp1963 = _tmp1209 * _tmp1948 - _tmp1210 * _tmp1947 + _tmp189 * _tmp1946;
  const Scalar _tmp1964 = -_tmp1287 * _tmp1960 + _tmp1289 * _tmp1959 + _tmp1958 * _tmp669;
  const Scalar _tmp1965 = _tmp52 * priors_0_1_sqrt_info(2, 5) +
                          _tmp59 * priors_0_1_sqrt_info(2, 3) + _tmp6 * priors_0_1_sqrt_info(2, 4);
  const Scalar _tmp1966 = _tmp1141 * _tmp1913 - _tmp1143 * _tmp1913 + _tmp1912 * _tmp249;
  const Scalar _tmp1967 = _tmp1038 * _tmp1885 - _tmp1041 * _tmp1885 + _tmp1883 * _tmp279;
  const Scalar _tmp1968 = _tmp105 * landmarks_19_;
  const Scalar _tmp1969 = _tmp1445 * _tmp1968 - _tmp1670 * _tmp93;
  const Scalar _tmp1970 = _tmp1437 * _tmp1968 - _tmp1667 * _tmp86;
  const Scalar _tmp1971 = _tmp1076 * _tmp1969 + _tmp1439 * _tmp1970;
  const Scalar _tmp1972 = _tmp1082 * _tmp1971;
  const Scalar _tmp1973 = _tmp1159 * _tmp1972 - _tmp1160 * _tmp1971 + _tmp1970 * _tmp759;
  const Scalar _tmp1974 = _tmp1271 * _tmp1940 - _tmp1273 * _tmp1940 + _tmp1939 * _tmp459;
  const Scalar _tmp1975 = _tmp1079 * _tmp1972 - _tmp1081 * _tmp1971 + _tmp1969 * _tmp759;
  const Scalar _tmp1976 = _tmp1223 * _tmp1894 - _tmp1224 * _tmp1894 + _tmp1892 * _tmp609;
  const Scalar _tmp1977 = -_tmp1230 * _tmp1909 + _tmp1231 * _tmp1909 + _tmp1908 * _tmp549;
  const Scalar _tmp1978 = -_tmp1251 * _tmp1890 + _tmp1252 * _tmp1889 + _tmp1888 * _tmp339;
  const Scalar _tmp1979 = _tmp1321 * priors_1_0_sqrt_info(2, 5) +
                          _tmp1522 * priors_1_0_sqrt_info(2, 3) +
                          _tmp1901 * priors_1_0_sqrt_info(2, 4);
  const Scalar _tmp1980 = _tmp1192 * _tmp1936 - _tmp1193 * _tmp1936 + _tmp1935 * _tmp399;
  const Scalar _tmp1981 = _tmp103 * _tmp1687 - _tmp1686 * _tmp96;
  const Scalar _tmp1982 = _tmp103 * _tmp1684 - _tmp1683 * _tmp81;
  const Scalar _tmp1983 = _tmp1120 * _tmp1981 + _tmp1473 * _tmp1982;
  const Scalar _tmp1984 = -_tmp1126 * _tmp1983 + _tmp1128 * _tmp1983 + _tmp1981 * _tmp729;
  const Scalar _tmp1985 = _tmp103 * _tmp1752 - _tmp1751 * _tmp81;
  const Scalar _tmp1986 = _tmp103 * _tmp1754 - _tmp1755 * _tmp96;
  const Scalar _tmp1987 = _tmp1104 * _tmp1986 + _tmp1386 * _tmp1985;
  const Scalar _tmp1988 = _tmp1192 * _tmp1987 - _tmp1193 * _tmp1987 + _tmp1985 * _tmp399;
  const Scalar _tmp1989 = _tmp103 * _tmp836;
  const Scalar _tmp1990 = -_tmp1819 * _tmp96 + _tmp1820 * _tmp1989;
  const Scalar _tmp1991 = _tmp103 * _tmp1822 - _tmp1823 * _tmp81;
  const Scalar _tmp1992 = _tmp1062 * _tmp1990 + _tmp1328 * _tmp1991;
  const Scalar _tmp1993 = -_tmp1214 * _tmp1992 + _tmp1215 * _tmp1992 + _tmp1990 * _tmp699;
  const Scalar _tmp1994 = _tmp1110 * _tmp1987 - _tmp1112 * _tmp1987 + _tmp1986 * _tmp399;
  const Scalar _tmp1995 = _tmp103 * _tmp1659 - _tmp1658 * _tmp96;
  const Scalar _tmp1996 = _tmp103 * _tmp1662 - _tmp1661 * _tmp81;
  const Scalar _tmp1997 = _tmp1137 * _tmp1995 + _tmp1489 * _tmp1996;
  const Scalar _tmp1998 = _tmp1248 * _tmp1997 - _tmp1249 * _tmp1997 + _tmp1995 * _tmp249;
  const Scalar _tmp1999 = _tmp103 * landmarks_11_;
  const Scalar _tmp2000 = -_tmp1700 * _tmp81 + _tmp1999 * _tmp867;
  const Scalar _tmp2001 = -_tmp1703 * _tmp96 + _tmp1999 * _tmp857;
  const Scalar _tmp2002 = _tmp1334 * _tmp2000 + _tmp2001 * _tmp859;
  const Scalar _tmp2003 = _tmp2000 * _tmp519 - _tmp2002 * _tmp863 + _tmp2002 * _tmp865;
  const Scalar _tmp2004 = _tmp103 * _tmp1679 - _tmp1678 * _tmp81;
  const Scalar _tmp2005 = _tmp103 * _tmp1675 - _tmp1676 * _tmp96;
  const Scalar _tmp2006 = _tmp1483 * _tmp2004 + _tmp2005 * _tmp929;
  const Scalar _tmp2007 = _tmp1220 * _tmp2006 - _tmp1508 * _tmp2006 + _tmp2004 * _tmp579;
  const Scalar _tmp2008 = _tmp103 * landmarks_10_;
  const Scalar _tmp2009 = _tmp1391 * _tmp2008 - _tmp1801 * _tmp81;
  const Scalar _tmp2010 = -_tmp1804 * _tmp96 + _tmp2008 * _tmp957;
  const Scalar _tmp2011 = _tmp1393 * _tmp2009 + _tmp2010 * _tmp959;
  const Scalar _tmp2012 = -_tmp1313 * _tmp2011 + _tmp1314 * _tmp2011 + _tmp2009 * _tmp489;
  const Scalar _tmp2013 = _tmp1155 * _tmp1983;
  const Scalar _tmp2014 = -_tmp1124 * _tmp2013 + _tmp1127 * _tmp2013 + _tmp1982 * _tmp729;
  const Scalar _tmp2015 = _tmp103 * landmarks_4_;
  const Scalar _tmp2016 = _tmp1256 * _tmp2015 - _tmp1735 * _tmp81;
  const Scalar _tmp2017 = _tmp1165 * _tmp2015 - _tmp1739 * _tmp96;
  const Scalar _tmp2018 = _tmp1167 * _tmp2017 + _tmp1369 * _tmp2016;
  const Scalar _tmp2019 = _tmp1171 * _tmp2018;
  const Scalar _tmp2020 = -_tmp1257 * _tmp2019 + _tmp1258 * _tmp2018 + _tmp2016 * _tmp309;
  const Scalar _tmp2021 = _tmp103 * _tmp1726 - _tmp1727 * _tmp81;
  const Scalar _tmp2022 = _tmp103 * _tmp1729 - _tmp1730 * _tmp96;
  const Scalar _tmp2023 = _tmp1091 * _tmp2022 + _tmp1408 * _tmp2021;
  const Scalar _tmp2024 = -_tmp1210 * _tmp2023 + _tmp1211 * _tmp2023 + _tmp189 * _tmp2021;
  const Scalar _tmp2025 = _tmp10 * priors_0_1_sqrt_info(2, 4) +
                          _tmp48 * priors_0_1_sqrt_info(2, 5) + _tmp61 * priors_0_1_sqrt_info(2, 3);
  const Scalar _tmp2026 = _tmp103 * landmarks_19_;
  const Scalar _tmp2027 = _tmp1445 * _tmp2026 - _tmp1670 * _tmp96;
  const Scalar _tmp2028 = _tmp1437 * _tmp2026 - _tmp1667 * _tmp81;
  const Scalar _tmp2029 = _tmp1076 * _tmp2027 + _tmp1439 * _tmp2028;
  const Scalar _tmp2030 = _tmp1082 * _tmp2029;
  const Scalar _tmp2031 = _tmp1079 * _tmp2030 - _tmp1081 * _tmp2029 + _tmp2027 * _tmp759;
  const Scalar _tmp2032 = _tmp103 * _tmp1845 - _tmp1846 * _tmp81;
  const Scalar _tmp2033 = _tmp103 * _tmp1843 - _tmp1842 * _tmp96;
  const Scalar _tmp2034 = _tmp1267 * _tmp2033 + _tmp1359 * _tmp2032;
  const Scalar _tmp2035 = _tmp1295 * _tmp2034 - _tmp1296 * _tmp2034 + _tmp2032 * _tmp459;
  const Scalar _tmp2036 = _tmp103 * _tmp1712 - _tmp1711 * _tmp81;
  const Scalar _tmp2037 = _tmp103 * _tmp1708 - _tmp1709 * _tmp96;
  const Scalar _tmp2038 = _tmp1429 * _tmp2036 + _tmp2037 * _tmp972;
  const Scalar _tmp2039 = -_tmp1477 * _tmp2038 + _tmp2036 * _tmp369 + _tmp2038 * _tmp979;
  const Scalar _tmp2040 = _tmp1227 * _tmp2038 - _tmp1432 * _tmp2038 + _tmp2037 * _tmp369;
  const Scalar _tmp2041 = _tmp103 * _tmp1810 - _tmp1811 * _tmp96;
  const Scalar _tmp2042 = _tmp103 * _tmp1814 - _tmp1813 * _tmp81;
  const Scalar _tmp2043 = _tmp1284 * _tmp2041 + _tmp1379 * _tmp2042;
  const Scalar _tmp2044 = _tmp1289 * _tmp2043 - _tmp1291 * _tmp2043 + _tmp2041 * _tmp669;
  const Scalar _tmp2045 = -_tmp1485 * _tmp2006 + _tmp2005 * _tmp579 + _tmp2006 * _tmp936;
  const Scalar _tmp2046 = _tmp103 * _tmp1786 - _tmp1785 * _tmp96;
  const Scalar _tmp2047 = _tmp103 * _tmp1788 - _tmp1789 * _tmp81;
  const Scalar _tmp2048 = _tmp1354 * _tmp2047 + _tmp2046 * _tmp944;
  const Scalar _tmp2049 = _tmp2048 * _tmp946;
  const Scalar _tmp2050 = -_tmp1298 * _tmp2049 + _tmp1299 * _tmp2048 + _tmp2047 * _tmp219;
  const Scalar _tmp2051 = _tmp103 * _tmp1717 - _tmp1718 * _tmp81;
  const Scalar _tmp2052 = _tmp103 * _tmp1721 - _tmp1720 * _tmp96;
  const Scalar _tmp2053 = _tmp1048 * _tmp2052 + _tmp1420 * _tmp2051;
  const Scalar _tmp2054 = _tmp1252 * _tmp2053 - _tmp1253 * _tmp2053 + _tmp2052 * _tmp339;
  const Scalar _tmp2055 = _tmp1271 * _tmp2034 - _tmp1273 * _tmp2034 + _tmp2033 * _tmp459;
  const Scalar _tmp2056 = _tmp103 * landmarks_14_;
  const Scalar _tmp2057 = _tmp1222 * _tmp2056 - _tmp1776 * _tmp81;
  const Scalar _tmp2058 = -_tmp1779 * _tmp96 + _tmp2056 * _tmp839;
  const Scalar _tmp2059 = _tmp1413 * _tmp2057 + _tmp2058 * _tmp842;
  const Scalar _tmp2060 = _tmp1223 * _tmp2059 - _tmp1224 * _tmp2059 + _tmp2057 * _tmp609;
  const Scalar _tmp2061 = _tmp1159 * _tmp2030 - _tmp1160 * _tmp2029 + _tmp2028 * _tmp759;
  const Scalar _tmp2062 = _tmp103 * _tmp1696 - _tmp1695 * _tmp96;
  const Scalar _tmp2063 = _tmp103 * _tmp1692 - _tmp1693 * _tmp81;
  const Scalar _tmp2064 = _tmp1497 * _tmp2063 + _tmp2062 * _tmp987;
  const Scalar _tmp2065 = _tmp2063 * _tmp549 - _tmp2064 * _tmp991 + _tmp2064 * _tmp994;
  const Scalar _tmp2066 = -_tmp1230 * _tmp2064 + _tmp1231 * _tmp2064 + _tmp2062 * _tmp549;
  const Scalar _tmp2067 = _tmp1900 + _tmp74;
  const Scalar _tmp2068 = _tmp1523 * priors_1_0_sqrt_info(0, 3) +
                          _tmp2067 * priors_1_0_sqrt_info(0, 5) +
                          _tmp834 * priors_1_0_sqrt_info(0, 4);
  const Scalar _tmp2069 = _tmp1309 * _tmp2043 - _tmp1310 * _tmp2043 + _tmp2042 * _tmp669;
  const Scalar _tmp2070 = _tmp103 * _tmp1833 - _tmp1834 * _tmp96;
  const Scalar _tmp2071 = _tmp103 * _tmp1831 - _tmp1830 * _tmp81;
  const Scalar _tmp2072 = _tmp1034 * _tmp2070 + _tmp1364 * _tmp2071;
  const Scalar _tmp2073 = -_tmp1244 * _tmp2072 + _tmp1245 * _tmp2072 + _tmp2070 * _tmp279;
  const Scalar _tmp2074 = _tmp103 * landmarks_15_;
  const Scalar _tmp2075 = _tmp1180 * _tmp2074 - _tmp1744 * _tmp96;
  const Scalar _tmp2076 = _tmp1187 * _tmp2074 - _tmp1746 * _tmp81;
  const Scalar _tmp2077 = _tmp1182 * _tmp2075 + _tmp1503 * _tmp2076;
  const Scalar _tmp2078 = _tmp1276 * _tmp2077 - _tmp1277 * _tmp2077 + _tmp2075 * _tmp639;
  const Scalar _tmp2079 = _tmp1523 * priors_1_0_sqrt_info(3, 3) +
                          _tmp2067 * priors_1_0_sqrt_info(3, 5) +
                          _tmp834 * priors_1_0_sqrt_info(3, 4);
  const Scalar _tmp2080 =
      _tmp2067 * priors_1_0_sqrt_info(4, 5) + _tmp834 * priors_1_0_sqrt_info(4, 4);
  const Scalar _tmp2081 = _tmp2001 * _tmp519 - _tmp2002 * _tmp920 + _tmp2002 * _tmp921;
  const Scalar _tmp2082 = -_tmp1055 * _tmp2053 + _tmp1057 * _tmp2053 + _tmp2051 * _tmp339;
  const Scalar _tmp2083 = _tmp103 * _tmp1769 - _tmp1770 * _tmp81;
  const Scalar _tmp2084 = _tmp1765 * _tmp1989 - _tmp1767 * _tmp96;
  const Scalar _tmp2085 = _tmp1200 * _tmp2084 + _tmp1345 * _tmp2083;
  const Scalar _tmp2086 = -_tmp1240 * _tmp2085 + _tmp1241 * _tmp2085 + _tmp2083 * _tmp429;
  const Scalar _tmp2087 = _tmp10 * priors_0_1_sqrt_info(0, 4) +
                          _tmp48 * priors_0_1_sqrt_info(0, 5) + _tmp61 * priors_0_1_sqrt_info(0, 3);
  const Scalar _tmp2088 = _tmp1204 * _tmp2085 - _tmp1206 * _tmp2085 + _tmp2084 * _tmp429;
  const Scalar _tmp2089 = _tmp1523 * priors_1_0_sqrt_info(1, 3) +
                          _tmp2067 * priors_1_0_sqrt_info(1, 5) +
                          _tmp834 * priors_1_0_sqrt_info(1, 4);
  const Scalar _tmp2090 = _tmp2046 * _tmp219 + _tmp2048 * _tmp950 - _tmp2049 * _tmp947;
  const Scalar _tmp2091 = _tmp2010 * _tmp489 + _tmp2011 * _tmp963 - _tmp2011 * _tmp965;
  const Scalar _tmp2092 = -_tmp1186 * _tmp2077 + _tmp1189 * _tmp2077 + _tmp2076 * _tmp639;
  const Scalar _tmp2093 = _tmp1095 * _tmp2023 - _tmp1097 * _tmp2023 + _tmp189 * _tmp2022;
  const Scalar _tmp2094 = -_tmp1170 * _tmp2019 + _tmp1174 * _tmp2018 + _tmp2017 * _tmp309;
  const Scalar _tmp2095 = _tmp1038 * _tmp2072 - _tmp1041 * _tmp2072 + _tmp2071 * _tmp279;
  const Scalar _tmp2096 = _tmp2058 * _tmp609 - _tmp2059 * _tmp846 + _tmp2059 * _tmp851;
  const Scalar _tmp2097 = _tmp10 * priors_0_1_sqrt_info(4, 4) + _tmp48 * priors_0_1_sqrt_info(4, 5);
  const Scalar _tmp2098 = _tmp1141 * _tmp1997 - _tmp1143 * _tmp1997 + _tmp1996 * _tmp249;
  const Scalar _tmp2099 = _tmp10 * priors_0_1_sqrt_info(3, 4) +
                          _tmp48 * priors_0_1_sqrt_info(3, 5) + _tmp61 * priors_0_1_sqrt_info(3, 3);
  const Scalar _tmp2100 = _tmp1068 * _tmp1992 - _tmp1070 * _tmp1992 + _tmp1991 * _tmp699;
  const Scalar _tmp2101 = _tmp10 * priors_0_1_sqrt_info(1, 4) +
                          _tmp48 * priors_0_1_sqrt_info(1, 5) + _tmp61 * priors_0_1_sqrt_info(1, 3);
  const Scalar _tmp2102 = _tmp1523 * priors_1_0_sqrt_info(2, 3) +
                          _tmp2067 * priors_1_0_sqrt_info(2, 5) +
                          _tmp834 * priors_1_0_sqrt_info(2, 4);
  const Scalar _tmp2103 = _tmp149 * _tmp99 + _tmp156 * _tmp93 + _tmp160 * _tmp96;
  const Scalar _tmp2104 = _tmp2103 * views_1_calibration(1, 0);
  const Scalar _tmp2105 = (Scalar(1) / Scalar(2)) * _tmp103 * _tmp160 +
                          (Scalar(1) / Scalar(2)) * _tmp105 * _tmp156 +
                          (Scalar(1) / Scalar(2)) * _tmp107 * _tmp149;
  const Scalar _tmp2106 = _tmp2105 * views_1_calibration(1, 0);
  const Scalar _tmp2107 = -_tmp1087 * _tmp2106 + _tmp167 * _tmp2104;
  const Scalar _tmp2108 = _tmp149 * _tmp76 + _tmp156 * _tmp86 + _tmp160 * _tmp81;
  const Scalar _tmp2109 = _tmp2108 * views_1_calibration(0, 0);
  const Scalar _tmp2110 = _tmp2105 * views_1_calibration(0, 0);
  const Scalar _tmp2111 = -_tmp1090 * _tmp2110 + _tmp167 * _tmp2109;
  const Scalar _tmp2112 = _tmp1091 * _tmp2107 + _tmp1408 * _tmp2111;
  const Scalar _tmp2113 = _tmp1209 * _tmp2112;
  const Scalar _tmp2114 = _tmp1094 * _tmp2113 - _tmp1096 * _tmp2113 + _tmp189 * _tmp2111;
  const Scalar _tmp2115 = std::pow(matches_0_0_weight, Scalar(2)) / std::pow(_tmp763, Scalar(2));
  const Scalar _tmp2116 = _tmp1095 * _tmp2112 - _tmp1097 * _tmp2112 + _tmp189 * _tmp2107;
  const Scalar _tmp2117 = std::pow(matches_0_1_weight, Scalar(2)) / std::pow(_tmp766, Scalar(2));
  const Scalar _tmp2118 = _tmp205 * _tmp2109 - _tmp2110 * _tmp940;
  const Scalar _tmp2119 = _tmp205 * _tmp2104 - _tmp2106 * _tmp941;
  const Scalar _tmp2120 = _tmp1354 * _tmp2118 + _tmp2119 * _tmp944;
  const Scalar _tmp2121 = _tmp1299 * _tmp2120 - _tmp1301 * _tmp2120 + _tmp2118 * _tmp219;
  const Scalar _tmp2122 = _tmp2119 * _tmp219 - _tmp2120 * _tmp948 + _tmp2120 * _tmp950;
  const Scalar _tmp2123 = std::pow(matches_0_2_weight, Scalar(2)) / std::pow(_tmp769, Scalar(2));
  const Scalar _tmp2124 = -_tmp1132 * _tmp2110 + _tmp2109 * _tmp235;
  const Scalar _tmp2125 = -_tmp1134 * _tmp2106 + _tmp2104 * _tmp235;
  const Scalar _tmp2126 = _tmp1137 * _tmp2125 + _tmp1489 * _tmp2124;
  const Scalar _tmp2127 = _tmp1141 * _tmp2126 - _tmp1143 * _tmp2126 + _tmp2124 * _tmp249;
  const Scalar _tmp2128 = _tmp1248 * _tmp2126 - _tmp1249 * _tmp2126 + _tmp2125 * _tmp249;
  const Scalar _tmp2129 = -_tmp1030 * _tmp2110 + _tmp2109 * _tmp265;
  const Scalar _tmp2130 = -_tmp1031 * _tmp2106 + _tmp2104 * _tmp265;
  const Scalar _tmp2131 = _tmp1034 * _tmp2130 + _tmp1364 * _tmp2129;
  const Scalar _tmp2132 = _tmp1038 * _tmp2131 - _tmp1041 * _tmp2131 + _tmp2129 * _tmp279;
  const Scalar _tmp2133 = std::pow(matches_0_3_weight, Scalar(2)) / std::pow(_tmp772, Scalar(2));
  const Scalar _tmp2134 = _tmp1243 * _tmp2131;
  const Scalar _tmp2135 = _tmp1037 * _tmp2134 - _tmp1040 * _tmp2134 + _tmp2130 * _tmp279;
  const Scalar _tmp2136 = std::pow(matches_0_4_weight, Scalar(2)) / std::pow(_tmp775, Scalar(2));
  const Scalar _tmp2137 = -_tmp1164 * _tmp2106 + _tmp2104 * _tmp295;
  const Scalar _tmp2138 = -_tmp1168 * _tmp2110 + _tmp2109 * _tmp295;
  const Scalar _tmp2139 = _tmp1167 * _tmp2137 + _tmp1369 * _tmp2138;
  const Scalar _tmp2140 = -_tmp1172 * _tmp2139 + _tmp1174 * _tmp2139 + _tmp2137 * _tmp309;
  const Scalar _tmp2141 = _tmp1258 * _tmp2139 - _tmp1259 * _tmp2139 + _tmp2138 * _tmp309;
  const Scalar _tmp2142 = -_tmp1049 * _tmp2110 + _tmp2109 * _tmp325;
  const Scalar _tmp2143 = -_tmp1045 * _tmp2106 + _tmp2104 * _tmp325;
  const Scalar _tmp2144 = _tmp1048 * _tmp2143 + _tmp1420 * _tmp2142;
  const Scalar _tmp2145 = -_tmp1055 * _tmp2144 + _tmp1057 * _tmp2144 + _tmp2142 * _tmp339;
  const Scalar _tmp2146 = _tmp1252 * _tmp2144 - _tmp1253 * _tmp2144 + _tmp2143 * _tmp339;
  const Scalar _tmp2147 = std::pow(matches_0_5_weight, Scalar(2)) / std::pow(_tmp778, Scalar(2));
  const Scalar _tmp2148 = -_tmp1430 * _tmp2106 + _tmp2104 * _tmp355;
  const Scalar _tmp2149 = -_tmp1426 * _tmp2110 + _tmp2109 * _tmp355;
  const Scalar _tmp2150 = _tmp1429 * _tmp2149 + _tmp2148 * _tmp972;
  const Scalar _tmp2151 = _tmp2150 * _tmp975;
  const Scalar _tmp2152 = _tmp2149 * _tmp369 + _tmp2150 * _tmp979 - _tmp2151 * _tmp977;
  const Scalar _tmp2153 = -_tmp1226 * _tmp2151 + _tmp1227 * _tmp2150 + _tmp2148 * _tmp369;
  const Scalar _tmp2154 = std::pow(matches_0_6_weight, Scalar(2)) / std::pow(_tmp781, Scalar(2));
  const Scalar _tmp2155 = std::pow(matches_0_7_weight, Scalar(2)) / std::pow(_tmp784, Scalar(2));
  const Scalar _tmp2156 = -_tmp1105 * _tmp2110 + _tmp2109 * _tmp385;
  const Scalar _tmp2157 = -_tmp1101 * _tmp2106 + _tmp2104 * _tmp385;
  const Scalar _tmp2158 = _tmp1104 * _tmp2157 + _tmp1386 * _tmp2156;
  const Scalar _tmp2159 = _tmp1192 * _tmp2158 - _tmp1193 * _tmp2158 + _tmp2156 * _tmp399;
  const Scalar _tmp2160 = _tmp1110 * _tmp2158 - _tmp1112 * _tmp2158 + _tmp2157 * _tmp399;
  const Scalar _tmp2161 = -_tmp1342 * _tmp2105 + _tmp2109 * _tmp415;
  const Scalar _tmp2162 = -_tmp1340 * _tmp2106 + _tmp2104 * _tmp415;
  const Scalar _tmp2163 = _tmp1200 * _tmp2162 + _tmp1345 * _tmp2161;
  const Scalar _tmp2164 = -_tmp1240 * _tmp2163 + _tmp1241 * _tmp2163 + _tmp2161 * _tmp429;
  const Scalar _tmp2165 = std::pow(matches_0_8_weight, Scalar(2)) / std::pow(_tmp787, Scalar(2));
  const Scalar _tmp2166 = _tmp1204 * _tmp2163 - _tmp1206 * _tmp2163 + _tmp2162 * _tmp429;
  const Scalar _tmp2167 = -_tmp1264 * _tmp2106 + _tmp2104 * _tmp445;
  const Scalar _tmp2168 = -_tmp1263 * _tmp2110 + _tmp2109 * _tmp445;
  const Scalar _tmp2169 = _tmp1267 * _tmp2167 + _tmp1359 * _tmp2168;
  const Scalar _tmp2170 = _tmp1270 * _tmp2169;
  const Scalar _tmp2171 = _tmp1269 * _tmp2170 - _tmp1273 * _tmp2169 + _tmp2167 * _tmp459;
  const Scalar _tmp2172 = std::pow(matches_0_9_weight, Scalar(2)) / std::pow(_tmp790, Scalar(2));
  const Scalar _tmp2173 = _tmp1294 * _tmp2170 - _tmp1296 * _tmp2169 + _tmp2168 * _tmp459;
  const Scalar _tmp2174 = _tmp2109 * _tmp475 - _tmp2110 * _tmp954;
  const Scalar _tmp2175 = _tmp2103 * _tmp480 - _tmp2106 * _tmp956;
  const Scalar _tmp2176 = _tmp1393 * _tmp2174 + _tmp2175 * _tmp959;
  const Scalar _tmp2177 = _tmp2176 * _tmp962;
  const Scalar _tmp2178 = _tmp1312 * _tmp2177 - _tmp1313 * _tmp2176 + _tmp2174 * _tmp489;
  const Scalar _tmp2179 = _tmp2175 * _tmp489 - _tmp2176 * _tmp965 + _tmp2177 * _tmp961;
  const Scalar _tmp2180 = std::pow(matches_0_10_weight, Scalar(2)) / std::pow(_tmp793, Scalar(2));
  const Scalar _tmp2181 = std::pow(matches_0_11_weight, Scalar(2)) / std::pow(_tmp796, Scalar(2));
  const Scalar _tmp2182 = _tmp2104 * _tmp505 - _tmp2106 * _tmp856;
  const Scalar _tmp2183 = _tmp2109 * _tmp505 - _tmp2110 * _tmp855;
  const Scalar _tmp2184 = _tmp1334 * _tmp2183 + _tmp2182 * _tmp859;
  const Scalar _tmp2185 = _tmp2182 * _tmp519 - _tmp2184 * _tmp920 + _tmp2184 * _tmp921;
  const Scalar _tmp2186 = _tmp2183 * _tmp519 - _tmp2184 * _tmp863 + _tmp2184 * _tmp865;
  const Scalar _tmp2187 = _tmp2109 * _tmp535 - _tmp2110 * _tmp983;
  const Scalar _tmp2188 = _tmp2104 * _tmp535 - _tmp2106 * _tmp984;
  const Scalar _tmp2189 = _tmp1497 * _tmp2187 + _tmp2188 * _tmp987;
  const Scalar _tmp2190 = -_tmp1230 * _tmp2189 + _tmp1231 * _tmp2189 + _tmp2188 * _tmp549;
  const Scalar _tmp2191 = std::pow(matches_0_12_weight, Scalar(2)) / std::pow(_tmp799, Scalar(2));
  const Scalar _tmp2192 = _tmp2187 * _tmp549 - _tmp2189 * _tmp991 + _tmp2189 * _tmp994;
  const Scalar _tmp2193 = std::pow(matches_0_13_weight, Scalar(2)) / std::pow(_tmp802, Scalar(2));
  const Scalar _tmp2194 = _tmp2104 * _tmp565 - _tmp2106 * _tmp926;
  const Scalar _tmp2195 = _tmp2109 * _tmp565 - _tmp2110 * _tmp925;
  const Scalar _tmp2196 = _tmp1483 * _tmp2195 + _tmp2194 * _tmp929;
  const Scalar _tmp2197 = _tmp1220 * _tmp2196 - _tmp1508 * _tmp2196 + _tmp2195 * _tmp579;
  const Scalar _tmp2198 = -_tmp1485 * _tmp2196 + _tmp2194 * _tmp579 + _tmp2196 * _tmp936;
  const Scalar _tmp2199 = _tmp2109 * _tmp595 - _tmp2110 * _tmp841;
  const Scalar _tmp2200 = _tmp2104 * _tmp595 - _tmp2106 * _tmp838;
  const Scalar _tmp2201 = _tmp1413 * _tmp2199 + _tmp2200 * _tmp842;
  const Scalar _tmp2202 = _tmp1223 * _tmp2201 - _tmp1224 * _tmp2201 + _tmp2199 * _tmp609;
  const Scalar _tmp2203 = _tmp2200 * _tmp609 - _tmp2201 * _tmp846 + _tmp2201 * _tmp851;
  const Scalar _tmp2204 = std::pow(matches_0_14_weight, Scalar(2)) / std::pow(_tmp805, Scalar(2));
  const Scalar _tmp2205 = std::pow(matches_0_15_weight, Scalar(2)) / std::pow(_tmp808, Scalar(2));
  const Scalar _tmp2206 = -_tmp1179 * _tmp2106 + _tmp2103 * _tmp630;
  const Scalar _tmp2207 = -_tmp1178 * _tmp2110 + _tmp2108 * _tmp626;
  const Scalar _tmp2208 = _tmp1182 * _tmp2206 + _tmp1503 * _tmp2207;
  const Scalar _tmp2209 = -_tmp1186 * _tmp2208 + _tmp1189 * _tmp2208 + _tmp2207 * _tmp639;
  const Scalar _tmp2210 = _tmp1276 * _tmp2208 - _tmp1277 * _tmp2208 + _tmp2206 * _tmp639;
  const Scalar _tmp2211 = std::pow(matches_0_16_weight, Scalar(2)) / std::pow(_tmp811, Scalar(2));
  const Scalar _tmp2212 = -_tmp1285 * _tmp2110 + _tmp2109 * _tmp655;
  const Scalar _tmp2213 = -_tmp1281 * _tmp2106 + _tmp2104 * _tmp655;
  const Scalar _tmp2214 = _tmp1284 * _tmp2213 + _tmp1379 * _tmp2212;
  const Scalar _tmp2215 = _tmp1289 * _tmp2214 - _tmp1291 * _tmp2214 + _tmp2213 * _tmp669;
  const Scalar _tmp2216 = _tmp1309 * _tmp2214 - _tmp1310 * _tmp2214 + _tmp2212 * _tmp669;
  const Scalar _tmp2217 = std::pow(matches_0_17_weight, Scalar(2)) / std::pow(_tmp814, Scalar(2));
  const Scalar _tmp2218 = -_tmp1059 * _tmp2110 * _tmp681 + _tmp2109 * _tmp685;
  const Scalar _tmp2219 = -_tmp1319 * _tmp2106 + _tmp2104 * _tmp685;
  const Scalar _tmp2220 = _tmp1062 * _tmp2219 + _tmp1328 * _tmp2218;
  const Scalar _tmp2221 = _tmp1066 * _tmp2220;
  const Scalar _tmp2222 = _tmp1067 * _tmp2221 - _tmp1069 * _tmp2221 + _tmp2218 * _tmp699;
  const Scalar _tmp2223 = -_tmp1214 * _tmp2220 + _tmp1215 * _tmp2220 + _tmp2219 * _tmp699;
  const Scalar _tmp2224 = -_tmp1117 * _tmp2106 + _tmp2104 * _tmp715;
  const Scalar _tmp2225 = -_tmp1121 * _tmp2110 + _tmp2109 * _tmp715;
  const Scalar _tmp2226 = _tmp1120 * _tmp2224 + _tmp1473 * _tmp2225;
  const Scalar _tmp2227 = _tmp1156 * _tmp2226 - _tmp1157 * _tmp2226 + _tmp2225 * _tmp729;
  const Scalar _tmp2228 = std::pow(matches_0_18_weight, Scalar(2)) / std::pow(_tmp817, Scalar(2));
  const Scalar _tmp2229 = -_tmp1126 * _tmp2226 + _tmp1128 * _tmp2226 + _tmp2224 * _tmp729;
  const Scalar _tmp2230 = std::pow(matches_0_19_weight, Scalar(2)) / std::pow(_tmp820, Scalar(2));
  const Scalar _tmp2231 = -_tmp1440 * _tmp2106 + _tmp2103 * _tmp750;
  const Scalar _tmp2232 = -_tmp1436 * _tmp2110 + _tmp2109 * _tmp745;
  const Scalar _tmp2233 = _tmp1076 * _tmp2231 + _tmp1439 * _tmp2232;
  const Scalar _tmp2234 = _tmp1082 * _tmp1159 * _tmp2233 - _tmp1160 * _tmp2233 + _tmp2232 * _tmp759;
  const Scalar _tmp2235 = _tmp1079 * _tmp2233;
  const Scalar _tmp2236 = -_tmp1080 * _tmp2235 + _tmp1082 * _tmp2235 + _tmp2231 * _tmp759;
  const Scalar _tmp2237 = std::pow(_tmp1350, Scalar(2));
  const Scalar _tmp2238 = _tmp1217 * _tmp1350;
  const Scalar _tmp2239 = _tmp1827 * _tmp48;

  // Output terms (4)
  if (residual != nullptr) {
    Eigen::Matrix<Scalar, 72, 1>& _residual = (*residual);

    _residual(0, 0) = _tmp63;
    _residual(1, 0) = _tmp65;
    _residual(2, 0) = _tmp67;
    _residual(3, 0) = _tmp68;
    _residual(4, 0) = _tmp69;
    _residual(5, 0) = _tmp53 * priors_0_1_sqrt_info(5, 5);
    _residual(6, 0) = _tmp131;
    _residual(7, 0) = _tmp134;
    _residual(8, 0) = _tmp135;
    _residual(9, 0) = _tmp136;
    _residual(10, 0) = _tmp137;
    _residual(11, 0) = _tmp110 * priors_1_0_sqrt_info(5, 5);
    _residual(12, 0) = _tmp190;
    _residual(13, 0) = _tmp191;
    _residual(14, 0) = _tmp220;
    _residual(15, 0) = _tmp221;
    _residual(16, 0) = _tmp250;
    _residual(17, 0) = _tmp251;
    _residual(18, 0) = _tmp280;
    _residual(19, 0) = _tmp281;
    _residual(20, 0) = _tmp310;
    _residual(21, 0) = _tmp311;
    _residual(22, 0) = _tmp340;
    _residual(23, 0) = _tmp341;
    _residual(24, 0) = _tmp370;
    _residual(25, 0) = _tmp371;
    _residual(26, 0) = _tmp400;
    _residual(27, 0) = _tmp401;
    _residual(28, 0) = _tmp430;
    _residual(29, 0) = _tmp431;
    _residual(30, 0) = _tmp460;
    _residual(31, 0) = _tmp461;
    _residual(32, 0) = _tmp490;
    _residual(33, 0) = _tmp491;
    _residual(34, 0) = _tmp520;
    _residual(35, 0) = _tmp521;
    _residual(36, 0) = _tmp550;
    _residual(37, 0) = _tmp551;
    _residual(38, 0) = _tmp580;
    _residual(39, 0) = _tmp581;
    _residual(40, 0) = _tmp610;
    _residual(41, 0) = _tmp611;
    _residual(42, 0) = _tmp640;
    _residual(43, 0) = _tmp641;
    _residual(44, 0) = _tmp670;
    _residual(45, 0) = _tmp671;
    _residual(46, 0) = _tmp700;
    _residual(47, 0) = _tmp701;
    _residual(48, 0) = _tmp730;
    _residual(49, 0) = _tmp731;
    _residual(50, 0) = _tmp760;
    _residual(51, 0) = _tmp761;
    _residual(52, 0) = _tmp762 * _tmp764;
    _residual(53, 0) = _tmp765 * _tmp767;
    _residual(54, 0) = _tmp768 * _tmp770;
    _residual(55, 0) = _tmp771 * _tmp773;
    _residual(56, 0) = _tmp774 * _tmp776;
    _residual(57, 0) = _tmp777 * _tmp779;
    _residual(58, 0) = _tmp780 * _tmp782;
    _residual(59, 0) = _tmp783 * _tmp785;
    _residual(60, 0) = _tmp786 * _tmp788;
    _residual(61, 0) = _tmp789 * _tmp791;
    _residual(62, 0) = _tmp792 * _tmp794;
    _residual(63, 0) = _tmp795 * _tmp797;
    _residual(64, 0) = _tmp798 * _tmp800;
    _residual(65, 0) = _tmp801 * _tmp803;
    _residual(66, 0) = _tmp804 * _tmp806;
    _residual(67, 0) = _tmp807 * _tmp809;
    _residual(68, 0) = _tmp810 * _tmp812;
    _residual(69, 0) = _tmp813 * _tmp815;
    _residual(70, 0) = _tmp816 * _tmp818;
    _residual(71, 0) = _tmp819 * _tmp821;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 26, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp1027 * _tmp65 + _tmp1042 * _tmp280 + _tmp1058 * _tmp340 + _tmp1071 * _tmp700 +
                 _tmp1084 * _tmp761 + _tmp1098 * _tmp191 + _tmp110 * _tmp1218 + _tmp1113 * _tmp401 +
                 _tmp1114 * _tmp136 + _tmp1129 * _tmp731 + _tmp1144 * _tmp250 + _tmp1151 * _tmp131 +
                 _tmp1154 * _tmp135 + _tmp1158 * _tmp730 + _tmp1161 * _tmp760 + _tmp1175 * _tmp311 +
                 _tmp1190 * _tmp640 + _tmp1194 * _tmp400 + _tmp1207 * _tmp431 + _tmp1212 * _tmp190 +
                 _tmp1216 * _tmp701 + _tmp1221 * _tmp580 + _tmp1225 * _tmp610 + _tmp1228 * _tmp371 +
                 _tmp1232 * _tmp551 + _tmp1238 * _tmp63 + _tmp1242 * _tmp430 + _tmp1246 * _tmp281 +
                 _tmp1250 * _tmp251 + _tmp1254 * _tmp341 + _tmp1260 * _tmp310 + _tmp1274 * _tmp461 +
                 _tmp1278 * _tmp641 + _tmp1292 * _tmp671 + _tmp1297 * _tmp460 + _tmp1302 * _tmp220 +
                 _tmp1305 * _tmp67 + _tmp1311 * _tmp670 + _tmp1315 * _tmp490 + _tmp134 * _tmp918 +
                 _tmp137 * _tmp967 + _tmp221 * _tmp951 + _tmp370 * _tmp980 + _tmp491 * _tmp966 +
                 _tmp520 * _tmp868 + _tmp521 * _tmp922 + _tmp550 * _tmp995 + _tmp581 * _tmp937 +
                 _tmp611 * _tmp852;
    _rhs(1, 0) = _tmp131 * _tmp1515 + _tmp1331 * _tmp700 + _tmp1338 * _tmp520 + _tmp134 * _tmp1466 +
                 _tmp1347 * _tmp430 + _tmp1348 * _tmp431 + _tmp1349 * _tmp521 + _tmp135 * _tmp1405 +
                 _tmp1350 * _tmp1351 + _tmp1356 * _tmp221 + _tmp136 * _tmp1423 +
                 _tmp1361 * _tmp460 + _tmp1366 * _tmp281 + _tmp137 * _tmp1375 + _tmp1373 * _tmp311 +
                 _tmp1374 * _tmp461 + _tmp1381 * _tmp671 + _tmp1389 * _tmp401 + _tmp1396 * _tmp490 +
                 _tmp1410 * _tmp190 + _tmp1415 * _tmp610 + _tmp1422 * _tmp340 + _tmp1424 * _tmp611 +
                 _tmp1434 * _tmp371 + _tmp1443 * _tmp760 + _tmp1444 * _tmp310 + _tmp1446 * _tmp761 +
                 _tmp1462 * _tmp63 + _tmp1468 * _tmp220 + _tmp1469 * _tmp701 + _tmp1475 * _tmp731 +
                 _tmp1476 * _tmp67 + _tmp1478 * _tmp370 + _tmp1479 * _tmp280 + _tmp1486 * _tmp581 +
                 _tmp1492 * _tmp250 + _tmp1493 * _tmp251 + _tmp1494 * _tmp400 + _tmp1500 * _tmp550 +
                 _tmp1505 * _tmp641 + _tmp1506 * _tmp491 + _tmp1507 * _tmp670 + _tmp1509 * _tmp580 +
                 _tmp1511 * _tmp65 + _tmp1512 * _tmp341 + _tmp1513 * _tmp191 + _tmp1516 * _tmp640 +
                 _tmp1517 * _tmp551 + _tmp1518 * _tmp730;
    _rhs(2, 0) = _tmp131 * _tmp1552 + _tmp134 * _tmp1583 + _tmp135 * _tmp1599 + _tmp136 * _tmp1642 +
                 _tmp137 * _tmp1565 + _tmp1526 * _tmp611 + _tmp1530 * _tmp431 + _tmp1535 * _tmp760 +
                 _tmp1539 * _tmp67 + _tmp1543 * _tmp731 + _tmp1556 * _tmp491 + _tmp1560 * _tmp191 +
                 _tmp1564 * _tmp670 + _tmp1566 * _tmp190 + _tmp1570 * _tmp251 + _tmp1574 * _tmp370 +
                 _tmp1578 * _tmp701 + _tmp1582 * _tmp340 + _tmp1584 * _tmp250 + _tmp1591 * _tmp63 +
                 _tmp1596 * _tmp641 + _tmp1598 * _tmp430 + _tmp1603 * _tmp551 + _tmp1609 * _tmp581 +
                 _tmp1613 * _tmp520 + _tmp1615 * _tmp490 + _tmp1616 * _tmp341 + _tmp1621 * _tmp401 +
                 _tmp1625 * _tmp310 + _tmp1626 * _tmp521 + _tmp1627 * _tmp700 + _tmp1631 * _tmp281 +
                 _tmp1632 * _tmp610 + _tmp1636 * _tmp221 + _tmp1638 * _tmp580 + _tmp1639 * _tmp730 +
                 _tmp1640 * _tmp280 + _tmp1641 * _tmp220 + _tmp1643 * _tmp311 + _tmp1644 * _tmp550 +
                 _tmp1645 * _tmp761 + _tmp1646 * _tmp640 + _tmp1648 * _tmp371 + _tmp1649 * _tmp400 +
                 _tmp1654 * _tmp461 + _tmp1655 * _tmp671 + _tmp1656 * _tmp460 + _tmp1657 * _tmp65;
    _rhs(3, 0) = _tmp131 * _tmp1762 + _tmp1325 * _tmp1351 + _tmp134 * _tmp1794 +
                 _tmp135 * _tmp1856 + _tmp136 * _tmp1760 + _tmp137 * _tmp1840 + _tmp1666 * _tmp251 +
                 _tmp1674 * _tmp760 + _tmp1682 * _tmp581 + _tmp1690 * _tmp730 + _tmp1691 * _tmp761 +
                 _tmp1699 * _tmp551 + _tmp1706 * _tmp521 + _tmp1707 * _tmp550 + _tmp1715 * _tmp371 +
                 _tmp1716 * _tmp370 + _tmp1725 * _tmp340 + _tmp1734 * _tmp190 + _tmp1742 * _tmp311 +
                 _tmp1749 * _tmp641 + _tmp1750 * _tmp67 + _tmp1758 * _tmp400 + _tmp1761 * _tmp341 +
                 _tmp1763 * _tmp250 + _tmp1764 * _tmp191 + _tmp1773 * _tmp430 + _tmp1774 * _tmp65 +
                 _tmp1784 * _tmp610 + _tmp1792 * _tmp221 + _tmp1793 * _tmp431 + _tmp1795 * _tmp520 +
                 _tmp1796 * _tmp63 + _tmp1797 * _tmp69 + _tmp1798 * _tmp220 + _tmp1799 * _tmp310 +
                 _tmp1800 * _tmp401 + _tmp1808 * _tmp490 + _tmp1809 * _tmp68 + _tmp1817 * _tmp671 +
                 _tmp1818 * _tmp491 + _tmp1826 * _tmp701 + _tmp1828 * _tmp51 + _tmp1829 * _tmp731 +
                 _tmp1837 * _tmp280 + _tmp1839 * _tmp611 + _tmp1841 * _tmp640 + _tmp1849 * _tmp461 +
                 _tmp1850 * _tmp460 + _tmp1851 * _tmp580 + _tmp1853 * _tmp670 + _tmp1854 * _tmp700 +
                 _tmp1855 * _tmp281;
    _rhs(4, 0) = _tmp110 * _tmp1925 + _tmp131 * _tmp1931 + _tmp134 * _tmp1943 + _tmp135 * _tmp1979 +
                 _tmp136 * _tmp1932 + _tmp137 * _tmp1902 + _tmp1828 * _tmp52 + _tmp1861 * _tmp430 +
                 _tmp1867 * _tmp520 + _tmp1871 * _tmp701 + _tmp1875 * _tmp581 + _tmp1876 * _tmp580 +
                 _tmp1882 * _tmp491 + _tmp1886 * _tmp281 + _tmp1891 * _tmp340 + _tmp1895 * _tmp611 +
                 _tmp1899 * _tmp731 + _tmp190 * _tmp1963 + _tmp1906 * _tmp371 + _tmp191 * _tmp1949 +
                 _tmp1910 * _tmp550 + _tmp1914 * _tmp251 + _tmp1915 * _tmp65 + _tmp1919 * _tmp220 +
                 _tmp1920 * _tmp370 + _tmp1921 * _tmp521 + _tmp1922 * _tmp700 + _tmp1923 * _tmp68 +
                 _tmp1924 * _tmp730 + _tmp1930 * _tmp641 + _tmp1933 * _tmp431 + _tmp1937 * _tmp401 +
                 _tmp1941 * _tmp460 + _tmp1942 * _tmp640 + _tmp1944 * _tmp490 + _tmp1950 * _tmp63 +
                 _tmp1954 * _tmp310 + _tmp1955 * _tmp311 + _tmp1956 * _tmp69 + _tmp1961 * _tmp670 +
                 _tmp1962 * _tmp221 + _tmp1964 * _tmp671 + _tmp1965 * _tmp67 + _tmp1966 * _tmp250 +
                 _tmp1967 * _tmp280 + _tmp1973 * _tmp760 + _tmp1974 * _tmp461 + _tmp1975 * _tmp761 +
                 _tmp1976 * _tmp610 + _tmp1977 * _tmp551 + _tmp1978 * _tmp341 + _tmp1980 * _tmp400;
    _rhs(5, 0) = _tmp131 * _tmp2068 + _tmp134 * _tmp2089 + _tmp135 * _tmp2102 +
                 _tmp1351 * _tmp2067 + _tmp136 * _tmp2079 + _tmp137 * _tmp2080 + _tmp1828 * _tmp48 +
                 _tmp190 * _tmp2024 + _tmp191 * _tmp2093 + _tmp1984 * _tmp731 + _tmp1988 * _tmp400 +
                 _tmp1993 * _tmp701 + _tmp1994 * _tmp401 + _tmp1998 * _tmp251 + _tmp2003 * _tmp520 +
                 _tmp2007 * _tmp580 + _tmp2012 * _tmp490 + _tmp2014 * _tmp730 + _tmp2020 * _tmp310 +
                 _tmp2025 * _tmp67 + _tmp2031 * _tmp761 + _tmp2035 * _tmp460 + _tmp2039 * _tmp370 +
                 _tmp2040 * _tmp371 + _tmp2044 * _tmp671 + _tmp2045 * _tmp581 + _tmp2050 * _tmp220 +
                 _tmp2054 * _tmp341 + _tmp2055 * _tmp461 + _tmp2060 * _tmp610 + _tmp2061 * _tmp760 +
                 _tmp2065 * _tmp550 + _tmp2066 * _tmp551 + _tmp2069 * _tmp670 + _tmp2073 * _tmp281 +
                 _tmp2078 * _tmp641 + _tmp2081 * _tmp521 + _tmp2082 * _tmp340 + _tmp2086 * _tmp430 +
                 _tmp2087 * _tmp63 + _tmp2088 * _tmp431 + _tmp2090 * _tmp221 + _tmp2091 * _tmp491 +
                 _tmp2092 * _tmp640 + _tmp2094 * _tmp311 + _tmp2095 * _tmp280 + _tmp2096 * _tmp611 +
                 _tmp2097 * _tmp69 + _tmp2098 * _tmp250 + _tmp2099 * _tmp68 + _tmp2100 * _tmp700 +
                 _tmp2101 * _tmp65;
    _rhs(6, 0) = _tmp190 * _tmp2114 + _tmp191 * _tmp2116 + _tmp2115 * _tmp762;
    _rhs(7, 0) = _tmp2117 * _tmp765 + _tmp2121 * _tmp220 + _tmp2122 * _tmp221;
    _rhs(8, 0) = _tmp2123 * _tmp768 + _tmp2127 * _tmp250 + _tmp2128 * _tmp251;
    _rhs(9, 0) = _tmp2132 * _tmp280 + _tmp2133 * _tmp771 + _tmp2135 * _tmp281;
    _rhs(10, 0) = _tmp2136 * _tmp774 + _tmp2140 * _tmp311 + _tmp2141 * _tmp310;
    _rhs(11, 0) = _tmp2145 * _tmp340 + _tmp2146 * _tmp341 + _tmp2147 * _tmp777;
    _rhs(12, 0) = _tmp2152 * _tmp370 + _tmp2153 * _tmp371 + _tmp2154 * _tmp780;
    _rhs(13, 0) = _tmp2155 * _tmp783 + _tmp2159 * _tmp400 + _tmp2160 * _tmp401;
    _rhs(14, 0) = _tmp2164 * _tmp430 + _tmp2165 * _tmp786 + _tmp2166 * _tmp431;
    _rhs(15, 0) = _tmp2171 * _tmp461 + _tmp2172 * _tmp789 + _tmp2173 * _tmp460;
    _rhs(16, 0) = _tmp2178 * _tmp490 + _tmp2179 * _tmp491 + _tmp2180 * _tmp792;
    _rhs(17, 0) = _tmp2181 * _tmp795 + _tmp2185 * _tmp521 + _tmp2186 * _tmp520;
    _rhs(18, 0) = _tmp2190 * _tmp551 + _tmp2191 * _tmp798 + _tmp2192 * _tmp550;
    _rhs(19, 0) = _tmp2193 * _tmp801 + _tmp2197 * _tmp580 + _tmp2198 * _tmp581;
    _rhs(20, 0) = _tmp2202 * _tmp610 + _tmp2203 * _tmp611 + _tmp2204 * _tmp804;
    _rhs(21, 0) = _tmp2205 * _tmp807 + _tmp2209 * _tmp640 + _tmp2210 * _tmp641;
    _rhs(22, 0) = _tmp2211 * _tmp810 + _tmp2215 * _tmp671 + _tmp2216 * _tmp670;
    _rhs(23, 0) = _tmp2217 * _tmp813 + _tmp2222 * _tmp700 + _tmp2223 * _tmp701;
    _rhs(24, 0) = _tmp2227 * _tmp730 + _tmp2228 * _tmp816 + _tmp2229 * _tmp731;
    _rhs(25, 0) = _tmp2230 * _tmp819 + _tmp2234 * _tmp760 + _tmp2236 * _tmp761;
  }

  if (jacobian != nullptr) {
    static constexpr int kRows_jacobian = 72;
    static constexpr int kCols_jacobian = 26;
    static constexpr int kNumNonZero_jacobian = 362;
    static constexpr int kColPtrs_jacobian[] = {0,   49,  98,  146, 198, 250, 302, 305, 308,
                                                311, 314, 317, 320, 323, 326, 329, 332, 335,
                                                338, 341, 344, 347, 350, 353, 356, 359, 362};
    static constexpr int kRowIndices_jacobian[] = {
        0,  1,  2,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
        49, 50, 51, 0,  1,  2,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
        46, 47, 48, 49, 50, 51, 0,  1,  2,  6,  7,  8,  9,  10, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
        44, 45, 46, 47, 48, 49, 50, 51, 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
        38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0,  1,  2,  3,  4,  5,  6,  7,  8,
        9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
        32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0,  1,  2,
        3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
        49, 50, 51, 12, 13, 52, 14, 15, 53, 16, 17, 54, 18, 19, 55, 20, 21, 56, 22, 23, 57, 24, 25,
        58, 26, 27, 59, 28, 29, 60, 30, 31, 61, 32, 33, 62, 34, 35, 63, 36, 37, 64, 38, 39, 65, 40,
        41, 66, 42, 43, 67, 44, 45, 68, 46, 47, 69, 48, 49, 70, 50, 51, 71};
    if (jacobian->nonZeros() != 362 || jacobian->outerSize() != 26 || jacobian->innerSize() != 72 ||
        !jacobian->isCompressed()) {
      // Matrix does not have the expected layout, create a correctly initialized sparse matrix
      Scalar jacobian_empty_value_ptr[362];
      *jacobian = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
          kRows_jacobian, kCols_jacobian, kNumNonZero_jacobian, kColPtrs_jacobian,
          kRowIndices_jacobian, jacobian_empty_value_ptr);
    }
    Scalar* jacobian_value_ptr = jacobian->valuePtr();

    jacobian_value_ptr[0] = _tmp1238;
    jacobian_value_ptr[1] = _tmp1027;
    jacobian_value_ptr[2] = _tmp1305;
    jacobian_value_ptr[3] = _tmp1151;
    jacobian_value_ptr[4] = _tmp918;
    jacobian_value_ptr[5] = _tmp1154;
    jacobian_value_ptr[6] = _tmp1114;
    jacobian_value_ptr[7] = _tmp967;
    jacobian_value_ptr[8] = _tmp906 * priors_1_0_sqrt_info(5, 5);
    jacobian_value_ptr[9] = _tmp1212;
    jacobian_value_ptr[10] = _tmp1098;
    jacobian_value_ptr[11] = _tmp1302;
    jacobian_value_ptr[12] = _tmp951;
    jacobian_value_ptr[13] = _tmp1144;
    jacobian_value_ptr[14] = _tmp1250;
    jacobian_value_ptr[15] = _tmp1042;
    jacobian_value_ptr[16] = _tmp1246;
    jacobian_value_ptr[17] = _tmp1260;
    jacobian_value_ptr[18] = _tmp1175;
    jacobian_value_ptr[19] = _tmp1058;
    jacobian_value_ptr[20] = _tmp1254;
    jacobian_value_ptr[21] = _tmp980;
    jacobian_value_ptr[22] = _tmp1228;
    jacobian_value_ptr[23] = _tmp1194;
    jacobian_value_ptr[24] = _tmp1113;
    jacobian_value_ptr[25] = _tmp1242;
    jacobian_value_ptr[26] = _tmp1207;
    jacobian_value_ptr[27] = _tmp1297;
    jacobian_value_ptr[28] = _tmp1274;
    jacobian_value_ptr[29] = _tmp1315;
    jacobian_value_ptr[30] = _tmp966;
    jacobian_value_ptr[31] = _tmp868;
    jacobian_value_ptr[32] = _tmp922;
    jacobian_value_ptr[33] = _tmp995;
    jacobian_value_ptr[34] = _tmp1232;
    jacobian_value_ptr[35] = _tmp1221;
    jacobian_value_ptr[36] = _tmp937;
    jacobian_value_ptr[37] = _tmp1225;
    jacobian_value_ptr[38] = _tmp852;
    jacobian_value_ptr[39] = _tmp1190;
    jacobian_value_ptr[40] = _tmp1278;
    jacobian_value_ptr[41] = _tmp1311;
    jacobian_value_ptr[42] = _tmp1292;
    jacobian_value_ptr[43] = _tmp1071;
    jacobian_value_ptr[44] = _tmp1216;
    jacobian_value_ptr[45] = _tmp1158;
    jacobian_value_ptr[46] = _tmp1129;
    jacobian_value_ptr[47] = _tmp1161;
    jacobian_value_ptr[48] = _tmp1084;
    jacobian_value_ptr[49] = _tmp1462;
    jacobian_value_ptr[50] = _tmp1511;
    jacobian_value_ptr[51] = _tmp1476;
    jacobian_value_ptr[52] = _tmp1515;
    jacobian_value_ptr[53] = _tmp1466;
    jacobian_value_ptr[54] = _tmp1405;
    jacobian_value_ptr[55] = _tmp1423;
    jacobian_value_ptr[56] = _tmp1375;
    jacobian_value_ptr[57] = _tmp1350 * priors_1_0_sqrt_info(5, 5);
    jacobian_value_ptr[58] = _tmp1410;
    jacobian_value_ptr[59] = _tmp1513;
    jacobian_value_ptr[60] = _tmp1468;
    jacobian_value_ptr[61] = _tmp1356;
    jacobian_value_ptr[62] = _tmp1492;
    jacobian_value_ptr[63] = _tmp1493;
    jacobian_value_ptr[64] = _tmp1479;
    jacobian_value_ptr[65] = _tmp1366;
    jacobian_value_ptr[66] = _tmp1444;
    jacobian_value_ptr[67] = _tmp1373;
    jacobian_value_ptr[68] = _tmp1422;
    jacobian_value_ptr[69] = _tmp1512;
    jacobian_value_ptr[70] = _tmp1478;
    jacobian_value_ptr[71] = _tmp1434;
    jacobian_value_ptr[72] = _tmp1494;
    jacobian_value_ptr[73] = _tmp1389;
    jacobian_value_ptr[74] = _tmp1347;
    jacobian_value_ptr[75] = _tmp1348;
    jacobian_value_ptr[76] = _tmp1361;
    jacobian_value_ptr[77] = _tmp1374;
    jacobian_value_ptr[78] = _tmp1396;
    jacobian_value_ptr[79] = _tmp1506;
    jacobian_value_ptr[80] = _tmp1338;
    jacobian_value_ptr[81] = _tmp1349;
    jacobian_value_ptr[82] = _tmp1500;
    jacobian_value_ptr[83] = _tmp1517;
    jacobian_value_ptr[84] = _tmp1509;
    jacobian_value_ptr[85] = _tmp1486;
    jacobian_value_ptr[86] = _tmp1415;
    jacobian_value_ptr[87] = _tmp1424;
    jacobian_value_ptr[88] = _tmp1516;
    jacobian_value_ptr[89] = _tmp1505;
    jacobian_value_ptr[90] = _tmp1507;
    jacobian_value_ptr[91] = _tmp1381;
    jacobian_value_ptr[92] = _tmp1331;
    jacobian_value_ptr[93] = _tmp1469;
    jacobian_value_ptr[94] = _tmp1518;
    jacobian_value_ptr[95] = _tmp1475;
    jacobian_value_ptr[96] = _tmp1443;
    jacobian_value_ptr[97] = _tmp1446;
    jacobian_value_ptr[98] = _tmp1591;
    jacobian_value_ptr[99] = _tmp1657;
    jacobian_value_ptr[100] = _tmp1539;
    jacobian_value_ptr[101] = _tmp1552;
    jacobian_value_ptr[102] = _tmp1583;
    jacobian_value_ptr[103] = _tmp1599;
    jacobian_value_ptr[104] = _tmp1642;
    jacobian_value_ptr[105] = _tmp1565;
    jacobian_value_ptr[106] = _tmp1566;
    jacobian_value_ptr[107] = _tmp1560;
    jacobian_value_ptr[108] = _tmp1641;
    jacobian_value_ptr[109] = _tmp1636;
    jacobian_value_ptr[110] = _tmp1584;
    jacobian_value_ptr[111] = _tmp1570;
    jacobian_value_ptr[112] = _tmp1640;
    jacobian_value_ptr[113] = _tmp1631;
    jacobian_value_ptr[114] = _tmp1625;
    jacobian_value_ptr[115] = _tmp1643;
    jacobian_value_ptr[116] = _tmp1582;
    jacobian_value_ptr[117] = _tmp1616;
    jacobian_value_ptr[118] = _tmp1574;
    jacobian_value_ptr[119] = _tmp1648;
    jacobian_value_ptr[120] = _tmp1649;
    jacobian_value_ptr[121] = _tmp1621;
    jacobian_value_ptr[122] = _tmp1598;
    jacobian_value_ptr[123] = _tmp1530;
    jacobian_value_ptr[124] = _tmp1656;
    jacobian_value_ptr[125] = _tmp1654;
    jacobian_value_ptr[126] = _tmp1615;
    jacobian_value_ptr[127] = _tmp1556;
    jacobian_value_ptr[128] = _tmp1613;
    jacobian_value_ptr[129] = _tmp1626;
    jacobian_value_ptr[130] = _tmp1644;
    jacobian_value_ptr[131] = _tmp1603;
    jacobian_value_ptr[132] = _tmp1638;
    jacobian_value_ptr[133] = _tmp1609;
    jacobian_value_ptr[134] = _tmp1632;
    jacobian_value_ptr[135] = _tmp1526;
    jacobian_value_ptr[136] = _tmp1646;
    jacobian_value_ptr[137] = _tmp1596;
    jacobian_value_ptr[138] = _tmp1564;
    jacobian_value_ptr[139] = _tmp1655;
    jacobian_value_ptr[140] = _tmp1627;
    jacobian_value_ptr[141] = _tmp1578;
    jacobian_value_ptr[142] = _tmp1639;
    jacobian_value_ptr[143] = _tmp1543;
    jacobian_value_ptr[144] = _tmp1535;
    jacobian_value_ptr[145] = _tmp1645;
    jacobian_value_ptr[146] = _tmp1796;
    jacobian_value_ptr[147] = _tmp1774;
    jacobian_value_ptr[148] = _tmp1750;
    jacobian_value_ptr[149] = _tmp1809;
    jacobian_value_ptr[150] = _tmp1797;
    jacobian_value_ptr[151] = _tmp51 * priors_0_1_sqrt_info(5, 5);
    jacobian_value_ptr[152] = _tmp1762;
    jacobian_value_ptr[153] = _tmp1794;
    jacobian_value_ptr[154] = _tmp1856;
    jacobian_value_ptr[155] = _tmp1760;
    jacobian_value_ptr[156] = _tmp1840;
    jacobian_value_ptr[157] = _tmp1325 * priors_1_0_sqrt_info(5, 5);
    jacobian_value_ptr[158] = _tmp1734;
    jacobian_value_ptr[159] = _tmp1764;
    jacobian_value_ptr[160] = _tmp1798;
    jacobian_value_ptr[161] = _tmp1792;
    jacobian_value_ptr[162] = _tmp1763;
    jacobian_value_ptr[163] = _tmp1666;
    jacobian_value_ptr[164] = _tmp1837;
    jacobian_value_ptr[165] = _tmp1855;
    jacobian_value_ptr[166] = _tmp1799;
    jacobian_value_ptr[167] = _tmp1742;
    jacobian_value_ptr[168] = _tmp1725;
    jacobian_value_ptr[169] = _tmp1761;
    jacobian_value_ptr[170] = _tmp1716;
    jacobian_value_ptr[171] = _tmp1715;
    jacobian_value_ptr[172] = _tmp1758;
    jacobian_value_ptr[173] = _tmp1800;
    jacobian_value_ptr[174] = _tmp1773;
    jacobian_value_ptr[175] = _tmp1793;
    jacobian_value_ptr[176] = _tmp1850;
    jacobian_value_ptr[177] = _tmp1849;
    jacobian_value_ptr[178] = _tmp1808;
    jacobian_value_ptr[179] = _tmp1818;
    jacobian_value_ptr[180] = _tmp1795;
    jacobian_value_ptr[181] = _tmp1706;
    jacobian_value_ptr[182] = _tmp1707;
    jacobian_value_ptr[183] = _tmp1699;
    jacobian_value_ptr[184] = _tmp1851;
    jacobian_value_ptr[185] = _tmp1682;
    jacobian_value_ptr[186] = _tmp1784;
    jacobian_value_ptr[187] = _tmp1839;
    jacobian_value_ptr[188] = _tmp1841;
    jacobian_value_ptr[189] = _tmp1749;
    jacobian_value_ptr[190] = _tmp1853;
    jacobian_value_ptr[191] = _tmp1817;
    jacobian_value_ptr[192] = _tmp1854;
    jacobian_value_ptr[193] = _tmp1826;
    jacobian_value_ptr[194] = _tmp1690;
    jacobian_value_ptr[195] = _tmp1829;
    jacobian_value_ptr[196] = _tmp1674;
    jacobian_value_ptr[197] = _tmp1691;
    jacobian_value_ptr[198] = _tmp1950;
    jacobian_value_ptr[199] = _tmp1915;
    jacobian_value_ptr[200] = _tmp1965;
    jacobian_value_ptr[201] = _tmp1923;
    jacobian_value_ptr[202] = _tmp1956;
    jacobian_value_ptr[203] = _tmp52 * priors_0_1_sqrt_info(5, 5);
    jacobian_value_ptr[204] = _tmp1931;
    jacobian_value_ptr[205] = _tmp1943;
    jacobian_value_ptr[206] = _tmp1979;
    jacobian_value_ptr[207] = _tmp1932;
    jacobian_value_ptr[208] = _tmp1902;
    jacobian_value_ptr[209] = _tmp1321 * priors_1_0_sqrt_info(5, 5);
    jacobian_value_ptr[210] = _tmp1963;
    jacobian_value_ptr[211] = _tmp1949;
    jacobian_value_ptr[212] = _tmp1919;
    jacobian_value_ptr[213] = _tmp1962;
    jacobian_value_ptr[214] = _tmp1966;
    jacobian_value_ptr[215] = _tmp1914;
    jacobian_value_ptr[216] = _tmp1967;
    jacobian_value_ptr[217] = _tmp1886;
    jacobian_value_ptr[218] = _tmp1954;
    jacobian_value_ptr[219] = _tmp1955;
    jacobian_value_ptr[220] = _tmp1891;
    jacobian_value_ptr[221] = _tmp1978;
    jacobian_value_ptr[222] = _tmp1920;
    jacobian_value_ptr[223] = _tmp1906;
    jacobian_value_ptr[224] = _tmp1980;
    jacobian_value_ptr[225] = _tmp1937;
    jacobian_value_ptr[226] = _tmp1861;
    jacobian_value_ptr[227] = _tmp1933;
    jacobian_value_ptr[228] = _tmp1941;
    jacobian_value_ptr[229] = _tmp1974;
    jacobian_value_ptr[230] = _tmp1944;
    jacobian_value_ptr[231] = _tmp1882;
    jacobian_value_ptr[232] = _tmp1867;
    jacobian_value_ptr[233] = _tmp1921;
    jacobian_value_ptr[234] = _tmp1910;
    jacobian_value_ptr[235] = _tmp1977;
    jacobian_value_ptr[236] = _tmp1876;
    jacobian_value_ptr[237] = _tmp1875;
    jacobian_value_ptr[238] = _tmp1976;
    jacobian_value_ptr[239] = _tmp1895;
    jacobian_value_ptr[240] = _tmp1942;
    jacobian_value_ptr[241] = _tmp1930;
    jacobian_value_ptr[242] = _tmp1961;
    jacobian_value_ptr[243] = _tmp1964;
    jacobian_value_ptr[244] = _tmp1922;
    jacobian_value_ptr[245] = _tmp1871;
    jacobian_value_ptr[246] = _tmp1924;
    jacobian_value_ptr[247] = _tmp1899;
    jacobian_value_ptr[248] = _tmp1973;
    jacobian_value_ptr[249] = _tmp1975;
    jacobian_value_ptr[250] = _tmp2087;
    jacobian_value_ptr[251] = _tmp2101;
    jacobian_value_ptr[252] = _tmp2025;
    jacobian_value_ptr[253] = _tmp2099;
    jacobian_value_ptr[254] = _tmp2097;
    jacobian_value_ptr[255] = _tmp48 * priors_0_1_sqrt_info(5, 5);
    jacobian_value_ptr[256] = _tmp2068;
    jacobian_value_ptr[257] = _tmp2089;
    jacobian_value_ptr[258] = _tmp2102;
    jacobian_value_ptr[259] = _tmp2079;
    jacobian_value_ptr[260] = _tmp2080;
    jacobian_value_ptr[261] = _tmp2067 * priors_1_0_sqrt_info(5, 5);
    jacobian_value_ptr[262] = _tmp2024;
    jacobian_value_ptr[263] = _tmp2093;
    jacobian_value_ptr[264] = _tmp2050;
    jacobian_value_ptr[265] = _tmp2090;
    jacobian_value_ptr[266] = _tmp2098;
    jacobian_value_ptr[267] = _tmp1998;
    jacobian_value_ptr[268] = _tmp2095;
    jacobian_value_ptr[269] = _tmp2073;
    jacobian_value_ptr[270] = _tmp2020;
    jacobian_value_ptr[271] = _tmp2094;
    jacobian_value_ptr[272] = _tmp2082;
    jacobian_value_ptr[273] = _tmp2054;
    jacobian_value_ptr[274] = _tmp2039;
    jacobian_value_ptr[275] = _tmp2040;
    jacobian_value_ptr[276] = _tmp1988;
    jacobian_value_ptr[277] = _tmp1994;
    jacobian_value_ptr[278] = _tmp2086;
    jacobian_value_ptr[279] = _tmp2088;
    jacobian_value_ptr[280] = _tmp2035;
    jacobian_value_ptr[281] = _tmp2055;
    jacobian_value_ptr[282] = _tmp2012;
    jacobian_value_ptr[283] = _tmp2091;
    jacobian_value_ptr[284] = _tmp2003;
    jacobian_value_ptr[285] = _tmp2081;
    jacobian_value_ptr[286] = _tmp2065;
    jacobian_value_ptr[287] = _tmp2066;
    jacobian_value_ptr[288] = _tmp2007;
    jacobian_value_ptr[289] = _tmp2045;
    jacobian_value_ptr[290] = _tmp2060;
    jacobian_value_ptr[291] = _tmp2096;
    jacobian_value_ptr[292] = _tmp2092;
    jacobian_value_ptr[293] = _tmp2078;
    jacobian_value_ptr[294] = _tmp2069;
    jacobian_value_ptr[295] = _tmp2044;
    jacobian_value_ptr[296] = _tmp2100;
    jacobian_value_ptr[297] = _tmp1993;
    jacobian_value_ptr[298] = _tmp2014;
    jacobian_value_ptr[299] = _tmp1984;
    jacobian_value_ptr[300] = _tmp2061;
    jacobian_value_ptr[301] = _tmp2031;
    jacobian_value_ptr[302] = _tmp2114;
    jacobian_value_ptr[303] = _tmp2116;
    jacobian_value_ptr[304] = _tmp764;
    jacobian_value_ptr[305] = _tmp2121;
    jacobian_value_ptr[306] = _tmp2122;
    jacobian_value_ptr[307] = _tmp767;
    jacobian_value_ptr[308] = _tmp2127;
    jacobian_value_ptr[309] = _tmp2128;
    jacobian_value_ptr[310] = _tmp770;
    jacobian_value_ptr[311] = _tmp2132;
    jacobian_value_ptr[312] = _tmp2135;
    jacobian_value_ptr[313] = _tmp773;
    jacobian_value_ptr[314] = _tmp2141;
    jacobian_value_ptr[315] = _tmp2140;
    jacobian_value_ptr[316] = _tmp776;
    jacobian_value_ptr[317] = _tmp2145;
    jacobian_value_ptr[318] = _tmp2146;
    jacobian_value_ptr[319] = _tmp779;
    jacobian_value_ptr[320] = _tmp2152;
    jacobian_value_ptr[321] = _tmp2153;
    jacobian_value_ptr[322] = _tmp782;
    jacobian_value_ptr[323] = _tmp2159;
    jacobian_value_ptr[324] = _tmp2160;
    jacobian_value_ptr[325] = _tmp785;
    jacobian_value_ptr[326] = _tmp2164;
    jacobian_value_ptr[327] = _tmp2166;
    jacobian_value_ptr[328] = _tmp788;
    jacobian_value_ptr[329] = _tmp2173;
    jacobian_value_ptr[330] = _tmp2171;
    jacobian_value_ptr[331] = _tmp791;
    jacobian_value_ptr[332] = _tmp2178;
    jacobian_value_ptr[333] = _tmp2179;
    jacobian_value_ptr[334] = _tmp794;
    jacobian_value_ptr[335] = _tmp2186;
    jacobian_value_ptr[336] = _tmp2185;
    jacobian_value_ptr[337] = _tmp797;
    jacobian_value_ptr[338] = _tmp2192;
    jacobian_value_ptr[339] = _tmp2190;
    jacobian_value_ptr[340] = _tmp800;
    jacobian_value_ptr[341] = _tmp2197;
    jacobian_value_ptr[342] = _tmp2198;
    jacobian_value_ptr[343] = _tmp803;
    jacobian_value_ptr[344] = _tmp2202;
    jacobian_value_ptr[345] = _tmp2203;
    jacobian_value_ptr[346] = _tmp806;
    jacobian_value_ptr[347] = _tmp2209;
    jacobian_value_ptr[348] = _tmp2210;
    jacobian_value_ptr[349] = _tmp809;
    jacobian_value_ptr[350] = _tmp2216;
    jacobian_value_ptr[351] = _tmp2215;
    jacobian_value_ptr[352] = _tmp812;
    jacobian_value_ptr[353] = _tmp2222;
    jacobian_value_ptr[354] = _tmp2223;
    jacobian_value_ptr[355] = _tmp815;
    jacobian_value_ptr[356] = _tmp2227;
    jacobian_value_ptr[357] = _tmp2229;
    jacobian_value_ptr[358] = _tmp818;
    jacobian_value_ptr[359] = _tmp2234;
    jacobian_value_ptr[360] = _tmp2236;
    jacobian_value_ptr[361] = _tmp821;
  }

  if (hessian != nullptr) {
    static constexpr int kRows_hessian = 26;
    static constexpr int kCols_hessian = 26;
    static constexpr int kNumNonZero_hessian = 161;
    static constexpr int kColPtrs_hessian[] = {0,   26,  51,  75,  98,  120, 141, 142, 143,
                                               144, 145, 146, 147, 148, 149, 150, 151, 152,
                                               153, 154, 155, 156, 157, 158, 159, 160, 161};
    static constexpr int kRowIndices_hessian[] = {
        0,  1,  2,  3,  4,  5,  6, 7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        23, 24, 25, 1,  2,  3,  4, 5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 2,  3, 4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 3, 4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
        20, 21, 22, 23, 24, 25, 4, 5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
        21, 22, 23, 24, 25, 5,  6, 7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
        23, 24, 25, 6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};
    if (hessian->nonZeros() != 161 || hessian->outerSize() != 26 || hessian->innerSize() != 26 ||
        !hessian->isCompressed()) {
      // Matrix does not have the expected layout, create a correctly initialized sparse matrix
      Scalar hessian_empty_value_ptr[161];
      *hessian = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
          kRows_hessian, kCols_hessian, kNumNonZero_hessian, kColPtrs_hessian, kRowIndices_hessian,
          hessian_empty_value_ptr);
    }
    Scalar* hessian_value_ptr = hessian->valuePtr();

    hessian_value_ptr[0] =
        std::pow(_tmp1027, Scalar(2)) + std::pow(_tmp1042, Scalar(2)) +
        std::pow(_tmp1058, Scalar(2)) + std::pow(_tmp1071, Scalar(2)) +
        std::pow(_tmp1084, Scalar(2)) + std::pow(_tmp1098, Scalar(2)) +
        std::pow(_tmp1113, Scalar(2)) + std::pow(_tmp1114, Scalar(2)) +
        std::pow(_tmp1129, Scalar(2)) + std::pow(_tmp1144, Scalar(2)) +
        std::pow(_tmp1151, Scalar(2)) + std::pow(_tmp1154, Scalar(2)) +
        std::pow(_tmp1158, Scalar(2)) + std::pow(_tmp1161, Scalar(2)) +
        std::pow(_tmp1175, Scalar(2)) + std::pow(_tmp1190, Scalar(2)) +
        std::pow(_tmp1194, Scalar(2)) + std::pow(_tmp1207, Scalar(2)) +
        std::pow(_tmp1212, Scalar(2)) + std::pow(_tmp1216, Scalar(2)) +
        _tmp1217 * std::pow(_tmp906, Scalar(2)) + std::pow(_tmp1221, Scalar(2)) +
        std::pow(_tmp1225, Scalar(2)) + std::pow(_tmp1228, Scalar(2)) +
        std::pow(_tmp1232, Scalar(2)) + std::pow(_tmp1238, Scalar(2)) +
        std::pow(_tmp1242, Scalar(2)) + std::pow(_tmp1246, Scalar(2)) +
        std::pow(_tmp1250, Scalar(2)) + std::pow(_tmp1254, Scalar(2)) +
        std::pow(_tmp1260, Scalar(2)) + std::pow(_tmp1274, Scalar(2)) +
        std::pow(_tmp1278, Scalar(2)) + std::pow(_tmp1292, Scalar(2)) +
        std::pow(_tmp1297, Scalar(2)) + std::pow(_tmp1302, Scalar(2)) +
        std::pow(_tmp1305, Scalar(2)) + std::pow(_tmp1311, Scalar(2)) +
        std::pow(_tmp1315, Scalar(2)) + std::pow(_tmp852, Scalar(2)) +
        std::pow(_tmp868, Scalar(2)) + std::pow(_tmp918, Scalar(2)) + std::pow(_tmp922, Scalar(2)) +
        std::pow(_tmp937, Scalar(2)) + std::pow(_tmp951, Scalar(2)) + std::pow(_tmp966, Scalar(2)) +
        std::pow(_tmp967, Scalar(2)) + std::pow(_tmp980, Scalar(2)) + std::pow(_tmp995, Scalar(2));
    hessian_value_ptr[1] =
        _tmp1027 * _tmp1511 + _tmp1042 * _tmp1479 + _tmp1058 * _tmp1422 + _tmp1071 * _tmp1331 +
        _tmp1084 * _tmp1446 + _tmp1098 * _tmp1513 + _tmp1113 * _tmp1389 + _tmp1114 * _tmp1423 +
        _tmp1129 * _tmp1475 + _tmp1144 * _tmp1492 + _tmp1151 * _tmp1515 + _tmp1154 * _tmp1405 +
        _tmp1158 * _tmp1518 + _tmp1161 * _tmp1443 + _tmp1175 * _tmp1373 + _tmp1190 * _tmp1516 +
        _tmp1194 * _tmp1494 + _tmp1207 * _tmp1348 + _tmp1212 * _tmp1410 + _tmp1216 * _tmp1469 +
        _tmp1218 * _tmp1350 + _tmp1221 * _tmp1509 + _tmp1225 * _tmp1415 + _tmp1228 * _tmp1434 +
        _tmp1232 * _tmp1517 + _tmp1238 * _tmp1462 + _tmp1242 * _tmp1347 + _tmp1246 * _tmp1366 +
        _tmp1250 * _tmp1493 + _tmp1254 * _tmp1512 + _tmp1260 * _tmp1444 + _tmp1274 * _tmp1374 +
        _tmp1278 * _tmp1505 + _tmp1292 * _tmp1381 + _tmp1297 * _tmp1361 + _tmp1302 * _tmp1468 +
        _tmp1305 * _tmp1476 + _tmp1311 * _tmp1507 + _tmp1315 * _tmp1396 + _tmp1338 * _tmp868 +
        _tmp1349 * _tmp922 + _tmp1356 * _tmp951 + _tmp1375 * _tmp967 + _tmp1424 * _tmp852 +
        _tmp1466 * _tmp918 + _tmp1478 * _tmp980 + _tmp1486 * _tmp937 + _tmp1500 * _tmp995 +
        _tmp1506 * _tmp966;
    hessian_value_ptr[2] =
        _tmp1027 * _tmp1657 + _tmp1042 * _tmp1640 + _tmp1058 * _tmp1582 + _tmp1071 * _tmp1627 +
        _tmp1084 * _tmp1645 + _tmp1098 * _tmp1560 + _tmp1113 * _tmp1621 + _tmp1114 * _tmp1642 +
        _tmp1129 * _tmp1543 + _tmp1144 * _tmp1584 + _tmp1151 * _tmp1552 + _tmp1154 * _tmp1599 +
        _tmp1158 * _tmp1639 + _tmp1161 * _tmp1535 + _tmp1175 * _tmp1643 + _tmp1190 * _tmp1646 +
        _tmp1194 * _tmp1649 + _tmp1207 * _tmp1530 + _tmp1212 * _tmp1566 + _tmp1216 * _tmp1578 +
        _tmp1221 * _tmp1638 + _tmp1225 * _tmp1632 + _tmp1228 * _tmp1648 + _tmp1232 * _tmp1603 +
        _tmp1238 * _tmp1591 + _tmp1242 * _tmp1598 + _tmp1246 * _tmp1631 + _tmp1250 * _tmp1570 +
        _tmp1254 * _tmp1616 + _tmp1260 * _tmp1625 + _tmp1274 * _tmp1654 + _tmp1278 * _tmp1596 +
        _tmp1292 * _tmp1655 + _tmp1297 * _tmp1656 + _tmp1302 * _tmp1641 + _tmp1305 * _tmp1539 +
        _tmp1311 * _tmp1564 + _tmp1315 * _tmp1615 + _tmp1526 * _tmp852 + _tmp1556 * _tmp966 +
        _tmp1565 * _tmp967 + _tmp1574 * _tmp980 + _tmp1583 * _tmp918 + _tmp1609 * _tmp937 +
        _tmp1613 * _tmp868 + _tmp1626 * _tmp922 + _tmp1636 * _tmp951 + _tmp1644 * _tmp995;
    hessian_value_ptr[3] =
        _tmp1027 * _tmp1774 + _tmp1042 * _tmp1837 + _tmp1058 * _tmp1725 + _tmp1071 * _tmp1854 +
        _tmp1084 * _tmp1691 + _tmp1098 * _tmp1764 + _tmp1113 * _tmp1800 + _tmp1114 * _tmp1760 +
        _tmp1129 * _tmp1829 + _tmp1144 * _tmp1763 + _tmp1151 * _tmp1762 + _tmp1154 * _tmp1856 +
        _tmp1158 * _tmp1690 + _tmp1161 * _tmp1674 + _tmp1175 * _tmp1742 + _tmp1190 * _tmp1841 +
        _tmp1194 * _tmp1758 + _tmp1207 * _tmp1793 + _tmp1212 * _tmp1734 + _tmp1216 * _tmp1826 +
        _tmp1218 * _tmp1325 + _tmp1221 * _tmp1851 + _tmp1225 * _tmp1784 + _tmp1228 * _tmp1715 +
        _tmp1232 * _tmp1699 + _tmp1238 * _tmp1796 + _tmp1242 * _tmp1773 + _tmp1246 * _tmp1855 +
        _tmp1250 * _tmp1666 + _tmp1254 * _tmp1761 + _tmp1260 * _tmp1799 + _tmp1274 * _tmp1849 +
        _tmp1278 * _tmp1749 + _tmp1292 * _tmp1817 + _tmp1297 * _tmp1850 + _tmp1302 * _tmp1798 +
        _tmp1305 * _tmp1750 + _tmp1311 * _tmp1853 + _tmp1315 * _tmp1808 + _tmp1682 * _tmp937 +
        _tmp1706 * _tmp922 + _tmp1707 * _tmp995 + _tmp1716 * _tmp980 + _tmp1792 * _tmp951 +
        _tmp1794 * _tmp918 + _tmp1795 * _tmp868 + _tmp1818 * _tmp966 + _tmp1839 * _tmp852 +
        _tmp1840 * _tmp967;
    hessian_value_ptr[4] =
        _tmp1027 * _tmp1915 + _tmp1042 * _tmp1967 + _tmp1058 * _tmp1891 + _tmp1071 * _tmp1922 +
        _tmp1084 * _tmp1975 + _tmp1098 * _tmp1949 + _tmp1113 * _tmp1937 + _tmp1114 * _tmp1932 +
        _tmp1129 * _tmp1899 + _tmp1144 * _tmp1966 + _tmp1151 * _tmp1931 + _tmp1154 * _tmp1979 +
        _tmp1158 * _tmp1924 + _tmp1161 * _tmp1973 + _tmp1175 * _tmp1955 + _tmp1190 * _tmp1942 +
        _tmp1194 * _tmp1980 + _tmp1207 * _tmp1933 + _tmp1212 * _tmp1963 + _tmp1216 * _tmp1871 +
        _tmp1221 * _tmp1876 + _tmp1225 * _tmp1976 + _tmp1228 * _tmp1906 + _tmp1232 * _tmp1977 +
        _tmp1238 * _tmp1950 + _tmp1242 * _tmp1861 + _tmp1246 * _tmp1886 + _tmp1250 * _tmp1914 +
        _tmp1254 * _tmp1978 + _tmp1260 * _tmp1954 + _tmp1274 * _tmp1974 + _tmp1278 * _tmp1930 +
        _tmp1292 * _tmp1964 + _tmp1297 * _tmp1941 + _tmp1302 * _tmp1919 + _tmp1305 * _tmp1965 +
        _tmp1311 * _tmp1961 + _tmp1315 * _tmp1944 + _tmp1867 * _tmp868 + _tmp1875 * _tmp937 +
        _tmp1882 * _tmp966 + _tmp1895 * _tmp852 + _tmp1902 * _tmp967 + _tmp1910 * _tmp995 +
        _tmp1920 * _tmp980 + _tmp1921 * _tmp922 + _tmp1925 * _tmp906 + _tmp1943 * _tmp918 +
        _tmp1962 * _tmp951;
    hessian_value_ptr[5] =
        _tmp1027 * _tmp2101 + _tmp1042 * _tmp2095 + _tmp1058 * _tmp2082 + _tmp1071 * _tmp2100 +
        _tmp1084 * _tmp2031 + _tmp1098 * _tmp2093 + _tmp1113 * _tmp1994 + _tmp1114 * _tmp2079 +
        _tmp1129 * _tmp1984 + _tmp1144 * _tmp2098 + _tmp1151 * _tmp2068 + _tmp1154 * _tmp2102 +
        _tmp1158 * _tmp2014 + _tmp1161 * _tmp2061 + _tmp1175 * _tmp2094 + _tmp1190 * _tmp2092 +
        _tmp1194 * _tmp1988 + _tmp1207 * _tmp2088 + _tmp1212 * _tmp2024 + _tmp1216 * _tmp1993 +
        _tmp1218 * _tmp2067 + _tmp1221 * _tmp2007 + _tmp1225 * _tmp2060 + _tmp1228 * _tmp2040 +
        _tmp1232 * _tmp2066 + _tmp1238 * _tmp2087 + _tmp1242 * _tmp2086 + _tmp1246 * _tmp2073 +
        _tmp1250 * _tmp1998 + _tmp1254 * _tmp2054 + _tmp1260 * _tmp2020 + _tmp1274 * _tmp2055 +
        _tmp1278 * _tmp2078 + _tmp1292 * _tmp2044 + _tmp1297 * _tmp2035 + _tmp1302 * _tmp2050 +
        _tmp1305 * _tmp2025 + _tmp1311 * _tmp2069 + _tmp1315 * _tmp2012 + _tmp2003 * _tmp868 +
        _tmp2039 * _tmp980 + _tmp2045 * _tmp937 + _tmp2065 * _tmp995 + _tmp2080 * _tmp967 +
        _tmp2081 * _tmp922 + _tmp2089 * _tmp918 + _tmp2090 * _tmp951 + _tmp2091 * _tmp966 +
        _tmp2096 * _tmp852;
    hessian_value_ptr[6] = _tmp1098 * _tmp2116 + _tmp1212 * _tmp2114;
    hessian_value_ptr[7] = _tmp1302 * _tmp2121 + _tmp2122 * _tmp951;
    hessian_value_ptr[8] = _tmp1144 * _tmp2127 + _tmp1250 * _tmp2128;
    hessian_value_ptr[9] = _tmp1042 * _tmp2132 + _tmp1246 * _tmp2135;
    hessian_value_ptr[10] = _tmp1175 * _tmp2140 + _tmp1260 * _tmp2141;
    hessian_value_ptr[11] = _tmp1058 * _tmp2145 + _tmp1254 * _tmp2146;
    hessian_value_ptr[12] = _tmp1228 * _tmp2153 + _tmp2152 * _tmp980;
    hessian_value_ptr[13] = _tmp1113 * _tmp2160 + _tmp1194 * _tmp2159;
    hessian_value_ptr[14] = _tmp1207 * _tmp2166 + _tmp1242 * _tmp2164;
    hessian_value_ptr[15] = _tmp1274 * _tmp2171 + _tmp1297 * _tmp2173;
    hessian_value_ptr[16] = _tmp1315 * _tmp2178 + _tmp2179 * _tmp966;
    hessian_value_ptr[17] = _tmp2185 * _tmp922 + _tmp2186 * _tmp868;
    hessian_value_ptr[18] = _tmp1232 * _tmp2190 + _tmp2192 * _tmp995;
    hessian_value_ptr[19] = _tmp1221 * _tmp2197 + _tmp2198 * _tmp937;
    hessian_value_ptr[20] = _tmp1225 * _tmp2202 + _tmp2203 * _tmp852;
    hessian_value_ptr[21] = _tmp1190 * _tmp2209 + _tmp1278 * _tmp2210;
    hessian_value_ptr[22] = _tmp1292 * _tmp2215 + _tmp1311 * _tmp2216;
    hessian_value_ptr[23] = _tmp1071 * _tmp2222 + _tmp1216 * _tmp2223;
    hessian_value_ptr[24] = _tmp1129 * _tmp2229 + _tmp1158 * _tmp2227;
    hessian_value_ptr[25] = _tmp1084 * _tmp2236 + _tmp1161 * _tmp2234;
    hessian_value_ptr[26] = _tmp1217 * _tmp2237 + std::pow(_tmp1331, Scalar(2)) +
                            std::pow(_tmp1338, Scalar(2)) + std::pow(_tmp1347, Scalar(2)) +
                            std::pow(_tmp1348, Scalar(2)) + std::pow(_tmp1349, Scalar(2)) +
                            std::pow(_tmp1356, Scalar(2)) + std::pow(_tmp1361, Scalar(2)) +
                            std::pow(_tmp1366, Scalar(2)) + std::pow(_tmp1373, Scalar(2)) +
                            std::pow(_tmp1374, Scalar(2)) + std::pow(_tmp1381, Scalar(2)) +
                            std::pow(_tmp1389, Scalar(2)) + std::pow(_tmp1396, Scalar(2)) +
                            std::pow(_tmp1405, Scalar(2)) + std::pow(_tmp1410, Scalar(2)) +
                            std::pow(_tmp1415, Scalar(2)) + std::pow(_tmp1422, Scalar(2)) +
                            std::pow(_tmp1423, Scalar(2)) + std::pow(_tmp1424, Scalar(2)) +
                            std::pow(_tmp1434, Scalar(2)) + std::pow(_tmp1443, Scalar(2)) +
                            std::pow(_tmp1444, Scalar(2)) + std::pow(_tmp1446, Scalar(2)) +
                            std::pow(_tmp1462, Scalar(2)) + std::pow(_tmp1466, Scalar(2)) +
                            std::pow(_tmp1468, Scalar(2)) + std::pow(_tmp1469, Scalar(2)) +
                            std::pow(_tmp1475, Scalar(2)) + std::pow(_tmp1476, Scalar(2)) +
                            std::pow(_tmp1478, Scalar(2)) + std::pow(_tmp1479, Scalar(2)) +
                            std::pow(_tmp1486, Scalar(2)) + std::pow(_tmp1492, Scalar(2)) +
                            std::pow(_tmp1493, Scalar(2)) + std::pow(_tmp1494, Scalar(2)) +
                            std::pow(_tmp1500, Scalar(2)) + std::pow(_tmp1505, Scalar(2)) +
                            std::pow(_tmp1506, Scalar(2)) + std::pow(_tmp1507, Scalar(2)) +
                            std::pow(_tmp1509, Scalar(2)) + std::pow(_tmp1511, Scalar(2)) +
                            std::pow(_tmp1512, Scalar(2)) + std::pow(_tmp1513, Scalar(2)) +
                            std::pow(_tmp1515, Scalar(2)) + std::pow(_tmp1516, Scalar(2)) +
                            std::pow(_tmp1517, Scalar(2)) + std::pow(_tmp1518, Scalar(2)) +
                            _tmp2237 * std::pow(priors_1_0_sqrt_info(4, 5), Scalar(2));
    hessian_value_ptr[27] =
        _tmp1331 * _tmp1627 + _tmp1338 * _tmp1613 + _tmp1347 * _tmp1598 + _tmp1348 * _tmp1530 +
        _tmp1349 * _tmp1626 + _tmp1356 * _tmp1636 + _tmp1361 * _tmp1656 + _tmp1366 * _tmp1631 +
        _tmp1373 * _tmp1643 + _tmp1374 * _tmp1654 + _tmp1375 * _tmp1565 + _tmp1381 * _tmp1655 +
        _tmp1389 * _tmp1621 + _tmp1396 * _tmp1615 + _tmp1405 * _tmp1599 + _tmp1410 * _tmp1566 +
        _tmp1415 * _tmp1632 + _tmp1422 * _tmp1582 + _tmp1423 * _tmp1642 + _tmp1424 * _tmp1526 +
        _tmp1434 * _tmp1648 + _tmp1443 * _tmp1535 + _tmp1444 * _tmp1625 + _tmp1446 * _tmp1645 +
        _tmp1462 * _tmp1591 + _tmp1466 * _tmp1583 + _tmp1468 * _tmp1641 + _tmp1469 * _tmp1578 +
        _tmp1475 * _tmp1543 + _tmp1476 * _tmp1539 + _tmp1478 * _tmp1574 + _tmp1479 * _tmp1640 +
        _tmp1486 * _tmp1609 + _tmp1492 * _tmp1584 + _tmp1493 * _tmp1570 + _tmp1494 * _tmp1649 +
        _tmp1500 * _tmp1644 + _tmp1505 * _tmp1596 + _tmp1506 * _tmp1556 + _tmp1507 * _tmp1564 +
        _tmp1509 * _tmp1638 + _tmp1511 * _tmp1657 + _tmp1512 * _tmp1616 + _tmp1513 * _tmp1560 +
        _tmp1515 * _tmp1552 + _tmp1516 * _tmp1646 + _tmp1517 * _tmp1603 + _tmp1518 * _tmp1639;
    hessian_value_ptr[28] =
        _tmp1325 * _tmp2238 + _tmp1331 * _tmp1854 + _tmp1338 * _tmp1795 + _tmp1347 * _tmp1773 +
        _tmp1348 * _tmp1793 + _tmp1349 * _tmp1706 + _tmp1356 * _tmp1792 + _tmp1361 * _tmp1850 +
        _tmp1366 * _tmp1855 + _tmp1373 * _tmp1742 + _tmp1374 * _tmp1849 + _tmp1375 * _tmp1840 +
        _tmp1381 * _tmp1817 + _tmp1389 * _tmp1800 + _tmp1396 * _tmp1808 + _tmp1405 * _tmp1856 +
        _tmp1410 * _tmp1734 + _tmp1415 * _tmp1784 + _tmp1422 * _tmp1725 + _tmp1423 * _tmp1760 +
        _tmp1424 * _tmp1839 + _tmp1434 * _tmp1715 + _tmp1443 * _tmp1674 + _tmp1444 * _tmp1799 +
        _tmp1446 * _tmp1691 + _tmp1462 * _tmp1796 + _tmp1466 * _tmp1794 + _tmp1468 * _tmp1798 +
        _tmp1469 * _tmp1826 + _tmp1475 * _tmp1829 + _tmp1476 * _tmp1750 + _tmp1478 * _tmp1716 +
        _tmp1479 * _tmp1837 + _tmp1486 * _tmp1682 + _tmp1492 * _tmp1763 + _tmp1493 * _tmp1666 +
        _tmp1494 * _tmp1758 + _tmp1500 * _tmp1707 + _tmp1505 * _tmp1749 + _tmp1506 * _tmp1818 +
        _tmp1507 * _tmp1853 + _tmp1509 * _tmp1851 + _tmp1511 * _tmp1774 + _tmp1512 * _tmp1761 +
        _tmp1513 * _tmp1764 + _tmp1515 * _tmp1762 + _tmp1516 * _tmp1841 + _tmp1517 * _tmp1699 +
        _tmp1518 * _tmp1690;
    hessian_value_ptr[29] =
        _tmp1331 * _tmp1922 + _tmp1338 * _tmp1867 + _tmp1347 * _tmp1861 + _tmp1348 * _tmp1933 +
        _tmp1349 * _tmp1921 + _tmp1350 * _tmp1925 + _tmp1356 * _tmp1962 + _tmp1361 * _tmp1941 +
        _tmp1366 * _tmp1886 + _tmp1373 * _tmp1955 + _tmp1374 * _tmp1974 + _tmp1375 * _tmp1902 +
        _tmp1381 * _tmp1964 + _tmp1389 * _tmp1937 + _tmp1396 * _tmp1944 + _tmp1405 * _tmp1979 +
        _tmp1410 * _tmp1963 + _tmp1415 * _tmp1976 + _tmp1422 * _tmp1891 + _tmp1423 * _tmp1932 +
        _tmp1424 * _tmp1895 + _tmp1434 * _tmp1906 + _tmp1443 * _tmp1973 + _tmp1444 * _tmp1954 +
        _tmp1446 * _tmp1975 + _tmp1462 * _tmp1950 + _tmp1466 * _tmp1943 + _tmp1468 * _tmp1919 +
        _tmp1469 * _tmp1871 + _tmp1475 * _tmp1899 + _tmp1476 * _tmp1965 + _tmp1478 * _tmp1920 +
        _tmp1479 * _tmp1967 + _tmp1486 * _tmp1875 + _tmp1492 * _tmp1966 + _tmp1493 * _tmp1914 +
        _tmp1494 * _tmp1980 + _tmp1500 * _tmp1910 + _tmp1505 * _tmp1930 + _tmp1506 * _tmp1882 +
        _tmp1507 * _tmp1961 + _tmp1509 * _tmp1876 + _tmp1511 * _tmp1915 + _tmp1512 * _tmp1978 +
        _tmp1513 * _tmp1949 + _tmp1515 * _tmp1931 + _tmp1516 * _tmp1942 + _tmp1517 * _tmp1977 +
        _tmp1518 * _tmp1924;
    hessian_value_ptr[30] =
        _tmp1331 * _tmp2100 + _tmp1338 * _tmp2003 + _tmp1347 * _tmp2086 + _tmp1348 * _tmp2088 +
        _tmp1349 * _tmp2081 + _tmp1356 * _tmp2090 + _tmp1361 * _tmp2035 + _tmp1366 * _tmp2073 +
        _tmp1373 * _tmp2094 + _tmp1374 * _tmp2055 + _tmp1375 * _tmp2080 + _tmp1381 * _tmp2044 +
        _tmp1389 * _tmp1994 + _tmp1396 * _tmp2012 + _tmp1405 * _tmp2102 + _tmp1410 * _tmp2024 +
        _tmp1415 * _tmp2060 + _tmp1422 * _tmp2082 + _tmp1423 * _tmp2079 + _tmp1424 * _tmp2096 +
        _tmp1434 * _tmp2040 + _tmp1443 * _tmp2061 + _tmp1444 * _tmp2020 + _tmp1446 * _tmp2031 +
        _tmp1462 * _tmp2087 + _tmp1466 * _tmp2089 + _tmp1468 * _tmp2050 + _tmp1469 * _tmp1993 +
        _tmp1475 * _tmp1984 + _tmp1476 * _tmp2025 + _tmp1478 * _tmp2039 + _tmp1479 * _tmp2095 +
        _tmp1486 * _tmp2045 + _tmp1492 * _tmp2098 + _tmp1493 * _tmp1998 + _tmp1494 * _tmp1988 +
        _tmp1500 * _tmp2065 + _tmp1505 * _tmp2078 + _tmp1506 * _tmp2091 + _tmp1507 * _tmp2069 +
        _tmp1509 * _tmp2007 + _tmp1511 * _tmp2101 + _tmp1512 * _tmp2054 + _tmp1513 * _tmp2093 +
        _tmp1515 * _tmp2068 + _tmp1516 * _tmp2092 + _tmp1517 * _tmp2066 + _tmp1518 * _tmp2014 +
        _tmp2067 * _tmp2238;
    hessian_value_ptr[31] = _tmp1410 * _tmp2114 + _tmp1513 * _tmp2116;
    hessian_value_ptr[32] = _tmp1356 * _tmp2122 + _tmp1468 * _tmp2121;
    hessian_value_ptr[33] = _tmp1492 * _tmp2127 + _tmp1493 * _tmp2128;
    hessian_value_ptr[34] = _tmp1366 * _tmp2135 + _tmp1479 * _tmp2132;
    hessian_value_ptr[35] = _tmp1373 * _tmp2140 + _tmp1444 * _tmp2141;
    hessian_value_ptr[36] = _tmp1422 * _tmp2145 + _tmp1512 * _tmp2146;
    hessian_value_ptr[37] = _tmp1434 * _tmp2153 + _tmp1478 * _tmp2152;
    hessian_value_ptr[38] = _tmp1389 * _tmp2160 + _tmp1494 * _tmp2159;
    hessian_value_ptr[39] = _tmp1347 * _tmp2164 + _tmp1348 * _tmp2166;
    hessian_value_ptr[40] = _tmp1361 * _tmp2173 + _tmp1374 * _tmp2171;
    hessian_value_ptr[41] = _tmp1396 * _tmp2178 + _tmp1506 * _tmp2179;
    hessian_value_ptr[42] = _tmp1338 * _tmp2186 + _tmp1349 * _tmp2185;
    hessian_value_ptr[43] = _tmp1500 * _tmp2192 + _tmp1517 * _tmp2190;
    hessian_value_ptr[44] = _tmp1486 * _tmp2198 + _tmp1509 * _tmp2197;
    hessian_value_ptr[45] = _tmp1415 * _tmp2202 + _tmp1424 * _tmp2203;
    hessian_value_ptr[46] = _tmp1505 * _tmp2210 + _tmp1516 * _tmp2209;
    hessian_value_ptr[47] = _tmp1381 * _tmp2215 + _tmp1507 * _tmp2216;
    hessian_value_ptr[48] = _tmp1331 * _tmp2222 + _tmp1469 * _tmp2223;
    hessian_value_ptr[49] = _tmp1475 * _tmp2229 + _tmp1518 * _tmp2227;
    hessian_value_ptr[50] = _tmp1443 * _tmp2234 + _tmp1446 * _tmp2236;
    hessian_value_ptr[51] =
        std::pow(_tmp1526, Scalar(2)) + std::pow(_tmp1530, Scalar(2)) +
        std::pow(_tmp1535, Scalar(2)) + std::pow(_tmp1539, Scalar(2)) +
        std::pow(_tmp1543, Scalar(2)) +
        std::pow(_tmp1550, Scalar(2)) * std::pow(priors_1_0_sqrt_info(4, 4), Scalar(2)) +
        std::pow(_tmp1552, Scalar(2)) + std::pow(_tmp1556, Scalar(2)) +
        std::pow(_tmp1560, Scalar(2)) + std::pow(_tmp1564, Scalar(2)) +
        std::pow(_tmp1566, Scalar(2)) + std::pow(_tmp1570, Scalar(2)) +
        std::pow(_tmp1574, Scalar(2)) + std::pow(_tmp1578, Scalar(2)) +
        std::pow(_tmp1582, Scalar(2)) + std::pow(_tmp1583, Scalar(2)) +
        std::pow(_tmp1584, Scalar(2)) + std::pow(_tmp1591, Scalar(2)) +
        std::pow(_tmp1596, Scalar(2)) + std::pow(_tmp1598, Scalar(2)) +
        std::pow(_tmp1599, Scalar(2)) + std::pow(_tmp1603, Scalar(2)) +
        std::pow(_tmp1609, Scalar(2)) + std::pow(_tmp1613, Scalar(2)) +
        std::pow(_tmp1615, Scalar(2)) + std::pow(_tmp1616, Scalar(2)) +
        std::pow(_tmp1621, Scalar(2)) + std::pow(_tmp1625, Scalar(2)) +
        std::pow(_tmp1626, Scalar(2)) + std::pow(_tmp1627, Scalar(2)) +
        std::pow(_tmp1631, Scalar(2)) + std::pow(_tmp1632, Scalar(2)) +
        std::pow(_tmp1636, Scalar(2)) + std::pow(_tmp1638, Scalar(2)) +
        std::pow(_tmp1639, Scalar(2)) + std::pow(_tmp1640, Scalar(2)) +
        std::pow(_tmp1641, Scalar(2)) + std::pow(_tmp1642, Scalar(2)) +
        std::pow(_tmp1643, Scalar(2)) + std::pow(_tmp1644, Scalar(2)) +
        std::pow(_tmp1645, Scalar(2)) + std::pow(_tmp1646, Scalar(2)) +
        std::pow(_tmp1648, Scalar(2)) + std::pow(_tmp1649, Scalar(2)) +
        std::pow(_tmp1654, Scalar(2)) + std::pow(_tmp1655, Scalar(2)) +
        std::pow(_tmp1656, Scalar(2)) + std::pow(_tmp1657, Scalar(2));
    hessian_value_ptr[52] =
        _tmp1526 * _tmp1839 + _tmp1530 * _tmp1793 + _tmp1535 * _tmp1674 + _tmp1539 * _tmp1750 +
        _tmp1543 * _tmp1829 + _tmp1552 * _tmp1762 + _tmp1556 * _tmp1818 + _tmp1560 * _tmp1764 +
        _tmp1564 * _tmp1853 + _tmp1565 * _tmp1840 + _tmp1566 * _tmp1734 + _tmp1570 * _tmp1666 +
        _tmp1574 * _tmp1716 + _tmp1578 * _tmp1826 + _tmp1582 * _tmp1725 + _tmp1583 * _tmp1794 +
        _tmp1584 * _tmp1763 + _tmp1591 * _tmp1796 + _tmp1596 * _tmp1749 + _tmp1598 * _tmp1773 +
        _tmp1599 * _tmp1856 + _tmp1603 * _tmp1699 + _tmp1609 * _tmp1682 + _tmp1613 * _tmp1795 +
        _tmp1615 * _tmp1808 + _tmp1616 * _tmp1761 + _tmp1621 * _tmp1800 + _tmp1625 * _tmp1799 +
        _tmp1626 * _tmp1706 + _tmp1627 * _tmp1854 + _tmp1631 * _tmp1855 + _tmp1632 * _tmp1784 +
        _tmp1636 * _tmp1792 + _tmp1638 * _tmp1851 + _tmp1639 * _tmp1690 + _tmp1640 * _tmp1837 +
        _tmp1641 * _tmp1798 + _tmp1642 * _tmp1760 + _tmp1643 * _tmp1742 + _tmp1644 * _tmp1707 +
        _tmp1645 * _tmp1691 + _tmp1646 * _tmp1841 + _tmp1648 * _tmp1715 + _tmp1649 * _tmp1758 +
        _tmp1654 * _tmp1849 + _tmp1655 * _tmp1817 + _tmp1656 * _tmp1850 + _tmp1657 * _tmp1774;
    hessian_value_ptr[53] =
        _tmp1526 * _tmp1895 + _tmp1530 * _tmp1933 + _tmp1535 * _tmp1973 + _tmp1539 * _tmp1965 +
        _tmp1543 * _tmp1899 + _tmp1552 * _tmp1931 + _tmp1556 * _tmp1882 + _tmp1560 * _tmp1949 +
        _tmp1564 * _tmp1961 + _tmp1565 * _tmp1902 + _tmp1566 * _tmp1963 + _tmp1570 * _tmp1914 +
        _tmp1574 * _tmp1920 + _tmp1578 * _tmp1871 + _tmp1582 * _tmp1891 + _tmp1583 * _tmp1943 +
        _tmp1584 * _tmp1966 + _tmp1591 * _tmp1950 + _tmp1596 * _tmp1930 + _tmp1598 * _tmp1861 +
        _tmp1599 * _tmp1979 + _tmp1603 * _tmp1977 + _tmp1609 * _tmp1875 + _tmp1613 * _tmp1867 +
        _tmp1615 * _tmp1944 + _tmp1616 * _tmp1978 + _tmp1621 * _tmp1937 + _tmp1625 * _tmp1954 +
        _tmp1626 * _tmp1921 + _tmp1627 * _tmp1922 + _tmp1631 * _tmp1886 + _tmp1632 * _tmp1976 +
        _tmp1636 * _tmp1962 + _tmp1638 * _tmp1876 + _tmp1639 * _tmp1924 + _tmp1640 * _tmp1967 +
        _tmp1641 * _tmp1919 + _tmp1642 * _tmp1932 + _tmp1643 * _tmp1955 + _tmp1644 * _tmp1910 +
        _tmp1645 * _tmp1975 + _tmp1646 * _tmp1942 + _tmp1648 * _tmp1906 + _tmp1649 * _tmp1980 +
        _tmp1654 * _tmp1974 + _tmp1655 * _tmp1964 + _tmp1656 * _tmp1941 + _tmp1657 * _tmp1915;
    hessian_value_ptr[54] =
        _tmp1526 * _tmp2096 + _tmp1530 * _tmp2088 + _tmp1535 * _tmp2061 + _tmp1539 * _tmp2025 +
        _tmp1543 * _tmp1984 + _tmp1552 * _tmp2068 + _tmp1556 * _tmp2091 + _tmp1560 * _tmp2093 +
        _tmp1564 * _tmp2069 + _tmp1565 * _tmp2080 + _tmp1566 * _tmp2024 + _tmp1570 * _tmp1998 +
        _tmp1574 * _tmp2039 + _tmp1578 * _tmp1993 + _tmp1582 * _tmp2082 + _tmp1583 * _tmp2089 +
        _tmp1584 * _tmp2098 + _tmp1591 * _tmp2087 + _tmp1596 * _tmp2078 + _tmp1598 * _tmp2086 +
        _tmp1599 * _tmp2102 + _tmp1603 * _tmp2066 + _tmp1609 * _tmp2045 + _tmp1613 * _tmp2003 +
        _tmp1615 * _tmp2012 + _tmp1616 * _tmp2054 + _tmp1621 * _tmp1994 + _tmp1625 * _tmp2020 +
        _tmp1626 * _tmp2081 + _tmp1627 * _tmp2100 + _tmp1631 * _tmp2073 + _tmp1632 * _tmp2060 +
        _tmp1636 * _tmp2090 + _tmp1638 * _tmp2007 + _tmp1639 * _tmp2014 + _tmp1640 * _tmp2095 +
        _tmp1641 * _tmp2050 + _tmp1642 * _tmp2079 + _tmp1643 * _tmp2094 + _tmp1644 * _tmp2065 +
        _tmp1645 * _tmp2031 + _tmp1646 * _tmp2092 + _tmp1648 * _tmp2040 + _tmp1649 * _tmp1988 +
        _tmp1654 * _tmp2055 + _tmp1655 * _tmp2044 + _tmp1656 * _tmp2035 + _tmp1657 * _tmp2101;
    hessian_value_ptr[55] = _tmp1560 * _tmp2116 + _tmp1566 * _tmp2114;
    hessian_value_ptr[56] = _tmp1636 * _tmp2122 + _tmp1641 * _tmp2121;
    hessian_value_ptr[57] = _tmp1570 * _tmp2128 + _tmp1584 * _tmp2127;
    hessian_value_ptr[58] = _tmp1631 * _tmp2135 + _tmp1640 * _tmp2132;
    hessian_value_ptr[59] = _tmp1625 * _tmp2141 + _tmp1643 * _tmp2140;
    hessian_value_ptr[60] = _tmp1582 * _tmp2145 + _tmp1616 * _tmp2146;
    hessian_value_ptr[61] = _tmp1574 * _tmp2152 + _tmp1648 * _tmp2153;
    hessian_value_ptr[62] = _tmp1621 * _tmp2160 + _tmp1649 * _tmp2159;
    hessian_value_ptr[63] = _tmp1530 * _tmp2166 + _tmp1598 * _tmp2164;
    hessian_value_ptr[64] = _tmp1654 * _tmp2171 + _tmp1656 * _tmp2173;
    hessian_value_ptr[65] = _tmp1556 * _tmp2179 + _tmp1615 * _tmp2178;
    hessian_value_ptr[66] = _tmp1613 * _tmp2186 + _tmp1626 * _tmp2185;
    hessian_value_ptr[67] = _tmp1603 * _tmp2190 + _tmp1644 * _tmp2192;
    hessian_value_ptr[68] = _tmp1609 * _tmp2198 + _tmp1638 * _tmp2197;
    hessian_value_ptr[69] = _tmp1526 * _tmp2203 + _tmp1632 * _tmp2202;
    hessian_value_ptr[70] = _tmp1596 * _tmp2210 + _tmp1646 * _tmp2209;
    hessian_value_ptr[71] = _tmp1564 * _tmp2216 + _tmp1655 * _tmp2215;
    hessian_value_ptr[72] = _tmp1578 * _tmp2223 + _tmp1627 * _tmp2222;
    hessian_value_ptr[73] = _tmp1543 * _tmp2229 + _tmp1639 * _tmp2227;
    hessian_value_ptr[74] = _tmp1535 * _tmp2234 + _tmp1645 * _tmp2236;
    hessian_value_ptr[75] = _tmp1217 * std::pow(_tmp1325, Scalar(2)) +
                            std::pow(_tmp1666, Scalar(2)) + std::pow(_tmp1674, Scalar(2)) +
                            std::pow(_tmp1682, Scalar(2)) + std::pow(_tmp1690, Scalar(2)) +
                            std::pow(_tmp1691, Scalar(2)) + std::pow(_tmp1699, Scalar(2)) +
                            std::pow(_tmp1706, Scalar(2)) + std::pow(_tmp1707, Scalar(2)) +
                            std::pow(_tmp1715, Scalar(2)) + std::pow(_tmp1716, Scalar(2)) +
                            std::pow(_tmp1725, Scalar(2)) + std::pow(_tmp1734, Scalar(2)) +
                            std::pow(_tmp1742, Scalar(2)) + std::pow(_tmp1749, Scalar(2)) +
                            std::pow(_tmp1750, Scalar(2)) + std::pow(_tmp1758, Scalar(2)) +
                            std::pow(_tmp1760, Scalar(2)) + std::pow(_tmp1761, Scalar(2)) +
                            std::pow(_tmp1762, Scalar(2)) + std::pow(_tmp1763, Scalar(2)) +
                            std::pow(_tmp1764, Scalar(2)) + std::pow(_tmp1773, Scalar(2)) +
                            std::pow(_tmp1774, Scalar(2)) + std::pow(_tmp1784, Scalar(2)) +
                            std::pow(_tmp1792, Scalar(2)) + std::pow(_tmp1793, Scalar(2)) +
                            std::pow(_tmp1794, Scalar(2)) + std::pow(_tmp1795, Scalar(2)) +
                            std::pow(_tmp1796, Scalar(2)) + std::pow(_tmp1797, Scalar(2)) +
                            std::pow(_tmp1798, Scalar(2)) + std::pow(_tmp1799, Scalar(2)) +
                            std::pow(_tmp1800, Scalar(2)) + std::pow(_tmp1808, Scalar(2)) +
                            std::pow(_tmp1809, Scalar(2)) + std::pow(_tmp1817, Scalar(2)) +
                            std::pow(_tmp1818, Scalar(2)) + std::pow(_tmp1826, Scalar(2)) +
                            _tmp1827 * std::pow(_tmp51, Scalar(2)) + std::pow(_tmp1829, Scalar(2)) +
                            std::pow(_tmp1837, Scalar(2)) + std::pow(_tmp1839, Scalar(2)) +
                            std::pow(_tmp1840, Scalar(2)) + std::pow(_tmp1841, Scalar(2)) +
                            std::pow(_tmp1849, Scalar(2)) + std::pow(_tmp1850, Scalar(2)) +
                            std::pow(_tmp1851, Scalar(2)) + std::pow(_tmp1853, Scalar(2)) +
                            std::pow(_tmp1854, Scalar(2)) + std::pow(_tmp1855, Scalar(2)) +
                            std::pow(_tmp1856, Scalar(2));
    hessian_value_ptr[76] =
        _tmp1325 * _tmp1925 + _tmp1666 * _tmp1914 + _tmp1674 * _tmp1973 + _tmp1682 * _tmp1875 +
        _tmp1690 * _tmp1924 + _tmp1691 * _tmp1975 + _tmp1699 * _tmp1977 + _tmp1706 * _tmp1921 +
        _tmp1707 * _tmp1910 + _tmp1715 * _tmp1906 + _tmp1716 * _tmp1920 + _tmp1725 * _tmp1891 +
        _tmp1734 * _tmp1963 + _tmp1742 * _tmp1955 + _tmp1749 * _tmp1930 + _tmp1750 * _tmp1965 +
        _tmp1758 * _tmp1980 + _tmp1760 * _tmp1932 + _tmp1761 * _tmp1978 + _tmp1762 * _tmp1931 +
        _tmp1763 * _tmp1966 + _tmp1764 * _tmp1949 + _tmp1773 * _tmp1861 + _tmp1774 * _tmp1915 +
        _tmp1784 * _tmp1976 + _tmp1792 * _tmp1962 + _tmp1793 * _tmp1933 + _tmp1794 * _tmp1943 +
        _tmp1795 * _tmp1867 + _tmp1796 * _tmp1950 + _tmp1797 * _tmp1956 + _tmp1798 * _tmp1919 +
        _tmp1799 * _tmp1954 + _tmp1800 * _tmp1937 + _tmp1808 * _tmp1944 + _tmp1809 * _tmp1923 +
        _tmp1817 * _tmp1964 + _tmp1818 * _tmp1882 + _tmp1826 * _tmp1871 +
        _tmp1827 * _tmp51 * _tmp52 + _tmp1829 * _tmp1899 + _tmp1837 * _tmp1967 +
        _tmp1839 * _tmp1895 + _tmp1840 * _tmp1902 + _tmp1841 * _tmp1942 + _tmp1849 * _tmp1974 +
        _tmp1850 * _tmp1941 + _tmp1851 * _tmp1876 + _tmp1853 * _tmp1961 + _tmp1854 * _tmp1922 +
        _tmp1855 * _tmp1886 + _tmp1856 * _tmp1979;
    hessian_value_ptr[77] =
        _tmp1217 * _tmp1325 * _tmp2067 + _tmp1666 * _tmp1998 + _tmp1674 * _tmp2061 +
        _tmp1682 * _tmp2045 + _tmp1690 * _tmp2014 + _tmp1691 * _tmp2031 + _tmp1699 * _tmp2066 +
        _tmp1706 * _tmp2081 + _tmp1707 * _tmp2065 + _tmp1715 * _tmp2040 + _tmp1716 * _tmp2039 +
        _tmp1725 * _tmp2082 + _tmp1734 * _tmp2024 + _tmp1742 * _tmp2094 + _tmp1749 * _tmp2078 +
        _tmp1750 * _tmp2025 + _tmp1758 * _tmp1988 + _tmp1760 * _tmp2079 + _tmp1761 * _tmp2054 +
        _tmp1762 * _tmp2068 + _tmp1763 * _tmp2098 + _tmp1764 * _tmp2093 + _tmp1773 * _tmp2086 +
        _tmp1774 * _tmp2101 + _tmp1784 * _tmp2060 + _tmp1792 * _tmp2090 + _tmp1793 * _tmp2088 +
        _tmp1794 * _tmp2089 + _tmp1795 * _tmp2003 + _tmp1796 * _tmp2087 + _tmp1797 * _tmp2097 +
        _tmp1798 * _tmp2050 + _tmp1799 * _tmp2020 + _tmp1800 * _tmp1994 + _tmp1808 * _tmp2012 +
        _tmp1809 * _tmp2099 + _tmp1817 * _tmp2044 + _tmp1818 * _tmp2091 + _tmp1826 * _tmp1993 +
        _tmp1829 * _tmp1984 + _tmp1837 * _tmp2095 + _tmp1839 * _tmp2096 + _tmp1840 * _tmp2080 +
        _tmp1841 * _tmp2092 + _tmp1849 * _tmp2055 + _tmp1850 * _tmp2035 + _tmp1851 * _tmp2007 +
        _tmp1853 * _tmp2069 + _tmp1854 * _tmp2100 + _tmp1855 * _tmp2073 + _tmp1856 * _tmp2102 +
        _tmp2239 * _tmp51;
    hessian_value_ptr[78] = _tmp1734 * _tmp2114 + _tmp1764 * _tmp2116;
    hessian_value_ptr[79] = _tmp1792 * _tmp2122 + _tmp1798 * _tmp2121;
    hessian_value_ptr[80] = _tmp1666 * _tmp2128 + _tmp1763 * _tmp2127;
    hessian_value_ptr[81] = _tmp1837 * _tmp2132 + _tmp1855 * _tmp2135;
    hessian_value_ptr[82] = _tmp1742 * _tmp2140 + _tmp1799 * _tmp2141;
    hessian_value_ptr[83] = _tmp1725 * _tmp2145 + _tmp1761 * _tmp2146;
    hessian_value_ptr[84] = _tmp1715 * _tmp2153 + _tmp1716 * _tmp2152;
    hessian_value_ptr[85] = _tmp1758 * _tmp2159 + _tmp1800 * _tmp2160;
    hessian_value_ptr[86] = _tmp1773 * _tmp2164 + _tmp1793 * _tmp2166;
    hessian_value_ptr[87] = _tmp1849 * _tmp2171 + _tmp1850 * _tmp2173;
    hessian_value_ptr[88] = _tmp1808 * _tmp2178 + _tmp1818 * _tmp2179;
    hessian_value_ptr[89] = _tmp1706 * _tmp2185 + _tmp1795 * _tmp2186;
    hessian_value_ptr[90] = _tmp1699 * _tmp2190 + _tmp1707 * _tmp2192;
    hessian_value_ptr[91] = _tmp1682 * _tmp2198 + _tmp1851 * _tmp2197;
    hessian_value_ptr[92] = _tmp1784 * _tmp2202 + _tmp1839 * _tmp2203;
    hessian_value_ptr[93] = _tmp1749 * _tmp2210 + _tmp1841 * _tmp2209;
    hessian_value_ptr[94] = _tmp1817 * _tmp2215 + _tmp1853 * _tmp2216;
    hessian_value_ptr[95] = _tmp1826 * _tmp2223 + _tmp1854 * _tmp2222;
    hessian_value_ptr[96] = _tmp1690 * _tmp2227 + _tmp1829 * _tmp2229;
    hessian_value_ptr[97] = _tmp1674 * _tmp2234 + _tmp1691 * _tmp2236;
    hessian_value_ptr[98] = _tmp1217 * std::pow(_tmp1321, Scalar(2)) +
                            _tmp1827 * std::pow(_tmp52, Scalar(2)) + std::pow(_tmp1861, Scalar(2)) +
                            std::pow(_tmp1867, Scalar(2)) + std::pow(_tmp1871, Scalar(2)) +
                            std::pow(_tmp1875, Scalar(2)) + std::pow(_tmp1876, Scalar(2)) +
                            std::pow(_tmp1882, Scalar(2)) + std::pow(_tmp1886, Scalar(2)) +
                            std::pow(_tmp1891, Scalar(2)) + std::pow(_tmp1895, Scalar(2)) +
                            std::pow(_tmp1899, Scalar(2)) + std::pow(_tmp1902, Scalar(2)) +
                            std::pow(_tmp1906, Scalar(2)) + std::pow(_tmp1910, Scalar(2)) +
                            std::pow(_tmp1914, Scalar(2)) + std::pow(_tmp1915, Scalar(2)) +
                            std::pow(_tmp1919, Scalar(2)) + std::pow(_tmp1920, Scalar(2)) +
                            std::pow(_tmp1921, Scalar(2)) + std::pow(_tmp1922, Scalar(2)) +
                            std::pow(_tmp1923, Scalar(2)) + std::pow(_tmp1924, Scalar(2)) +
                            std::pow(_tmp1930, Scalar(2)) + std::pow(_tmp1931, Scalar(2)) +
                            std::pow(_tmp1932, Scalar(2)) + std::pow(_tmp1933, Scalar(2)) +
                            std::pow(_tmp1937, Scalar(2)) + std::pow(_tmp1941, Scalar(2)) +
                            std::pow(_tmp1942, Scalar(2)) + std::pow(_tmp1943, Scalar(2)) +
                            std::pow(_tmp1944, Scalar(2)) + std::pow(_tmp1949, Scalar(2)) +
                            std::pow(_tmp1950, Scalar(2)) + std::pow(_tmp1954, Scalar(2)) +
                            std::pow(_tmp1955, Scalar(2)) + std::pow(_tmp1956, Scalar(2)) +
                            std::pow(_tmp1961, Scalar(2)) + std::pow(_tmp1962, Scalar(2)) +
                            std::pow(_tmp1963, Scalar(2)) + std::pow(_tmp1964, Scalar(2)) +
                            std::pow(_tmp1965, Scalar(2)) + std::pow(_tmp1966, Scalar(2)) +
                            std::pow(_tmp1967, Scalar(2)) + std::pow(_tmp1973, Scalar(2)) +
                            std::pow(_tmp1974, Scalar(2)) + std::pow(_tmp1975, Scalar(2)) +
                            std::pow(_tmp1976, Scalar(2)) + std::pow(_tmp1977, Scalar(2)) +
                            std::pow(_tmp1978, Scalar(2)) + std::pow(_tmp1979, Scalar(2)) +
                            std::pow(_tmp1980, Scalar(2));
    hessian_value_ptr[99] =
        _tmp1861 * _tmp2086 + _tmp1867 * _tmp2003 + _tmp1871 * _tmp1993 + _tmp1875 * _tmp2045 +
        _tmp1876 * _tmp2007 + _tmp1882 * _tmp2091 + _tmp1886 * _tmp2073 + _tmp1891 * _tmp2082 +
        _tmp1895 * _tmp2096 + _tmp1899 * _tmp1984 + _tmp1902 * _tmp2080 + _tmp1906 * _tmp2040 +
        _tmp1910 * _tmp2065 + _tmp1914 * _tmp1998 + _tmp1915 * _tmp2101 + _tmp1919 * _tmp2050 +
        _tmp1920 * _tmp2039 + _tmp1921 * _tmp2081 + _tmp1922 * _tmp2100 + _tmp1923 * _tmp2099 +
        _tmp1924 * _tmp2014 + _tmp1925 * _tmp2067 + _tmp1930 * _tmp2078 + _tmp1931 * _tmp2068 +
        _tmp1932 * _tmp2079 + _tmp1933 * _tmp2088 + _tmp1937 * _tmp1994 + _tmp1941 * _tmp2035 +
        _tmp1942 * _tmp2092 + _tmp1943 * _tmp2089 + _tmp1944 * _tmp2012 + _tmp1949 * _tmp2093 +
        _tmp1950 * _tmp2087 + _tmp1954 * _tmp2020 + _tmp1955 * _tmp2094 + _tmp1956 * _tmp2097 +
        _tmp1961 * _tmp2069 + _tmp1962 * _tmp2090 + _tmp1963 * _tmp2024 + _tmp1964 * _tmp2044 +
        _tmp1965 * _tmp2025 + _tmp1966 * _tmp2098 + _tmp1967 * _tmp2095 + _tmp1973 * _tmp2061 +
        _tmp1974 * _tmp2055 + _tmp1975 * _tmp2031 + _tmp1976 * _tmp2060 + _tmp1977 * _tmp2066 +
        _tmp1978 * _tmp2054 + _tmp1979 * _tmp2102 + _tmp1980 * _tmp1988 + _tmp2239 * _tmp52;
    hessian_value_ptr[100] = _tmp1949 * _tmp2116 + _tmp1963 * _tmp2114;
    hessian_value_ptr[101] = _tmp1919 * _tmp2121 + _tmp1962 * _tmp2122;
    hessian_value_ptr[102] = _tmp1914 * _tmp2128 + _tmp1966 * _tmp2127;
    hessian_value_ptr[103] = _tmp1886 * _tmp2135 + _tmp1967 * _tmp2132;
    hessian_value_ptr[104] = _tmp1954 * _tmp2141 + _tmp1955 * _tmp2140;
    hessian_value_ptr[105] = _tmp1891 * _tmp2145 + _tmp1978 * _tmp2146;
    hessian_value_ptr[106] = _tmp1906 * _tmp2153 + _tmp1920 * _tmp2152;
    hessian_value_ptr[107] = _tmp1937 * _tmp2160 + _tmp1980 * _tmp2159;
    hessian_value_ptr[108] = _tmp1861 * _tmp2164 + _tmp1933 * _tmp2166;
    hessian_value_ptr[109] = _tmp1941 * _tmp2173 + _tmp1974 * _tmp2171;
    hessian_value_ptr[110] = _tmp1882 * _tmp2179 + _tmp1944 * _tmp2178;
    hessian_value_ptr[111] = _tmp1867 * _tmp2186 + _tmp1921 * _tmp2185;
    hessian_value_ptr[112] = _tmp1910 * _tmp2192 + _tmp1977 * _tmp2190;
    hessian_value_ptr[113] = _tmp1875 * _tmp2198 + _tmp1876 * _tmp2197;
    hessian_value_ptr[114] = _tmp1895 * _tmp2203 + _tmp1976 * _tmp2202;
    hessian_value_ptr[115] = _tmp1930 * _tmp2210 + _tmp1942 * _tmp2209;
    hessian_value_ptr[116] = _tmp1961 * _tmp2216 + _tmp1964 * _tmp2215;
    hessian_value_ptr[117] = _tmp1871 * _tmp2223 + _tmp1922 * _tmp2222;
    hessian_value_ptr[118] = _tmp1899 * _tmp2229 + _tmp1924 * _tmp2227;
    hessian_value_ptr[119] = _tmp1973 * _tmp2234 + _tmp1975 * _tmp2236;
    hessian_value_ptr[120] = _tmp1217 * std::pow(_tmp2067, Scalar(2)) +
                             _tmp1827 * std::pow(_tmp48, Scalar(2)) +
                             std::pow(_tmp1984, Scalar(2)) + std::pow(_tmp1988, Scalar(2)) +
                             std::pow(_tmp1993, Scalar(2)) + std::pow(_tmp1994, Scalar(2)) +
                             std::pow(_tmp1998, Scalar(2)) + std::pow(_tmp2003, Scalar(2)) +
                             std::pow(_tmp2007, Scalar(2)) + std::pow(_tmp2012, Scalar(2)) +
                             std::pow(_tmp2014, Scalar(2)) + std::pow(_tmp2020, Scalar(2)) +
                             std::pow(_tmp2024, Scalar(2)) + std::pow(_tmp2025, Scalar(2)) +
                             std::pow(_tmp2031, Scalar(2)) + std::pow(_tmp2035, Scalar(2)) +
                             std::pow(_tmp2039, Scalar(2)) + std::pow(_tmp2040, Scalar(2)) +
                             std::pow(_tmp2044, Scalar(2)) + std::pow(_tmp2045, Scalar(2)) +
                             std::pow(_tmp2050, Scalar(2)) + std::pow(_tmp2054, Scalar(2)) +
                             std::pow(_tmp2055, Scalar(2)) + std::pow(_tmp2060, Scalar(2)) +
                             std::pow(_tmp2061, Scalar(2)) + std::pow(_tmp2065, Scalar(2)) +
                             std::pow(_tmp2066, Scalar(2)) + std::pow(_tmp2068, Scalar(2)) +
                             std::pow(_tmp2069, Scalar(2)) + std::pow(_tmp2073, Scalar(2)) +
                             std::pow(_tmp2078, Scalar(2)) + std::pow(_tmp2079, Scalar(2)) +
                             std::pow(_tmp2080, Scalar(2)) + std::pow(_tmp2081, Scalar(2)) +
                             std::pow(_tmp2082, Scalar(2)) + std::pow(_tmp2086, Scalar(2)) +
                             std::pow(_tmp2087, Scalar(2)) + std::pow(_tmp2088, Scalar(2)) +
                             std::pow(_tmp2089, Scalar(2)) + std::pow(_tmp2090, Scalar(2)) +
                             std::pow(_tmp2091, Scalar(2)) + std::pow(_tmp2092, Scalar(2)) +
                             std::pow(_tmp2093, Scalar(2)) + std::pow(_tmp2094, Scalar(2)) +
                             std::pow(_tmp2095, Scalar(2)) + std::pow(_tmp2096, Scalar(2)) +
                             std::pow(_tmp2097, Scalar(2)) + std::pow(_tmp2098, Scalar(2)) +
                             std::pow(_tmp2099, Scalar(2)) + std::pow(_tmp2100, Scalar(2)) +
                             std::pow(_tmp2101, Scalar(2)) + std::pow(_tmp2102, Scalar(2));
    hessian_value_ptr[121] = _tmp2024 * _tmp2114 + _tmp2093 * _tmp2116;
    hessian_value_ptr[122] = _tmp2050 * _tmp2121 + _tmp2090 * _tmp2122;
    hessian_value_ptr[123] = _tmp1998 * _tmp2128 + _tmp2098 * _tmp2127;
    hessian_value_ptr[124] = _tmp2073 * _tmp2135 + _tmp2095 * _tmp2132;
    hessian_value_ptr[125] = _tmp2020 * _tmp2141 + _tmp2094 * _tmp2140;
    hessian_value_ptr[126] = _tmp2054 * _tmp2146 + _tmp2082 * _tmp2145;
    hessian_value_ptr[127] = _tmp2039 * _tmp2152 + _tmp2040 * _tmp2153;
    hessian_value_ptr[128] = _tmp1988 * _tmp2159 + _tmp1994 * _tmp2160;
    hessian_value_ptr[129] = _tmp2086 * _tmp2164 + _tmp2088 * _tmp2166;
    hessian_value_ptr[130] = _tmp2035 * _tmp2173 + _tmp2055 * _tmp2171;
    hessian_value_ptr[131] = _tmp2012 * _tmp2178 + _tmp2091 * _tmp2179;
    hessian_value_ptr[132] = _tmp2003 * _tmp2186 + _tmp2081 * _tmp2185;
    hessian_value_ptr[133] = _tmp2065 * _tmp2192 + _tmp2066 * _tmp2190;
    hessian_value_ptr[134] = _tmp2007 * _tmp2197 + _tmp2045 * _tmp2198;
    hessian_value_ptr[135] = _tmp2060 * _tmp2202 + _tmp2096 * _tmp2203;
    hessian_value_ptr[136] = _tmp2078 * _tmp2210 + _tmp2092 * _tmp2209;
    hessian_value_ptr[137] = _tmp2044 * _tmp2215 + _tmp2069 * _tmp2216;
    hessian_value_ptr[138] = _tmp1993 * _tmp2223 + _tmp2100 * _tmp2222;
    hessian_value_ptr[139] = _tmp1984 * _tmp2229 + _tmp2014 * _tmp2227;
    hessian_value_ptr[140] = _tmp2031 * _tmp2236 + _tmp2061 * _tmp2234;
    hessian_value_ptr[141] =
        std::pow(_tmp2114, Scalar(2)) + _tmp2115 + std::pow(_tmp2116, Scalar(2));
    hessian_value_ptr[142] =
        _tmp2117 + std::pow(_tmp2121, Scalar(2)) + std::pow(_tmp2122, Scalar(2));
    hessian_value_ptr[143] =
        _tmp2123 + std::pow(_tmp2127, Scalar(2)) + std::pow(_tmp2128, Scalar(2));
    hessian_value_ptr[144] =
        std::pow(_tmp2132, Scalar(2)) + _tmp2133 + std::pow(_tmp2135, Scalar(2));
    hessian_value_ptr[145] =
        _tmp2136 + std::pow(_tmp2140, Scalar(2)) + std::pow(_tmp2141, Scalar(2));
    hessian_value_ptr[146] =
        std::pow(_tmp2145, Scalar(2)) + std::pow(_tmp2146, Scalar(2)) + _tmp2147;
    hessian_value_ptr[147] =
        std::pow(_tmp2152, Scalar(2)) + std::pow(_tmp2153, Scalar(2)) + _tmp2154;
    hessian_value_ptr[148] =
        _tmp2155 + std::pow(_tmp2159, Scalar(2)) + std::pow(_tmp2160, Scalar(2));
    hessian_value_ptr[149] =
        std::pow(_tmp2164, Scalar(2)) + _tmp2165 + std::pow(_tmp2166, Scalar(2));
    hessian_value_ptr[150] =
        std::pow(_tmp2171, Scalar(2)) + _tmp2172 + std::pow(_tmp2173, Scalar(2));
    hessian_value_ptr[151] =
        std::pow(_tmp2178, Scalar(2)) + std::pow(_tmp2179, Scalar(2)) + _tmp2180;
    hessian_value_ptr[152] =
        _tmp2181 + std::pow(_tmp2185, Scalar(2)) + std::pow(_tmp2186, Scalar(2));
    hessian_value_ptr[153] =
        std::pow(_tmp2190, Scalar(2)) + _tmp2191 + std::pow(_tmp2192, Scalar(2));
    hessian_value_ptr[154] =
        _tmp2193 + std::pow(_tmp2197, Scalar(2)) + std::pow(_tmp2198, Scalar(2));
    hessian_value_ptr[155] =
        std::pow(_tmp2202, Scalar(2)) + std::pow(_tmp2203, Scalar(2)) + _tmp2204;
    hessian_value_ptr[156] =
        _tmp2205 + std::pow(_tmp2209, Scalar(2)) + std::pow(_tmp2210, Scalar(2));
    hessian_value_ptr[157] =
        _tmp2211 + std::pow(_tmp2215, Scalar(2)) + std::pow(_tmp2216, Scalar(2));
    hessian_value_ptr[158] =
        _tmp2217 + std::pow(_tmp2222, Scalar(2)) + std::pow(_tmp2223, Scalar(2));
    hessian_value_ptr[159] =
        std::pow(_tmp2227, Scalar(2)) + _tmp2228 + std::pow(_tmp2229, Scalar(2));
    hessian_value_ptr[160] =
        _tmp2230 + std::pow(_tmp2234, Scalar(2)) + std::pow(_tmp2236, Scalar(2));
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace bundle_adjustment_fixed_size
