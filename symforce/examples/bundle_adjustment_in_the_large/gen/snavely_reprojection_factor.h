// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Reprojection residual for the camera model used in the Bundle-Adjustment-in-the-Large dataset, a
 * polynomial camera with two distortion coefficients, cx == cy == 0, and fx == fy
 *
 * See https://grail.cs.washington.edu/projects/bal/ for more information
 *
 * Args:
 *     cam_T_world: The (inverse) pose of the camera
 *     intrinsics: Camera intrinsics (f, k1, k2)
 *     point: The world point to be projected
 *     pixel: The measured pixel in the camera (with (0, 0) == center of image)
 *
 * Returns:
 *     residual: The reprojection residual
 *     jacobian: (2x12) jacobian of res wrt args cam_T_world (6), intrinsics (3), point (3)
 *     hessian: (12x12) Gauss-Newton hessian for args cam_T_world (6), intrinsics (3), point (3)
 *     rhs: (12x1) Gauss-Newton rhs for args cam_T_world (6), intrinsics (3), point (3)
 */
template <typename Scalar>
void SnavelyReprojectionFactor(const sym::Pose3<Scalar>& cam_T_world,
                               const Eigen::Matrix<Scalar, 3, 1>& intrinsics,
                               const Eigen::Matrix<Scalar, 3, 1>& point,
                               const Eigen::Matrix<Scalar, 2, 1>& pixel, const Scalar epsilon,
                               Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
                               Eigen::Matrix<Scalar, 2, 12>* const jacobian = nullptr,
                               Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                               Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 690

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _cam_T_world = cam_T_world.Data();

  // Intermediate terms (155)
  const Scalar _tmp0 = 2 * _cam_T_world[3];
  const Scalar _tmp1 = _cam_T_world[2] * _tmp0;
  const Scalar _tmp2 = _cam_T_world[0] * _cam_T_world[1];
  const Scalar _tmp3 = 2 * _tmp2;
  const Scalar _tmp4 = _tmp1 - _tmp3;
  const Scalar _tmp5 = -_tmp4;
  const Scalar _tmp6 = _tmp5 * point(1, 0);
  const Scalar _tmp7 = _cam_T_world[1] * _tmp0;
  const Scalar _tmp8 = 2 * _cam_T_world[2];
  const Scalar _tmp9 = _cam_T_world[0] * _tmp8;
  const Scalar _tmp10 = _tmp7 + _tmp9;
  const Scalar _tmp11 = _tmp10 * point(2, 0);
  const Scalar _tmp12 = std::pow(_cam_T_world[2], Scalar(2));
  const Scalar _tmp13 = 2 * _tmp12;
  const Scalar _tmp14 = std::pow(_cam_T_world[1], Scalar(2));
  const Scalar _tmp15 = 2 * _tmp14 - 1;
  const Scalar _tmp16 = -_tmp13 - _tmp15;
  const Scalar _tmp17 = _tmp16 * point(0, 0);
  const Scalar _tmp18 = _cam_T_world[4] + _tmp11 + _tmp17 + _tmp6;
  const Scalar _tmp19 = _tmp7 - _tmp9;
  const Scalar _tmp20 = -_tmp19;
  const Scalar _tmp21 = _cam_T_world[0] * _tmp0;
  const Scalar _tmp22 = _cam_T_world[1] * _tmp8;
  const Scalar _tmp23 = _tmp21 + _tmp22;
  const Scalar _tmp24 = std::pow(_cam_T_world[0], Scalar(2));
  const Scalar _tmp25 = 2 * _tmp24;
  const Scalar _tmp26 = _tmp15 + _tmp25;
  const Scalar _tmp27 =
      _cam_T_world[6] + _tmp20 * point(0, 0) + _tmp23 * point(1, 0) - _tmp26 * point(2, 0);
  const Scalar _tmp28 = std::max<Scalar>(epsilon, -_tmp27);
  const Scalar _tmp29 = Scalar(1.0) / (_tmp28);
  const Scalar _tmp30 = std::pow(_tmp18, Scalar(2));
  const Scalar _tmp31 = std::pow(_tmp28, Scalar(-2));
  const Scalar _tmp32 = _tmp30 * _tmp31;
  const Scalar _tmp33 = _tmp1 + _tmp3;
  const Scalar _tmp34 = _tmp33 * point(0, 0);
  const Scalar _tmp35 = _tmp21 - _tmp22;
  const Scalar _tmp36 = -_tmp35;
  const Scalar _tmp37 = _tmp36 * point(2, 0);
  const Scalar _tmp38 = -_tmp13 - _tmp25 + 1;
  const Scalar _tmp39 = _tmp38 * point(1, 0);
  const Scalar _tmp40 = _cam_T_world[5] + _tmp34 + _tmp37 + _tmp39;
  const Scalar _tmp41 = std::pow(_tmp40, Scalar(2));
  const Scalar _tmp42 = _tmp31 * _tmp41;
  const Scalar _tmp43 = _tmp32 + _tmp42;
  const Scalar _tmp44 = std::pow(_tmp43, Scalar(2));
  const Scalar _tmp45 = _tmp43 * intrinsics(1, 0) + _tmp44 * intrinsics(2, 0) + 1;
  const Scalar _tmp46 = _tmp29 * _tmp45;
  const Scalar _tmp47 = _tmp46 * intrinsics(0, 0);
  const Scalar _tmp48 = _tmp18 * _tmp47 - pixel(0, 0);
  const Scalar _tmp49 = _tmp40 * _tmp47 - pixel(1, 0);
  const Scalar _tmp50 = _tmp10 * point(1, 0);
  const Scalar _tmp51 = _tmp4 * point(2, 0);
  const Scalar _tmp52 = -_tmp23;
  const Scalar _tmp53 = -_tmp14;
  const Scalar _tmp54 = std::pow(_cam_T_world[3], Scalar(2));
  const Scalar _tmp55 = -_tmp24 + _tmp54;
  const Scalar _tmp56 = _tmp12 + _tmp53 + _tmp55;
  const Scalar _tmp57 = -_tmp52 * point(2, 0) - _tmp56 * point(1, 0);
  const Scalar _tmp58 = _tmp18 * _tmp31;
  const Scalar _tmp59 =
      Scalar(0.5) * ((((-_tmp27 - epsilon) >= 0) - ((-_tmp27 - epsilon) < 0)) + 1);
  const Scalar _tmp60 = _tmp45 * intrinsics(0, 0);
  const Scalar _tmp61 = _tmp59 * _tmp60;
  const Scalar _tmp62 = _tmp58 * _tmp61;
  const Scalar _tmp63 = _tmp58 * (2 * _tmp50 + 2 * _tmp51);
  const Scalar _tmp64 = _tmp36 * point(1, 0);
  const Scalar _tmp65 = -_tmp12;
  const Scalar _tmp66 = _tmp14 + _tmp55 + _tmp65;
  const Scalar _tmp67 = -_tmp66 * point(2, 0);
  const Scalar _tmp68 = _tmp31 * _tmp40;
  const Scalar _tmp69 = _tmp68 * (2 * _tmp64 + 2 * _tmp67);
  const Scalar _tmp70 = _tmp59 / [&]() {
    const Scalar base = _tmp28;
    return base * base * base;
  }();
  const Scalar _tmp71 = 2 * _tmp70;
  const Scalar _tmp72 = _tmp30 * _tmp71;
  const Scalar _tmp73 = _tmp41 * _tmp71;
  const Scalar _tmp74 = 4 * _tmp70;
  const Scalar _tmp75 = _tmp30 * _tmp74;
  const Scalar _tmp76 = _tmp41 * _tmp74;
  const Scalar _tmp77 = _tmp43 * intrinsics(2, 0);
  const Scalar _tmp78 = _tmp29 * intrinsics(0, 0);
  const Scalar _tmp79 =
      _tmp78 * (_tmp77 * (-_tmp57 * _tmp75 - _tmp57 * _tmp76 + 2 * _tmp63 + 2 * _tmp69) +
                intrinsics(1, 0) * (-_tmp57 * _tmp72 - _tmp57 * _tmp73 + _tmp63 + _tmp69));
  const Scalar _tmp80 = _tmp18 * _tmp79 + _tmp47 * (_tmp50 + _tmp51) - _tmp57 * _tmp62;
  const Scalar _tmp81 = _tmp61 * _tmp68;
  const Scalar _tmp82 = _tmp40 * _tmp79 + _tmp47 * (_tmp64 + _tmp67) - _tmp57 * _tmp81;
  const Scalar _tmp83 = -_tmp10 * point(0, 0);
  const Scalar _tmp84 = _tmp24 + _tmp53 + _tmp54 + _tmp65;
  const Scalar _tmp85 = _tmp84 * point(2, 0);
  const Scalar _tmp86 = -_tmp20 * point(2, 0) + _tmp56 * point(0, 0);
  const Scalar _tmp87 = _tmp35 * point(0, 0);
  const Scalar _tmp88 = _tmp33 * point(2, 0);
  const Scalar _tmp89 = _tmp68 * (2 * _tmp87 + 2 * _tmp88);
  const Scalar _tmp90 = _tmp58 * (2 * _tmp83 + 2 * _tmp85);
  const Scalar _tmp91 =
      _tmp78 * (_tmp77 * (-_tmp75 * _tmp86 - _tmp76 * _tmp86 + 2 * _tmp89 + 2 * _tmp90) +
                intrinsics(1, 0) * (-_tmp72 * _tmp86 - _tmp73 * _tmp86 + _tmp89 + _tmp90));
  const Scalar _tmp92 = _tmp18 * _tmp91 + _tmp47 * (_tmp83 + _tmp85) - _tmp62 * _tmp86;
  const Scalar _tmp93 = _tmp40 * _tmp91 + _tmp47 * (_tmp87 + _tmp88) - _tmp81 * _tmp86;
  const Scalar _tmp94 = _tmp5 * point(0, 0);
  const Scalar _tmp95 = -_tmp84 * point(1, 0);
  const Scalar _tmp96 = -_tmp19 * point(1, 0) - _tmp23 * point(0, 0);
  const Scalar _tmp97 = 2 * _tmp94 + 2 * _tmp95;
  const Scalar _tmp98 = -_tmp33 * point(1, 0);
  const Scalar _tmp99 = _tmp66 * point(0, 0);
  const Scalar _tmp100 = 2 * _tmp98 + 2 * _tmp99;
  const Scalar _tmp101 =
      _tmp78 * (_tmp77 * (2 * _tmp100 * _tmp31 * _tmp40 + 2 * _tmp18 * _tmp31 * _tmp97 -
                          _tmp75 * _tmp96 - _tmp76 * _tmp96) +
                intrinsics(1, 0) * (_tmp100 * _tmp31 * _tmp40 + _tmp18 * _tmp31 * _tmp97 -
                                    _tmp72 * _tmp96 - _tmp73 * _tmp96));
  const Scalar _tmp102 = _tmp101 * _tmp18 + _tmp47 * (_tmp94 + _tmp95) - _tmp62 * _tmp96;
  const Scalar _tmp103 = _tmp101 * _tmp40 + _tmp47 * (_tmp98 + _tmp99) - _tmp81 * _tmp96;
  const Scalar _tmp104 = 2 * _cam_T_world[4] + 2 * _tmp11 + 2 * _tmp17 + 2 * _tmp6;
  const Scalar _tmp105 = _tmp31 * intrinsics(1, 0);
  const Scalar _tmp106 = 2 * _tmp31 * _tmp77;
  const Scalar _tmp107 = _tmp104 * _tmp105 + _tmp104 * _tmp106;
  const Scalar _tmp108 = _tmp107 * _tmp78;
  const Scalar _tmp109 = _tmp108 * _tmp18 + _tmp47;
  const Scalar _tmp110 = _tmp108 * _tmp40;
  const Scalar _tmp111 = 2 * _cam_T_world[5] + 2 * _tmp34 + 2 * _tmp37 + 2 * _tmp39;
  const Scalar _tmp112 = _tmp105 * _tmp111 + _tmp106 * _tmp111;
  const Scalar _tmp113 = _tmp112 * _tmp78;
  const Scalar _tmp114 = _tmp113 * _tmp18;
  const Scalar _tmp115 = _tmp113 * _tmp40 + _tmp47;
  const Scalar _tmp116 =
      _tmp78 * (_tmp77 * (_tmp75 + _tmp76) + intrinsics(1, 0) * (_tmp72 + _tmp73));
  const Scalar _tmp117 = _tmp116 * _tmp18 + _tmp62;
  const Scalar _tmp118 = _tmp116 * _tmp40 + _tmp81;
  const Scalar _tmp119 = _tmp18 * _tmp46;
  const Scalar _tmp120 = _tmp40 * _tmp46;
  const Scalar _tmp121 = _tmp43 * _tmp78;
  const Scalar _tmp122 = _tmp121 * _tmp18;
  const Scalar _tmp123 = _tmp121 * _tmp40;
  const Scalar _tmp124 = _tmp44 * _tmp78;
  const Scalar _tmp125 = _tmp124 * _tmp18;
  const Scalar _tmp126 = _tmp124 * _tmp40;
  const Scalar _tmp127 = 4 * _cam_T_world[3];
  const Scalar _tmp128 = _cam_T_world[2] * _tmp127;
  const Scalar _tmp129 = _tmp128 + 4 * _tmp2;
  const Scalar _tmp130 = 4 * _tmp12 - 2;
  const Scalar _tmp131 = -_tmp130 - 4 * _tmp14;
  const Scalar _tmp132 =
      _tmp78 * (_tmp77 * (2 * _tmp129 * _tmp31 * _tmp40 + 2 * _tmp131 * _tmp18 * _tmp31 -
                          _tmp19 * _tmp75 - _tmp19 * _tmp76) +
                intrinsics(1, 0) * (_tmp129 * _tmp31 * _tmp40 + _tmp131 * _tmp18 * _tmp31 -
                                    _tmp19 * _tmp72 - _tmp19 * _tmp73));
  const Scalar _tmp133 = _tmp132 * _tmp18 + _tmp16 * _tmp47 - _tmp19 * _tmp62;
  const Scalar _tmp134 = _tmp132 * _tmp40 - _tmp19 * _tmp81 + _tmp33 * _tmp47;
  const Scalar _tmp135 = 4 * _cam_T_world[0] * _cam_T_world[1] - _tmp128;
  const Scalar _tmp136 = -_tmp130 - 4 * _tmp24;
  const Scalar _tmp137 =
      _tmp78 * (_tmp77 * (2 * _tmp135 * _tmp18 * _tmp31 + 2 * _tmp136 * _tmp31 * _tmp40 -
                          _tmp52 * _tmp75 - _tmp52 * _tmp76) +
                intrinsics(1, 0) * (_tmp135 * _tmp18 * _tmp31 + _tmp136 * _tmp31 * _tmp40 -
                                    _tmp52 * _tmp72 - _tmp52 * _tmp73));
  const Scalar _tmp138 = _tmp137 * _tmp18 + _tmp47 * _tmp5 - _tmp52 * _tmp62;
  const Scalar _tmp139 = _tmp137 * _tmp40 + _tmp38 * _tmp47 - _tmp52 * _tmp81;
  const Scalar _tmp140 =
      _tmp68 * (-_cam_T_world[0] * _tmp127 + 4 * _cam_T_world[1] * _cam_T_world[2]);
  const Scalar _tmp141 =
      _tmp58 * (4 * _cam_T_world[0] * _cam_T_world[2] + _cam_T_world[1] * _tmp127);
  const Scalar _tmp142 =
      _tmp78 * (_tmp77 * (2 * _tmp140 + 2 * _tmp141 - _tmp26 * _tmp75 - _tmp26 * _tmp76) +
                intrinsics(1, 0) * (_tmp140 + _tmp141 - _tmp26 * _tmp72 - _tmp26 * _tmp73));
  const Scalar _tmp143 = _tmp10 * _tmp47 + _tmp142 * _tmp18 - _tmp26 * _tmp62;
  const Scalar _tmp144 = _tmp142 * _tmp40 - _tmp26 * _tmp81 + _tmp36 * _tmp47;
  const Scalar _tmp145 = std::pow(intrinsics(0, 0), Scalar(2));
  const Scalar _tmp146 = _tmp145 * _tmp42;
  const Scalar _tmp147 = _tmp42 * _tmp60;
  const Scalar _tmp148 = _tmp146 * _tmp44;
  const Scalar _tmp149 = _tmp145 * _tmp32;
  const Scalar _tmp150 = _tmp32 * _tmp60;
  const Scalar _tmp151 = _tmp149 * _tmp44;
  const Scalar _tmp152 = std::pow(_tmp45, Scalar(2));
  const Scalar _tmp153 = [&]() {
    const Scalar base = _tmp43;
    return base * base * base;
  }();
  const Scalar _tmp154 = std::pow(_tmp43, Scalar(4));

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp48;
    _res(1, 0) = _tmp49;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp80;
    _jacobian(1, 0) = _tmp82;
    _jacobian(0, 1) = _tmp92;
    _jacobian(1, 1) = _tmp93;
    _jacobian(0, 2) = _tmp102;
    _jacobian(1, 2) = _tmp103;
    _jacobian(0, 3) = _tmp109;
    _jacobian(1, 3) = _tmp110;
    _jacobian(0, 4) = _tmp114;
    _jacobian(1, 4) = _tmp115;
    _jacobian(0, 5) = _tmp117;
    _jacobian(1, 5) = _tmp118;
    _jacobian(0, 6) = _tmp119;
    _jacobian(1, 6) = _tmp120;
    _jacobian(0, 7) = _tmp122;
    _jacobian(1, 7) = _tmp123;
    _jacobian(0, 8) = _tmp125;
    _jacobian(1, 8) = _tmp126;
    _jacobian(0, 9) = _tmp133;
    _jacobian(1, 9) = _tmp134;
    _jacobian(0, 10) = _tmp138;
    _jacobian(1, 10) = _tmp139;
    _jacobian(0, 11) = _tmp143;
    _jacobian(1, 11) = _tmp144;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp80, Scalar(2)) + std::pow(_tmp82, Scalar(2));
    _hessian(1, 0) = _tmp80 * _tmp92 + _tmp82 * _tmp93;
    _hessian(2, 0) = _tmp102 * _tmp80 + _tmp103 * _tmp82;
    _hessian(3, 0) = _tmp109 * _tmp80 + _tmp110 * _tmp82;
    _hessian(4, 0) = _tmp114 * _tmp80 + _tmp115 * _tmp82;
    _hessian(5, 0) = _tmp117 * _tmp80 + _tmp118 * _tmp82;
    _hessian(6, 0) = _tmp119 * _tmp80 + _tmp120 * _tmp82;
    _hessian(7, 0) = _tmp122 * _tmp80 + _tmp123 * _tmp82;
    _hessian(8, 0) = _tmp125 * _tmp80 + _tmp126 * _tmp82;
    _hessian(9, 0) = _tmp133 * _tmp80 + _tmp134 * _tmp82;
    _hessian(10, 0) = _tmp138 * _tmp80 + _tmp139 * _tmp82;
    _hessian(11, 0) = _tmp143 * _tmp80 + _tmp144 * _tmp82;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp92, Scalar(2)) + std::pow(_tmp93, Scalar(2));
    _hessian(2, 1) = _tmp102 * _tmp92 + _tmp103 * _tmp93;
    _hessian(3, 1) = _tmp109 * _tmp92 + _tmp110 * _tmp93;
    _hessian(4, 1) = _tmp114 * _tmp92 + _tmp115 * _tmp93;
    _hessian(5, 1) = _tmp117 * _tmp92 + _tmp118 * _tmp93;
    _hessian(6, 1) = _tmp119 * _tmp92 + _tmp120 * _tmp93;
    _hessian(7, 1) = _tmp122 * _tmp92 + _tmp123 * _tmp93;
    _hessian(8, 1) = _tmp125 * _tmp92 + _tmp126 * _tmp93;
    _hessian(9, 1) = _tmp133 * _tmp92 + _tmp134 * _tmp93;
    _hessian(10, 1) = _tmp138 * _tmp92 + _tmp139 * _tmp93;
    _hessian(11, 1) = _tmp143 * _tmp92 + _tmp144 * _tmp93;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp102, Scalar(2)) + std::pow(_tmp103, Scalar(2));
    _hessian(3, 2) = _tmp102 * _tmp109 + _tmp103 * _tmp110;
    _hessian(4, 2) = _tmp102 * _tmp114 + _tmp103 * _tmp115;
    _hessian(5, 2) = _tmp102 * _tmp117 + _tmp103 * _tmp118;
    _hessian(6, 2) = _tmp102 * _tmp119 + _tmp103 * _tmp120;
    _hessian(7, 2) = _tmp102 * _tmp122 + _tmp103 * _tmp123;
    _hessian(8, 2) = _tmp102 * _tmp125 + _tmp103 * _tmp126;
    _hessian(9, 2) = _tmp102 * _tmp133 + _tmp103 * _tmp134;
    _hessian(10, 2) = _tmp102 * _tmp138 + _tmp103 * _tmp139;
    _hessian(11, 2) = _tmp102 * _tmp143 + _tmp103 * _tmp144;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp107, Scalar(2)) * _tmp146 + std::pow(_tmp109, Scalar(2));
    _hessian(4, 3) = _tmp109 * _tmp114 + _tmp110 * _tmp115;
    _hessian(5, 3) = _tmp109 * _tmp117 + _tmp110 * _tmp118;
    _hessian(6, 3) = _tmp107 * _tmp147 + _tmp109 * _tmp119;
    _hessian(7, 3) = _tmp107 * _tmp146 * _tmp43 + _tmp109 * _tmp122;
    _hessian(8, 3) = _tmp107 * _tmp148 + _tmp109 * _tmp125;
    _hessian(9, 3) = _tmp109 * _tmp133 + _tmp110 * _tmp134;
    _hessian(10, 3) = _tmp109 * _tmp138 + _tmp110 * _tmp139;
    _hessian(11, 3) = _tmp109 * _tmp143 + _tmp110 * _tmp144;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp112, Scalar(2)) * _tmp149 + std::pow(_tmp115, Scalar(2));
    _hessian(5, 4) = _tmp114 * _tmp117 + _tmp115 * _tmp118;
    _hessian(6, 4) = _tmp112 * _tmp150 + _tmp115 * _tmp120;
    _hessian(7, 4) = _tmp112 * _tmp149 * _tmp43 + _tmp115 * _tmp123;
    _hessian(8, 4) = _tmp112 * _tmp151 + _tmp115 * _tmp126;
    _hessian(9, 4) = _tmp114 * _tmp133 + _tmp115 * _tmp134;
    _hessian(10, 4) = _tmp114 * _tmp138 + _tmp115 * _tmp139;
    _hessian(11, 4) = _tmp114 * _tmp143 + _tmp115 * _tmp144;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp117, Scalar(2)) + std::pow(_tmp118, Scalar(2));
    _hessian(6, 5) = _tmp117 * _tmp119 + _tmp118 * _tmp120;
    _hessian(7, 5) = _tmp117 * _tmp122 + _tmp118 * _tmp123;
    _hessian(8, 5) = _tmp117 * _tmp125 + _tmp118 * _tmp126;
    _hessian(9, 5) = _tmp117 * _tmp133 + _tmp118 * _tmp134;
    _hessian(10, 5) = _tmp117 * _tmp138 + _tmp118 * _tmp139;
    _hessian(11, 5) = _tmp117 * _tmp143 + _tmp118 * _tmp144;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = _tmp152 * _tmp32 + _tmp152 * _tmp42;
    _hessian(7, 6) = _tmp147 * _tmp43 + _tmp150 * _tmp43;
    _hessian(8, 6) = _tmp147 * _tmp44 + _tmp150 * _tmp44;
    _hessian(9, 6) = _tmp119 * _tmp133 + _tmp120 * _tmp134;
    _hessian(10, 6) = _tmp119 * _tmp138 + _tmp120 * _tmp139;
    _hessian(11, 6) = _tmp119 * _tmp143 + _tmp120 * _tmp144;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = _tmp148 + _tmp151;
    _hessian(8, 7) = _tmp146 * _tmp153 + _tmp149 * _tmp153;
    _hessian(9, 7) = _tmp122 * _tmp133 + _tmp123 * _tmp134;
    _hessian(10, 7) = _tmp122 * _tmp138 + _tmp123 * _tmp139;
    _hessian(11, 7) = _tmp122 * _tmp143 + _tmp123 * _tmp144;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = _tmp146 * _tmp154 + _tmp149 * _tmp154;
    _hessian(9, 8) = _tmp125 * _tmp133 + _tmp126 * _tmp134;
    _hessian(10, 8) = _tmp125 * _tmp138 + _tmp126 * _tmp139;
    _hessian(11, 8) = _tmp125 * _tmp143 + _tmp126 * _tmp144;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp133, Scalar(2)) + std::pow(_tmp134, Scalar(2));
    _hessian(10, 9) = _tmp133 * _tmp138 + _tmp134 * _tmp139;
    _hessian(11, 9) = _tmp133 * _tmp143 + _tmp134 * _tmp144;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp138, Scalar(2)) + std::pow(_tmp139, Scalar(2));
    _hessian(11, 10) = _tmp138 * _tmp143 + _tmp139 * _tmp144;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp143, Scalar(2)) + std::pow(_tmp144, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp48 * _tmp80 + _tmp49 * _tmp82;
    _rhs(1, 0) = _tmp48 * _tmp92 + _tmp49 * _tmp93;
    _rhs(2, 0) = _tmp102 * _tmp48 + _tmp103 * _tmp49;
    _rhs(3, 0) = _tmp109 * _tmp48 + _tmp110 * _tmp49;
    _rhs(4, 0) = _tmp114 * _tmp48 + _tmp115 * _tmp49;
    _rhs(5, 0) = _tmp117 * _tmp48 + _tmp118 * _tmp49;
    _rhs(6, 0) = _tmp119 * _tmp48 + _tmp120 * _tmp49;
    _rhs(7, 0) = _tmp122 * _tmp48 + _tmp123 * _tmp49;
    _rhs(8, 0) = _tmp125 * _tmp48 + _tmp126 * _tmp49;
    _rhs(9, 0) = _tmp133 * _tmp48 + _tmp134 * _tmp49;
    _rhs(10, 0) = _tmp138 * _tmp48 + _tmp139 * _tmp49;
    _rhs(11, 0) = _tmp143 * _tmp48 + _tmp144 * _tmp49;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
