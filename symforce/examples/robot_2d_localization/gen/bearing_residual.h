// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose2.h>

namespace sym {

/**
 * Residual from a relative bearing measurement of a 2D pose to a landmark.
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 1, 1> BearingResidual(const sym::Pose2<Scalar>& pose,
                                            const Eigen::Matrix<Scalar, 2, 1>& landmark,
                                            const Scalar angle, const Scalar epsilon) {
  // Total ops: 27

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _pose = pose.Data();

  // Intermediate terms (2)
  const Scalar _tmp0 = -_pose[0] * _pose[2] + _pose[0] * landmark(0, 0) - _pose[1] * _pose[3] +
                       _pose[1] * landmark(1, 0);
  const Scalar _tmp1 =
      -angle + std::atan2(-_pose[0] * _pose[3] + _pose[0] * landmark(1, 0) + _pose[1] * _pose[2] -
                              _pose[1] * landmark(0, 0),
                          _tmp0 + epsilon * ((((_tmp0) > 0) - ((_tmp0) < 0)) + Scalar(0.5)));

  // Output terms (1)
  Eigen::Matrix<Scalar, 1, 1> _res;

  _res(0, 0) =
      _tmp1 - 2 * Scalar(M_PI) *
                  std::floor((Scalar(1) / Scalar(2)) * (_tmp1 + Scalar(M_PI)) / Scalar(M_PI));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
