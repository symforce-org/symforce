// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual on the relative pose between two timesteps of the robot.
 *
 * Args:
 *     world_T_a: First pose in the world frame
 *     world_T_b: Second pose in the world frame
 *     a_T_b: Relative pose measurement between the poses
 *     diagonal_sigmas: Diagonal standard deviation of the tangent-space error
 *     epsilon: Small number for singularity handling
 *     jacobian: (6x12) jacobian of res wrt args world_T_a (6), world_T_b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args world_T_a (6), world_T_b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args world_T_a (6), world_T_b (6)
 */
template <typename Scalar>
void OdometryFactor(const sym::Pose3<Scalar>& world_T_a, const sym::Pose3<Scalar>& world_T_b,
                    const sym::Pose3<Scalar>& a_T_b,
                    const Eigen::Matrix<Scalar, 6, 1>& diagonal_sigmas, const Scalar epsilon,
                    Eigen::Matrix<Scalar, 6, 1>* const res = nullptr,
                    Eigen::Matrix<Scalar, 6, 12>* const jacobian = nullptr,
                    Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                    Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 936

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _world_T_a = world_T_a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _world_T_b = world_T_b.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (263)
  const Scalar _tmp0 = _world_T_a[3] * _world_T_b[2];
  const Scalar _tmp1 = _world_T_a[0] * _world_T_b[1];
  const Scalar _tmp2 = _world_T_a[1] * _world_T_b[0];
  const Scalar _tmp3 = _world_T_a[2] * _world_T_b[3];
  const Scalar _tmp4 = _tmp0 - _tmp1 + _tmp2 - _tmp3;
  const Scalar _tmp5 = _world_T_a[3] * _world_T_b[0];
  const Scalar _tmp6 = _world_T_a[0] * _world_T_b[3];
  const Scalar _tmp7 = _world_T_a[1] * _world_T_b[2];
  const Scalar _tmp8 = _world_T_a[2] * _world_T_b[1];
  const Scalar _tmp9 = _tmp5 - _tmp6 - _tmp7 + _tmp8;
  const Scalar _tmp10 = _world_T_a[3] * _world_T_b[1];
  const Scalar _tmp11 = _world_T_a[0] * _world_T_b[2];
  const Scalar _tmp12 = _world_T_a[1] * _world_T_b[3];
  const Scalar _tmp13 = _world_T_a[2] * _world_T_b[0];
  const Scalar _tmp14 = _tmp10 + _tmp11 - _tmp12 - _tmp13;
  const Scalar _tmp15 = _world_T_a[3] * _world_T_b[3];
  const Scalar _tmp16 = _world_T_a[0] * _world_T_b[0];
  const Scalar _tmp17 = _world_T_a[1] * _world_T_b[1];
  const Scalar _tmp18 = _world_T_a[2] * _world_T_b[2];
  const Scalar _tmp19 = _tmp15 + _tmp16 + _tmp17 + _tmp18;
  const Scalar _tmp20 =
      _a_T_b[0] * _tmp19 + _a_T_b[1] * _tmp4 - _a_T_b[2] * _tmp14 - _a_T_b[3] * _tmp9;
  const Scalar _tmp21 = _a_T_b[2] * _tmp4;
  const Scalar _tmp22 = _a_T_b[0] * _tmp9;
  const Scalar _tmp23 = _a_T_b[1] * _tmp14;
  const Scalar _tmp24 = -_tmp21 - _tmp22 - _tmp23;
  const Scalar _tmp25 = _a_T_b[3] * _tmp19;
  const Scalar _tmp26 = 1 - epsilon;
  const Scalar _tmp27 = std::min<Scalar>(_tmp26, std::fabs(_tmp24 - _tmp25));
  const Scalar _tmp28 = std::acos(_tmp27) / std::sqrt(Scalar(1 - std::pow(_tmp27, Scalar(2))));
  const Scalar _tmp29 = Scalar(1.0) / (diagonal_sigmas(0, 0));
  const Scalar _tmp30 =
      2 * std::min<Scalar>(0, (((-_tmp24 + _tmp25) > 0) - ((-_tmp24 + _tmp25) < 0))) + 1;
  const Scalar _tmp31 = 2 * _tmp30;
  const Scalar _tmp32 = _tmp29 * _tmp31;
  const Scalar _tmp33 = _tmp20 * _tmp28 * _tmp32;
  const Scalar _tmp34 =
      -_a_T_b[0] * _tmp4 + _a_T_b[1] * _tmp19 + _a_T_b[2] * _tmp9 - _a_T_b[3] * _tmp14;
  const Scalar _tmp35 = Scalar(1.0) / (diagonal_sigmas(1, 0));
  const Scalar _tmp36 = _tmp31 * _tmp35;
  const Scalar _tmp37 = _tmp28 * _tmp34 * _tmp36;
  const Scalar _tmp38 =
      _a_T_b[0] * _tmp14 - _a_T_b[1] * _tmp9 + _a_T_b[2] * _tmp19 - _a_T_b[3] * _tmp4;
  const Scalar _tmp39 = Scalar(1.0) / (diagonal_sigmas(2, 0));
  const Scalar _tmp40 = _tmp31 * _tmp39;
  const Scalar _tmp41 = _tmp28 * _tmp38 * _tmp40;
  const Scalar _tmp42 = Scalar(1.0) / (diagonal_sigmas(3, 0));
  const Scalar _tmp43 = 2 * _world_T_a[1];
  const Scalar _tmp44 = _tmp43 * _world_T_a[0];
  const Scalar _tmp45 = 2 * _world_T_a[3];
  const Scalar _tmp46 = _tmp45 * _world_T_a[2];
  const Scalar _tmp47 = _tmp44 + _tmp46;
  const Scalar _tmp48 = _tmp47 * _world_T_b[5];
  const Scalar _tmp49 = _tmp43 * _world_T_a[3];
  const Scalar _tmp50 = -_tmp49;
  const Scalar _tmp51 = 2 * _world_T_a[0] * _world_T_a[2];
  const Scalar _tmp52 = _tmp50 + _tmp51;
  const Scalar _tmp53 = _tmp52 * _world_T_b[6];
  const Scalar _tmp54 = std::pow(_world_T_a[2], Scalar(2));
  const Scalar _tmp55 = 2 * _tmp54;
  const Scalar _tmp56 = -_tmp55;
  const Scalar _tmp57 = std::pow(_world_T_a[1], Scalar(2));
  const Scalar _tmp58 = 2 * _tmp57;
  const Scalar _tmp59 = 1 - _tmp58;
  const Scalar _tmp60 = _tmp56 + _tmp59;
  const Scalar _tmp61 = _tmp47 * _world_T_a[5] + _tmp52 * _world_T_a[6];
  const Scalar _tmp62 =
      _a_T_b[4] - _tmp48 - _tmp53 + _tmp60 * _world_T_a[4] - _tmp60 * _world_T_b[4] + _tmp61;
  const Scalar _tmp63 = Scalar(1.0) / (diagonal_sigmas(4, 0));
  const Scalar _tmp64 = std::pow(_world_T_a[0], Scalar(2));
  const Scalar _tmp65 = 2 * _tmp64;
  const Scalar _tmp66 = -_tmp65;
  const Scalar _tmp67 = _tmp56 + _tmp66 + 1;
  const Scalar _tmp68 = -_tmp46;
  const Scalar _tmp69 = _tmp44 + _tmp68;
  const Scalar _tmp70 = _tmp45 * _world_T_a[0];
  const Scalar _tmp71 = _tmp43 * _world_T_a[2];
  const Scalar _tmp72 = _tmp70 + _tmp71;
  const Scalar _tmp73 = _tmp69 * _world_T_a[4] + _tmp72 * _world_T_a[6];
  const Scalar _tmp74 = _tmp69 * _world_T_b[4];
  const Scalar _tmp75 = _tmp72 * _world_T_b[6];
  const Scalar _tmp76 =
      _a_T_b[5] + _tmp67 * _world_T_a[5] - _tmp67 * _world_T_b[5] + _tmp73 - _tmp74 - _tmp75;
  const Scalar _tmp77 = Scalar(1.0) / (diagonal_sigmas(5, 0));
  const Scalar _tmp78 = _tmp59 + _tmp66;
  const Scalar _tmp79 = _tmp49 + _tmp51;
  const Scalar _tmp80 = -_tmp70;
  const Scalar _tmp81 = _tmp71 + _tmp80;
  const Scalar _tmp82 = _tmp79 * _world_T_a[4] + _tmp81 * _world_T_a[5];
  const Scalar _tmp83 = _tmp79 * _world_T_b[4];
  const Scalar _tmp84 = _tmp81 * _world_T_b[5];
  const Scalar _tmp85 =
      _a_T_b[6] + _tmp78 * _world_T_a[6] - _tmp78 * _world_T_b[6] + _tmp82 - _tmp83 - _tmp84;
  const Scalar _tmp86 = (Scalar(1) / Scalar(2)) * _tmp10;
  const Scalar _tmp87 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp88 = (Scalar(1) / Scalar(2)) * _tmp12;
  const Scalar _tmp89 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp90 = -_tmp86 - _tmp87 + _tmp88 + _tmp89;
  const Scalar _tmp91 = _a_T_b[2] * _tmp90;
  const Scalar _tmp92 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp93 = (Scalar(1) / Scalar(2)) * _tmp16;
  const Scalar _tmp94 = (Scalar(1) / Scalar(2)) * _tmp17;
  const Scalar _tmp95 = (Scalar(1) / Scalar(2)) * _tmp18;
  const Scalar _tmp96 = -_tmp92 - _tmp93 - _tmp94 - _tmp95;
  const Scalar _tmp97 = _a_T_b[0] * _tmp96;
  const Scalar _tmp98 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp99 = (Scalar(1) / Scalar(2)) * _tmp1;
  const Scalar _tmp100 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp101 = (Scalar(1) / Scalar(2)) * _tmp3;
  const Scalar _tmp102 = _tmp100 - _tmp101 + _tmp98 - _tmp99;
  const Scalar _tmp103 = _a_T_b[1] * _tmp102;
  const Scalar _tmp104 = (Scalar(1) / Scalar(2)) * _tmp5;
  const Scalar _tmp105 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp106 = (Scalar(1) / Scalar(2)) * _tmp7;
  const Scalar _tmp107 = (Scalar(1) / Scalar(2)) * _tmp8;
  const Scalar _tmp108 = _tmp104 - _tmp105 - _tmp106 + _tmp107;
  const Scalar _tmp109 = _a_T_b[3] * _tmp108;
  const Scalar _tmp110 = _tmp103 + _tmp109 + _tmp91 + _tmp97;
  const Scalar _tmp111 = _tmp20 * _tmp29;
  const Scalar _tmp112 = _tmp21 + _tmp22 + _tmp23 + _tmp25;
  const Scalar _tmp113 = std::fabs(_tmp112);
  const Scalar _tmp114 = std::min<Scalar>(_tmp113, _tmp26);
  const Scalar _tmp115 = std::acos(_tmp114);
  const Scalar _tmp116 = 1 - std::pow(_tmp114, Scalar(2));
  const Scalar _tmp117 = _tmp30 * ((((-_tmp113 + _tmp26) > 0) - ((-_tmp113 + _tmp26) < 0)) + 1) *
                         (((_tmp112) > 0) - ((_tmp112) < 0));
  const Scalar _tmp118 = _tmp114 * _tmp115 * _tmp117 / (_tmp116 * std::sqrt(_tmp116));
  const Scalar _tmp119 = _tmp111 * _tmp118;
  const Scalar _tmp120 = _tmp117 / _tmp116;
  const Scalar _tmp121 = _tmp110 * _tmp120;
  const Scalar _tmp122 = _a_T_b[1] * _tmp90;
  const Scalar _tmp123 = -_a_T_b[3] * _tmp96;
  const Scalar _tmp124 = _a_T_b[2] * _tmp102;
  const Scalar _tmp125 = -_tmp124;
  const Scalar _tmp126 = _a_T_b[0] * _tmp108;
  const Scalar _tmp127 = _tmp115 / std::sqrt(_tmp116);
  const Scalar _tmp128 = _tmp127 * _tmp32;
  const Scalar _tmp129 =
      _tmp110 * _tmp119 - _tmp111 * _tmp121 + _tmp128 * (_tmp122 + _tmp123 + _tmp125 + _tmp126);
  const Scalar _tmp130 = _a_T_b[1] * _tmp108;
  const Scalar _tmp131 = _a_T_b[2] * _tmp96;
  const Scalar _tmp132 = _a_T_b[0] * _tmp90;
  const Scalar _tmp133 = _a_T_b[3] * _tmp102;
  const Scalar _tmp134 = -_tmp132 - _tmp133;
  const Scalar _tmp135 = _tmp127 * _tmp36;
  const Scalar _tmp136 = _tmp34 * _tmp35;
  const Scalar _tmp137 = _tmp118 * _tmp136;
  const Scalar _tmp138 =
      _tmp110 * _tmp137 - _tmp121 * _tmp136 + _tmp135 * (_tmp130 + _tmp131 + _tmp134);
  const Scalar _tmp139 = _a_T_b[2] * _tmp108;
  const Scalar _tmp140 = _a_T_b[1] * _tmp96;
  const Scalar _tmp141 = _a_T_b[3] * _tmp90;
  const Scalar _tmp142 = _a_T_b[0] * _tmp102;
  const Scalar _tmp143 = -_tmp141 + _tmp142;
  const Scalar _tmp144 = _tmp127 * _tmp40;
  const Scalar _tmp145 = _tmp38 * _tmp39;
  const Scalar _tmp146 = _tmp118 * _tmp145;
  const Scalar _tmp147 =
      _tmp110 * _tmp146 - _tmp121 * _tmp145 + _tmp144 * (_tmp139 - _tmp140 + _tmp143);
  const Scalar _tmp148 = std::pow(_world_T_a[3], Scalar(2));
  const Scalar _tmp149 = -_tmp64;
  const Scalar _tmp150 = -_tmp57;
  const Scalar _tmp151 = _tmp148 + _tmp149 + _tmp150 + _tmp54;
  const Scalar _tmp152 =
      _tmp151 * _world_T_a[6] - _tmp151 * _world_T_b[6] + _tmp82 - _tmp83 - _tmp84;
  const Scalar _tmp153 = -_tmp44;
  const Scalar _tmp154 = _tmp153 + _tmp46;
  const Scalar _tmp155 = -_tmp71;
  const Scalar _tmp156 = _tmp155 + _tmp80;
  const Scalar _tmp157 = _tmp150 + _tmp64;
  const Scalar _tmp158 = -_tmp148;
  const Scalar _tmp159 = _tmp158 + _tmp54;
  const Scalar _tmp160 = _tmp157 + _tmp159;
  const Scalar _tmp161 = _tmp154 * _world_T_a[4] - _tmp154 * _world_T_b[4] +
                         _tmp156 * _world_T_a[6] - _tmp156 * _world_T_b[6] +
                         _tmp160 * _world_T_a[5] - _tmp160 * _world_T_b[5];
  const Scalar _tmp162 = _tmp86 + _tmp87 - _tmp88 - _tmp89;
  const Scalar _tmp163 = _a_T_b[3] * _tmp162;
  const Scalar _tmp164 = -_tmp100 + _tmp101 - _tmp98 + _tmp99;
  const Scalar _tmp165 = _a_T_b[0] * _tmp164;
  const Scalar _tmp166 = _tmp139 + _tmp165;
  const Scalar _tmp167 = _tmp140 + _tmp163 + _tmp166;
  const Scalar _tmp168 = _a_T_b[0] * _tmp162;
  const Scalar _tmp169 = _a_T_b[3] * _tmp164;
  const Scalar _tmp170 = _tmp130 - _tmp169;
  const Scalar _tmp171 = _tmp120 * _tmp167;
  const Scalar _tmp172 =
      -_tmp111 * _tmp171 + _tmp119 * _tmp167 + _tmp128 * (-_tmp131 + _tmp168 + _tmp170);
  const Scalar _tmp173 = _a_T_b[1] * _tmp162;
  const Scalar _tmp174 = _a_T_b[2] * _tmp164;
  const Scalar _tmp175 = -_tmp126 + _tmp174;
  const Scalar _tmp176 =
      _tmp135 * (_tmp123 + _tmp173 + _tmp175) - _tmp136 * _tmp171 + _tmp137 * _tmp167;
  const Scalar _tmp177 = _a_T_b[2] * _tmp162;
  const Scalar _tmp178 = _a_T_b[1] * _tmp164;
  const Scalar _tmp179 = -_tmp109 - _tmp178;
  const Scalar _tmp180 =
      _tmp144 * (_tmp177 + _tmp179 + _tmp97) - _tmp145 * _tmp171 + _tmp146 * _tmp167;
  const Scalar _tmp181 = -_tmp51;
  const Scalar _tmp182 = _tmp181 + _tmp50;
  const Scalar _tmp183 = _tmp155 + _tmp70;
  const Scalar _tmp184 = -_tmp54;
  const Scalar _tmp185 = _tmp158 + _tmp184 + _tmp57 + _tmp64;
  const Scalar _tmp186 = _tmp182 * _world_T_a[4] - _tmp182 * _world_T_b[4] +
                         _tmp183 * _world_T_a[5] - _tmp183 * _world_T_b[5] +
                         _tmp185 * _world_T_a[6] - _tmp185 * _world_T_b[6];
  const Scalar _tmp187 = _tmp148 + _tmp184;
  const Scalar _tmp188 = _tmp157 + _tmp187;
  const Scalar _tmp189 =
      _tmp188 * _world_T_a[4] - _tmp188 * _world_T_b[4] - _tmp48 - _tmp53 + _tmp61;
  const Scalar _tmp190 = -_tmp104 + _tmp105 + _tmp106 - _tmp107;
  const Scalar _tmp191 = _a_T_b[1] * _tmp190;
  const Scalar _tmp192 = _tmp131 + _tmp133 + _tmp168 + _tmp191;
  const Scalar _tmp193 = _tmp111 * _tmp120;
  const Scalar _tmp194 = _a_T_b[2] * _tmp190;
  const Scalar _tmp195 = -_tmp163 - _tmp194;
  const Scalar _tmp196 =
      _tmp119 * _tmp192 + _tmp128 * (_tmp140 + _tmp142 + _tmp195) - _tmp192 * _tmp193;
  const Scalar _tmp197 = _a_T_b[3] * _tmp190;
  const Scalar _tmp198 = _tmp177 - _tmp197;
  const Scalar _tmp199 = _tmp120 * _tmp136;
  const Scalar _tmp200 =
      _tmp135 * (_tmp103 + _tmp198 - _tmp97) + _tmp137 * _tmp192 - _tmp192 * _tmp199;
  const Scalar _tmp201 = _tmp120 * _tmp145;
  const Scalar _tmp202 = _a_T_b[0] * _tmp190;
  const Scalar _tmp203 = -_tmp173 + _tmp202;
  const Scalar _tmp204 =
      _tmp144 * (_tmp123 + _tmp124 + _tmp203) + _tmp146 * _tmp192 - _tmp192 * _tmp201;
  const Scalar _tmp205 = _tmp149 + _tmp57;
  const Scalar _tmp206 = _tmp187 + _tmp205;
  const Scalar _tmp207 =
      _tmp206 * _world_T_a[5] - _tmp206 * _world_T_b[5] + _tmp73 - _tmp74 - _tmp75;
  const Scalar _tmp208 = _tmp153 + _tmp68;
  const Scalar _tmp209 = _tmp181 + _tmp49;
  const Scalar _tmp210 = _tmp159 + _tmp205;
  const Scalar _tmp211 = _tmp208 * _world_T_a[5] - _tmp208 * _world_T_b[5] +
                         _tmp209 * _world_T_a[6] - _tmp209 * _world_T_b[6] +
                         _tmp210 * _world_T_a[4] - _tmp210 * _world_T_b[4];
  const Scalar _tmp212 = _tmp92 + _tmp93 + _tmp94 + _tmp95;
  const Scalar _tmp213 = -_a_T_b[3] * _tmp212;
  const Scalar _tmp214 = _tmp122 + _tmp213;
  const Scalar _tmp215 = _a_T_b[0] * _tmp212;
  const Scalar _tmp216 = _tmp215 + _tmp91;
  const Scalar _tmp217 = _tmp103 + _tmp197 + _tmp216;
  const Scalar _tmp218 = _tmp120 * _tmp217;
  const Scalar _tmp219 =
      -_tmp111 * _tmp218 + _tmp119 * _tmp217 + _tmp128 * (_tmp125 + _tmp202 + _tmp214);
  const Scalar _tmp220 = _tmp118 * _tmp217;
  const Scalar _tmp221 = _a_T_b[2] * _tmp212;
  const Scalar _tmp222 = _tmp191 + _tmp221;
  const Scalar _tmp223 = _tmp135 * (_tmp134 + _tmp222) - _tmp136 * _tmp218 + _tmp136 * _tmp220;
  const Scalar _tmp224 = _a_T_b[1] * _tmp212;
  const Scalar _tmp225 =
      _tmp144 * (_tmp143 + _tmp194 - _tmp224) - _tmp145 * _tmp218 + _tmp145 * _tmp220;
  const Scalar _tmp226 = _tmp141 + _tmp166 + _tmp224;
  const Scalar _tmp227 =
      _tmp119 * _tmp226 + _tmp128 * (_tmp132 + _tmp170 - _tmp221) - _tmp193 * _tmp226;
  const Scalar _tmp228 = _tmp135 * (_tmp175 + _tmp214) + _tmp137 * _tmp226 - _tmp199 * _tmp226;
  const Scalar _tmp229 = _tmp144 * (_tmp179 + _tmp216) + _tmp146 * _tmp226 - _tmp201 * _tmp226;
  const Scalar _tmp230 = _tmp168 + _tmp169 + _tmp222;
  const Scalar _tmp231 = _tmp120 * _tmp230;
  const Scalar _tmp232 =
      -_tmp111 * _tmp231 + _tmp119 * _tmp230 + _tmp128 * (_tmp165 + _tmp195 + _tmp224);
  const Scalar _tmp233 =
      _tmp135 * (_tmp178 + _tmp198 - _tmp215) - _tmp136 * _tmp231 + _tmp137 * _tmp230;
  const Scalar _tmp234 =
      _tmp144 * (_tmp174 + _tmp203 + _tmp213) - _tmp145 * _tmp231 + _tmp146 * _tmp230;
  const Scalar _tmp235 = _tmp58 - 1;
  const Scalar _tmp236 = _tmp235 + _tmp55;
  const Scalar _tmp237 = _tmp55 + _tmp65 - 1;
  const Scalar _tmp238 = _tmp235 + _tmp65;
  const Scalar _tmp239 = std::pow(diagonal_sigmas(5, 0), Scalar(-2));
  const Scalar _tmp240 = std::pow(diagonal_sigmas(4, 0), Scalar(-2));
  const Scalar _tmp241 = _tmp189 * _tmp239;
  const Scalar _tmp242 = _tmp211 * _tmp240;
  const Scalar _tmp243 = _tmp240 * _tmp69;
  const Scalar _tmp244 = _tmp239 * _tmp79;
  const Scalar _tmp245 = _tmp152 * _tmp240;
  const Scalar _tmp246 = _tmp239 * _tmp81;
  const Scalar _tmp247 = _tmp161 * _tmp239;
  const Scalar _tmp248 = _tmp154 * _tmp240;
  const Scalar _tmp249 = _tmp182 * _tmp239;
  const Scalar _tmp250 = _tmp183 * _tmp239;
  const Scalar _tmp251 = _tmp156 * _tmp240;
  const Scalar _tmp252 = std::pow(diagonal_sigmas(3, 0), Scalar(-2));
  const Scalar _tmp253 = _tmp207 * _tmp252;
  const Scalar _tmp254 = _tmp186 * _tmp252;
  const Scalar _tmp255 = _tmp252 * _tmp47;
  const Scalar _tmp256 = _tmp252 * _tmp52;
  const Scalar _tmp257 = _tmp208 * _tmp252;
  const Scalar _tmp258 = _tmp236 * _tmp252;
  const Scalar _tmp259 = _tmp237 * _tmp240;
  const Scalar _tmp260 = _tmp239 * _tmp85;
  const Scalar _tmp261 = _tmp252 * _tmp62;
  const Scalar _tmp262 = _tmp240 * _tmp76;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _res = (*res);

    _res(0, 0) = _tmp33;
    _res(1, 0) = _tmp37;
    _res(2, 0) = _tmp41;
    _res(3, 0) = _tmp42 * _tmp62;
    _res(4, 0) = _tmp63 * _tmp76;
    _res(5, 0) = _tmp77 * _tmp85;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 6, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp129;
    _jacobian(1, 0) = _tmp138;
    _jacobian(2, 0) = _tmp147;
    _jacobian(3, 0) = 0;
    _jacobian(4, 0) = _tmp152 * _tmp63;
    _jacobian(5, 0) = _tmp161 * _tmp77;
    _jacobian(0, 1) = _tmp172;
    _jacobian(1, 1) = _tmp176;
    _jacobian(2, 1) = _tmp180;
    _jacobian(3, 1) = _tmp186 * _tmp42;
    _jacobian(4, 1) = 0;
    _jacobian(5, 1) = _tmp189 * _tmp77;
    _jacobian(0, 2) = _tmp196;
    _jacobian(1, 2) = _tmp200;
    _jacobian(2, 2) = _tmp204;
    _jacobian(3, 2) = _tmp207 * _tmp42;
    _jacobian(4, 2) = _tmp211 * _tmp63;
    _jacobian(5, 2) = 0;
    _jacobian(0, 3) = 0;
    _jacobian(1, 3) = 0;
    _jacobian(2, 3) = 0;
    _jacobian(3, 3) = _tmp42 * _tmp60;
    _jacobian(4, 3) = _tmp63 * _tmp69;
    _jacobian(5, 3) = _tmp77 * _tmp79;
    _jacobian(0, 4) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(3, 4) = _tmp42 * _tmp47;
    _jacobian(4, 4) = _tmp63 * _tmp67;
    _jacobian(5, 4) = _tmp77 * _tmp81;
    _jacobian(0, 5) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(3, 5) = _tmp42 * _tmp52;
    _jacobian(4, 5) = _tmp63 * _tmp72;
    _jacobian(5, 5) = _tmp77 * _tmp78;
    _jacobian(0, 6) = _tmp219;
    _jacobian(1, 6) = _tmp223;
    _jacobian(2, 6) = _tmp225;
    _jacobian(3, 6) = 0;
    _jacobian(4, 6) = 0;
    _jacobian(5, 6) = 0;
    _jacobian(0, 7) = _tmp227;
    _jacobian(1, 7) = _tmp228;
    _jacobian(2, 7) = _tmp229;
    _jacobian(3, 7) = 0;
    _jacobian(4, 7) = 0;
    _jacobian(5, 7) = 0;
    _jacobian(0, 8) = _tmp232;
    _jacobian(1, 8) = _tmp233;
    _jacobian(2, 8) = _tmp234;
    _jacobian(3, 8) = 0;
    _jacobian(4, 8) = 0;
    _jacobian(5, 8) = 0;
    _jacobian(0, 9) = 0;
    _jacobian(1, 9) = 0;
    _jacobian(2, 9) = 0;
    _jacobian(3, 9) = _tmp236 * _tmp42;
    _jacobian(4, 9) = _tmp154 * _tmp63;
    _jacobian(5, 9) = _tmp182 * _tmp77;
    _jacobian(0, 10) = 0;
    _jacobian(1, 10) = 0;
    _jacobian(2, 10) = 0;
    _jacobian(3, 10) = _tmp208 * _tmp42;
    _jacobian(4, 10) = _tmp237 * _tmp63;
    _jacobian(5, 10) = _tmp183 * _tmp77;
    _jacobian(0, 11) = 0;
    _jacobian(1, 11) = 0;
    _jacobian(2, 11) = 0;
    _jacobian(3, 11) = _tmp209 * _tmp42;
    _jacobian(4, 11) = _tmp156 * _tmp63;
    _jacobian(5, 11) = _tmp238 * _tmp77;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) = std::pow(_tmp129, Scalar(2)) + std::pow(_tmp138, Scalar(2)) +
                     std::pow(_tmp147, Scalar(2)) + std::pow(_tmp152, Scalar(2)) * _tmp240 +
                     std::pow(_tmp161, Scalar(2)) * _tmp239;
    _hessian(1, 0) = _tmp129 * _tmp172 + _tmp138 * _tmp176 + _tmp147 * _tmp180 + _tmp161 * _tmp241;
    _hessian(2, 0) = _tmp129 * _tmp196 + _tmp138 * _tmp200 + _tmp147 * _tmp204 + _tmp152 * _tmp242;
    _hessian(3, 0) = _tmp152 * _tmp243 + _tmp161 * _tmp244;
    _hessian(4, 0) = _tmp161 * _tmp246 + _tmp245 * _tmp67;
    _hessian(5, 0) = _tmp245 * _tmp72 + _tmp247 * _tmp78;
    _hessian(6, 0) = _tmp129 * _tmp219 + _tmp138 * _tmp223 + _tmp147 * _tmp225;
    _hessian(7, 0) = _tmp129 * _tmp227 + _tmp138 * _tmp228 + _tmp147 * _tmp229;
    _hessian(8, 0) = _tmp129 * _tmp232 + _tmp138 * _tmp233 + _tmp147 * _tmp234;
    _hessian(9, 0) = _tmp152 * _tmp248 + _tmp161 * _tmp249;
    _hessian(10, 0) = _tmp161 * _tmp250 + _tmp237 * _tmp245;
    _hessian(11, 0) = _tmp152 * _tmp251 + _tmp238 * _tmp247;
    _hessian(1, 1) = std::pow(_tmp172, Scalar(2)) + std::pow(_tmp176, Scalar(2)) +
                     std::pow(_tmp180, Scalar(2)) + std::pow(_tmp186, Scalar(2)) * _tmp252 +
                     std::pow(_tmp189, Scalar(2)) * _tmp239;
    _hessian(2, 1) = _tmp172 * _tmp196 + _tmp176 * _tmp200 + _tmp180 * _tmp204 + _tmp186 * _tmp253;
    _hessian(3, 1) = _tmp189 * _tmp244 + _tmp254 * _tmp60;
    _hessian(4, 1) = _tmp186 * _tmp255 + _tmp189 * _tmp246;
    _hessian(5, 1) = _tmp186 * _tmp256 + _tmp241 * _tmp78;
    _hessian(6, 1) = _tmp172 * _tmp219 + _tmp176 * _tmp223 + _tmp180 * _tmp225;
    _hessian(7, 1) = _tmp172 * _tmp227 + _tmp176 * _tmp228 + _tmp180 * _tmp229;
    _hessian(8, 1) = _tmp172 * _tmp232 + _tmp176 * _tmp233 + _tmp180 * _tmp234;
    _hessian(9, 1) = _tmp189 * _tmp249 + _tmp236 * _tmp254;
    _hessian(10, 1) = _tmp186 * _tmp257 + _tmp189 * _tmp250;
    _hessian(11, 1) = _tmp209 * _tmp254 + _tmp238 * _tmp241;
    _hessian(2, 2) = std::pow(_tmp196, Scalar(2)) + std::pow(_tmp200, Scalar(2)) +
                     std::pow(_tmp204, Scalar(2)) + std::pow(_tmp207, Scalar(2)) * _tmp252 +
                     std::pow(_tmp211, Scalar(2)) * _tmp240;
    _hessian(3, 2) = _tmp242 * _tmp69 + _tmp253 * _tmp60;
    _hessian(4, 2) = _tmp242 * _tmp67 + _tmp253 * _tmp47;
    _hessian(5, 2) = _tmp242 * _tmp72 + _tmp253 * _tmp52;
    _hessian(6, 2) = _tmp196 * _tmp219 + _tmp200 * _tmp223 + _tmp204 * _tmp225;
    _hessian(7, 2) = _tmp196 * _tmp227 + _tmp200 * _tmp228 + _tmp204 * _tmp229;
    _hessian(8, 2) = _tmp196 * _tmp232 + _tmp200 * _tmp233 + _tmp204 * _tmp234;
    _hessian(9, 2) = _tmp154 * _tmp242 + _tmp236 * _tmp253;
    _hessian(10, 2) = _tmp208 * _tmp253 + _tmp237 * _tmp242;
    _hessian(11, 2) = _tmp156 * _tmp242 + _tmp209 * _tmp253;
    _hessian(3, 3) = _tmp239 * std::pow(_tmp79, Scalar(2)) + _tmp240 * std::pow(_tmp69, Scalar(2)) +
                     _tmp252 * std::pow(_tmp60, Scalar(2));
    _hessian(4, 3) = _tmp243 * _tmp67 + _tmp244 * _tmp81 + _tmp255 * _tmp60;
    _hessian(5, 3) = _tmp243 * _tmp72 + _tmp244 * _tmp78 + _tmp256 * _tmp60;
    _hessian(9, 3) = _tmp248 * _tmp69 + _tmp249 * _tmp79 + _tmp258 * _tmp60;
    _hessian(10, 3) = _tmp183 * _tmp244 + _tmp237 * _tmp243 + _tmp257 * _tmp60;
    _hessian(11, 3) = _tmp156 * _tmp243 + _tmp209 * _tmp252 * _tmp60 + _tmp238 * _tmp244;
    _hessian(4, 4) = _tmp239 * std::pow(_tmp81, Scalar(2)) + _tmp240 * std::pow(_tmp67, Scalar(2)) +
                     _tmp252 * std::pow(_tmp47, Scalar(2));
    _hessian(5, 4) = _tmp240 * _tmp67 * _tmp72 + _tmp246 * _tmp78 + _tmp256 * _tmp47;
    _hessian(9, 4) = _tmp236 * _tmp255 + _tmp248 * _tmp67 + _tmp249 * _tmp81;
    _hessian(10, 4) = _tmp183 * _tmp246 + _tmp257 * _tmp47 + _tmp259 * _tmp67;
    _hessian(11, 4) = _tmp209 * _tmp255 + _tmp238 * _tmp246 + _tmp251 * _tmp67;
    _hessian(5, 5) = _tmp239 * std::pow(_tmp78, Scalar(2)) + _tmp240 * std::pow(_tmp72, Scalar(2)) +
                     _tmp252 * std::pow(_tmp52, Scalar(2));
    _hessian(9, 5) = _tmp236 * _tmp256 + _tmp248 * _tmp72 + _tmp249 * _tmp78;
    _hessian(10, 5) = _tmp250 * _tmp78 + _tmp257 * _tmp52 + _tmp259 * _tmp72;
    _hessian(11, 5) = _tmp209 * _tmp256 + _tmp238 * _tmp239 * _tmp78 + _tmp251 * _tmp72;
    _hessian(6, 6) =
        std::pow(_tmp219, Scalar(2)) + std::pow(_tmp223, Scalar(2)) + std::pow(_tmp225, Scalar(2));
    _hessian(7, 6) = _tmp219 * _tmp227 + _tmp223 * _tmp228 + _tmp225 * _tmp229;
    _hessian(8, 6) = _tmp219 * _tmp232 + _tmp223 * _tmp233 + _tmp225 * _tmp234;
    _hessian(7, 7) =
        std::pow(_tmp227, Scalar(2)) + std::pow(_tmp228, Scalar(2)) + std::pow(_tmp229, Scalar(2));
    _hessian(8, 7) = _tmp227 * _tmp232 + _tmp228 * _tmp233 + _tmp229 * _tmp234;
    _hessian(8, 8) =
        std::pow(_tmp232, Scalar(2)) + std::pow(_tmp233, Scalar(2)) + std::pow(_tmp234, Scalar(2));
    _hessian(9, 9) = std::pow(_tmp154, Scalar(2)) * _tmp240 +
                     std::pow(_tmp182, Scalar(2)) * _tmp239 +
                     std::pow(_tmp236, Scalar(2)) * _tmp252;
    _hessian(10, 9) = _tmp183 * _tmp249 + _tmp236 * _tmp257 + _tmp237 * _tmp248;
    _hessian(11, 9) = _tmp156 * _tmp248 + _tmp209 * _tmp258 + _tmp238 * _tmp249;
    _hessian(10, 10) = std::pow(_tmp183, Scalar(2)) * _tmp239 +
                       std::pow(_tmp208, Scalar(2)) * _tmp252 +
                       std::pow(_tmp237, Scalar(2)) * _tmp240;
    _hessian(11, 10) = _tmp209 * _tmp257 + _tmp237 * _tmp251 + _tmp238 * _tmp250;
    _hessian(11, 11) = std::pow(_tmp156, Scalar(2)) * _tmp240 +
                       std::pow(_tmp209, Scalar(2)) * _tmp252 +
                       std::pow(_tmp238, Scalar(2)) * _tmp239;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp129 * _tmp33 + _tmp138 * _tmp37 + _tmp147 * _tmp41 + _tmp161 * _tmp260 +
                 _tmp245 * _tmp76;
    _rhs(1, 0) = _tmp172 * _tmp33 + _tmp176 * _tmp37 + _tmp180 * _tmp41 + _tmp189 * _tmp260 +
                 _tmp254 * _tmp62;
    _rhs(2, 0) = _tmp196 * _tmp33 + _tmp200 * _tmp37 + _tmp204 * _tmp41 + _tmp242 * _tmp76 +
                 _tmp253 * _tmp62;
    _rhs(3, 0) = _tmp243 * _tmp76 + _tmp260 * _tmp79 + _tmp261 * _tmp60;
    _rhs(4, 0) = _tmp255 * _tmp62 + _tmp260 * _tmp81 + _tmp262 * _tmp67;
    _rhs(5, 0) = _tmp256 * _tmp62 + _tmp260 * _tmp78 + _tmp262 * _tmp72;
    _rhs(6, 0) = _tmp219 * _tmp33 + _tmp223 * _tmp37 + _tmp225 * _tmp41;
    _rhs(7, 0) = _tmp227 * _tmp33 + _tmp228 * _tmp37 + _tmp229 * _tmp41;
    _rhs(8, 0) = _tmp232 * _tmp33 + _tmp233 * _tmp37 + _tmp234 * _tmp41;
    _rhs(9, 0) = _tmp182 * _tmp260 + _tmp236 * _tmp261 + _tmp248 * _tmp76;
    _rhs(10, 0) = _tmp183 * _tmp260 + _tmp237 * _tmp262 + _tmp257 * _tmp62;
    _rhs(11, 0) = _tmp209 * _tmp261 + _tmp238 * _tmp260 + _tmp251 * _tmp76;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
