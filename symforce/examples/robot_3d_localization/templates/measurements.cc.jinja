{# ----------------------------------------------------------------------------
 # SymForce - Copyright 2022, Skydio, Inc.
 # This source code is under the Apache 2.0 license found in the LICENSE file.
 # ---------------------------------------------------------------------------- #}

 /**
  * Problem parameters for the robot_3d_localization problem
  *
  * Autogenerated from the Python version, so that the problem is identical between all
  * implementations
  */

#include <vector>

#include <Eigen/Dense>

#include <sym/pose3.h>
#include <sym/util/typedefs.h>

namespace robot_3d_localization {

{#
 # We format things in here to 12 digits, because they can differ between systems by amounts around
 # numerical precision
 #}

// Measurement values for matching factors.
extern const std::vector<std::vector<Eigen::Vector3d>> body_t_landmark_measurements
  {
  {% for frame in body_t_landmark_measurements %}
    {
    {% for point in frame %}
      Eigen::Vector3d(
        {{ "{:.12f}".format(point[0]) }},
        {{ "{:.12f}".format(point[1]) }},
        {{ "{:.12f}".format(point[2]) }}
      )
      {% if not loop.last %},{% endif %}
    {% endfor %}
    }{% if not loop.last %},{% endif %}
  {% endfor %}
  };

// Measurement values for odometry factors.
extern const std::vector<sym::Pose3d> odometry_relative_pose_measurements
    {
    {% for pose in odometry_relative_pose_measurements %}
      sym::Pose3d((sym::Vector7d() <<
        {{ "{:.12f}".format(pose.to_storage()[0]) }},
        {{ "{:.12f}".format(pose.to_storage()[1]) }},
        {{ "{:.12f}".format(pose.to_storage()[2]) }},
        {{ "{:.12f}".format(pose.to_storage()[3]) }},
        {{ "{:.12f}".format(pose.to_storage()[4]) }},
        {{ "{:.12f}".format(pose.to_storage()[5]) }},
        {{ "{:.12f}".format(pose.to_storage()[6]) }}
      ).finished()){% if not loop.last %},{% endif %}
    {% endfor %}
    };

// Landmark positions.
extern const std::vector<Eigen::Vector3d> landmark_positions
    {
      {% for landmark in landmarks %}
        Eigen::Vector3d(
          {{ "{:.12f}".format(landmark[0]) }},
          {{ "{:.12f}".format(landmark[1]) }},
          {{ "{:.12f}".format(landmark[2]) }}
        )
        {% if not loop.last %},{% endif %}
      {% endfor %}
    };

}  // namespace robot_3d_localization
