// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: cross_and_distance
 *
 * Args:
 *     a: Matrix31
 *     b: Matrix31
 *     epsilon: Scalar
 *
 * Outputs:
 *     cross_D_a: (3x3) jacobian of cross (3) wrt arg a (3)
 *     distance_D_a: (1x3) jacobian of distance (1) wrt arg a (3)
 */
template <typename Scalar>
void CrossAndDistanceBothJacobian0(const Eigen::Matrix<Scalar, 3, 1>& a,
                                   const Eigen::Matrix<Scalar, 3, 1>& b, const Scalar epsilon,
                                   Eigen::Matrix<Scalar, 3, 3>* const cross_D_a = nullptr,
                                   Eigen::Matrix<Scalar, 1, 3>* const distance_D_a = nullptr) {
  // Total ops: 16

  // Input arrays

  // Intermediate terms (7)
  const Scalar _tmp0 = -b(2, 0);
  const Scalar _tmp1 = -b(0, 0);
  const Scalar _tmp2 = -b(1, 0);
  const Scalar _tmp3 = _tmp1 + a(0, 0);
  const Scalar _tmp4 = _tmp2 + a(1, 0);
  const Scalar _tmp5 = _tmp0 + a(2, 0);
  const Scalar _tmp6 = std::pow(Scalar(std::pow(_tmp3, Scalar(2)) + std::pow(_tmp4, Scalar(2)) +
                                       std::pow(_tmp5, Scalar(2)) + epsilon),
                                Scalar(Scalar(-1) / Scalar(2)));

  // Output terms (2)
  if (cross_D_a != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _cross_D_a = (*cross_D_a);

    _cross_D_a(0, 0) = 0;
    _cross_D_a(1, 0) = _tmp0;
    _cross_D_a(2, 0) = b(1, 0);
    _cross_D_a(0, 1) = b(2, 0);
    _cross_D_a(1, 1) = 0;
    _cross_D_a(2, 1) = _tmp1;
    _cross_D_a(0, 2) = _tmp2;
    _cross_D_a(1, 2) = b(0, 0);
    _cross_D_a(2, 2) = 0;
  }

  if (distance_D_a != nullptr) {
    Eigen::Matrix<Scalar, 1, 3>& _distance_D_a = (*distance_D_a);

    _distance_D_a(0, 0) = _tmp3 * _tmp6;
    _distance_D_a(0, 1) = _tmp4 * _tmp6;
    _distance_D_a(0, 2) = _tmp5 * _tmp6;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
