// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>
#include <Eigen/Sparse>

namespace codegen_sparse_matrix_test {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: sparse_func
 *
 * Args:
 *     x: Matrix31
 *
 * Outputs:
 *     M: Matrix33
 */
template <typename Scalar>
void SparseFunc(const Eigen::Matrix<Scalar, 3, 1>& x,
                Eigen::SparseMatrix<Scalar>* const M = nullptr) {
  // Total ops: 0

  // Input arrays

  // Intermediate terms (0)

  // Output terms (1)
  if (M != nullptr) {
    static constexpr int kRows_M = 3;
    static constexpr int kCols_M = 3;
    static constexpr int kNumNonZero_M = 3;
    static constexpr int kColPtrs_M[] = {0, 1, 2, 3};
    static constexpr int kRowIndices_M[] = {0, 1, 2};
    if (M->nonZeros() != 3 || M->outerSize() != 3 || M->innerSize() != 3 || !M->isCompressed()) {
      // Matrix does not have the expected layout, create a correctly initialized sparse matrix
      Scalar M_empty_value_ptr[3];
      *M = Eigen::Map<const Eigen::SparseMatrix<Scalar>>(
          kRows_M, kCols_M, kNumNonZero_M, kColPtrs_M, kRowIndices_M, M_empty_value_ptr);
    }
    Scalar* M_value_ptr = M->valuePtr();

    M_value_ptr[0] = x(0, 0);
    M_value_ptr[1] = x(1, 0);
    M_value_ptr[2] = x(2, 0);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace codegen_sparse_matrix_test
