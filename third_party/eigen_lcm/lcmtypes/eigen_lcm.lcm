// A set of LCM types to make it easy to serialize Eigen types and send them over LCM.
//
// NOTE: this file is autogenerated by eigen_lcm
// DO NOT modify by hand!

package eigen_lcm;

#protobuf { typename="Matrix2iPb", filename="Matrix2i" }
#cpp_no_display
struct Matrix2i {
  int32_t data[4] = 1;
};

#protobuf { typename="Matrix3iPb", filename="Matrix3i" }
#cpp_no_display
struct Matrix3i {
  int32_t data[9] = 1;
};

#protobuf { typename="Matrix4iPb", filename="Matrix4i" }
#cpp_no_display
struct Matrix4i {
  int32_t data[16] = 1;
};

#cpp_no_display
struct MatrixXi {
  int32_t rows = 4;
  int32_t data_sz;
  int32_t data[data_sz] = 1;
};

#protobuf { typename="Matrix2dPb", filename="Matrix2d" }
#cpp_no_display
struct Matrix2d {
  double data[4] = 3;
};

#protobuf { typename="Matrix3dPb", filename="Matrix3d" }
#cpp_no_display
struct Matrix3d {
  double data[9] = 3;
};

#protobuf { typename="Matrix4dPb", filename="Matrix4d" }
#cpp_no_display
struct Matrix4d {
  double data[16] = 3;
};

#cpp_no_display
struct MatrixXd {
  int32_t rows = 4;
  int32_t data_sz;
  double data[data_sz] = 3;
};

#protobuf { typename="Matrix2fPb", filename="Matrix2f" }
#cpp_no_display
struct Matrix2f {
  float data[4] = 2;
};

#protobuf { typename="Matrix3fPb", filename="Matrix3f" }
#cpp_no_display
struct Matrix3f {
  float data[9] = 2;
};

#protobuf { typename="Matrix4fPb", filename="Matrix4f" }
#cpp_no_display
struct Matrix4f {
  float data[16] = 2;
};

#cpp_no_display
struct MatrixXf {
  int32_t rows = 4;
  int32_t data_sz;
  float data[data_sz] = 2;
};

#protobuf { typename="Vector2iPb", filename="Vector2i" }
#cpp_no_display
struct Vector2i {
  int32_t data[2] = 1;
};

#protobuf { typename="Vector3iPb", filename="Vector3i" }
#cpp_no_display
struct Vector3i {
  int32_t data[3] = 1;
};

#protobuf { typename="Vector4iPb", filename="Vector4i" }
#cpp_no_display
struct Vector4i {
  int32_t data[4] = 1;
};

#protobuf { typename="VectorXiPb", filename="VectorXi" }
#cpp_no_display
struct VectorXi {
  int32_t rows;
  int32_t data[rows] = 1;
};

#protobuf { typename="Vector1iPb", filename="Vector1i" }
#cpp_no_display
struct Vector1i {
  int32_t data[1] = 1;
};

#protobuf { typename="Vector5iPb", filename="Vector5i" }
#cpp_no_display
struct Vector5i {
  int32_t data[5] = 1;
};

#protobuf { typename="Vector6iPb", filename="Vector6i" }
#cpp_no_display
struct Vector6i {
  int32_t data[6] = 1;
};

#protobuf { typename="Vector7iPb", filename="Vector7i" }
#cpp_no_display
struct Vector7i {
  int32_t data[7] = 1;
};

#protobuf { typename="Vector8iPb", filename="Vector8i" }
#cpp_no_display
struct Vector8i {
  int32_t data[8] = 1;
};

#protobuf { typename="Vector2dPb", filename="Vector2d" }
#cpp_no_display
struct Vector2d {
  double data[2] = 3;
};

#protobuf { typename="Vector3dPb", filename="Vector3d" }
#cpp_no_display
struct Vector3d {
  double data[3] = 3;
};

#protobuf { typename="Vector4dPb", filename="Vector4d" }
#cpp_no_display
struct Vector4d {
  double data[4] = 3;
};

#protobuf { typename="VectorXdPb", filename="VectorXd" }
#cpp_no_display
struct VectorXd {
  int32_t rows;
  double data[rows] = 3;
};

#protobuf { typename="Vector1dPb", filename="Vector1d" }
#cpp_no_display
struct Vector1d {
  double data[1] = 3;
};

#protobuf { typename="Vector5dPb", filename="Vector5d" }
#cpp_no_display
struct Vector5d {
  double data[5] = 3;
};

#protobuf { typename="Vector6dPb", filename="Vector6d" }
#cpp_no_display
struct Vector6d {
  double data[6] = 3;
};

#protobuf { typename="Vector7dPb", filename="Vector7d" }
#cpp_no_display
struct Vector7d {
  double data[7] = 3;
};

#protobuf { typename="Vector8dPb", filename="Vector8d" }
#cpp_no_display
struct Vector8d {
  double data[8] = 3;
};

#protobuf { typename="Vector2fPb", filename="Vector2f" }
#cpp_no_display
struct Vector2f {
  float data[2] = 2;
};

#protobuf { typename="Vector3fPb", filename="Vector3f" }
#cpp_no_display
struct Vector3f {
  float data[3] = 2;
};

#protobuf { typename="Vector4fPb", filename="Vector4f" }
#cpp_no_display
struct Vector4f {
  float data[4] = 2;
};

#protobuf { typename="VectorXfPb", filename="VectorXf" }
#cpp_no_display
struct VectorXf {
  int32_t rows;
  float data[rows] = 2;
};

#protobuf { typename="Vector1fPb", filename="Vector1f" }
#cpp_no_display
struct Vector1f {
  float data[1] = 2;
};

#protobuf { typename="Vector5fPb", filename="Vector5f" }
#cpp_no_display
struct Vector5f {
  float data[5] = 2;
};

#protobuf { typename="Vector6fPb", filename="Vector6f" }
#cpp_no_display
struct Vector6f {
  float data[6] = 2;
};

#protobuf { typename="Vector7fPb", filename="Vector7f" }
#cpp_no_display
struct Vector7f {
  float data[7] = 2;
};

#protobuf { typename="Vector8fPb", filename="Vector8f" }
#cpp_no_display
struct Vector8f {
  float data[8] = 2;
};

#protobuf { typename="SymmetricMatrix2dPb", filename="SymmetricMatrix2d" }
#cpp_no_display
struct SymmetricMatrix2d {
  double data[3] = 3;
};

#protobuf { typename="SymmetricMatrix3dPb", filename="SymmetricMatrix3d" }
#cpp_no_display
struct SymmetricMatrix3d {
  double data[6] = 3;
};

#protobuf { typename="SymmetricMatrix4dPb", filename="SymmetricMatrix4d" }
#cpp_no_display
struct SymmetricMatrix4d {
  double data[10] = 3;
};

#cpp_no_display
struct SymmetricMatrixXd {
  int32_t data_sz;
  double data[data_sz] = 3;
};

#protobuf { typename="SymmetricMatrix2fPb", filename="SymmetricMatrix2f" }
#cpp_no_display
struct SymmetricMatrix2f {
  float data[3] = 2;
};

#protobuf { typename="SymmetricMatrix3fPb", filename="SymmetricMatrix3f" }
#cpp_no_display
struct SymmetricMatrix3f {
  float data[6] = 2;
};

#protobuf { typename="SymmetricMatrix4fPb", filename="SymmetricMatrix4f" }
#cpp_no_display
struct SymmetricMatrix4f {
  float data[10] = 2;
};

#cpp_no_display
struct SymmetricMatrixXf {
  int32_t data_sz;
  float data[data_sz] = 2;
};

#protobuf { typename="QuaterniondPb", filename="Quaterniond" }
#cpp_no_display
struct Quaterniond {
  double xyzw[4] = 3;
};

#protobuf { typename="QuaternionfPb", filename="Quaternionf" }
#cpp_no_display
struct Quaternionf {
  float xyzw[4] = 2;
};
