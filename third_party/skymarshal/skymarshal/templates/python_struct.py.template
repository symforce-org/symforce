from io import BytesIO
import struct
{% for import_path, import_submodule in lcmtype.get_imports() %}
from {{ import_path }} import {{ import_submodule }}
{% endfor %}

class {{ lcmtype.name }}(object):
    __slots__ = [{% for member in lcmtype.members %}"{{ member.name }}"{% if not loop.last %}, {% endif %}{% endfor %}]  # type: T.List[str]
{% if lcmtype.constants %}

{% for constant in lcmtype.constants %}
    {{ constant.name }} = {{ constant.value_str }}
{% endfor %}
{% endif %}

    def __init__(
        self,
{% for member, kwarg_default, init_val, type_hint in lcmtype.member_initializers() %}
        {{ member.name }}={{ kwarg_default }},  # type: {{ type_hint }}
{% endfor %}
        _skip_initialize=False,  # type: bool
    ):
        # type: (...) -> None
        """ If _skip_initialize is True, all other constructor arguments are ignored """
        if _skip_initialize:
            return
{% for member, kwarg_default, init_val, type_hint in lcmtype.member_initializers() %}
{% for comment in member.comments %}
        # {{comment}}
{% endfor%}
{% if kwarg_default == None %}
        self.{{ member.name }} = {{ init_val }} if {{ member.name }} is None else {{ member.name }}  # type: {{ type_hint }}
{% else %}
        self.{{ member.name }} = {{ member.name }}
{% endif %}
{% endfor %}

{% if lcmtype.members|length < 255 %}
    @staticmethod
    def from_all_fields(
{% for member, _, init_val, type_hint in lcmtype.member_initializers() %}
        {{ member.name }},  # type: {{ type_hint }}
{% endfor %}
    ):
        # type: (...) -> {{ lcmtype.name }}
        return {{ lcmtype.name }}(
{% for member, _, _, _ in lcmtype.member_initializers() %}
            {{ member.name }}={{ member.name }},
{% endfor %}
        )
{% endif %}

    @staticmethod
    def _skytype_meta():
        # type: () -> T.Dict[str, str]
        return dict(
            type="struct",
            package="{{lcmtype.package.name}}",
            name="{{lcmtype.name}}",
        )

    @classmethod
    def _default(cls):
        # type: () -> {{ lcmtype.name }}
        return cls()

    def __repr__(self):
        # type: () -> str
        return "{{ lcmtype.fully_qualified_name }}({})".format(
            ", ".join("{}={}".format(name, repr(getattr(self, name))) for name in self.__slots__))

    def __eq__(self, other):
        # type: (object) -> bool
        if not isinstance(other, {{ lcmtype.name }}):
            return NotImplemented
        {% if lcmtype.members %}
        return (
        {% for member in lcmtype.members %}
            (self.{{member.name}}==other.{{member.name}}){% if not loop.last %} and
            {% else %}

        ){% endif %}
        {% endfor %}
        {% else %}
        return True
        {% endif %}

{% if lcmtype.hashable %}
    def __hash__(self):
        # type: () -> int
        return hash((
            {% for member in lcmtype.members %}
            self.{{member.name}},
            {% endfor %}
        ))
{% else %}
    # Disallow hashing for python struct lcmtypes.
    __hash__ = None  # type: ignore
{% endif %}

    def encode(self):
        # type: () -> bytes
        buf = BytesIO()
        buf.write({{ lcmtype.name }}._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        # type: (T.BinaryIO) -> None
{{ lcmtype.encode_members(2) }}

    @staticmethod
    def decode(data):
        # type: (T.Union[bytes, T.BinaryIO]) -> {{ lcmtype.name }}
        # NOTE(eric): This function can technically accept either a BinaryIO or
        # anything that supports the C++ Buffer Protocol,
        # which is unspecifiable in type hints.

        if hasattr(data, "read"):
            # NOTE(eric): mypy isn't able to figure out the hasattr check
            buf = T.cast(T.BinaryIO, data)
        else:
            buf = BytesIO(T.cast(bytes, data))

        if buf.read(8) != {{ lcmtype.name }}._get_packed_fingerprint():
            raise ValueError("Decode error")
        return {{ lcmtype.name }}._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        # type: (T.BinaryIO) -> {{ lcmtype.name }}
        self = {{ lcmtype.name }}(_skip_initialize=True)
{% if lcmtype.members %}
{{ lcmtype.decode_members(2) }}
{% endif %}
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        # type: (T.List[T.Type]) -> int
        if {{ lcmtype.name }} in parents: return 0
{% if lcmtype.has_complex_members() %}
        newparents = parents + [{{ lcmtype.name }}]
{% endif %}
        tmphash = ({{ lcmtype.hash.hex_no_padding() }}{% for type_name, _ in lcmtype.complex_members() %}+ {{ type_name }}._get_hash_recursive(newparents){% endfor %}) & 0xffffffffffffffff
        tmphash = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash

    _packed_fingerprint = None  # type: T.Optional[bytes]

    @staticmethod
    def _get_packed_fingerprint():
        # type: () -> bytes
        if {{ lcmtype.name }}._packed_fingerprint is None:
            {{ lcmtype.name }}._packed_fingerprint = struct.pack(">Q", {{ lcmtype.name }}._get_hash_recursive([]))
        return {{ lcmtype.name }}._packed_fingerprint

    def deepcopy(self, **kwargs):
        # type: (**T.Any) -> {{ lcmtype.name }}
        """
        Deep copy of this LCM type

        Returns a copy w/ members specified by kwargs replaced with new values specified by kwargs.
        """
        result = copy.deepcopy(self)
        for key in kwargs:
            if not hasattr(result, key):
                raise KeyError("Type {{ lcmtype.name }} does not have attribute: " + str(key))
            setattr(result, key, kwargs[key])
        return result
{% if lcmtype.cached_unpackers %}

{{ lcmtype.cached_structs_block(1) }}
{% endif %}
